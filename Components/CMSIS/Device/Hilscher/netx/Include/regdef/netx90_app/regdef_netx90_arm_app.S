/*********************************************************************/
/* Based on verilog file from: 190308_0616                           */
/* SVN Revision: $Rev: 1158 $        release-1.4.0.1                 */
/* from regdef.v by regdef2h auto-generated C-header file            */
/* please see the regdef.html file for detailed register description */
/*********************************************************************/

#ifndef __regdef_netx90_arm_app_h__
#define __regdef_netx90_arm_app_h__


/* ===================================================================== */

/* Area of intflash2_mirror_app_boot */

/* ===================================================================== */

#define Addr_NX90_intflash2_mirror_app_boot 0x00000000

/* ===================================================================== */

/* AREA intram6 */
/* Area of intram6, intram6_mirror_sram, intram6_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram6             0x000B0000
#define Addr_NX90_intram6_mirror_sram 0x200B0000
#define Addr_NX90_intram6_mirror_ocp  0x400B0000

/* --------------------------------------------------------------------- */
/* Register intram6_base */
/* => internal SRAM AHBL slave 6 start address */
/*    Area size: 32kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*     */
/*    Note: For byte- or 16-bit-write-access a read-modify-write is performed */
/*       to update the 32bit ECC. This is normally done in background without */
/*       performance penalty. However sometimes a wait-state could occur for this. */
/*       The 64kB XC memories (INTRAM3 and 4) never produce wait-states. They */
/*       have a 8-bit ECC which avoids read-modify-write. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram6_base                 0x00000000
#define Adr_NX90_intram6_intram6_base             0x000B0000
#define Adr_NX90_intram6_mirror_sram_intram6_base 0x200B0000
#define Adr_NX90_intram6_mirror_ocp_intram6_base  0x400B0000

/* --------------------------------------------------------------------- */
/* Register intram6_end */
/* => internal SRAM AHBL slave 6 end address */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram6_end                 0x00007FFC
#define Adr_NX90_intram6_intram6_end             0x000B7FFC
#define Adr_NX90_intram6_mirror_sram_intram6_end 0x200B7FFC
#define Adr_NX90_intram6_mirror_ocp_intram6_end  0x400B7FFC


/* ===================================================================== */

/* AREA intram7 */
/* Area of intram7, intram7_mirror_sram, intram7_mirror_ocp */

/* ===================================================================== */

#define Addr_NX90_intram7             0x000B8000
#define Addr_NX90_intram7_mirror_sram 0x200B8000
#define Addr_NX90_intram7_mirror_ocp  0x400B8000

/* --------------------------------------------------------------------- */
/* Register intram7_base */
/* => internal SRAM AHBL slave 7 start address */
/*    Area size: 32kB */
/*    Read accesses in this memory area: 0WS, byte accessable */
/*    Write accesses in this memory area: 0WS, byte accessable */
/*     */
/*    Note: For byte- or 16-bit-write-access a read-modify-write is performed */
/*       to update the 32bit ECC. This is normally done in background without */
/*       performance penalty. However sometimes a wait-state could occur for this. */
/*       The 64kB XC memories (INTRAM3 and 4) never produce wait-states. They */
/*       have a 8-bit ECC which avoids read-modify-write. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram7_base                 0x00000000
#define Adr_NX90_intram7_intram7_base             0x000B8000
#define Adr_NX90_intram7_mirror_sram_intram7_base 0x200B8000
#define Adr_NX90_intram7_mirror_ocp_intram7_base  0x400B8000

/* --------------------------------------------------------------------- */
/* Register intram7_end */
/* => internal SRAM AHBL slave 7 end address */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intram7_end                 0x00007FFC
#define Adr_NX90_intram7_intram7_end             0x000BFFFC
#define Adr_NX90_intram7_mirror_sram_intram7_end 0x200BFFFC
#define Adr_NX90_intram7_mirror_ocp_intram7_end  0x400BFFFC


/* ===================================================================== */

/* Area of intflash2 */

/* ===================================================================== */

#define Addr_NX90_intflash2 0x00200000

/* ===================================================================== */

/* Area of sdram */

/* ===================================================================== */

#define Addr_NX90_sdram 0x10000000

/* --------------------------------------------------------------------- */
/* Register sdram_base */
/* => external SDRAM chip-select start address */
/*    Area size: 256MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_base   0x00000000
#define Adr_NX90_sdram_sdram_base 0x10000000
#define Adr_NX90_sdram_base       0x10000000

/* --------------------------------------------------------------------- */
/* Register sdram_end */
/* => external SDRAM chip-select end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_end   0x0FFFFFFC
#define Adr_NX90_sdram_sdram_end 0x1FFFFFFC
#define Adr_NX90_sdram_end       0x1FFFFFFC


/* ===================================================================== */

/* Area of sqirom */

/* ===================================================================== */

#define Addr_NX90_sqirom 0x64000000

/* ===================================================================== */

/* Area of extsram */

/* ===================================================================== */

#define Addr_NX90_extsram 0x68000000

/* --------------------------------------------------------------------- */
/* Register cs0_base */
/* => external SRAM/Flash/NVRAM,... chip-select 0 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs0_base     0x00000000
#define Adr_NX90_extsram_cs0_base 0x68000000
#define Adr_NX90_cs0_base         0x68000000

/* --------------------------------------------------------------------- */
/* Register cs0_end */
/* => external SRAM/Flash/NVRAM,... chip-select 0 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs0_end     0x01FFFFFC
#define Adr_NX90_extsram_cs0_end 0x69FFFFFC
#define Adr_NX90_cs0_end         0x69FFFFFC

/* --------------------------------------------------------------------- */
/* Register cs1_base */
/* => external SRAM/Flash/NVRAM,... chip-select 1 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs1_base     0x02000000
#define Adr_NX90_extsram_cs1_base 0x6A000000
#define Adr_NX90_cs1_base         0x6A000000

/* --------------------------------------------------------------------- */
/* Register cs1_end */
/* => external SRAM/Flash/NVRAM,... chip-select 1 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs1_end     0x03FFFFFC
#define Adr_NX90_extsram_cs1_end 0x6BFFFFFC
#define Adr_NX90_cs1_end         0x6BFFFFFC

/* --------------------------------------------------------------------- */
/* Register cs2_base */
/* => external SRAM/Flash/NVRAM,... chip-select 2 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs2_base     0x04000000
#define Adr_NX90_extsram_cs2_base 0x6C000000
#define Adr_NX90_cs2_base         0x6C000000

/* --------------------------------------------------------------------- */
/* Register cs2_end */
/* => external SRAM/Flash/NVRAM,... chip-select 2 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs2_end     0x05FFFFFC
#define Adr_NX90_extsram_cs2_end 0x6DFFFFFC
#define Adr_NX90_cs2_end         0x6DFFFFFC

/* --------------------------------------------------------------------- */
/* Register cs3_base */
/* => external SRAM/Flash/NVRAM,... chip-select 3 start address */
/*    Area size: 32MB */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs3_base     0x06000000
#define Adr_NX90_extsram_cs3_base 0x6E000000
#define Adr_NX90_cs3_base         0x6E000000

/* --------------------------------------------------------------------- */
/* Register cs3_end */
/* => external SRAM/Flash/NVRAM,... chip-select 3 end address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cs3_end     0x07FFFFFC
#define Adr_NX90_extsram_cs3_end 0x6FFFFFFC
#define Adr_NX90_cs3_end         0x6FFFFFFC


/* ===================================================================== */

/* Area of idpm_slave */

/* ===================================================================== */

#define Addr_NX90_idpm_slave 0x70000000

/* ===================================================================== */

/* Area of sqirom_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_sqirom_mirror_ext_peri 0xA4000000

/* ===================================================================== */

/* Area of extsram_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_extsram_mirror_ext_peri 0xA8000000

/* ===================================================================== */

/* Area of idpm_slave_mirror_ext_peri */

/* ===================================================================== */

#define Addr_NX90_idpm_slave_mirror_ext_peri 0xB0000000

/* ===================================================================== */

/* Area of cm4_private_peripherals */

/* ===================================================================== */

#define Addr_NX90_cm4_private_peripherals 0xE0000000

/* ===================================================================== */

/* Area of cm4_itm */

/* ===================================================================== */

#define Addr_NX90_cm4_itm 0xE0000000

/* ===================================================================== */

/* Area of cm4_dwt */

/* ===================================================================== */

#define Addr_NX90_cm4_dwt 0xE0001000

/* ===================================================================== */

/* Area of cm4_fpb */

/* ===================================================================== */

#define Addr_NX90_cm4_fpb 0xE0002000

/* ===================================================================== */

/* Area of cm4_scs */

/* ===================================================================== */

#define Addr_NX90_cm4_scs 0xE000E000

/* --------------------------------------------------------------------- */
/* Register cm4_scs_actlr */
/* => Auxiliary control register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_actlr     0x00000008
#define Adr_NX90_cm4_scs_cm4_scs_actlr 0xE000E008
#define Adr_NX90_cm4_scs_actlr         0xE000E008

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcsr */
/* => SysTick control and status register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcsr     0x00000010
#define Adr_NX90_cm4_scs_cm4_scs_stcsr 0xE000E010
#define Adr_NX90_cm4_scs_stcsr         0xE000E010

/* --------------------------------------------------------------------- */
/* Register cm4_scs_strvr */
/* => SysTick Reload Value register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_strvr     0x00000014
#define Adr_NX90_cm4_scs_cm4_scs_strvr 0xE000E014
#define Adr_NX90_cm4_scs_strvr         0xE000E014

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcvr */
/* => SysTick current value register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcvr     0x00000018
#define Adr_NX90_cm4_scs_cm4_scs_stcvr 0xE000E018
#define Adr_NX90_cm4_scs_stcvr         0xE000E018

/* --------------------------------------------------------------------- */
/* Register cm4_scs_stcr */
/* => SysTick calibration value register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_stcr     0x0000001C
#define Adr_NX90_cm4_scs_cm4_scs_stcr 0xE000E01C
#define Adr_NX90_cm4_scs_stcr         0xE000E01C

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser0 */
/* => Interrupt set-enable register 0 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser0     0x00000100
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser0 0xE000E100
#define Adr_NX90_cm4_scs_nvic_iser0         0xE000E100
#define DFLT_VAL_NX90_cm4_scs_nvic_iser0    0x00000000

#define MSK_NX90_cm4_scs_nvic_iser0_setena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_iser0_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser0_setena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser0_setena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_iser0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser1 */
/* => Interrupt set-enable register 1 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser1     0x00000104
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser1 0xE000E104
#define Adr_NX90_cm4_scs_nvic_iser1         0xE000E104
#define DFLT_VAL_NX90_cm4_scs_nvic_iser1    0x00000000

#define MSK_NX90_cm4_scs_nvic_iser1_setena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_iser1_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser1_setena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser1_setena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_iser1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iser2 */
/* => Interrupt set-enable register 2 */
/*    Enables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iser2     0x00000108
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iser2 0xE000E108
#define Adr_NX90_cm4_scs_nvic_iser2         0xE000E108
#define DFLT_VAL_NX90_cm4_scs_nvic_iser2    0x00000000

#define MSK_NX90_cm4_scs_nvic_iser2_setena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_iser2_setena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_iser2_setena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_iser2_setena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_iser2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iser2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer0 */
/* => Interrupt clear-enable register 0 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer0     0x00000180
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer0 0xE000E180
#define Adr_NX90_cm4_scs_nvic_icer0         0xE000E180
#define DFLT_VAL_NX90_cm4_scs_nvic_icer0    0x00000000

#define MSK_NX90_cm4_scs_nvic_icer0_clrena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icer0_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer0_clrena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer0_clrena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icer0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer1 */
/* => Interrupt clear-enable register 1 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer1     0x00000184
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer1 0xE000E184
#define Adr_NX90_cm4_scs_nvic_icer1         0xE000E184
#define DFLT_VAL_NX90_cm4_scs_nvic_icer1    0x00000000

#define MSK_NX90_cm4_scs_nvic_icer1_clrena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icer1_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer1_clrena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer1_clrena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icer1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icer2 */
/* => Interrupt clear-enable register 2 */
/*    Disables, or reads the enable state of a group of interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icer2     0x00000188
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icer2 0xE000E188
#define Adr_NX90_cm4_scs_nvic_icer2         0xE000E188
#define DFLT_VAL_NX90_cm4_scs_nvic_icer2    0x00000000

#define MSK_NX90_cm4_scs_nvic_icer2_clrena         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icer2_clrena         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icer2_clrena    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icer2_clrena 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icer2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icer2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr0 */
/* => Interrupt set-pending register 0 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr0     0x00000200
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr0 0xE000E200
#define Adr_NX90_cm4_scs_nvic_ispr0         0xE000E200
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr0    0x00000000

#define MSK_NX90_cm4_scs_nvic_ispr0_setpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_ispr0_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr0_setpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr0_setpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ispr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr1 */
/* => Interrupt set-pending register 1 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr1     0x00000204
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr1 0xE000E204
#define Adr_NX90_cm4_scs_nvic_ispr1         0xE000E204
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr1    0x00000000

#define MSK_NX90_cm4_scs_nvic_ispr1_setpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_ispr1_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr1_setpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr1_setpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ispr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ispr2 */
/* => Interrupt set-pending register 2 */
/*    For a group of interrupts, changes interrupt status to pending, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ispr2     0x00000208
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ispr2 0xE000E208
#define Adr_NX90_cm4_scs_nvic_ispr2         0xE000E208
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr2    0x00000000

#define MSK_NX90_cm4_scs_nvic_ispr2_setpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_ispr2_setpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ispr2_setpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ispr2_setpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ispr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ispr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr0 */
/* => Interrupt clear-pending register 0 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr0     0x00000280
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr0 0xE000E280
#define Adr_NX90_cm4_scs_nvic_icpr0         0xE000E280
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr0    0x00000000

#define MSK_NX90_cm4_scs_nvic_icpr0_clrpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icpr0_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr0_clrpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr0_clrpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icpr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr1 */
/* => Interrupt clear-pending register 1 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr1     0x00000284
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr1 0xE000E284
#define Adr_NX90_cm4_scs_nvic_icpr1         0xE000E284
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr1    0x00000000

#define MSK_NX90_cm4_scs_nvic_icpr1_clrpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icpr1_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr1_clrpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr1_clrpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icpr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_icpr2 */
/* => Interrupt clear-pending register 2 */
/*    For a group of interrupts, clears the interrupt pending status, or shows the current \ */
/*    pending status. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_icpr2     0x00000288
#define Adr_NX90_cm4_scs_cm4_scs_nvic_icpr2 0xE000E288
#define Adr_NX90_cm4_scs_nvic_icpr2         0xE000E288
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr2    0x00000000

#define MSK_NX90_cm4_scs_nvic_icpr2_clrpend         0xffffffff
#define SRT_NX90_cm4_scs_nvic_icpr2_clrpend         0
#define DFLT_VAL_NX90_cm4_scs_nvic_icpr2_clrpend    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_icpr2_clrpend 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_icpr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_icpr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr0 */
/* => Interrupt active bit register 0 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr0     0x00000300
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr0 0xE000E300
#define Adr_NX90_cm4_scs_nvic_iabr0         0xE000E300

#define MSK_NX90_cm4_scs_nvic_iabr0_active 0xffffffff
#define SRT_NX90_cm4_scs_nvic_iabr0_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr1 */
/* => Interrupt active bit register 1 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr1     0x00000304
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr1 0xE000E304
#define Adr_NX90_cm4_scs_nvic_iabr1         0xE000E304

#define MSK_NX90_cm4_scs_nvic_iabr1_active 0xffffffff
#define SRT_NX90_cm4_scs_nvic_iabr1_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_iabr2 */
/* => Interrupt active bit register 2 */
/*    For a group of 32 interrupts, shows whether each interrupt is active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_iabr2     0x00000308
#define Adr_NX90_cm4_scs_cm4_scs_nvic_iabr2 0xE000E308
#define Adr_NX90_cm4_scs_nvic_iabr2         0xE000E308

#define MSK_NX90_cm4_scs_nvic_iabr2_active 0xffffffff
#define SRT_NX90_cm4_scs_nvic_iabr2_active 0

/* all used bits of 'NX90_cm4_scs_nvic_iabr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_iabr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr0 */
/* => Interrupt priority register 0 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr0     0x00000400
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr0 0xE000E400
#define Adr_NX90_cm4_scs_nvic_ipr0         0xE000E400
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr0_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr0_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr0_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr0_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr0': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr1 */
/* => Interrupt priority register 1 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr1     0x00000404
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr1 0xE000E404
#define Adr_NX90_cm4_scs_nvic_ipr1         0xE000E404
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr1_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr1_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr1_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr1_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr1': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr2 */
/* => Interrupt priority register 2 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr2     0x00000408
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr2 0xE000E408
#define Adr_NX90_cm4_scs_nvic_ipr2         0xE000E408
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr2_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr2_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr2_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr2_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr2': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr3 */
/* => Interrupt priority register 3 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr3     0x0000040C
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr3 0xE000E40C
#define Adr_NX90_cm4_scs_nvic_ipr3         0xE000E40C
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr3_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr3_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr3_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr3_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr3': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr4 */
/* => Interrupt priority register 4 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr4     0x00000410
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr4 0xE000E410
#define Adr_NX90_cm4_scs_nvic_ipr4         0xE000E410
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr4_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr4_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr4_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr4_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr4': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr5 */
/* => Interrupt priority register 5 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr5     0x00000414
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr5 0xE000E414
#define Adr_NX90_cm4_scs_nvic_ipr5         0xE000E414
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr5_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr5_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr5_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr5_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr5': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr6 */
/* => Interrupt priority register 6 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr6     0x00000418
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr6 0xE000E418
#define Adr_NX90_cm4_scs_nvic_ipr6         0xE000E418
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr6_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr6_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr6_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr6_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr6': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr7 */
/* => Interrupt priority register 7 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr7     0x0000041C
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr7 0xE000E41C
#define Adr_NX90_cm4_scs_nvic_ipr7         0xE000E41C
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr7_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr7_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr7_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr7_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr7': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr8 */
/* => Interrupt priority register 8 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr8     0x00000420
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr8 0xE000E420
#define Adr_NX90_cm4_scs_nvic_ipr8         0xE000E420
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr8_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr8_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr8_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr8_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr8': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr9 */
/* => Interrupt priority register 9 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr9     0x00000424
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr9 0xE000E424
#define Adr_NX90_cm4_scs_nvic_ipr9         0xE000E424
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr9_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr9_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr9_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr9_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr9': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr10 */
/* => Interrupt priority register 10 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr10     0x00000428
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr10 0xE000E428
#define Adr_NX90_cm4_scs_nvic_ipr10         0xE000E428
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr10_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr10_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr10_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr10_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr10': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr11 */
/* => Interrupt priority register 11 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr11     0x0000042C
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr11 0xE000E42C
#define Adr_NX90_cm4_scs_nvic_ipr11         0xE000E42C
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr11_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr11_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr11_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr11_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr11': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr12 */
/* => Interrupt priority register 12 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr12     0x00000430
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr12 0xE000E430
#define Adr_NX90_cm4_scs_nvic_ipr12         0xE000E430
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr12_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr12_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr12_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr12_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr12': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr13 */
/* => Interrupt priority register 13 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr13     0x00000434
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr13 0xE000E434
#define Adr_NX90_cm4_scs_nvic_ipr13         0xE000E434
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr13_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr13_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr13_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr13_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr13': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr14 */
/* => Interrupt priority register 14 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr14     0x00000438
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr14 0xE000E438
#define Adr_NX90_cm4_scs_nvic_ipr14         0xE000E438
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr14_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr14_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr14_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr14_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr14': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr15 */
/* => Interrupt priority register 15 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr15     0x0000043C
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr15 0xE000E43C
#define Adr_NX90_cm4_scs_nvic_ipr15         0xE000E43C
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr15_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr15_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr15_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr15_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr15': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr16 */
/* => Interrupt priority register 16 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr16     0x00000440
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr16 0xE000E440
#define Adr_NX90_cm4_scs_nvic_ipr16         0xE000E440
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr16_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr16_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr16_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr16_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr16': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr17 */
/* => Interrupt priority register 17 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr17     0x00000444
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr17 0xE000E444
#define Adr_NX90_cm4_scs_nvic_ipr17         0xE000E444
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr17    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr17_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr17_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr17_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr17_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr17_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr17_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr17_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr17_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr17_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr17_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr17_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr17_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr17_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr17_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr17_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr17_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr17': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr18 */
/* => Interrupt priority register 18 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr18     0x00000448
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr18 0xE000E448
#define Adr_NX90_cm4_scs_nvic_ipr18         0xE000E448
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr18    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr18_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr18_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr18_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr18_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr18_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr18_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr18_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr18_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr18_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr18_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr18_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr18_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr18_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr18_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr18_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr18_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr18': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_nvic_ipr19 */
/* => Interrupt priority register 19 */
/*    Sets or reads interrupt priorities. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_nvic_ipr19     0x0000044C
#define Adr_NX90_cm4_scs_cm4_scs_nvic_ipr19 0xE000E44C
#define Adr_NX90_cm4_scs_nvic_ipr19         0xE000E44C
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr19    0x00000000

#define MSK_NX90_cm4_scs_nvic_ipr19_pri_n0         0x000000ff
#define SRT_NX90_cm4_scs_nvic_ipr19_pri_n0         0
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr19_pri_n0    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr19_pri_n0 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr19_pri_n1         0x0000ff00
#define SRT_NX90_cm4_scs_nvic_ipr19_pri_n1         8
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr19_pri_n1    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr19_pri_n1 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr19_pri_n2         0x00ff0000
#define SRT_NX90_cm4_scs_nvic_ipr19_pri_n2         16
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr19_pri_n2    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr19_pri_n2 0x00000000
#define MSK_NX90_cm4_scs_nvic_ipr19_pri_n3         0xff000000
#define SRT_NX90_cm4_scs_nvic_ipr19_pri_n3         24
#define DFLT_VAL_NX90_cm4_scs_nvic_ipr19_pri_n3    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_nvic_ipr19_pri_n3 0x00000000

/* all used bits of 'NX90_cm4_scs_nvic_ipr19': */
#define MSK_USED_BITS_NX90_cm4_scs_nvic_ipr19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cpuid */
/* => CPUID base register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cpuid     0x00000D00
#define Adr_NX90_cm4_scs_cm4_scs_cpuid 0xE000ED00
#define Adr_NX90_cm4_scs_cpuid         0xE000ED00

/* --------------------------------------------------------------------- */
/* Register cm4_scs_icsr */
/* => Interrupt control and state register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_icsr     0x00000D04
#define Adr_NX90_cm4_scs_cm4_scs_icsr 0xE000ED04
#define Adr_NX90_cm4_scs_icsr         0xE000ED04

/* --------------------------------------------------------------------- */
/* Register cm4_scs_vtor */
/* => Vector table offset register */
/*    Holds the vector table address. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_vtor     0x00000D08
#define Adr_NX90_cm4_scs_cm4_scs_vtor 0xE000ED08
#define Adr_NX90_cm4_scs_vtor         0xE000ED08
#define DFLT_VAL_NX90_cm4_scs_vtor    0x00000000

#define MSK_NX90_cm4_scs_vtor_tbloff         0xffffff80
#define SRT_NX90_cm4_scs_vtor_tbloff         7
#define DFLT_VAL_NX90_cm4_scs_vtor_tbloff    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_vtor_tbloff 0x00000000

/* all used bits of 'NX90_cm4_scs_vtor': */
#define MSK_USED_BITS_NX90_cm4_scs_vtor 0xffffff80

/* --------------------------------------------------------------------- */
/* Register cm4_scs_aircr */
/* => Application interrupt and reset control reister */
/*    Sets or returns interrupt control data. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_aircr     0x00000D0C
#define Adr_NX90_cm4_scs_cm4_scs_aircr 0xE000ED0C
#define Adr_NX90_cm4_scs_aircr         0xE000ED0C
#define DFLT_VAL_NX90_cm4_scs_aircr    0xfa050000

#define MSK_NX90_cm4_scs_aircr_vectreset             0x00000001
#define SRT_NX90_cm4_scs_aircr_vectreset             0
#define DFLT_VAL_NX90_cm4_scs_aircr_vectreset        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectreset     0x00000000
#define MSK_NX90_cm4_scs_aircr_vectclractive         0x00000002
#define SRT_NX90_cm4_scs_aircr_vectclractive         1
#define DFLT_VAL_NX90_cm4_scs_aircr_vectclractive    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectclractive 0x00000000
#define MSK_NX90_cm4_scs_aircr_sysresetreq           0x00000004
#define SRT_NX90_cm4_scs_aircr_sysresetreq           2
#define DFLT_VAL_NX90_cm4_scs_aircr_sysresetreq      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_sysresetreq   0x00000000
#define MSK_NX90_cm4_scs_aircr_prigroup              0x00000700
#define SRT_NX90_cm4_scs_aircr_prigroup              8
#define DFLT_VAL_NX90_cm4_scs_aircr_prigroup         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_prigroup      0x00000000
#define MSK_NX90_cm4_scs_aircr_endianness            0x00008000
#define SRT_NX90_cm4_scs_aircr_endianness            15
#define DFLT_VAL_NX90_cm4_scs_aircr_endianness       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_endianness    0x00000000
#define MSK_NX90_cm4_scs_aircr_vectkey               0xffff0000
#define SRT_NX90_cm4_scs_aircr_vectkey               16
#define DFLT_VAL_NX90_cm4_scs_aircr_vectkey          0xfa050000
#define DFLT_BF_VAL_NX90_cm4_scs_aircr_vectkey       0x0000fa05

/* all used bits of 'NX90_cm4_scs_aircr': */
#define MSK_USED_BITS_NX90_cm4_scs_aircr 0xffff8707

/* --------------------------------------------------------------------- */
/* Register cm4_scs_scr */
/* => System control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_scr     0x00000D10
#define Adr_NX90_cm4_scs_cm4_scs_scr 0xE000ED10
#define Adr_NX90_cm4_scs_scr         0xE000ED10

/* --------------------------------------------------------------------- */
/* Register cm4_scs_ccr */
/* => Configuration and control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_ccr     0x00000D14
#define Adr_NX90_cm4_scs_cm4_scs_ccr 0xE000ED14
#define Adr_NX90_cm4_scs_ccr         0xE000ED14

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr1 */
/* => System Handler Priority Register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr1     0x00000D18
#define Adr_NX90_cm4_scs_cm4_scs_shpr1 0xE000ED18
#define Adr_NX90_cm4_scs_shpr1         0xE000ED18

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr2 */
/* => System Handler Priority Register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr2     0x00000D1C
#define Adr_NX90_cm4_scs_cm4_scs_shpr2 0xE000ED1C
#define Adr_NX90_cm4_scs_shpr2         0xE000ED1C

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shpr3 */
/* => System Handler Priority Register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shpr3     0x00000D20
#define Adr_NX90_cm4_scs_cm4_scs_shpr3 0xE000ED20
#define Adr_NX90_cm4_scs_shpr3         0xE000ED20

/* --------------------------------------------------------------------- */
/* Register cm4_scs_shcsr */
/* => System Handler Control and State Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_shcsr     0x00000D24
#define Adr_NX90_cm4_scs_cm4_scs_shcsr 0xE000ED24
#define Adr_NX90_cm4_scs_shcsr         0xE000ED24

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cfsr */
/* => Configurable Fault Status Register */
/*    Contains the three Configurable Fault Status Registers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cfsr     0x00000D28
#define Adr_NX90_cm4_scs_cm4_scs_cfsr 0xE000ED28
#define Adr_NX90_cm4_scs_cfsr         0xE000ED28
#define DFLT_VAL_NX90_cm4_scs_cfsr    0x00000000

#define MSK_NX90_cm4_scs_cfsr_mmfsr_iaccviol           0x00000001
#define SRT_NX90_cm4_scs_cfsr_mmfsr_iaccviol           0
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_iaccviol      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_iaccviol   0x00000000
#define MSK_NX90_cm4_scs_cfsr_mmfsr_daccviol           0x00000002
#define SRT_NX90_cm4_scs_cfsr_mmfsr_daccviol           1
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_daccviol      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_daccviol   0x00000000
#define MSK_NX90_cm4_scs_cfsr_mmfsr_munstkerr          0x00000008
#define SRT_NX90_cm4_scs_cfsr_mmfsr_munstkerr          3
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_munstkerr     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_munstkerr  0x00000000
#define MSK_NX90_cm4_scs_cfsr_mmfsr_mstkerr            0x00000010
#define SRT_NX90_cm4_scs_cfsr_mmfsr_mstkerr            4
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_mstkerr       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_mstkerr    0x00000000
#define MSK_NX90_cm4_scs_cfsr_mmfsr_lsperr             0x00000020
#define SRT_NX90_cm4_scs_cfsr_mmfsr_lsperr             5
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_lsperr        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_lsperr     0x00000000
#define MSK_NX90_cm4_scs_cfsr_mmfsr_mmarvalid          0x00000080
#define SRT_NX90_cm4_scs_cfsr_mmfsr_mmarvalid          7
#define DFLT_VAL_NX90_cm4_scs_cfsr_mmfsr_mmarvalid     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_mmfsr_mmarvalid  0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_ibuserr             0x00000100
#define SRT_NX90_cm4_scs_cfsr_bfsr_ibuserr             8
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_ibuserr        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_ibuserr     0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_preciserr           0x00000200
#define SRT_NX90_cm4_scs_cfsr_bfsr_preciserr           9
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_preciserr      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_preciserr   0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_impreciserr         0x00000400
#define SRT_NX90_cm4_scs_cfsr_bfsr_impreciserr         10
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_impreciserr    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_impreciserr 0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_unstkerr            0x00000800
#define SRT_NX90_cm4_scs_cfsr_bfsr_unstkerr            11
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_unstkerr       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_unstkerr    0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_stkerr              0x00001000
#define SRT_NX90_cm4_scs_cfsr_bfsr_stkerr              12
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_stkerr         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_stkerr      0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_lsperr              0x00002000
#define SRT_NX90_cm4_scs_cfsr_bfsr_lsperr              13
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_lsperr         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_lsperr      0x00000000
#define MSK_NX90_cm4_scs_cfsr_bfsr_bfarvalid           0x00008000
#define SRT_NX90_cm4_scs_cfsr_bfsr_bfarvalid           15
#define DFLT_VAL_NX90_cm4_scs_cfsr_bfsr_bfarvalid      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_bfsr_bfarvalid   0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_undefinstr          0x00010000
#define SRT_NX90_cm4_scs_cfsr_ufsr_undefinstr          16
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_undefinstr     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_undefinstr  0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_invstate            0x00020000
#define SRT_NX90_cm4_scs_cfsr_ufsr_invstate            17
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_invstate       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_invstate    0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_invpc               0x00040000
#define SRT_NX90_cm4_scs_cfsr_ufsr_invpc               18
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_invpc          0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_invpc       0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_nocp                0x00080000
#define SRT_NX90_cm4_scs_cfsr_ufsr_nocp                19
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_nocp           0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_nocp        0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_unaligned           0x01000000
#define SRT_NX90_cm4_scs_cfsr_ufsr_unaligned           24
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_unaligned      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_unaligned   0x00000000
#define MSK_NX90_cm4_scs_cfsr_ufsr_divbyzero           0x02000000
#define SRT_NX90_cm4_scs_cfsr_ufsr_divbyzero           25
#define DFLT_VAL_NX90_cm4_scs_cfsr_ufsr_divbyzero      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_cfsr_ufsr_divbyzero   0x00000000

/* all used bits of 'NX90_cm4_scs_cfsr': */
#define MSK_USED_BITS_NX90_cm4_scs_cfsr 0x030fbfbb

/* --------------------------------------------------------------------- */
/* Register cm4_scs_hfsr */
/* => HardFault Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_hfsr     0x00000D2C
#define Adr_NX90_cm4_scs_cm4_scs_hfsr 0xE000ED2C
#define Adr_NX90_cm4_scs_hfsr         0xE000ED2C

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dfsr */
/* => Debug fault status Register */
/*    Shows which debug event occurred. */
/*    Note: Writing 1 to a register bit clears the bit to 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dfsr     0x00000D30
#define Adr_NX90_cm4_scs_cm4_scs_dfsr 0xE000ED30
#define Adr_NX90_cm4_scs_dfsr         0xE000ED30
#define DFLT_VAL_NX90_cm4_scs_dfsr    0x00000000

#define MSK_NX90_cm4_scs_dfsr_halted           0x00000001
#define SRT_NX90_cm4_scs_dfsr_halted           0
#define DFLT_VAL_NX90_cm4_scs_dfsr_halted      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_halted   0x00000000
#define MSK_NX90_cm4_scs_dfsr_bkpt             0x00000002
#define SRT_NX90_cm4_scs_dfsr_bkpt             1
#define DFLT_VAL_NX90_cm4_scs_dfsr_bkpt        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_bkpt     0x00000000
#define MSK_NX90_cm4_scs_dfsr_dwttrap          0x00000004
#define SRT_NX90_cm4_scs_dfsr_dwttrap          2
#define DFLT_VAL_NX90_cm4_scs_dfsr_dwttrap     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_dwttrap  0x00000000
#define MSK_NX90_cm4_scs_dfsr_vcatch           0x00000008
#define SRT_NX90_cm4_scs_dfsr_vcatch           3
#define DFLT_VAL_NX90_cm4_scs_dfsr_vcatch      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_vcatch   0x00000000
#define MSK_NX90_cm4_scs_dfsr_external         0x00000010
#define SRT_NX90_cm4_scs_dfsr_external         4
#define DFLT_VAL_NX90_cm4_scs_dfsr_external    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dfsr_external 0x00000000

/* all used bits of 'NX90_cm4_scs_dfsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dfsr 0x0000001f

/* --------------------------------------------------------------------- */
/* Register cm4_scs_mmfar */
/* => MemManage Faul Address Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_mmfar     0x00000D34
#define Adr_NX90_cm4_scs_cm4_scs_mmfar 0xE000ED34
#define Adr_NX90_cm4_scs_mmfar         0xE000ED34

/* --------------------------------------------------------------------- */
/* Register cm4_scs_bfar */
/* => BusFault Address Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_bfar     0x00000D38
#define Adr_NX90_cm4_scs_cm4_scs_bfar 0xE000ED38
#define Adr_NX90_cm4_scs_bfar         0xE000ED38

/* --------------------------------------------------------------------- */
/* Register cm4_scs_afsr */
/* => Auxiliary Fault Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_afsr     0x00000D3C
#define Adr_NX90_cm4_scs_cm4_scs_afsr 0xE000ED3C
#define Adr_NX90_cm4_scs_afsr         0xE000ED3C

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cpacr */
/* => Coprocessor Access Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cpacr     0x00000D88
#define Adr_NX90_cm4_scs_cm4_scs_cpacr 0xE000ED88
#define Adr_NX90_cm4_scs_cpacr         0xE000ED88

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dhcsr */
/* => Debug halting control and status register */
/*    Controls halting debug. */
/*    Note: On writes bits 31-16 (dbgkey) must be set to 0xA05F. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dhcsr     0x00000DF0
#define Adr_NX90_cm4_scs_cm4_scs_dhcsr 0xE000EDF0
#define Adr_NX90_cm4_scs_dhcsr         0xE000EDF0
#define DFLT_VAL_NX90_cm4_scs_dhcsr    0x00000000

#define MSK_NX90_cm4_scs_dhcsr_c_debugen           0x00000001
#define SRT_NX90_cm4_scs_dhcsr_c_debugen           0
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_debugen      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_debugen   0x00000000
#define MSK_NX90_cm4_scs_dhcsr_c_halt              0x00000002
#define SRT_NX90_cm4_scs_dhcsr_c_halt              1
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_halt         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_halt      0x00000000
#define MSK_NX90_cm4_scs_dhcsr_c_step              0x00000004
#define SRT_NX90_cm4_scs_dhcsr_c_step              2
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_step         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_step      0x00000000
#define MSK_NX90_cm4_scs_dhcsr_c_maskints          0x00000008
#define SRT_NX90_cm4_scs_dhcsr_c_maskints          3
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_maskints     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_maskints  0x00000000
#define MSK_NX90_cm4_scs_dhcsr_c_snapstall         0x00000020
#define SRT_NX90_cm4_scs_dhcsr_c_snapstall         5
#define DFLT_VAL_NX90_cm4_scs_dhcsr_c_snapstall    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_c_snapstall 0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_regrdy            0x00010000
#define SRT_NX90_cm4_scs_dhcsr_s_regrdy            16
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_regrdy       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_regrdy    0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_halt              0x00020000
#define SRT_NX90_cm4_scs_dhcsr_s_halt              17
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_halt         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_halt      0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_sleep             0x00040000
#define SRT_NX90_cm4_scs_dhcsr_s_sleep             18
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_sleep        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_sleep     0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_lockup            0x00080000
#define SRT_NX90_cm4_scs_dhcsr_s_lockup            19
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_lockup       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_lockup    0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_retire_st         0x01000000
#define SRT_NX90_cm4_scs_dhcsr_s_retire_st         24
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_retire_st    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_retire_st 0x00000000
#define MSK_NX90_cm4_scs_dhcsr_s_reset_st          0x02000000
#define SRT_NX90_cm4_scs_dhcsr_s_reset_st          25
#define DFLT_VAL_NX90_cm4_scs_dhcsr_s_reset_st     0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dhcsr_s_reset_st  0x00000000

/* all used bits of 'NX90_cm4_scs_dhcsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dhcsr 0x030f002f

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dcrsr */
/* => Debug core register selector register */
/*    With the DCRDR, the DCRSR provides debug access to the ARM core registers, special-purpose registers, and \ */
/*    Floating-point extension registers. A write to DCRSR specifies the register to transfer, \ */
/*    whether the transfer is a read or a write, and starts the transfer. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dcrsr     0x00000DF4
#define Adr_NX90_cm4_scs_cm4_scs_dcrsr 0xE000EDF4
#define Adr_NX90_cm4_scs_dcrsr         0xE000EDF4
#define DFLT_VAL_NX90_cm4_scs_dcrsr    0x00000000

#define MSK_NX90_cm4_scs_dcrsr_regsel         0x0000007f
#define SRT_NX90_cm4_scs_dcrsr_regsel         0
#define DFLT_VAL_NX90_cm4_scs_dcrsr_regsel    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dcrsr_regsel 0x00000000
#define MSK_NX90_cm4_scs_dcrsr_regwnr         0x00010000
#define SRT_NX90_cm4_scs_dcrsr_regwnr         16
#define DFLT_VAL_NX90_cm4_scs_dcrsr_regwnr    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dcrsr_regwnr 0x00000000

/* all used bits of 'NX90_cm4_scs_dcrsr': */
#define MSK_USED_BITS_NX90_cm4_scs_dcrsr 0x0001007f

/* --------------------------------------------------------------------- */
/* Register cm4_scs_dcrdr */
/* => Debug core register data register */
/*    With the DCRSR, the DCRDR provides debug access to the ARM core registers, \ */
/*    special-purpose registers, and Floating-point extension registers. The DCRDR is the \ */
/*    data register for these accesses. */
/*    Used on its own, the DCRDR provides a message passing resource between an \ */
/*    external debugger and a debug agent running on the processor. */
/*    Note: The architecture does not define any handshaking mechanism for this use of DCRDR. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_dcrdr     0x00000DF8
#define Adr_NX90_cm4_scs_cm4_scs_dcrdr 0xE000EDF8
#define Adr_NX90_cm4_scs_dcrdr         0xE000EDF8
#define DFLT_VAL_NX90_cm4_scs_dcrdr    0x00000000

#define MSK_NX90_cm4_scs_dcrdr_dbgtmp         0xffffffff
#define SRT_NX90_cm4_scs_dcrdr_dbgtmp         0
#define DFLT_VAL_NX90_cm4_scs_dcrdr_dbgtmp    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_dcrdr_dbgtmp 0x00000000

/* all used bits of 'NX90_cm4_scs_dcrdr': */
#define MSK_USED_BITS_NX90_cm4_scs_dcrdr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_demcr */
/* => Debug exception and monitor control register */
/*    Manages vector catch behavior and DebugMonitor handling when debugging. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_demcr     0x00000DFC
#define Adr_NX90_cm4_scs_cm4_scs_demcr 0xE000EDFC
#define Adr_NX90_cm4_scs_demcr         0xE000EDFC
#define DFLT_VAL_NX90_cm4_scs_demcr    0x00000000

#define MSK_NX90_cm4_scs_demcr_vc_corereset         0x00000001
#define SRT_NX90_cm4_scs_demcr_vc_corereset         0
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_corereset    0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_corereset 0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_mmerr             0x00000010
#define SRT_NX90_cm4_scs_demcr_vc_mmerr             4
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_mmerr        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_mmerr     0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_nocperr           0x00000020
#define SRT_NX90_cm4_scs_demcr_vc_nocperr           5
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_nocperr      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_nocperr   0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_chkerr            0x00000040
#define SRT_NX90_cm4_scs_demcr_vc_chkerr            6
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_chkerr       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_chkerr    0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_staterr           0x00000080
#define SRT_NX90_cm4_scs_demcr_vc_staterr           7
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_staterr      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_staterr   0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_buserr            0x00000100
#define SRT_NX90_cm4_scs_demcr_vc_buserr            8
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_buserr       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_buserr    0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_interr            0x00000200
#define SRT_NX90_cm4_scs_demcr_vc_interr            9
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_interr       0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_interr    0x00000000
#define MSK_NX90_cm4_scs_demcr_vc_harderr           0x00000400
#define SRT_NX90_cm4_scs_demcr_vc_harderr           10
#define DFLT_VAL_NX90_cm4_scs_demcr_vc_harderr      0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_vc_harderr   0x00000000
#define MSK_NX90_cm4_scs_demcr_mon_en               0x00010000
#define SRT_NX90_cm4_scs_demcr_mon_en               16
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_en          0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_en       0x00000000
#define MSK_NX90_cm4_scs_demcr_mon_pend             0x00020000
#define SRT_NX90_cm4_scs_demcr_mon_pend             17
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_pend        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_pend     0x00000000
#define MSK_NX90_cm4_scs_demcr_mon_step             0x00040000
#define SRT_NX90_cm4_scs_demcr_mon_step             18
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_step        0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_step     0x00000000
#define MSK_NX90_cm4_scs_demcr_mon_req              0x00080000
#define SRT_NX90_cm4_scs_demcr_mon_req              19
#define DFLT_VAL_NX90_cm4_scs_demcr_mon_req         0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_mon_req      0x00000000
#define MSK_NX90_cm4_scs_demcr_trcena               0x01000000
#define SRT_NX90_cm4_scs_demcr_trcena               24
#define DFLT_VAL_NX90_cm4_scs_demcr_trcena          0x00000000
#define DFLT_BF_VAL_NX90_cm4_scs_demcr_trcena       0x00000000

/* all used bits of 'NX90_cm4_scs_demcr': */
#define MSK_USED_BITS_NX90_cm4_scs_demcr 0x010f07f1

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr4 */
/* => Peripheral ID Register 4 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr4     0x00000FD0
#define Adr_NX90_cm4_scs_cm4_scs_pidr4 0xE000EFD0
#define Adr_NX90_cm4_scs_pidr4         0xE000EFD0

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr0 */
/* => Peripheral ID Register 0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr0     0x00000FE0
#define Adr_NX90_cm4_scs_cm4_scs_pidr0 0xE000EFE0
#define Adr_NX90_cm4_scs_pidr0         0xE000EFE0

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr1 */
/* => Peripheral ID Register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr1     0x00000FE4
#define Adr_NX90_cm4_scs_cm4_scs_pidr1 0xE000EFE4
#define Adr_NX90_cm4_scs_pidr1         0xE000EFE4

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr2 */
/* => Peripheral ID Register 2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr2     0x00000FE8
#define Adr_NX90_cm4_scs_cm4_scs_pidr2 0xE000EFE8
#define Adr_NX90_cm4_scs_pidr2         0xE000EFE8

/* --------------------------------------------------------------------- */
/* Register cm4_scs_pidr3 */
/* => Peripheral ID Register 3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_pidr3     0x00000FEC
#define Adr_NX90_cm4_scs_cm4_scs_pidr3 0xE000EFEC
#define Adr_NX90_cm4_scs_pidr3         0xE000EFEC

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr0 */
/* => Component ID Register 0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr0     0x00000FF0
#define Adr_NX90_cm4_scs_cm4_scs_cidr0 0xE000EFF0
#define Adr_NX90_cm4_scs_cidr0         0xE000EFF0

#define MSK_NX90_cm4_scs_cidr0_prmbl_0 0x000000ff
#define SRT_NX90_cm4_scs_cidr0_prmbl_0 0

/* all used bits of 'NX90_cm4_scs_cidr0': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr0 0x000000ff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr1 */
/* => Component ID Register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr1     0x00000FF4
#define Adr_NX90_cm4_scs_cm4_scs_cidr1 0xE000EFF4
#define Adr_NX90_cm4_scs_cidr1         0xE000EFF4

#define MSK_NX90_cm4_scs_cidr1_prmbl_1 0x0000000f
#define SRT_NX90_cm4_scs_cidr1_prmbl_1 0
#define MSK_NX90_cm4_scs_cidr1_cclass  0x000000f0
#define SRT_NX90_cm4_scs_cidr1_cclass  4

/* all used bits of 'NX90_cm4_scs_cidr1': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr1 0x000000ff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr2 */
/* => Component ID Register 2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr2     0x00000FF8
#define Adr_NX90_cm4_scs_cm4_scs_cidr2 0xE000EFF8
#define Adr_NX90_cm4_scs_cidr2         0xE000EFF8

#define MSK_NX90_cm4_scs_cidr2_prmbl_2 0x000000ff
#define SRT_NX90_cm4_scs_cidr2_prmbl_2 0

/* all used bits of 'NX90_cm4_scs_cidr2': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr2 0x000000ff

/* --------------------------------------------------------------------- */
/* Register cm4_scs_cidr3 */
/* => Component ID Register 3 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_scs_cidr3     0x00000FFC
#define Adr_NX90_cm4_scs_cm4_scs_cidr3 0xE000EFFC
#define Adr_NX90_cm4_scs_cidr3         0xE000EFFC

#define MSK_NX90_cm4_scs_cidr3_prmbl_3 0x000000ff
#define SRT_NX90_cm4_scs_cidr3_prmbl_3 0

/* all used bits of 'NX90_cm4_scs_cidr3': */
#define MSK_USED_BITS_NX90_cm4_scs_cidr3 0x000000ff


/* ===================================================================== */

/* Area of cm4_etm */

/* ===================================================================== */

#define Addr_NX90_cm4_etm 0xE0041000

/* ===================================================================== */

/* Area of cm4_cti */

/* ===================================================================== */

#define Addr_NX90_cm4_cti 0xE0042000

/* ===================================================================== */

/* Area of cm4_misc_ctrl */

/* ===================================================================== */

#define Addr_NX90_cm4_misc_ctrl 0xE0043000

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_cpu_info */
/* => CPU information register */
/*    Provides a processor identification mechanism to distinguish between Com ARM and App ARM. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_cpu_info           0x00000000
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_cpu_info 0xE0043000
#define Adr_NX90_cm4_misc_ctrl_cpu_info               0xE0043000

#define MSK_NX90_cm4_misc_ctrl_cpu_info_id  0x00000001
#define SRT_NX90_cm4_misc_ctrl_cpu_info_id  0
#define MSK_NX90_cm4_misc_ctrl_cpu_info_fpu 0x00000002
#define SRT_NX90_cm4_misc_ctrl_cpu_info_fpu 1

/* all used bits of 'NX90_cm4_misc_ctrl_cpu_info': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_cpu_info 0x00000003

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_raw */
/* => FPU raw IRQ */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    Note: Before clearing an IRQ in this register, the corresponding exception status must be cleared within the FPU. Otherwise */
/*    the IRQ will be re-asserted immediately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_raw           0x00000004
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_raw 0xE0043004
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_raw               0xE0043004
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw          0x00000000

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc         0x00000001
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ixc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc         0x00000002
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ufc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc         0x00000004
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ofc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc         0x00000008
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_dzc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc         0x00000010
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_ioc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_raw_idc         0x00000020
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_raw_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_idc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_raw_idc 0x00000000

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_raw': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_raw 0x0000003f

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_masked */
/* => FPU masked IRQ */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_masked           0x00000008
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_masked 0xE0043008
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_masked               0xE0043008

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ixc 0x00000001
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ixc 0
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ufc 0x00000002
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ufc 1
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ofc 0x00000004
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ofc 2
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_dzc 0x00000008
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_dzc 3
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_ioc 0x00000010
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_ioc 4
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_masked_idc 0x00000020
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_masked_idc 5

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_masked': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_masked 0x0000003f

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_msk_set */
/* => FPU IRQ mask set */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to cm4_misc_ctrl_fpu_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_set           0x0000000C
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_msk_set 0xE004300C
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_set               0xE004300C
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set          0x00000000

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc         0x00000001
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ixc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc         0x00000002
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ufc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc         0x00000004
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ofc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc         0x00000008
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_dzc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc         0x00000010
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_ioc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc         0x00000020
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_set_idc 0x00000000

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_msk_set': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_msk_set 0x0000003f

/* --------------------------------------------------------------------- */
/* Register cm4_misc_ctrl_fpu_irq_msk_reset */
/* => FPU IRQ mask reset */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_reset           0x00000010
#define Adr_NX90_cm4_misc_ctrl_cm4_misc_ctrl_fpu_irq_msk_reset 0xE0043010
#define Adr_NX90_cm4_misc_ctrl_fpu_irq_msk_reset               0xE0043010
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset          0x00000000

#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc         0x00000001
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc         0
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ixc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc         0x00000002
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc         1
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ufc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc         0x00000004
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc         2
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ofc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc         0x00000008
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc         3
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_dzc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc         0x00000010
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc         4
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_ioc 0x00000000
#define MSK_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc         0x00000020
#define SRT_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc         5
#define DFLT_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc    0x00000000
#define DFLT_BF_VAL_NX90_cm4_misc_ctrl_fpu_irq_msk_reset_idc 0x00000000

/* all used bits of 'NX90_cm4_misc_ctrl_fpu_irq_msk_reset': */
#define MSK_USED_BITS_NX90_cm4_misc_ctrl_fpu_irq_msk_reset 0x0000003f


/* ===================================================================== */

/* AREA idpm */
/* Area of idpm_com */

/* ===================================================================== */

#define Addr_NX90_idpm_com 0xFF001B00

/* --------------------------------------------------------------------- */
/* Register idpm_cfg0x0 */
/* => DPM IO Control Register 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_cfg0x0      0x00000000
#define Adr_NX90_idpm_com_idpm_cfg0x0 0xFF001B00
#define Adr_NX90_idpm_cfg0x0          0xFF001B00
#define DFLT_VAL_NX90_idpm_cfg0x0     0x00000000

#define MSK_NX90_idpm_cfg0x0_enable         0x00000001
#define SRT_NX90_idpm_cfg0x0_enable         0
#define DFLT_VAL_NX90_idpm_cfg0x0_enable    0x00000000
#define DFLT_BF_VAL_NX90_idpm_cfg0x0_enable 0x00000000
#define MSK_NX90_idpm_cfg0x0_endian         0x00000030
#define SRT_NX90_idpm_cfg0x0_endian         4
#define DFLT_VAL_NX90_idpm_cfg0x0_endian    0x00000000
#define DFLT_BF_VAL_NX90_idpm_cfg0x0_endian 0x00000000

/* all used bits of 'NX90_idpm_cfg0x0': */
#define MSK_USED_BITS_NX90_idpm_cfg0x0 0x00000031

/* --------------------------------------------------------------------- */
/* Register idpm_addr_cfg */
/* => DPM External Address Configuration Register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_addr_cfg      0x00000010
#define Adr_NX90_idpm_com_idpm_addr_cfg 0xFF001B10
#define Adr_NX90_idpm_addr_cfg          0xFF001B10
#define DFLT_VAL_NX90_idpm_addr_cfg     0x00000000

#define MSK_NX90_idpm_addr_cfg_cfg_win_addr_cfg         0x00000030
#define SRT_NX90_idpm_addr_cfg_cfg_win_addr_cfg         4
#define DFLT_VAL_NX90_idpm_addr_cfg_cfg_win_addr_cfg    0x00000000
#define DFLT_BF_VAL_NX90_idpm_addr_cfg_cfg_win_addr_cfg 0x00000000

/* all used bits of 'NX90_idpm_addr_cfg': */
#define MSK_USED_BITS_NX90_idpm_addr_cfg 0x00000030

/* --------------------------------------------------------------------- */
/* Register idpm_status */
/* => DPM Status Register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_status      0x0000001C
#define Adr_NX90_idpm_com_idpm_status 0xFF001B1C
#define Adr_NX90_idpm_status          0xFF001B1C

#define MSK_NX90_idpm_status_unlocked 0x00000001
#define SRT_NX90_idpm_status_unlocked 0

/* all used bits of 'NX90_idpm_status': */
#define MSK_USED_BITS_NX90_idpm_status 0x00000001

/* --------------------------------------------------------------------- */
/* Register idpm_tunnel_cfg */
/* => DPM Access Tunnel Configuration Register. */
/*    The DPM Access Tunnel (DATunnel) is a 64 byte (16DWord) address window which can be mapped on any 64 byte boundary of the external */
/*    visible address space. At the last DWord (offset 0x3C) of the DATunnel the Internal Target Base Address (ITBAddr) can be programmed. */
/*    This is the base address of the 64 byte tunnel target area inside the full 32-bit netX address range (however some address areas */
/*    could not be reachable as connections could be cut from the DPM inside the netX dataswitch, refer to the dataswitch documentation */
/*    of your netX). */
/*    By the DWords 0 to 14 of the tunnel the internal netX addresses starting at ITBAddr can be reached. The 'enable'-bit must be active */
/*    for this (read-only functionality can be configured by 'wp_data'-bit). */
/*    For access to netX data with ITBAddr DWord offset 15, the lower bits 5 to 2 of the programmed ITBAddr are interpreted as a mapping */
/*    value. This value will be added to the internal access address before tunneling (wrapping around at the 64 byte boundary). Hence it */
/*    is possible to access always 15 of the 16 netX DWord while the one hidden by the ITBAddr can be selected by an appropriate mapping */
/*    value. */
/*    The ITBAddr can also be programmed by the 'idpm_itbaddr' register of the configuration window 0 (or the INTLOGIC area). The ITBAddr on */
/*    tunnel offset 0x3C can be write-protected by the 'wp_itbaddr'-bit. This could be useful to protect the NETX from reconfiguring the */
/*    tunnel from the host side but provides the host the internal NETX destination address anyhow. However this only makes sense when */
/*    the configuration window 0 is disabled ('idpm_addr_cfg' register). Otherwise the host could reconfigure the tunnel by the 'idpm_itbaddr' */
/*    register. */
/*    Additionally the 'tunnel_all'-bit provides the possibility of tunneling all 16DWords to the NETX side. */
/*    To protect the NETX from reconfiguring the tunnel from the host side when the configuration window 0 is enabled, the 'wp_cfg_win' */
/*    can be activated. Then the tunnel configuration can only be changed from the NETX side (INTLOGIC area) but not from configuration */
/*    window 0 (in contrast to the 'wp_itbaddr'-bit which protects only offset 0x3C). */
/*     */
/*    External to internal address mapping for DATunnel area can be calculated by following formula: */
/*       INAAdr = (ITBAddr & 0xffffffc0) + ((EDAAdr + ITBAddr) & 0x3C) */
/*     */
/*    With: */
/*       INAAdr:  Internal netX Access Address */
/*       ITBAddr: Internal netX 32-bit Tunnel Target Base Address */
/*       EDAAdr:  External DPM Access Address */
/*     */
/*    Condition for DATunnel access is: */
/*       EDAAdr>>6 equals value of bit field 'base' from this register. */
/*     */
/*    To map netX internal DWord N to invisible last external DWord (15), use mapping value */
/*       map = (N - 15) & 0xf */
/*    on bits 5 to 2. */
/*    Internal to external address offset inside DATunnel area for internal DWord N can be calculated by following formula: */
/*       External offset = (N*4 - map*4) & 0x3C = (N*4 - ITBAddr) & 0x3C */
/*     */
/*    Example 1: */
/*       Access to netX sys_time module by host via DATunnel on external DPM addresses are starting at 0x240. */
/*       - Set bit field 'base' of this register to 9 (0x240>>6), set 'enable'-bit (and write protection depending on application). */
/*         DATunnel now is enabled on external DPM addresses 0x240 to 0x27f. */
/*       - ITBAddr of netX4000 sys_time module is 0xf409c180. */
/*         For direct DATunnel to this address, host must write 0xf409c180 to external DPM address 0x27c. This */
/*         can be done e.g. by four byte accesses to 0x27c, 0x27d, 0x27e and 0x27f or by two 16-bit accesses to 0x27c and 0x27e. */
/*         Now sys_time module registers 0 to 14 can be accessed on external DPM address 0x240 to 0x27b. */
/*     */
/*    Example 2: */
/*       Register 15 of sys_time is hidden by ITBAddr configuration on 0x27c in example 1 but must also be accessed. However, sys_time */
/*       Register 6 is never kind of interest. */
/*       - Configure this register like described in example 1. */
/*       - To map Register 6 (Module offset 6*4) to external offset 0x3C (hidden data on DWord 15), */
/*         the following rule must be complied: */
/*            0x3C + map*4 = 6*4. */
/*         That leads to a mapping value of: */
/*            map*4 = (6*4 - 0x3C) & 0x3C = 1C */
/*         Hence, write 0x101c101C to DATunnel DWord 15 (external DPM address 0x27c) to map sys_time Register 6 to */
/*         hidden DWord 15. */
/*         INAAdr now will be derived from EDAAdr before tunneling as follows: */
/*            INAAdr = 0xf409c180 + ((EDAAdr + 0x1C) & 0x3C) */
/*         External offset of Module DWord N results from: */
/*            External offset = (N*4 - 0x1C) & 0x3C */
/*         Register 15 of sys_time unit now can be accessed by external DPM address 0x240+((0xf*4-0x1C) & 0x3C) = 0x260 (i.e. Tunnel DWord 8). */
/*         Register 0  of sys_time unit now can be accessed by external DPM address 0x240+((0x0*4-0x1C) & 0x3C) = 0x264 (i.e. Tunnel DWord 9). */
/*         Register 1  of sys_time unit now can be accessed by external DPM address 0x240+((0x1*4-0x1C) & 0x3C) = 0x268 (i.e. Tunnel DWord 10). */
/*         and so on. */
/*         Register 6  of sys_time unit can not be accessed as it is hidden by ITBAddr configuration on 0x27c (i.e. Tunnel DWord 15). */
/*         Register 7  of sys_time unit now can be accessed by external DPM address 0x240+((0x7*4-0x1C) & 0x3C) = 0x240 (i.e. Tunnel DWord 0). */
/*     */
/*    Note: */
/*      The IDPM tunnel is capable to target the INTRAMHS-memory associated to the IDPM and additionally the INTLOGIC_SYS */
/*      area (addresses 0xf4080000 to 0xf80fffff, e.g. for SYSTIME). Other address areas can not be reached even when ITBAddr */
/*      is configured for it. Write access to non-reachable addresses will be ignored, read access will deliver invalid data. */
/*     */
/*    Attention: */
/*      The IDPM tunnel could bypass the AHB firewalls. Example: */
/*      The INTLOGIC_SYS firewall is configured to deny CA9 accesses while the CA9 is permitted for the INTRAMHS0 firewall. However, when */
/*      the tunnel is programmed to target the INTLOGIC_SYS area the CA9 can reach it as the initial access (before tunnel remapping) is */
/*      handled by the INTRAMHS0 firewall and not by the INTLOGIC_SYS firewall. To avoid abuse the 'tunnel_all' or the 'wp_itbaddr' bit */
/*      and the 'wp_cfg_win' must be enabled. Then the tunnel e.g. can be used to access the SYSTIME registers but it cannot be reconfigured */
/*      by the CA9 for abuse to other addresses. */
/*     */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_tunnel_cfg      0x00000038
#define Adr_NX90_idpm_com_idpm_tunnel_cfg 0xFF001B38
#define Adr_NX90_idpm_tunnel_cfg          0xFF001B38
#define DFLT_VAL_NX90_idpm_tunnel_cfg     0x00000101

#define MSK_NX90_idpm_tunnel_cfg_wp_data            0x00000001
#define SRT_NX90_idpm_tunnel_cfg_wp_data            0
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_data       0x00000001
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_data    0x00000001
#define MSK_NX90_idpm_tunnel_cfg_wp_itbaddr         0x00000002
#define SRT_NX90_idpm_tunnel_cfg_wp_itbaddr         1
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_itbaddr    0x00000000
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_itbaddr 0x00000000
#define MSK_NX90_idpm_tunnel_cfg_enable             0x00000004
#define SRT_NX90_idpm_tunnel_cfg_enable             2
#define DFLT_VAL_NX90_idpm_tunnel_cfg_enable        0x00000000
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_enable     0x00000000
#define MSK_NX90_idpm_tunnel_cfg_tunnel_all         0x00000008
#define SRT_NX90_idpm_tunnel_cfg_tunnel_all         3
#define DFLT_VAL_NX90_idpm_tunnel_cfg_tunnel_all    0x00000000
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_tunnel_all 0x00000000
#define MSK_NX90_idpm_tunnel_cfg_base               0x00007fc0
#define SRT_NX90_idpm_tunnel_cfg_base               6
#define DFLT_VAL_NX90_idpm_tunnel_cfg_base          0x00000100
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_base       0x00000004
#define MSK_NX90_idpm_tunnel_cfg_wp_cfg_win         0x80000000
#define SRT_NX90_idpm_tunnel_cfg_wp_cfg_win         31
#define DFLT_VAL_NX90_idpm_tunnel_cfg_wp_cfg_win    0x00000000
#define DFLT_BF_VAL_NX90_idpm_tunnel_cfg_wp_cfg_win 0x00000000

/* all used bits of 'NX90_idpm_tunnel_cfg': */
#define MSK_USED_BITS_NX90_idpm_tunnel_cfg 0x80007fcf

/* --------------------------------------------------------------------- */
/* Register idpm_itbaddr */
/* => DPM Access Tunnel (DATunnel) netX Internal Target Base Address (ITBAddr) Configuration Register. */
/*    For DPM Access Tunnel (DATunnel) function view description of dpm_tunnel_cfg register. */
/*    This register contains ITBAddr value that can also be changed by host on last offset 0x3c (last DWord) of */
/*    external DATunnel area (defined by bit field 'base' in 'dpm_tunnel_cfg' register). However this register can */
/*    also be write-protected from host if bit 'wp_itbaddr' in 'dpm_tunnel_cfg' register is set. */
/*    Write protection bits of DATunnel configured in 'dpm_tunnel_cfg' register can also be read from this register. Host */
/*    can read access rights from these bits on last DWord of external DATunnel address area. */
/*     */
/*    Note: This register can be write-protected by the 'wp_cfg_win' and the 'wp_itbaddr'-bit of the 'idpm_tunnel_cfg' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_itbaddr      0x0000003C
#define Adr_NX90_idpm_com_idpm_itbaddr 0xFF001B3C
#define Adr_NX90_idpm_itbaddr          0xFF001B3C
#define DFLT_VAL_NX90_idpm_itbaddr     0x00000001

#define MSK_NX90_idpm_itbaddr_wp_data_ro            0x00000001
#define SRT_NX90_idpm_itbaddr_wp_data_ro            0
#define DFLT_VAL_NX90_idpm_itbaddr_wp_data_ro       0x00000001
#define DFLT_BF_VAL_NX90_idpm_itbaddr_wp_data_ro    0x00000001
#define MSK_NX90_idpm_itbaddr_wp_itbaddr_ro         0x00000002
#define SRT_NX90_idpm_itbaddr_wp_itbaddr_ro         1
#define DFLT_VAL_NX90_idpm_itbaddr_wp_itbaddr_ro    0x00000000
#define DFLT_BF_VAL_NX90_idpm_itbaddr_wp_itbaddr_ro 0x00000000
#define MSK_NX90_idpm_itbaddr_map                   0x0000003c
#define SRT_NX90_idpm_itbaddr_map                   2
#define DFLT_VAL_NX90_idpm_itbaddr_map              0x00000000
#define DFLT_BF_VAL_NX90_idpm_itbaddr_map           0x00000000
#define MSK_NX90_idpm_itbaddr_base                  0xffffffc0
#define SRT_NX90_idpm_itbaddr_base                  6
#define DFLT_VAL_NX90_idpm_itbaddr_base             0x00000000
#define DFLT_BF_VAL_NX90_idpm_itbaddr_base          0x00000000

/* all used bits of 'NX90_idpm_itbaddr': */
#define MSK_USED_BITS_NX90_idpm_itbaddr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register idpm_win1_end */
/* => DPM Window 1 End Address Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    At address 0x0 DPM configuration window is mapped after reset (length: 256 bytes, containing all DPM addresses defined here). Each window starts at */
/*    window end address of the preceding window. Hence external window 1 start address is 0x100, window 2 starts at value programmed in this register */
/* and so on. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/*    Note: */
/*      Configuration Window 0 access detection has higher priority than normal DPM Window */
/*      detection but lower priority than Access Tunnel access detection. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win1_end      0x00000040
#define Adr_NX90_idpm_com_idpm_win1_end 0xFF001B40
#define Adr_NX90_idpm_win1_end          0xFF001B40
#define DFLT_VAL_NX90_idpm_win1_end     0x00000000

#define MSK_NX90_idpm_win1_end_win_end         0x0000ff80
#define SRT_NX90_idpm_win1_end_win_end         7
#define DFLT_VAL_NX90_idpm_win1_end_win_end    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win1_end_win_end 0x00000000

/* all used bits of 'NX90_idpm_win1_end': */
#define MSK_USED_BITS_NX90_idpm_win1_end 0x0000ff80

/* --------------------------------------------------------------------- */
/* Register idpm_win1_map */
/* => DPM Window 1 Address Map Configuration Register. */
/*    Smallest DPM window configuration unit is 128 bytes (i.e. lowest 7 bits of address configuration are always 0). */
/*    For further information view description of 'dpm_win1_end' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win1_map      0x00000044
#define Adr_NX90_idpm_com_idpm_win1_map 0xFF001B44
#define Adr_NX90_idpm_win1_map          0xFF001B44
#define DFLT_VAL_NX90_idpm_win1_map     0x00000000

#define MSK_NX90_idpm_win1_map_win_map_alt         0x0000000c
#define SRT_NX90_idpm_win1_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win1_map_win_map_alt    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win1_map_win_map_alt 0x00000000
#define MSK_NX90_idpm_win1_map_wp_cfg_win          0x00000020
#define SRT_NX90_idpm_win1_map_wp_cfg_win          5
#define DFLT_VAL_NX90_idpm_win1_map_wp_cfg_win     0x00000000
#define DFLT_BF_VAL_NX90_idpm_win1_map_wp_cfg_win  0x00000000
#define MSK_NX90_idpm_win1_map_win_map             0x00007f80
#define SRT_NX90_idpm_win1_map_win_map             7
#define DFLT_VAL_NX90_idpm_win1_map_win_map        0x00000000
#define DFLT_BF_VAL_NX90_idpm_win1_map_win_map     0x00000000

/* all used bits of 'NX90_idpm_win1_map': */
#define MSK_USED_BITS_NX90_idpm_win1_map 0x00007fac

/* --------------------------------------------------------------------- */
/* Register idpm_win2_end */
/* => DPM Window 2 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win2_end      0x00000048
#define Adr_NX90_idpm_com_idpm_win2_end 0xFF001B48
#define Adr_NX90_idpm_win2_end          0xFF001B48
#define DFLT_VAL_NX90_idpm_win2_end     0x00000000

#define MSK_NX90_idpm_win2_end_win_end         0x0000ff80
#define SRT_NX90_idpm_win2_end_win_end         7
#define DFLT_VAL_NX90_idpm_win2_end_win_end    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win2_end_win_end 0x00000000

/* all used bits of 'NX90_idpm_win2_end': */
#define MSK_USED_BITS_NX90_idpm_win2_end 0x0000ff80

/* --------------------------------------------------------------------- */
/* Register idpm_win2_map */
/* => DPM Window 2 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win2_map      0x0000004C
#define Adr_NX90_idpm_com_idpm_win2_map 0xFF001B4C
#define Adr_NX90_idpm_win2_map          0xFF001B4C
#define DFLT_VAL_NX90_idpm_win2_map     0x00000000

#define MSK_NX90_idpm_win2_map_win_map_alt         0x0000000c
#define SRT_NX90_idpm_win2_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win2_map_win_map_alt    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win2_map_win_map_alt 0x00000000
#define MSK_NX90_idpm_win2_map_win_map             0x00007f80
#define SRT_NX90_idpm_win2_map_win_map             7
#define DFLT_VAL_NX90_idpm_win2_map_win_map        0x00000000
#define DFLT_BF_VAL_NX90_idpm_win2_map_win_map     0x00000000

/* all used bits of 'NX90_idpm_win2_map': */
#define MSK_USED_BITS_NX90_idpm_win2_map 0x00007f8c

/* --------------------------------------------------------------------- */
/* Register idpm_win3_end */
/* => DPM Window 3 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win3_end      0x00000050
#define Adr_NX90_idpm_com_idpm_win3_end 0xFF001B50
#define Adr_NX90_idpm_win3_end          0xFF001B50
#define DFLT_VAL_NX90_idpm_win3_end     0x00000000

#define MSK_NX90_idpm_win3_end_win_end         0x0000ff80
#define SRT_NX90_idpm_win3_end_win_end         7
#define DFLT_VAL_NX90_idpm_win3_end_win_end    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win3_end_win_end 0x00000000

/* all used bits of 'NX90_idpm_win3_end': */
#define MSK_USED_BITS_NX90_idpm_win3_end 0x0000ff80

/* --------------------------------------------------------------------- */
/* Register idpm_win3_map */
/* => DPM Window 3 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win3_map      0x00000054
#define Adr_NX90_idpm_com_idpm_win3_map 0xFF001B54
#define Adr_NX90_idpm_win3_map          0xFF001B54
#define DFLT_VAL_NX90_idpm_win3_map     0x00000000

#define MSK_NX90_idpm_win3_map_win_map_alt         0x0000000c
#define SRT_NX90_idpm_win3_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win3_map_win_map_alt    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win3_map_win_map_alt 0x00000000
#define MSK_NX90_idpm_win3_map_win_map             0x00007f80
#define SRT_NX90_idpm_win3_map_win_map             7
#define DFLT_VAL_NX90_idpm_win3_map_win_map        0x00000000
#define DFLT_BF_VAL_NX90_idpm_win3_map_win_map     0x00000000

/* all used bits of 'NX90_idpm_win3_map': */
#define MSK_USED_BITS_NX90_idpm_win3_map 0x00007f8c

/* --------------------------------------------------------------------- */
/* Register idpm_win4_end */
/* => DPM Window 4 End Address Configuration Register. */
/*    For detailed information refer to 'idpm_win1_end' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win4_end      0x00000058
#define Adr_NX90_idpm_com_idpm_win4_end 0xFF001B58
#define Adr_NX90_idpm_win4_end          0xFF001B58
#define DFLT_VAL_NX90_idpm_win4_end     0x00000000

#define MSK_NX90_idpm_win4_end_win_end         0x0000ff80
#define SRT_NX90_idpm_win4_end_win_end         7
#define DFLT_VAL_NX90_idpm_win4_end_win_end    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win4_end_win_end 0x00000000

/* all used bits of 'NX90_idpm_win4_end': */
#define MSK_USED_BITS_NX90_idpm_win4_end 0x0000ff80

/* --------------------------------------------------------------------- */
/* Register idpm_win4_map */
/* => DPM Window 4 Address Map Configuration Register. */
/*    For detailed information refer to 'dpm_win1_map' register description. */
/*     */
/*    Note: */
/*      This register can be write-protected by the 'wp_cfg_win'-bit of the 'idpm_win1_map' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_win4_map      0x0000005C
#define Adr_NX90_idpm_com_idpm_win4_map 0xFF001B5C
#define Adr_NX90_idpm_win4_map          0xFF001B5C
#define DFLT_VAL_NX90_idpm_win4_map     0x00000000

#define MSK_NX90_idpm_win4_map_win_map_alt         0x0000000c
#define SRT_NX90_idpm_win4_map_win_map_alt         2
#define DFLT_VAL_NX90_idpm_win4_map_win_map_alt    0x00000000
#define DFLT_BF_VAL_NX90_idpm_win4_map_win_map_alt 0x00000000
#define MSK_NX90_idpm_win4_map_win_map             0x00007f80
#define SRT_NX90_idpm_win4_map_win_map             7
#define DFLT_VAL_NX90_idpm_win4_map_win_map        0x00000000
#define DFLT_BF_VAL_NX90_idpm_win4_map_win_map     0x00000000

/* all used bits of 'NX90_idpm_win4_map': */
#define MSK_USED_BITS_NX90_idpm_win4_map 0x00007f8c

/* --------------------------------------------------------------------- */
/* Register idpm_irq_raw */
/* => DPM Raw (before masking) IRQ Status Register. */
/*    If a bit is set, the related interrupt is asserted. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*     */
/*    Important: There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*     */
/*    Note: */
/*       The 'dpm_sw' IRQ can be controlled by the 'dpm_sw_irq' register. */
/*       for each IRQ target. The 'dpm_sw' will be set inside the 'dpm_irq_raw' register */
/*       when the 'dpm_sw' is activated for at least one IRQ target. But each IRQ target */
/*       obtains only the 'dpm_sw' IRQ state programmed for this target inside the 'dpm_sw_irq' */
/*       register. For an example view description of 'dpm_sw_irq' register. */
/*     */
/*    Note: */
/*        The 'firmware' IRQ can be used to flag handshake and netX firmware system status events to the */
/*        host. Firmware IRQ generation can be controlled by dpm_firmware_irq_mask register. Detailed */
/*        firmware IRQ status can be read from dpm_firmware_irq_raw register. */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_raw      0x00000080
#define Adr_NX90_idpm_com_idpm_irq_raw 0xFF001B80
#define Adr_NX90_idpm_irq_raw          0xFF001B80

#define MSK_NX90_idpm_irq_raw_dpm_sw   0x00000001
#define SRT_NX90_idpm_irq_raw_dpm_sw   0
#define MSK_NX90_idpm_irq_raw_firmware 0x00000004
#define SRT_NX90_idpm_irq_raw_firmware 2

/* all used bits of 'NX90_idpm_irq_raw': */
#define MSK_USED_BITS_NX90_idpm_irq_raw 0x00000005

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_mask_set */
/* => DPM Interrupt Mask Register for IDPM host interrupt. */
/*    Write access with '1' sets related interrupt mask bits (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for IDPM host interrupt. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*     */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_mask_set      0x00000084
#define Adr_NX90_idpm_com_idpm_irq_host_mask_set 0xFF001B84
#define Adr_NX90_idpm_irq_host_mask_set          0xFF001B84
#define DFLT_VAL_NX90_idpm_irq_host_mask_set     0x00000000

#define MSK_NX90_idpm_irq_host_mask_set_dpm_sw           0x00000001
#define SRT_NX90_idpm_irq_host_mask_set_dpm_sw           0
#define DFLT_VAL_NX90_idpm_irq_host_mask_set_dpm_sw      0x00000000
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_set_dpm_sw   0x00000000
#define MSK_NX90_idpm_irq_host_mask_set_firmware         0x00000004
#define SRT_NX90_idpm_irq_host_mask_set_firmware         2
#define DFLT_VAL_NX90_idpm_irq_host_mask_set_firmware    0x00000000
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_set_firmware 0x00000000

/* all used bits of 'NX90_idpm_irq_host_mask_set': */
#define MSK_USED_BITS_NX90_idpm_irq_host_mask_set 0x00000005

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_mask_reset */
/* => DPM Interrupt Mask Reset Register for IDPM host interrupt. */
/*    Write access with '1' resets related interrupt mask bits (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence related interrupt mask bit. */
/*    Read access shows actual interrupt mask. */
/*    If a mask bit is set, the related interrupt will activate the IRQ for IDPM host interrupt. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*     */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_mask_reset      0x00000088
#define Adr_NX90_idpm_com_idpm_irq_host_mask_reset 0xFF001B88
#define Adr_NX90_idpm_irq_host_mask_reset          0xFF001B88
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset     0x00000000

#define MSK_NX90_idpm_irq_host_mask_reset_dpm_sw           0x00000001
#define SRT_NX90_idpm_irq_host_mask_reset_dpm_sw           0
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset_dpm_sw      0x00000000
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_reset_dpm_sw   0x00000000
#define MSK_NX90_idpm_irq_host_mask_reset_firmware         0x00000004
#define SRT_NX90_idpm_irq_host_mask_reset_firmware         2
#define DFLT_VAL_NX90_idpm_irq_host_mask_reset_firmware    0x00000000
#define DFLT_BF_VAL_NX90_idpm_irq_host_mask_reset_firmware 0x00000000

/* all used bits of 'NX90_idpm_irq_host_mask_reset': */
#define MSK_USED_BITS_NX90_idpm_irq_host_mask_reset 0x00000005

/* --------------------------------------------------------------------- */
/* Register idpm_irq_host_masked */
/* => DPM Masked Interrupt Status Register for IDPM host interrupt. */
/*    A bit is set, when the related mask bit is set in 'dpm_irq_host_mask'-register and the related interrupt is asserted. */
/*    IRQ for IDPM host interrupt is asserted if at least one bit is set here. */
/*    Interrupts must be reset in interrupt generating module. Interrupts cannot be cleared here. */
/*    To release IRQ for IDPM host interrupt without clearing interrupt in module, reset related mask bit to 0. */
/*     */
/*    Note: */
/*       For further information view description of 'dpm_irq_raw' register. */
/*     */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_irq_host_masked      0x0000008C
#define Adr_NX90_idpm_com_idpm_irq_host_masked 0xFF001B8C
#define Adr_NX90_idpm_irq_host_masked          0xFF001B8C

#define MSK_NX90_idpm_irq_host_masked_dpm_sw   0x00000001
#define SRT_NX90_idpm_irq_host_masked_dpm_sw   0
#define MSK_NX90_idpm_irq_host_masked_firmware 0x00000004
#define SRT_NX90_idpm_irq_host_masked_firmware 2

/* all used bits of 'NX90_idpm_irq_host_masked': */
#define MSK_USED_BITS_NX90_idpm_irq_host_masked 0x00000005

/* --------------------------------------------------------------------- */
/* Register idpm_sw_irq */
/* => DPM Register for Software Interrupt Generation to Host and netX Interrupt Targets. */
/*    Host and netX masters can generate an interrupt to netX interrupt targets (e.g. ARM-VIC) */
/*    by this register. */
/*    To propagate interrupt states from this register to the interrupt target the 'idpm_sw' IRQ must */
/*    be enabled inside the appropriate interrupt controller (e.g. the ARM-VIC). */
/*     */
/*    Note: */
/*       There is a set and a reset bit for the sw-IRQ to avoid read-modify-write sequences. */
/*       When both (set and reset) bits are set at the same time, the interrupt will be set (set will win). */
/*       The reset-bit is always 0 for read. The set-bit shows the current interrupt status when read. */
/*    Note: */
/*       This register is a new netx51/52 feature.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_sw_irq      0x000000C0
#define Adr_NX90_idpm_com_idpm_sw_irq 0xFF001BC0
#define Adr_NX90_idpm_sw_irq          0xFF001BC0
#define DFLT_VAL_NX90_idpm_sw_irq     0x00000000

#define MSK_NX90_idpm_sw_irq_set_host           0x00000001
#define SRT_NX90_idpm_sw_irq_set_host           0
#define DFLT_VAL_NX90_idpm_sw_irq_set_host      0x00000000
#define DFLT_BF_VAL_NX90_idpm_sw_irq_set_host   0x00000000
#define MSK_NX90_idpm_sw_irq_reset_host         0x00000100
#define SRT_NX90_idpm_sw_irq_reset_host         8
#define DFLT_VAL_NX90_idpm_sw_irq_reset_host    0x00000000
#define DFLT_BF_VAL_NX90_idpm_sw_irq_reset_host 0x00000000

/* all used bits of 'NX90_idpm_sw_irq': */
#define MSK_USED_BITS_NX90_idpm_sw_irq 0x00000101

/* --------------------------------------------------------------------- */
/* Register idpm_sys_sta */
/* => DPM System Status Information Register. */
/*    This register can be used for firmware status information. */
/*     */
/*    Note: */
/*       This register is NOT fully compatible to netx50 DPM_HOST_SYS_STAT register: */
/*       Only the HOST_STATE-bits of DPM0 can be read from the 'netx_status'-register inside ASIC_CTRL address area. */
/*       The HOST_STATE-bits of DPM1 and IDPM can not be read from the 'netx_status'-register inside */
/*       ASIC_CTRL address area. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_sys_sta      0x000000D8
#define Adr_NX90_idpm_com_idpm_sys_sta 0xFF001BD8
#define Adr_NX90_idpm_sys_sta          0xFF001BD8
#define DFLT_VAL_NX90_idpm_sys_sta     0x00000000

#define MSK_NX90_idpm_sys_sta_RDY_ro                   0x00000001
#define SRT_NX90_idpm_sys_sta_RDY_ro                   0
#define DFLT_VAL_NX90_idpm_sys_sta_RDY_ro              0x00000000
#define DFLT_BF_VAL_NX90_idpm_sys_sta_RDY_ro           0x00000000
#define MSK_NX90_idpm_sys_sta_RUN_ro                   0x00000002
#define SRT_NX90_idpm_sys_sta_RUN_ro                   1
#define DFLT_VAL_NX90_idpm_sys_sta_RUN_ro              0x00000000
#define DFLT_BF_VAL_NX90_idpm_sys_sta_RUN_ro           0x00000000
#define MSK_NX90_idpm_sys_sta_NETX_STATE_ro            0x0000000c
#define SRT_NX90_idpm_sys_sta_NETX_STATE_ro            2
#define DFLT_VAL_NX90_idpm_sys_sta_NETX_STATE_ro       0x00000000
#define DFLT_BF_VAL_NX90_idpm_sys_sta_NETX_STATE_ro    0x00000000
#define MSK_NX90_idpm_sys_sta_HOST_STATE               0x000000f0
#define SRT_NX90_idpm_sys_sta_HOST_STATE               4
#define DFLT_VAL_NX90_idpm_sys_sta_HOST_STATE          0x00000000
#define DFLT_BF_VAL_NX90_idpm_sys_sta_HOST_STATE       0x00000000
#define MSK_NX90_idpm_sys_sta_NETX_STA_CODE_ro         0x0000ff00
#define SRT_NX90_idpm_sys_sta_NETX_STA_CODE_ro         8
#define DFLT_VAL_NX90_idpm_sys_sta_NETX_STA_CODE_ro    0x00000000
#define DFLT_BF_VAL_NX90_idpm_sys_sta_NETX_STA_CODE_ro 0x00000000

/* all used bits of 'NX90_idpm_sys_sta': */
#define MSK_USED_BITS_NX90_idpm_sys_sta 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register idpm_reset_request */
/* => DPM Reset Request Register. */
/*     */
/*    Note: This register is compatible to netx50 DPM_HOST_RESET_REQ register */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_reset_request      0x000000DC
#define Adr_NX90_idpm_com_idpm_reset_request 0xFF001BDC
#define Adr_NX90_idpm_reset_request          0xFF001BDC
#define DFLT_VAL_NX90_idpm_reset_request     0x00000000

#define MSK_NX90_idpm_reset_request_reset_key         0x000000ff
#define SRT_NX90_idpm_reset_request_reset_key         0
#define DFLT_VAL_NX90_idpm_reset_request_reset_key    0x00000000
#define DFLT_BF_VAL_NX90_idpm_reset_request_reset_key 0x00000000

/* all used bits of 'NX90_idpm_reset_request': */
#define MSK_USED_BITS_NX90_idpm_reset_request 0x000000ff

/* --------------------------------------------------------------------- */
/* Register idpm_firmware_irq_raw */
/* => 1st netx50 compatible DPM Interrupt Status Register (related to 'dpm_firmware_irq_mask'-register). */
/*    Writing a '1' to an IRQ flag will clear the Interrupt. This is always done even if related bit inside */
/*    'dpm_firmware_irq_mask'-register is not set (this is compatible to netx50). */
/*     */
/*    Important: */
/*       There are two completely independent sets of IRQ registers: */
/*       IRQ register-set 1: 'dpm_irq_raw' (and related registers e.g. 'dpm_irq_irq_*' registers). */
/*       IRQ register-set 2: 'dpm_firmware_irq_* registers' (netx50 compatible register set: DPM_HOST_INT_EN0,2 DPM_HOST_INT_STA0,2). */
/*       Programming (masking or clearing IRQs) of one register-set has no impact to the other register-set even if some IRQs */
/*       can be found in both sets (e.g. com0). */
/*     */
/*    Note: */
/*       This register is compatible to netx50 DPM_HOST_INT_STAT0 register, however some unused */
/*       IRQs have been removed. */
/*     */
/*    Note: */
/*       For netX4000 there are 2 IDPM and 2 HANDSHAKE_CTRL units. IDPM0 is always associated with HANDSHAKE_CTRL0 */
/*       while IDPM1 is always associated with HANDSHAKE_CTRL1. */
/*     */
/*    Note: */
/*       The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_firmware_irq_raw      0x000000E0
#define Adr_NX90_idpm_com_idpm_firmware_irq_raw 0xFF001BE0
#define Adr_NX90_idpm_firmware_irq_raw          0xFF001BE0
#define DFLT_VAL_NX90_idpm_firmware_irq_raw     0x00000000

#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT0                  0x00000001
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT0                  0
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT0             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT0          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT1                  0x00000002
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT1                  1
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT1             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT1          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT2                  0x00000004
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT2                  2
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT2             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT2          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT3                  0x00000008
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT3                  3
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT3             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT3          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT4                  0x00000010
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT4                  4
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT4             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT4          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT5                  0x00000020
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT5                  5
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT5             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT5          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT6                  0x00000040
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT6                  6
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT6             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT6          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT7                  0x00000080
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT7                  7
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT7             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT7          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT8                  0x00000100
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT8                  8
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT8             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT8          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT9                  0x00000200
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT9                  9
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT9             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT9          0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT10                 0x00000400
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT10                 10
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT10            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT10         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT11                 0x00000800
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT11                 11
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT11            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT11         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT12                 0x00001000
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT12                 12
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT12            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT12         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT13                 0x00002000
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT13                 13
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT13            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT13         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT14                 0x00004000
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT14                 14
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT14            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT14         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_HS_EVENT15                 0x00008000
#define SRT_NX90_idpm_firmware_irq_raw_HS_EVENT15                 15
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT15            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_HS_EVENT15         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_IRQ_VECTOR                 0x00ff0000
#define SRT_NX90_idpm_firmware_irq_raw_IRQ_VECTOR                 16
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_IRQ_VECTOR            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_IRQ_VECTOR         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_res_TMR_ro                 0x02000000
#define SRT_NX90_idpm_firmware_irq_raw_res_TMR_ro                 25
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_TMR_ro            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_TMR_ro         0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_SYS_STA                    0x04000000
#define SRT_NX90_idpm_firmware_irq_raw_SYS_STA                    26
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_SYS_STA               0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_SYS_STA            0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro         0x10000000
#define SRT_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro         28
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro    0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_RDY_TIMEOUT_ro 0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro            0x20000000
#define SRT_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro            29
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro       0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_WDG_NETX_ro    0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro             0x40000000
#define SRT_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro             30
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro        0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_res_MEM_LCK_ro     0x00000000
#define MSK_NX90_idpm_firmware_irq_raw_INT_REQ                    0x80000000
#define SRT_NX90_idpm_firmware_irq_raw_INT_REQ                    31
#define DFLT_VAL_NX90_idpm_firmware_irq_raw_INT_REQ               0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_raw_INT_REQ            0x00000000

/* all used bits of 'NX90_idpm_firmware_irq_raw': */
#define MSK_USED_BITS_NX90_idpm_firmware_irq_raw 0xf6ffffff

/* --------------------------------------------------------------------- */
/* Register idpm_firmware_irq_mask */
/* => DPM Handshake Interrupt Enable Register. */
/*    Only netx50 compatible 'dpm_firmware_irq' registers are related to settings of this register. */
/*     */
/*    Note: This register is compatible to netx50 DPM_HOST_INT_EN0 register, however some unused */
/*       IRQs have been removed. */
/*     */
/*    Note: HS_EVENT-bits are not read-only. This is netX50 compliant. */
/*       Recent netX50 Documentation marks HS_EVENT-bits as read-only. This is an dokumentation error. */
/*       For netX50 compatibility, these bits can also be controlled from netX-side in HANDSHAKE_CTRL address area. */
/*     */
/*    Note: The 2nd firmware IRQ register set (dpm_firmware_irq_mask2, DPM_HOST_INT_EN2, dpm_firmware_irq_raw2, DPM_HOST_INT_STAT2) */
/*       are obsolete since netx4000. Some functions moved to the main DPM IRQ register set (view dpm_irq_raw). */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_firmware_irq_mask      0x000000F0
#define Adr_NX90_idpm_com_idpm_firmware_irq_mask 0xFF001BF0
#define Adr_NX90_idpm_firmware_irq_mask          0xFF001BF0
#define DFLT_VAL_NX90_idpm_firmware_irq_mask     0x00000000

#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT0                  0x00000001
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT0                  0
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT0             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT0          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT1                  0x00000002
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT1                  1
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT1             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT1          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT2                  0x00000004
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT2                  2
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT2             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT2          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT3                  0x00000008
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT3                  3
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT3             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT3          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT4                  0x00000010
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT4                  4
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT4             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT4          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT5                  0x00000020
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT5                  5
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT5             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT5          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT6                  0x00000040
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT6                  6
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT6             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT6          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT7                  0x00000080
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT7                  7
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT7             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT7          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT8                  0x00000100
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT8                  8
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT8             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT8          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT9                  0x00000200
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT9                  9
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT9             0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT9          0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT10                 0x00000400
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT10                 10
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT10            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT10         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT11                 0x00000800
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT11                 11
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT11            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT11         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT12                 0x00001000
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT12                 12
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT12            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT12         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT13                 0x00002000
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT13                 13
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT13            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT13         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT14                 0x00004000
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT14                 14
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT14            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT14         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_HS_EVENT15                 0x00008000
#define SRT_NX90_idpm_firmware_irq_mask_HS_EVENT15                 15
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT15            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_HS_EVENT15         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_res_TMR_ro                 0x02000000
#define SRT_NX90_idpm_firmware_irq_mask_res_TMR_ro                 25
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_TMR_ro            0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_TMR_ro         0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_SYS_STA                    0x04000000
#define SRT_NX90_idpm_firmware_irq_mask_SYS_STA                    26
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_SYS_STA               0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_SYS_STA            0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro         0x10000000
#define SRT_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro         28
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro    0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_RDY_TIMEOUT_ro 0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro            0x20000000
#define SRT_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro            29
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro       0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_WDG_NETX_ro    0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro             0x40000000
#define SRT_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro             30
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro        0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_res_MEM_LCK_ro     0x00000000
#define MSK_NX90_idpm_firmware_irq_mask_INT_EN                     0x80000000
#define SRT_NX90_idpm_firmware_irq_mask_INT_EN                     31
#define DFLT_VAL_NX90_idpm_firmware_irq_mask_INT_EN                0x00000000
#define DFLT_BF_VAL_NX90_idpm_firmware_irq_mask_INT_EN             0x00000000

/* all used bits of 'NX90_idpm_firmware_irq_mask': */
#define MSK_USED_BITS_NX90_idpm_firmware_irq_mask 0xf600ffff

/* --------------------------------------------------------------------- */
/* Register idpm_netx_version */
/* => DPM netX Version Register. */
/*    This register is mirrored form asic_ctrl register area and can be set during netX booting phase by netX firmware. */
/*    This register is not valid if unlocked bit is not set in dpm_status register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_idpm_netx_version      0x000000FC
#define Adr_NX90_idpm_com_idpm_netx_version 0xFF001BFC
#define Adr_NX90_idpm_netx_version          0xFF001BFC

#define MSK_NX90_idpm_netx_version_netx_version 0xffffffff
#define SRT_NX90_idpm_netx_version_netx_version 0

/* all used bits of 'NX90_idpm_netx_version': */
#define MSK_USED_BITS_NX90_idpm_netx_version 0xffffffff


/* ===================================================================== */

/* Area of crypt */

/* ===================================================================== */

#define Addr_NX90_crypt 0xFF080000

/* ===================================================================== */

/* Area of hash */

/* ===================================================================== */

#define Addr_NX90_hash 0xFF080000

/* --------------------------------------------------------------------- */
/* Register hash_din */
/* => Hash FIFO input: */
/*    Unlike all other registers, this address can be written with DWord(32 Bit), Word(16 Bit) or Byte acccss. */
/*    The FIFO controller will automatically collect data and start HASH-calculation, */
/*    if enough data (complete DWords) are collected. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_din  0x00000000
#define Adr_NX90_hash_hash_din 0xFF080000
#define Adr_NX90_hash_din      0xFF080000
#define DFLT_VAL_NX90_hash_din 0x00000000

#define MSK_NX90_hash_din_val         0xffffffff
#define SRT_NX90_hash_din_val         0
#define DFLT_VAL_NX90_hash_din_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_din_val 0x00000000

/* all used bits of 'NX90_hash_din': */
#define MSK_USED_BITS_NX90_hash_din 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_cfg */
/* => Hash config register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_cfg  0x00000004
#define Adr_NX90_hash_hash_cfg 0xFF080004
#define Adr_NX90_hash_cfg      0xFF080004
#define DFLT_VAL_NX90_hash_cfg 0x00000020

#define MSK_NX90_hash_cfg_mode                   0x00000007
#define SRT_NX90_hash_cfg_mode                   0
#define DFLT_VAL_NX90_hash_cfg_mode              0x00000000
#define DFLT_BF_VAL_NX90_hash_cfg_mode           0x00000000
#define MSK_NX90_hash_cfg_reset                  0x00000008
#define SRT_NX90_hash_cfg_reset                  3
#define DFLT_VAL_NX90_hash_cfg_reset             0x00000000
#define DFLT_BF_VAL_NX90_hash_cfg_reset          0x00000000
#define MSK_NX90_hash_cfg_dma_en                 0x00000010
#define SRT_NX90_hash_cfg_dma_en                 4
#define DFLT_VAL_NX90_hash_cfg_dma_en            0x00000000
#define DFLT_BF_VAL_NX90_hash_cfg_dma_en         0x00000000
#define MSK_NX90_hash_cfg_dma_burst_only         0x00000020
#define SRT_NX90_hash_cfg_dma_burst_only         5
#define DFLT_VAL_NX90_hash_cfg_dma_burst_only    0x00000020
#define DFLT_BF_VAL_NX90_hash_cfg_dma_burst_only 0x00000001

/* all used bits of 'NX90_hash_cfg': */
#define MSK_USED_BITS_NX90_hash_cfg 0x0000003f

/* --------------------------------------------------------------------- */
/* Register hash_stat */
/* => Hash status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_stat  0x00000008
#define Adr_NX90_hash_hash_stat 0xFF080008
#define Adr_NX90_hash_stat      0xFF080008

#define MSK_NX90_hash_stat_fifo_fill 0x000001ff
#define SRT_NX90_hash_stat_fifo_fill 0

/* all used bits of 'NX90_hash_stat': */
#define MSK_USED_BITS_NX90_hash_stat 0x000001ff

/* --------------------------------------------------------------------- */
/* Register hash_debug_info */
/* => Hash info register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_debug_info  0x0000000C
#define Adr_NX90_hash_hash_debug_info 0xFF08000C
#define Adr_NX90_hash_debug_info      0xFF08000C

#define MSK_NX90_hash_debug_info_sha_round 0x0000007f
#define SRT_NX90_hash_debug_info_sha_round 0

/* all used bits of 'NX90_hash_debug_info': */
#define MSK_USED_BITS_NX90_hash_debug_info 0x0000007f

/* --------------------------------------------------------------------- */
/* Register hash_irq_raw */
/* => Hash raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_raw  0x00000010
#define Adr_NX90_hash_hash_irq_raw 0xFF080010
#define Adr_NX90_hash_irq_raw      0xFF080010
#define DFLT_VAL_NX90_hash_irq_raw 0x00000000

#define MSK_NX90_hash_irq_raw_hash_ready            0x00000001
#define SRT_NX90_hash_irq_raw_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_raw_hash_ready       0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_raw_hash_ready    0x00000000
#define MSK_NX90_hash_irq_raw_fifo_underrun         0x00000002
#define SRT_NX90_hash_irq_raw_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_raw_fifo_underrun    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_raw_fifo_underrun 0x00000000
#define MSK_NX90_hash_irq_raw_fifo_overflow         0x00000004
#define SRT_NX90_hash_irq_raw_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_raw_fifo_overflow    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_raw_fifo_overflow 0x00000000

/* all used bits of 'NX90_hash_irq_raw': */
#define MSK_USED_BITS_NX90_hash_irq_raw 0x00000007

/* --------------------------------------------------------------------- */
/* Register hash_irq_masked */
/* => Hash masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_masked  0x00000014
#define Adr_NX90_hash_hash_irq_masked 0xFF080014
#define Adr_NX90_hash_irq_masked      0xFF080014

#define MSK_NX90_hash_irq_masked_hash_ready    0x00000001
#define SRT_NX90_hash_irq_masked_hash_ready    0
#define MSK_NX90_hash_irq_masked_fifo_underrun 0x00000002
#define SRT_NX90_hash_irq_masked_fifo_underrun 1
#define MSK_NX90_hash_irq_masked_fifo_overflow 0x00000004
#define SRT_NX90_hash_irq_masked_fifo_overflow 2

/* all used bits of 'NX90_hash_irq_masked': */
#define MSK_USED_BITS_NX90_hash_irq_masked 0x00000007

/* --------------------------------------------------------------------- */
/* Register hash_irq_msk_set */
/* => Hash IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to crypt_hash_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_msk_set  0x00000018
#define Adr_NX90_hash_hash_irq_msk_set 0xFF080018
#define Adr_NX90_hash_irq_msk_set      0xFF080018
#define DFLT_VAL_NX90_hash_irq_msk_set 0x00000000

#define MSK_NX90_hash_irq_msk_set_hash_ready            0x00000001
#define SRT_NX90_hash_irq_msk_set_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_msk_set_hash_ready       0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_hash_ready    0x00000000
#define MSK_NX90_hash_irq_msk_set_fifo_underrun         0x00000002
#define SRT_NX90_hash_irq_msk_set_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_msk_set_fifo_underrun    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_fifo_underrun 0x00000000
#define MSK_NX90_hash_irq_msk_set_fifo_overflow         0x00000004
#define SRT_NX90_hash_irq_msk_set_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_msk_set_fifo_overflow    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_set_fifo_overflow 0x00000000

/* all used bits of 'NX90_hash_irq_msk_set': */
#define MSK_USED_BITS_NX90_hash_irq_msk_set 0x00000007

/* --------------------------------------------------------------------- */
/* Register hash_irq_msk_reset */
/* => Hash IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_irq_msk_reset  0x0000001C
#define Adr_NX90_hash_hash_irq_msk_reset 0xFF08001C
#define Adr_NX90_hash_irq_msk_reset      0xFF08001C
#define DFLT_VAL_NX90_hash_irq_msk_reset 0x00000000

#define MSK_NX90_hash_irq_msk_reset_hash_ready            0x00000001
#define SRT_NX90_hash_irq_msk_reset_hash_ready            0
#define DFLT_VAL_NX90_hash_irq_msk_reset_hash_ready       0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_hash_ready    0x00000000
#define MSK_NX90_hash_irq_msk_reset_fifo_underrun         0x00000002
#define SRT_NX90_hash_irq_msk_reset_fifo_underrun         1
#define DFLT_VAL_NX90_hash_irq_msk_reset_fifo_underrun    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_fifo_underrun 0x00000000
#define MSK_NX90_hash_irq_msk_reset_fifo_overflow         0x00000004
#define SRT_NX90_hash_irq_msk_reset_fifo_overflow         2
#define DFLT_VAL_NX90_hash_irq_msk_reset_fifo_overflow    0x00000000
#define DFLT_BF_VAL_NX90_hash_irq_msk_reset_fifo_overflow 0x00000000

/* all used bits of 'NX90_hash_irq_msk_reset': */
#define MSK_USED_BITS_NX90_hash_irq_msk_reset 0x00000007

/* --------------------------------------------------------------------- */
/* Register hash_dout0 */
/* => Hash value0 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout0  0x00000020
#define Adr_NX90_hash_hash_dout0 0xFF080020
#define Adr_NX90_hash_dout0      0xFF080020

#define MSK_NX90_hash_dout0_val 0xffffffff
#define SRT_NX90_hash_dout0_val 0

/* all used bits of 'NX90_hash_dout0': */
#define MSK_USED_BITS_NX90_hash_dout0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout1 */
/* => Hash value1 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout1  0x00000024
#define Adr_NX90_hash_hash_dout1 0xFF080024
#define Adr_NX90_hash_dout1      0xFF080024

#define MSK_NX90_hash_dout1_val 0xffffffff
#define SRT_NX90_hash_dout1_val 0

/* all used bits of 'NX90_hash_dout1': */
#define MSK_USED_BITS_NX90_hash_dout1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout2 */
/* => Hash value2 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout2  0x00000028
#define Adr_NX90_hash_hash_dout2 0xFF080028
#define Adr_NX90_hash_dout2      0xFF080028

#define MSK_NX90_hash_dout2_val 0xffffffff
#define SRT_NX90_hash_dout2_val 0

/* all used bits of 'NX90_hash_dout2': */
#define MSK_USED_BITS_NX90_hash_dout2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout3 */
/* => Hash value3 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout3  0x0000002C
#define Adr_NX90_hash_hash_dout3 0xFF08002C
#define Adr_NX90_hash_dout3      0xFF08002C

#define MSK_NX90_hash_dout3_val 0xffffffff
#define SRT_NX90_hash_dout3_val 0

/* all used bits of 'NX90_hash_dout3': */
#define MSK_USED_BITS_NX90_hash_dout3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout4 */
/* => Hash value4 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout4  0x00000030
#define Adr_NX90_hash_hash_dout4 0xFF080030
#define Adr_NX90_hash_dout4      0xFF080030

#define MSK_NX90_hash_dout4_val 0xffffffff
#define SRT_NX90_hash_dout4_val 0

/* all used bits of 'NX90_hash_dout4': */
#define MSK_USED_BITS_NX90_hash_dout4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout5 */
/* => Hash value5 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout5  0x00000034
#define Adr_NX90_hash_hash_dout5 0xFF080034
#define Adr_NX90_hash_dout5      0xFF080034

#define MSK_NX90_hash_dout5_val 0xffffffff
#define SRT_NX90_hash_dout5_val 0

/* all used bits of 'NX90_hash_dout5': */
#define MSK_USED_BITS_NX90_hash_dout5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout6 */
/* => Hash value6 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout6  0x00000038
#define Adr_NX90_hash_hash_dout6 0xFF080038
#define Adr_NX90_hash_dout6      0xFF080038

#define MSK_NX90_hash_dout6_val 0xffffffff
#define SRT_NX90_hash_dout6_val 0

/* all used bits of 'NX90_hash_dout6': */
#define MSK_USED_BITS_NX90_hash_dout6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout7 */
/* => Hash value7 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout7  0x0000003C
#define Adr_NX90_hash_hash_dout7 0xFF08003C
#define Adr_NX90_hash_dout7      0xFF08003C

#define MSK_NX90_hash_dout7_val 0xffffffff
#define SRT_NX90_hash_dout7_val 0

/* all used bits of 'NX90_hash_dout7': */
#define MSK_USED_BITS_NX90_hash_dout7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout8 */
/* => Hash value8 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout8  0x00000040
#define Adr_NX90_hash_hash_dout8 0xFF080040
#define Adr_NX90_hash_dout8      0xFF080040

#define MSK_NX90_hash_dout8_val 0xffffffff
#define SRT_NX90_hash_dout8_val 0

/* all used bits of 'NX90_hash_dout8': */
#define MSK_USED_BITS_NX90_hash_dout8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout9 */
/* => Hash value9 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout9  0x00000044
#define Adr_NX90_hash_hash_dout9 0xFF080044
#define Adr_NX90_hash_dout9      0xFF080044

#define MSK_NX90_hash_dout9_val 0xffffffff
#define SRT_NX90_hash_dout9_val 0

/* all used bits of 'NX90_hash_dout9': */
#define MSK_USED_BITS_NX90_hash_dout9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout10 */
/* => Hash value10 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout10  0x00000048
#define Adr_NX90_hash_hash_dout10 0xFF080048
#define Adr_NX90_hash_dout10      0xFF080048

#define MSK_NX90_hash_dout10_val 0xffffffff
#define SRT_NX90_hash_dout10_val 0

/* all used bits of 'NX90_hash_dout10': */
#define MSK_USED_BITS_NX90_hash_dout10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout11 */
/* => Hash value11 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout11  0x0000004C
#define Adr_NX90_hash_hash_dout11 0xFF08004C
#define Adr_NX90_hash_dout11      0xFF08004C

#define MSK_NX90_hash_dout11_val 0xffffffff
#define SRT_NX90_hash_dout11_val 0

/* all used bits of 'NX90_hash_dout11': */
#define MSK_USED_BITS_NX90_hash_dout11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout12 */
/* => Hash value12 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout12  0x00000050
#define Adr_NX90_hash_hash_dout12 0xFF080050
#define Adr_NX90_hash_dout12      0xFF080050

#define MSK_NX90_hash_dout12_val 0xffffffff
#define SRT_NX90_hash_dout12_val 0

/* all used bits of 'NX90_hash_dout12': */
#define MSK_USED_BITS_NX90_hash_dout12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout13 */
/* => Hash value13 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout13  0x00000054
#define Adr_NX90_hash_hash_dout13 0xFF080054
#define Adr_NX90_hash_dout13      0xFF080054

#define MSK_NX90_hash_dout13_val 0xffffffff
#define SRT_NX90_hash_dout13_val 0

/* all used bits of 'NX90_hash_dout13': */
#define MSK_USED_BITS_NX90_hash_dout13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout14 */
/* => Hash value14 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout14  0x00000058
#define Adr_NX90_hash_hash_dout14 0xFF080058
#define Adr_NX90_hash_dout14      0xFF080058

#define MSK_NX90_hash_dout14_val 0xffffffff
#define SRT_NX90_hash_dout14_val 0

/* all used bits of 'NX90_hash_dout14': */
#define MSK_USED_BITS_NX90_hash_dout14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_dout15 */
/* => Hash value15 register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_dout15  0x0000005C
#define Adr_NX90_hash_hash_dout15 0xFF08005C
#define Adr_NX90_hash_dout15      0xFF08005C

#define MSK_NX90_hash_dout15_val 0xffffffff
#define SRT_NX90_hash_dout15_val 0

/* all used bits of 'NX90_hash_dout15': */
#define MSK_USED_BITS_NX90_hash_dout15 0xffffffff


/* ===================================================================== */

/* Area of hash_ctx_sha */

/* ===================================================================== */

#define Addr_NX90_hash_ctx_sha 0xFF080100

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w0_0 */
/* => SHA context register w0 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w0_0          0x00000000
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w0_0 0xFF080100
#define Adr_NX90_hash_ctx_sha_w0_0              0xFF080100
#define DFLT_VAL_NX90_hash_ctx_sha_w0_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w0_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w0_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w0_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w0_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w0_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w0_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w0_1 */
/* => SHA context register w0 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w0_1          0x00000004
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w0_1 0xFF080104
#define Adr_NX90_hash_ctx_sha_w0_1              0xFF080104
#define DFLT_VAL_NX90_hash_ctx_sha_w0_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w0_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w0_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w0_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w0_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w0_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w0_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w1_0 */
/* => SHA context register w1 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w1_0          0x00000008
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w1_0 0xFF080108
#define Adr_NX90_hash_ctx_sha_w1_0              0xFF080108
#define DFLT_VAL_NX90_hash_ctx_sha_w1_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w1_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w1_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w1_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w1_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w1_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w1_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w1_1 */
/* => SHA context register w1 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w1_1          0x0000000C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w1_1 0xFF08010C
#define Adr_NX90_hash_ctx_sha_w1_1              0xFF08010C
#define DFLT_VAL_NX90_hash_ctx_sha_w1_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w1_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w1_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w1_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w1_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w1_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w1_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w2_0 */
/* => SHA context register w2 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w2_0          0x00000010
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w2_0 0xFF080110
#define Adr_NX90_hash_ctx_sha_w2_0              0xFF080110
#define DFLT_VAL_NX90_hash_ctx_sha_w2_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w2_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w2_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w2_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w2_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w2_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w2_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w2_1 */
/* => SHA context register w2 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w2_1          0x00000014
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w2_1 0xFF080114
#define Adr_NX90_hash_ctx_sha_w2_1              0xFF080114
#define DFLT_VAL_NX90_hash_ctx_sha_w2_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w2_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w2_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w2_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w2_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w2_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w2_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w3_0 */
/* => SHA context register w3 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w3_0          0x00000018
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w3_0 0xFF080118
#define Adr_NX90_hash_ctx_sha_w3_0              0xFF080118
#define DFLT_VAL_NX90_hash_ctx_sha_w3_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w3_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w3_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w3_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w3_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w3_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w3_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w3_1 */
/* => SHA context register w3 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w3_1          0x0000001C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w3_1 0xFF08011C
#define Adr_NX90_hash_ctx_sha_w3_1              0xFF08011C
#define DFLT_VAL_NX90_hash_ctx_sha_w3_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w3_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w3_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w3_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w3_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w3_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w3_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w4_0 */
/* => SHA context register w4 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w4_0          0x00000020
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w4_0 0xFF080120
#define Adr_NX90_hash_ctx_sha_w4_0              0xFF080120
#define DFLT_VAL_NX90_hash_ctx_sha_w4_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w4_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w4_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w4_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w4_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w4_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w4_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w4_1 */
/* => SHA context register w4 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w4_1          0x00000024
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w4_1 0xFF080124
#define Adr_NX90_hash_ctx_sha_w4_1              0xFF080124
#define DFLT_VAL_NX90_hash_ctx_sha_w4_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w4_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w4_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w4_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w4_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w4_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w4_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w5_0 */
/* => SHA context register w5 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w5_0          0x00000028
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w5_0 0xFF080128
#define Adr_NX90_hash_ctx_sha_w5_0              0xFF080128
#define DFLT_VAL_NX90_hash_ctx_sha_w5_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w5_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w5_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w5_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w5_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w5_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w5_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w5_1 */
/* => SHA context register w5 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w5_1          0x0000002C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w5_1 0xFF08012C
#define Adr_NX90_hash_ctx_sha_w5_1              0xFF08012C
#define DFLT_VAL_NX90_hash_ctx_sha_w5_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w5_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w5_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w5_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w5_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w5_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w5_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w6_0 */
/* => SHA context register w6 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w6_0          0x00000030
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w6_0 0xFF080130
#define Adr_NX90_hash_ctx_sha_w6_0              0xFF080130
#define DFLT_VAL_NX90_hash_ctx_sha_w6_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w6_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w6_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w6_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w6_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w6_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w6_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w6_1 */
/* => SHA context register w6 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w6_1          0x00000034
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w6_1 0xFF080134
#define Adr_NX90_hash_ctx_sha_w6_1              0xFF080134
#define DFLT_VAL_NX90_hash_ctx_sha_w6_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w6_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w6_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w6_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w6_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w6_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w6_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w7_0 */
/* => SHA context register w7 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w7_0          0x00000038
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w7_0 0xFF080138
#define Adr_NX90_hash_ctx_sha_w7_0              0xFF080138
#define DFLT_VAL_NX90_hash_ctx_sha_w7_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w7_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w7_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w7_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w7_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w7_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w7_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w7_1 */
/* => SHA context register w7 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w7_1          0x0000003C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w7_1 0xFF08013C
#define Adr_NX90_hash_ctx_sha_w7_1              0xFF08013C
#define DFLT_VAL_NX90_hash_ctx_sha_w7_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w7_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w7_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w7_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w7_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w7_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w7_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w8_0 */
/* => SHA context register w8 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w8_0          0x00000040
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w8_0 0xFF080140
#define Adr_NX90_hash_ctx_sha_w8_0              0xFF080140
#define DFLT_VAL_NX90_hash_ctx_sha_w8_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w8_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w8_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w8_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w8_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w8_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w8_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w8_1 */
/* => SHA context register w8 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w8_1          0x00000044
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w8_1 0xFF080144
#define Adr_NX90_hash_ctx_sha_w8_1              0xFF080144
#define DFLT_VAL_NX90_hash_ctx_sha_w8_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w8_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w8_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w8_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w8_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w8_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w8_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w9_0 */
/* => SHA context register w9 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w9_0          0x00000048
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w9_0 0xFF080148
#define Adr_NX90_hash_ctx_sha_w9_0              0xFF080148
#define DFLT_VAL_NX90_hash_ctx_sha_w9_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w9_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w9_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w9_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w9_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w9_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w9_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w9_1 */
/* => SHA context register w9 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w9_1          0x0000004C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w9_1 0xFF08014C
#define Adr_NX90_hash_ctx_sha_w9_1              0xFF08014C
#define DFLT_VAL_NX90_hash_ctx_sha_w9_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w9_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w9_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w9_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w9_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w9_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w9_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w10_0 */
/* => SHA context register w10 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w10_0          0x00000050
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w10_0 0xFF080150
#define Adr_NX90_hash_ctx_sha_w10_0              0xFF080150
#define DFLT_VAL_NX90_hash_ctx_sha_w10_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w10_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w10_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w10_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w10_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w10_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w10_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w10_1 */
/* => SHA context register w10 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w10_1          0x00000054
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w10_1 0xFF080154
#define Adr_NX90_hash_ctx_sha_w10_1              0xFF080154
#define DFLT_VAL_NX90_hash_ctx_sha_w10_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w10_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w10_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w10_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w10_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w10_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w10_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w11_0 */
/* => SHA context register w11 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w11_0          0x00000058
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w11_0 0xFF080158
#define Adr_NX90_hash_ctx_sha_w11_0              0xFF080158
#define DFLT_VAL_NX90_hash_ctx_sha_w11_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w11_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w11_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w11_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w11_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w11_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w11_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w11_1 */
/* => SHA context register w11 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w11_1          0x0000005C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w11_1 0xFF08015C
#define Adr_NX90_hash_ctx_sha_w11_1              0xFF08015C
#define DFLT_VAL_NX90_hash_ctx_sha_w11_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w11_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w11_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w11_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w11_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w11_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w11_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w12_0 */
/* => SHA context register w12 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w12_0          0x00000060
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w12_0 0xFF080160
#define Adr_NX90_hash_ctx_sha_w12_0              0xFF080160
#define DFLT_VAL_NX90_hash_ctx_sha_w12_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w12_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w12_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w12_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w12_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w12_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w12_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w12_1 */
/* => SHA context register w12 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w12_1          0x00000064
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w12_1 0xFF080164
#define Adr_NX90_hash_ctx_sha_w12_1              0xFF080164
#define DFLT_VAL_NX90_hash_ctx_sha_w12_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w12_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w12_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w12_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w12_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w12_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w12_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w13_0 */
/* => SHA context register w13 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w13_0          0x00000068
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w13_0 0xFF080168
#define Adr_NX90_hash_ctx_sha_w13_0              0xFF080168
#define DFLT_VAL_NX90_hash_ctx_sha_w13_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w13_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w13_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w13_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w13_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w13_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w13_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w13_1 */
/* => SHA context register w13 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w13_1          0x0000006C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w13_1 0xFF08016C
#define Adr_NX90_hash_ctx_sha_w13_1              0xFF08016C
#define DFLT_VAL_NX90_hash_ctx_sha_w13_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w13_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w13_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w13_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w13_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w13_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w13_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w14_0 */
/* => SHA context register w14 part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w14_0          0x00000070
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w14_0 0xFF080170
#define Adr_NX90_hash_ctx_sha_w14_0              0xFF080170
#define DFLT_VAL_NX90_hash_ctx_sha_w14_0         0x00000000

#define MSK_NX90_hash_ctx_sha_w14_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w14_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w14_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w14_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w14_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w14_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_w14_1 */
/* => SHA context register w14 part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_w14_1          0x00000074
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_w14_1 0xFF080174
#define Adr_NX90_hash_ctx_sha_w14_1              0xFF080174
#define DFLT_VAL_NX90_hash_ctx_sha_w14_1         0x00000000

#define MSK_NX90_hash_ctx_sha_w14_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_w14_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_w14_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_w14_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_w14_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_w14_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_wt_0 */
/* => SHA context register wt part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_wt_0          0x00000078
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_wt_0 0xFF080178
#define Adr_NX90_hash_ctx_sha_wt_0              0xFF080178
#define DFLT_VAL_NX90_hash_ctx_sha_wt_0         0x00000000

#define MSK_NX90_hash_ctx_sha_wt_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_wt_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_wt_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_wt_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_wt_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_wt_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_wt_1 */
/* => SHA context register wt part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_wt_1          0x0000007C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_wt_1 0xFF08017C
#define Adr_NX90_hash_ctx_sha_wt_1              0xFF08017C
#define DFLT_VAL_NX90_hash_ctx_sha_wt_1         0x00000000

#define MSK_NX90_hash_ctx_sha_wt_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_wt_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_wt_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_wt_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_wt_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_wt_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_a_0 */
/* => SHA context register a part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_a_0          0x00000080
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_a_0 0xFF080180
#define Adr_NX90_hash_ctx_sha_a_0              0xFF080180
#define DFLT_VAL_NX90_hash_ctx_sha_a_0         0x00000000

#define MSK_NX90_hash_ctx_sha_a_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_a_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_a_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_a_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_a_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_a_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_a_1 */
/* => SHA context register a part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_a_1          0x00000084
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_a_1 0xFF080184
#define Adr_NX90_hash_ctx_sha_a_1              0xFF080184
#define DFLT_VAL_NX90_hash_ctx_sha_a_1         0x00000000

#define MSK_NX90_hash_ctx_sha_a_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_a_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_a_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_a_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_a_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_a_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_b_0 */
/* => SHA context register b part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_b_0          0x00000088
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_b_0 0xFF080188
#define Adr_NX90_hash_ctx_sha_b_0              0xFF080188
#define DFLT_VAL_NX90_hash_ctx_sha_b_0         0x00000000

#define MSK_NX90_hash_ctx_sha_b_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_b_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_b_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_b_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_b_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_b_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_b_1 */
/* => SHA context register b part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_b_1          0x0000008C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_b_1 0xFF08018C
#define Adr_NX90_hash_ctx_sha_b_1              0xFF08018C
#define DFLT_VAL_NX90_hash_ctx_sha_b_1         0x00000000

#define MSK_NX90_hash_ctx_sha_b_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_b_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_b_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_b_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_b_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_b_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_c_0 */
/* => SHA context register c part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_c_0          0x00000090
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_c_0 0xFF080190
#define Adr_NX90_hash_ctx_sha_c_0              0xFF080190
#define DFLT_VAL_NX90_hash_ctx_sha_c_0         0x00000000

#define MSK_NX90_hash_ctx_sha_c_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_c_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_c_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_c_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_c_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_c_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_c_1 */
/* => SHA context register c part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_c_1          0x00000094
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_c_1 0xFF080194
#define Adr_NX90_hash_ctx_sha_c_1              0xFF080194
#define DFLT_VAL_NX90_hash_ctx_sha_c_1         0x00000000

#define MSK_NX90_hash_ctx_sha_c_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_c_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_c_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_c_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_c_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_c_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_d_0 */
/* => SHA context register d part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_d_0          0x00000098
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_d_0 0xFF080198
#define Adr_NX90_hash_ctx_sha_d_0              0xFF080198
#define DFLT_VAL_NX90_hash_ctx_sha_d_0         0x00000000

#define MSK_NX90_hash_ctx_sha_d_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_d_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_d_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_d_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_d_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_d_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_d_1 */
/* => SHA context register d part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_d_1          0x0000009C
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_d_1 0xFF08019C
#define Adr_NX90_hash_ctx_sha_d_1              0xFF08019C
#define DFLT_VAL_NX90_hash_ctx_sha_d_1         0x00000000

#define MSK_NX90_hash_ctx_sha_d_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_d_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_d_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_d_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_d_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_d_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_e_0 */
/* => SHA context register e part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_e_0          0x000000A0
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_e_0 0xFF0801A0
#define Adr_NX90_hash_ctx_sha_e_0              0xFF0801A0
#define DFLT_VAL_NX90_hash_ctx_sha_e_0         0x00000000

#define MSK_NX90_hash_ctx_sha_e_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_e_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_e_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_e_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_e_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_e_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_e_1 */
/* => SHA context register e part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_e_1          0x000000A4
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_e_1 0xFF0801A4
#define Adr_NX90_hash_ctx_sha_e_1              0xFF0801A4
#define DFLT_VAL_NX90_hash_ctx_sha_e_1         0x00000000

#define MSK_NX90_hash_ctx_sha_e_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_e_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_e_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_e_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_e_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_e_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_f_0 */
/* => SHA context register f part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_f_0          0x000000A8
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_f_0 0xFF0801A8
#define Adr_NX90_hash_ctx_sha_f_0              0xFF0801A8
#define DFLT_VAL_NX90_hash_ctx_sha_f_0         0x00000000

#define MSK_NX90_hash_ctx_sha_f_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_f_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_f_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_f_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_f_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_f_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_f_1 */
/* => SHA context register f part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_f_1          0x000000AC
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_f_1 0xFF0801AC
#define Adr_NX90_hash_ctx_sha_f_1              0xFF0801AC
#define DFLT_VAL_NX90_hash_ctx_sha_f_1         0x00000000

#define MSK_NX90_hash_ctx_sha_f_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_f_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_f_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_f_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_f_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_f_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_g_0 */
/* => SHA context register g part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_g_0          0x000000B0
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_g_0 0xFF0801B0
#define Adr_NX90_hash_ctx_sha_g_0              0xFF0801B0
#define DFLT_VAL_NX90_hash_ctx_sha_g_0         0x00000000

#define MSK_NX90_hash_ctx_sha_g_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_g_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_g_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_g_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_g_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_g_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_g_1 */
/* => SHA context register g part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_g_1          0x000000B4
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_g_1 0xFF0801B4
#define Adr_NX90_hash_ctx_sha_g_1              0xFF0801B4
#define DFLT_VAL_NX90_hash_ctx_sha_g_1         0x00000000

#define MSK_NX90_hash_ctx_sha_g_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_g_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_g_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_g_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_g_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_g_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_h_0 */
/* => SHA context register h part 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_h_0          0x000000B8
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_h_0 0xFF0801B8
#define Adr_NX90_hash_ctx_sha_h_0              0xFF0801B8
#define DFLT_VAL_NX90_hash_ctx_sha_h_0         0x00000000

#define MSK_NX90_hash_ctx_sha_h_0_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_h_0_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_h_0_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_h_0_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_h_0': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_h_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_sha_h_1 */
/* => SHA context register h part 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_sha_h_1          0x000000BC
#define Adr_NX90_hash_ctx_sha_hash_ctx_sha_h_1 0xFF0801BC
#define Adr_NX90_hash_ctx_sha_h_1              0xFF0801BC
#define DFLT_VAL_NX90_hash_ctx_sha_h_1         0x00000000

#define MSK_NX90_hash_ctx_sha_h_1_val         0xffffffff
#define SRT_NX90_hash_ctx_sha_h_1_val         0
#define DFLT_VAL_NX90_hash_ctx_sha_h_1_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_sha_h_1_val 0x00000000

/* all used bits of 'NX90_hash_ctx_sha_h_1': */
#define MSK_USED_BITS_NX90_hash_ctx_sha_h_1 0xffffffff


/* ===================================================================== */

/* Area of hash_ctx_md5 */

/* ===================================================================== */

#define Addr_NX90_hash_ctx_md5 0xFF080200

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_a */
/* => MD5 context register a */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_a          0x00000000
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_a 0xFF080200
#define Adr_NX90_hash_ctx_md5_a              0xFF080200
#define DFLT_VAL_NX90_hash_ctx_md5_a         0x00000000

#define MSK_NX90_hash_ctx_md5_a_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_a_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_a_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_a_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_a': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_a 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_b */
/* => MD5 context register b */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_b          0x00000004
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_b 0xFF080204
#define Adr_NX90_hash_ctx_md5_b              0xFF080204
#define DFLT_VAL_NX90_hash_ctx_md5_b         0x00000000

#define MSK_NX90_hash_ctx_md5_b_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_b_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_b_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_b_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_b': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_b 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_c */
/* => MD5 context register c */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_c          0x00000008
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_c 0xFF080208
#define Adr_NX90_hash_ctx_md5_c              0xFF080208
#define DFLT_VAL_NX90_hash_ctx_md5_c         0x00000000

#define MSK_NX90_hash_ctx_md5_c_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_c_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_c_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_c_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_c': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_c 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_d */
/* => MD5 context register d */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_d          0x0000000C
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_d 0xFF08020C
#define Adr_NX90_hash_ctx_md5_d              0xFF08020C
#define DFLT_VAL_NX90_hash_ctx_md5_d         0x00000000

#define MSK_NX90_hash_ctx_md5_d_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_d_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_d_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_d_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_d': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_d 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_ar */
/* => MD5 context register ar */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_ar          0x00000010
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_ar 0xFF080210
#define Adr_NX90_hash_ctx_md5_ar              0xFF080210
#define DFLT_VAL_NX90_hash_ctx_md5_ar         0x00000000

#define MSK_NX90_hash_ctx_md5_ar_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_ar_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_ar_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_ar_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_ar': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_ar 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_br */
/* => MD5 context register br */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_br          0x00000014
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_br 0xFF080214
#define Adr_NX90_hash_ctx_md5_br              0xFF080214
#define DFLT_VAL_NX90_hash_ctx_md5_br         0x00000000

#define MSK_NX90_hash_ctx_md5_br_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_br_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_br_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_br_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_br': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_br 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_cr */
/* => MD5 context register cr */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_cr          0x00000018
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_cr 0xFF080218
#define Adr_NX90_hash_ctx_md5_cr              0xFF080218
#define DFLT_VAL_NX90_hash_ctx_md5_cr         0x00000000

#define MSK_NX90_hash_ctx_md5_cr_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_cr_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_cr_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_cr_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_cr': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_cr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hash_ctx_md5_dr */
/* => MD5 context register dr */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hash_ctx_md5_dr          0x0000001C
#define Adr_NX90_hash_ctx_md5_hash_ctx_md5_dr 0xFF08021C
#define Adr_NX90_hash_ctx_md5_dr              0xFF08021C
#define DFLT_VAL_NX90_hash_ctx_md5_dr         0x00000000

#define MSK_NX90_hash_ctx_md5_dr_val         0xffffffff
#define SRT_NX90_hash_ctx_md5_dr_val         0
#define DFLT_VAL_NX90_hash_ctx_md5_dr_val    0x00000000
#define DFLT_BF_VAL_NX90_hash_ctx_md5_dr_val 0x00000000

/* all used bits of 'NX90_hash_ctx_md5_dr': */
#define MSK_USED_BITS_NX90_hash_ctx_md5_dr 0xffffffff


/* ===================================================================== */

/* Area of aes */

/* ===================================================================== */

#define Addr_NX90_aes 0xFF080300

/* --------------------------------------------------------------------- */
/* Register aes_cfg */
/* => AES config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_cfg  0x00000000
#define Adr_NX90_aes_aes_cfg  0xFF080300
#define Adr_NX90_aes_cfg      0xFF080300
#define DFLT_VAL_NX90_aes_cfg 0x00148200

#define MSK_NX90_aes_cfg_enable                          0x00000001
#define SRT_NX90_aes_cfg_enable                          0
#define DFLT_VAL_NX90_aes_cfg_enable                     0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_enable                  0x00000000
#define MSK_NX90_aes_cfg_mode                            0x00000002
#define SRT_NX90_aes_cfg_mode                            1
#define DFLT_VAL_NX90_aes_cfg_mode                       0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_mode                    0x00000000
#define MSK_NX90_aes_cfg_key_len                         0x0000000c
#define SRT_NX90_aes_cfg_key_len                         2
#define DFLT_VAL_NX90_aes_cfg_key_len                    0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_key_len                 0x00000000
#define MSK_NX90_aes_cfg_key_exp_start                   0x00000010
#define SRT_NX90_aes_cfg_key_exp_start                   4
#define DFLT_VAL_NX90_aes_cfg_key_exp_start              0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_key_exp_start           0x00000000
#define MSK_NX90_aes_cfg_in_fifo_wm                      0x000007e0
#define SRT_NX90_aes_cfg_in_fifo_wm                      5
#define DFLT_VAL_NX90_aes_cfg_in_fifo_wm                 0x00000200
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_wm              0x00000010
#define MSK_NX90_aes_cfg_out_fifo_wm                     0x0001f800
#define SRT_NX90_aes_cfg_out_fifo_wm                     11
#define DFLT_VAL_NX90_aes_cfg_out_fifo_wm                0x00008000
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_wm             0x00000010
#define MSK_NX90_aes_cfg_in_fifo_dma_en                  0x00020000
#define SRT_NX90_aes_cfg_in_fifo_dma_en                  17
#define DFLT_VAL_NX90_aes_cfg_in_fifo_dma_en             0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_dma_en          0x00000000
#define MSK_NX90_aes_cfg_in_fifo_dma_burst_only          0x00040000
#define SRT_NX90_aes_cfg_in_fifo_dma_burst_only          18
#define DFLT_VAL_NX90_aes_cfg_in_fifo_dma_burst_only     0x00040000
#define DFLT_BF_VAL_NX90_aes_cfg_in_fifo_dma_burst_only  0x00000001
#define MSK_NX90_aes_cfg_out_fifo_dma_en                 0x00080000
#define SRT_NX90_aes_cfg_out_fifo_dma_en                 19
#define DFLT_VAL_NX90_aes_cfg_out_fifo_dma_en            0x00000000
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_dma_en         0x00000000
#define MSK_NX90_aes_cfg_out_fifo_dma_burst_only         0x00100000
#define SRT_NX90_aes_cfg_out_fifo_dma_burst_only         20
#define DFLT_VAL_NX90_aes_cfg_out_fifo_dma_burst_only    0x00100000
#define DFLT_BF_VAL_NX90_aes_cfg_out_fifo_dma_burst_only 0x00000001

/* all used bits of 'NX90_aes_cfg': */
#define MSK_USED_BITS_NX90_aes_cfg 0x001fffff

/* --------------------------------------------------------------------- */
/* Register aes_stat */
/* => AES status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_stat 0x00000004
#define Adr_NX90_aes_aes_stat 0xFF080304
#define Adr_NX90_aes_stat     0xFF080304

#define MSK_NX90_aes_stat_key_exp_ready      0x00000001
#define SRT_NX90_aes_stat_key_exp_ready      0
#define MSK_NX90_aes_stat_op_ready           0x00000002
#define SRT_NX90_aes_stat_op_ready           1
#define MSK_NX90_aes_stat_in_fifo_fill       0x000001fc
#define SRT_NX90_aes_stat_in_fifo_fill       2
#define MSK_NX90_aes_stat_in_fifo_empty      0x00000200
#define SRT_NX90_aes_stat_in_fifo_empty      9
#define MSK_NX90_aes_stat_in_fifo_not_empty  0x00000400
#define SRT_NX90_aes_stat_in_fifo_not_empty  10
#define MSK_NX90_aes_stat_in_fifo_full       0x00000800
#define SRT_NX90_aes_stat_in_fifo_full       11
#define MSK_NX90_aes_stat_in_fifo_not_full   0x00001000
#define SRT_NX90_aes_stat_in_fifo_not_full   12
#define MSK_NX90_aes_stat_in_fifo_underrun   0x00002000
#define SRT_NX90_aes_stat_in_fifo_underrun   13
#define MSK_NX90_aes_stat_in_fifo_overflow   0x00004000
#define SRT_NX90_aes_stat_in_fifo_overflow   14
#define MSK_NX90_aes_stat_out_fifo_fill      0x003f8000
#define SRT_NX90_aes_stat_out_fifo_fill      15
#define MSK_NX90_aes_stat_out_fifo_empty     0x00400000
#define SRT_NX90_aes_stat_out_fifo_empty     22
#define MSK_NX90_aes_stat_out_fifo_not_empty 0x00800000
#define SRT_NX90_aes_stat_out_fifo_not_empty 23
#define MSK_NX90_aes_stat_out_fifo_full      0x01000000
#define SRT_NX90_aes_stat_out_fifo_full      24
#define MSK_NX90_aes_stat_out_fifo_not_full  0x02000000
#define SRT_NX90_aes_stat_out_fifo_not_full  25
#define MSK_NX90_aes_stat_out_fifo_underrun  0x04000000
#define SRT_NX90_aes_stat_out_fifo_underrun  26
#define MSK_NX90_aes_stat_out_fifo_overflow  0x08000000
#define SRT_NX90_aes_stat_out_fifo_overflow  27

/* all used bits of 'NX90_aes_stat': */
#define MSK_USED_BITS_NX90_aes_stat 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register aes_irq_raw */
/* => AES raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_raw  0x00000008
#define Adr_NX90_aes_aes_irq_raw  0xFF080308
#define Adr_NX90_aes_irq_raw      0xFF080308
#define DFLT_VAL_NX90_aes_irq_raw 0x00000000

#define MSK_NX90_aes_irq_raw_key_exp_ready              0x00000001
#define SRT_NX90_aes_irq_raw_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_raw_key_exp_ready         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_key_exp_ready      0x00000000
#define MSK_NX90_aes_irq_raw_op_ready                   0x00000002
#define SRT_NX90_aes_irq_raw_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_raw_op_ready              0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_op_ready           0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_wm                 0x00000004
#define SRT_NX90_aes_irq_raw_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_wm            0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_wm         0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_empty              0x00000008
#define SRT_NX90_aes_irq_raw_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_empty         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_empty      0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_not_empty          0x00000010
#define SRT_NX90_aes_irq_raw_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_not_empty     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_not_empty  0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_full               0x00000020
#define SRT_NX90_aes_irq_raw_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_full          0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_full       0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_not_full           0x00000040
#define SRT_NX90_aes_irq_raw_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_not_full      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_not_full   0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_underrun           0x00000080
#define SRT_NX90_aes_irq_raw_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_underrun      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_underrun   0x00000000
#define MSK_NX90_aes_irq_raw_in_fifo_overflow           0x00000100
#define SRT_NX90_aes_irq_raw_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_raw_in_fifo_overflow      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_in_fifo_overflow   0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_wm                0x00000200
#define SRT_NX90_aes_irq_raw_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_wm           0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_wm        0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_empty             0x00000400
#define SRT_NX90_aes_irq_raw_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_empty        0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_empty     0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_not_empty         0x00000800
#define SRT_NX90_aes_irq_raw_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_not_empty    0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_not_empty 0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_full              0x00001000
#define SRT_NX90_aes_irq_raw_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_full         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_full      0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_not_full          0x00002000
#define SRT_NX90_aes_irq_raw_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_not_full     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_not_full  0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_underrun          0x00004000
#define SRT_NX90_aes_irq_raw_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_underrun     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_underrun  0x00000000
#define MSK_NX90_aes_irq_raw_out_fifo_overflow          0x00008000
#define SRT_NX90_aes_irq_raw_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_raw_out_fifo_overflow     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_raw_out_fifo_overflow  0x00000000

/* all used bits of 'NX90_aes_irq_raw': */
#define MSK_USED_BITS_NX90_aes_irq_raw 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register aes_irq_masked */
/* => AES masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_masked 0x0000000C
#define Adr_NX90_aes_aes_irq_masked 0xFF08030C
#define Adr_NX90_aes_irq_masked     0xFF08030C

#define MSK_NX90_aes_irq_masked_key_exp_ready      0x00000001
#define SRT_NX90_aes_irq_masked_key_exp_ready      0
#define MSK_NX90_aes_irq_masked_op_ready           0x00000002
#define SRT_NX90_aes_irq_masked_op_ready           1
#define MSK_NX90_aes_irq_masked_in_fifo_wm         0x00000004
#define SRT_NX90_aes_irq_masked_in_fifo_wm         2
#define MSK_NX90_aes_irq_masked_in_fifo_empty      0x00000008
#define SRT_NX90_aes_irq_masked_in_fifo_empty      3
#define MSK_NX90_aes_irq_masked_in_fifo_not_empty  0x00000010
#define SRT_NX90_aes_irq_masked_in_fifo_not_empty  4
#define MSK_NX90_aes_irq_masked_in_fifo_full       0x00000020
#define SRT_NX90_aes_irq_masked_in_fifo_full       5
#define MSK_NX90_aes_irq_masked_in_fifo_not_full   0x00000040
#define SRT_NX90_aes_irq_masked_in_fifo_not_full   6
#define MSK_NX90_aes_irq_masked_in_fifo_underrun   0x00000080
#define SRT_NX90_aes_irq_masked_in_fifo_underrun   7
#define MSK_NX90_aes_irq_masked_in_fifo_overflow   0x00000100
#define SRT_NX90_aes_irq_masked_in_fifo_overflow   8
#define MSK_NX90_aes_irq_masked_out_fifo_wm        0x00000200
#define SRT_NX90_aes_irq_masked_out_fifo_wm        9
#define MSK_NX90_aes_irq_masked_out_fifo_empty     0x00000400
#define SRT_NX90_aes_irq_masked_out_fifo_empty     10
#define MSK_NX90_aes_irq_masked_out_fifo_not_empty 0x00000800
#define SRT_NX90_aes_irq_masked_out_fifo_not_empty 11
#define MSK_NX90_aes_irq_masked_out_fifo_full      0x00001000
#define SRT_NX90_aes_irq_masked_out_fifo_full      12
#define MSK_NX90_aes_irq_masked_out_fifo_not_full  0x00002000
#define SRT_NX90_aes_irq_masked_out_fifo_not_full  13
#define MSK_NX90_aes_irq_masked_out_fifo_underrun  0x00004000
#define SRT_NX90_aes_irq_masked_out_fifo_underrun  14
#define MSK_NX90_aes_irq_masked_out_fifo_overflow  0x00008000
#define SRT_NX90_aes_irq_masked_out_fifo_overflow  15

/* all used bits of 'NX90_aes_irq_masked': */
#define MSK_USED_BITS_NX90_aes_irq_masked 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register aes_irq_msk_set */
/* => AES IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to crypt_aes_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_msk_set  0x00000010
#define Adr_NX90_aes_aes_irq_msk_set  0xFF080310
#define Adr_NX90_aes_irq_msk_set      0xFF080310
#define DFLT_VAL_NX90_aes_irq_msk_set 0x00000000

#define MSK_NX90_aes_irq_msk_set_key_exp_ready              0x00000001
#define SRT_NX90_aes_irq_msk_set_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_msk_set_key_exp_ready         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_key_exp_ready      0x00000000
#define MSK_NX90_aes_irq_msk_set_op_ready                   0x00000002
#define SRT_NX90_aes_irq_msk_set_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_msk_set_op_ready              0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_op_ready           0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_wm                 0x00000004
#define SRT_NX90_aes_irq_msk_set_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_wm            0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_wm         0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_empty              0x00000008
#define SRT_NX90_aes_irq_msk_set_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_empty         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_empty      0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_not_empty          0x00000010
#define SRT_NX90_aes_irq_msk_set_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_not_empty     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_not_empty  0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_full               0x00000020
#define SRT_NX90_aes_irq_msk_set_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_full          0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_full       0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_not_full           0x00000040
#define SRT_NX90_aes_irq_msk_set_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_not_full      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_not_full   0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_underrun           0x00000080
#define SRT_NX90_aes_irq_msk_set_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_underrun      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_underrun   0x00000000
#define MSK_NX90_aes_irq_msk_set_in_fifo_overflow           0x00000100
#define SRT_NX90_aes_irq_msk_set_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_msk_set_in_fifo_overflow      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_in_fifo_overflow   0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_wm                0x00000200
#define SRT_NX90_aes_irq_msk_set_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_wm           0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_wm        0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_empty             0x00000400
#define SRT_NX90_aes_irq_msk_set_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_empty        0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_empty     0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_not_empty         0x00000800
#define SRT_NX90_aes_irq_msk_set_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_not_empty    0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_not_empty 0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_full              0x00001000
#define SRT_NX90_aes_irq_msk_set_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_full         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_full      0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_not_full          0x00002000
#define SRT_NX90_aes_irq_msk_set_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_not_full     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_not_full  0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_underrun          0x00004000
#define SRT_NX90_aes_irq_msk_set_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_underrun     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_underrun  0x00000000
#define MSK_NX90_aes_irq_msk_set_out_fifo_overflow          0x00008000
#define SRT_NX90_aes_irq_msk_set_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_msk_set_out_fifo_overflow     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_set_out_fifo_overflow  0x00000000

/* all used bits of 'NX90_aes_irq_msk_set': */
#define MSK_USED_BITS_NX90_aes_irq_msk_set 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register aes_irq_msk_reset */
/* => AES IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_irq_msk_reset  0x00000014
#define Adr_NX90_aes_aes_irq_msk_reset  0xFF080314
#define Adr_NX90_aes_irq_msk_reset      0xFF080314
#define DFLT_VAL_NX90_aes_irq_msk_reset 0x00000000

#define MSK_NX90_aes_irq_msk_reset_key_exp_ready              0x00000001
#define SRT_NX90_aes_irq_msk_reset_key_exp_ready              0
#define DFLT_VAL_NX90_aes_irq_msk_reset_key_exp_ready         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_key_exp_ready      0x00000000
#define MSK_NX90_aes_irq_msk_reset_op_ready                   0x00000002
#define SRT_NX90_aes_irq_msk_reset_op_ready                   1
#define DFLT_VAL_NX90_aes_irq_msk_reset_op_ready              0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_op_ready           0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_wm                 0x00000004
#define SRT_NX90_aes_irq_msk_reset_in_fifo_wm                 2
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_wm            0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_wm         0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_empty              0x00000008
#define SRT_NX90_aes_irq_msk_reset_in_fifo_empty              3
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_empty         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_empty      0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_not_empty          0x00000010
#define SRT_NX90_aes_irq_msk_reset_in_fifo_not_empty          4
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_not_empty     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_not_empty  0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_full               0x00000020
#define SRT_NX90_aes_irq_msk_reset_in_fifo_full               5
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_full          0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_full       0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_not_full           0x00000040
#define SRT_NX90_aes_irq_msk_reset_in_fifo_not_full           6
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_not_full      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_not_full   0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_underrun           0x00000080
#define SRT_NX90_aes_irq_msk_reset_in_fifo_underrun           7
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_underrun      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_underrun   0x00000000
#define MSK_NX90_aes_irq_msk_reset_in_fifo_overflow           0x00000100
#define SRT_NX90_aes_irq_msk_reset_in_fifo_overflow           8
#define DFLT_VAL_NX90_aes_irq_msk_reset_in_fifo_overflow      0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_in_fifo_overflow   0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_wm                0x00000200
#define SRT_NX90_aes_irq_msk_reset_out_fifo_wm                9
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_wm           0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_wm        0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_empty             0x00000400
#define SRT_NX90_aes_irq_msk_reset_out_fifo_empty             10
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_empty        0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_empty     0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_not_empty         0x00000800
#define SRT_NX90_aes_irq_msk_reset_out_fifo_not_empty         11
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_not_empty    0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_not_empty 0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_full              0x00001000
#define SRT_NX90_aes_irq_msk_reset_out_fifo_full              12
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_full         0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_full      0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_not_full          0x00002000
#define SRT_NX90_aes_irq_msk_reset_out_fifo_not_full          13
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_not_full     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_not_full  0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_underrun          0x00004000
#define SRT_NX90_aes_irq_msk_reset_out_fifo_underrun          14
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_underrun     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_underrun  0x00000000
#define MSK_NX90_aes_irq_msk_reset_out_fifo_overflow          0x00008000
#define SRT_NX90_aes_irq_msk_reset_out_fifo_overflow          15
#define DFLT_VAL_NX90_aes_irq_msk_reset_out_fifo_overflow     0x00000000
#define DFLT_BF_VAL_NX90_aes_irq_msk_reset_out_fifo_overflow  0x00000000

/* all used bits of 'NX90_aes_irq_msk_reset': */
#define MSK_USED_BITS_NX90_aes_irq_msk_reset 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register aes_key0 */
/* => AES key register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key0  0x00000018
#define Adr_NX90_aes_aes_key0  0xFF080318
#define Adr_NX90_aes_key0      0xFF080318
#define DFLT_VAL_NX90_aes_key0 0x00000000

#define MSK_NX90_aes_key0_val         0xffffffff
#define SRT_NX90_aes_key0_val         0
#define DFLT_VAL_NX90_aes_key0_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key0_val 0x00000000

/* all used bits of 'NX90_aes_key0': */
#define MSK_USED_BITS_NX90_aes_key0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key1 */
/* => AES key register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key1  0x0000001C
#define Adr_NX90_aes_aes_key1  0xFF08031C
#define Adr_NX90_aes_key1      0xFF08031C
#define DFLT_VAL_NX90_aes_key1 0x00000000

#define MSK_NX90_aes_key1_val         0xffffffff
#define SRT_NX90_aes_key1_val         0
#define DFLT_VAL_NX90_aes_key1_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key1_val 0x00000000

/* all used bits of 'NX90_aes_key1': */
#define MSK_USED_BITS_NX90_aes_key1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key2 */
/* => AES key register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key2  0x00000020
#define Adr_NX90_aes_aes_key2  0xFF080320
#define Adr_NX90_aes_key2      0xFF080320
#define DFLT_VAL_NX90_aes_key2 0x00000000

#define MSK_NX90_aes_key2_val         0xffffffff
#define SRT_NX90_aes_key2_val         0
#define DFLT_VAL_NX90_aes_key2_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key2_val 0x00000000

/* all used bits of 'NX90_aes_key2': */
#define MSK_USED_BITS_NX90_aes_key2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key3 */
/* => AES key register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key3  0x00000024
#define Adr_NX90_aes_aes_key3  0xFF080324
#define Adr_NX90_aes_key3      0xFF080324
#define DFLT_VAL_NX90_aes_key3 0x00000000

#define MSK_NX90_aes_key3_val         0xffffffff
#define SRT_NX90_aes_key3_val         0
#define DFLT_VAL_NX90_aes_key3_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key3_val 0x00000000

/* all used bits of 'NX90_aes_key3': */
#define MSK_USED_BITS_NX90_aes_key3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key4 */
/* => AES key register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key4  0x00000028
#define Adr_NX90_aes_aes_key4  0xFF080328
#define Adr_NX90_aes_key4      0xFF080328
#define DFLT_VAL_NX90_aes_key4 0x00000000

#define MSK_NX90_aes_key4_val         0xffffffff
#define SRT_NX90_aes_key4_val         0
#define DFLT_VAL_NX90_aes_key4_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key4_val 0x00000000

/* all used bits of 'NX90_aes_key4': */
#define MSK_USED_BITS_NX90_aes_key4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key5 */
/* => AES key register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key5  0x0000002C
#define Adr_NX90_aes_aes_key5  0xFF08032C
#define Adr_NX90_aes_key5      0xFF08032C
#define DFLT_VAL_NX90_aes_key5 0x00000000

#define MSK_NX90_aes_key5_val         0xffffffff
#define SRT_NX90_aes_key5_val         0
#define DFLT_VAL_NX90_aes_key5_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key5_val 0x00000000

/* all used bits of 'NX90_aes_key5': */
#define MSK_USED_BITS_NX90_aes_key5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key6 */
/* => AES key register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key6  0x00000030
#define Adr_NX90_aes_aes_key6  0xFF080330
#define Adr_NX90_aes_key6      0xFF080330
#define DFLT_VAL_NX90_aes_key6 0x00000000

#define MSK_NX90_aes_key6_val         0xffffffff
#define SRT_NX90_aes_key6_val         0
#define DFLT_VAL_NX90_aes_key6_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key6_val 0x00000000

/* all used bits of 'NX90_aes_key6': */
#define MSK_USED_BITS_NX90_aes_key6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_key7 */
/* => AES key register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_key7  0x00000034
#define Adr_NX90_aes_aes_key7  0xFF080334
#define Adr_NX90_aes_key7      0xFF080334
#define DFLT_VAL_NX90_aes_key7 0x00000000

#define MSK_NX90_aes_key7_val         0xffffffff
#define SRT_NX90_aes_key7_val         0
#define DFLT_VAL_NX90_aes_key7_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_key7_val 0x00000000

/* all used bits of 'NX90_aes_key7': */
#define MSK_USED_BITS_NX90_aes_key7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_din */
/* => AES FIFO input */
/*    Unlike all other registers, this address can be written with DWord(32 Bit), Word(16 Bit) or Byte acccss. */
/*    The FIFO controller will automatically collect data and start AES-calculation, */
/*    if enough data (4 DWords) are collected. */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_din  0x00000038
#define Adr_NX90_aes_aes_din  0xFF080338
#define Adr_NX90_aes_din      0xFF080338
#define DFLT_VAL_NX90_aes_din 0x00000000

#define MSK_NX90_aes_din_val         0xffffffff
#define SRT_NX90_aes_din_val         0
#define DFLT_VAL_NX90_aes_din_val    0x00000000
#define DFLT_BF_VAL_NX90_aes_din_val 0x00000000

/* all used bits of 'NX90_aes_din': */
#define MSK_USED_BITS_NX90_aes_din 0xffffffff

/* --------------------------------------------------------------------- */
/* Register aes_dout */
/* => AES FIFO output */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_aes_dout 0x0000003C
#define Adr_NX90_aes_aes_dout 0xFF08033C
#define Adr_NX90_aes_dout     0xFF08033C

#define MSK_NX90_aes_dout_val 0xffffffff
#define SRT_NX90_aes_dout_val 0

/* all used bits of 'NX90_aes_dout': */
#define MSK_USED_BITS_NX90_aes_dout 0xffffffff


/* ===================================================================== */

/* Area of random */

/* ===================================================================== */

#define Addr_NX90_random 0xFF080340

/* --------------------------------------------------------------------- */
/* Register random_init */
/* => Random initialization value: */
/*    Write a value depending on Chip ID to this register to generate a random sequence different for each netX. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_random_init    0x00000000
#define Adr_NX90_random_random_init 0xFF080340
#define Adr_NX90_random_init        0xFF080340
#define DFLT_VAL_NX90_random_init   0x55555555

#define MSK_NX90_random_init_val         0xffffffff
#define SRT_NX90_random_init_val         0
#define DFLT_VAL_NX90_random_init_val    0x55555555
#define DFLT_BF_VAL_NX90_random_init_val 0x55555555

/* all used bits of 'NX90_random_init': */
#define MSK_USED_BITS_NX90_random_init 0xffffffff

/* --------------------------------------------------------------------- */
/* Register random_random */
/* => Random value: */
/*    This random value sequence is derived from many random events inside netX chip. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_random_random    0x00000004
#define Adr_NX90_random_random_random 0xFF080344
#define Adr_NX90_random_random        0xFF080344

#define MSK_NX90_random_random_val 0xffffffff
#define SRT_NX90_random_random_val 0

/* all used bits of 'NX90_random_random': */
#define MSK_USED_BITS_NX90_random_random 0xffffffff


/* ===================================================================== */

/* Area of mtgy */

/* ===================================================================== */

#define Addr_NX90_mtgy 0xFF082000

/* --------------------------------------------------------------------- */
/* Register mtgy_cmd */
/* => MWMM command register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_cmd  0x00000000
#define Adr_NX90_mtgy_mtgy_cmd 0xFF082000
#define Adr_NX90_mtgy_cmd      0xFF082000
#define DFLT_VAL_NX90_mtgy_cmd 0x00000094

#define MSK_NX90_mtgy_cmd_start              0x00000001
#define SRT_NX90_mtgy_cmd_start              0
#define DFLT_VAL_NX90_mtgy_cmd_start         0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_start      0x00000000
#define MSK_NX90_mtgy_cmd_abort              0x00000002
#define SRT_NX90_mtgy_cmd_abort              1
#define DFLT_VAL_NX90_mtgy_cmd_abort         0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_abort      0x00000000
#define MSK_NX90_mtgy_cmd_f_sel              0x00000004
#define SRT_NX90_mtgy_cmd_f_sel              2
#define DFLT_VAL_NX90_mtgy_cmd_f_sel         0x00000004
#define DFLT_BF_VAL_NX90_mtgy_cmd_f_sel      0x00000001
#define MSK_NX90_mtgy_cmd_precision          0x000000f0
#define SRT_NX90_mtgy_cmd_precision          4
#define DFLT_VAL_NX90_mtgy_cmd_precision     0x00000090
#define DFLT_BF_VAL_NX90_mtgy_cmd_precision  0x00000009
#define MSK_NX90_mtgy_cmd_op                 0x00000f00
#define SRT_NX90_mtgy_cmd_op                 8
#define DFLT_VAL_NX90_mtgy_cmd_op            0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_op         0x00000000
#define MSK_NX90_mtgy_cmd_src_addr           0x0001f000
#define SRT_NX90_mtgy_cmd_src_addr           12
#define DFLT_VAL_NX90_mtgy_cmd_src_addr      0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr   0x00000000
#define MSK_NX90_mtgy_cmd_dest_addr          0x003e0000
#define SRT_NX90_mtgy_cmd_dest_addr          17
#define DFLT_VAL_NX90_mtgy_cmd_dest_addr     0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_dest_addr  0x00000000
#define MSK_NX90_mtgy_cmd_src_addr_e         0x07c00000
#define SRT_NX90_mtgy_cmd_src_addr_e         22
#define DFLT_VAL_NX90_mtgy_cmd_src_addr_e    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr_e 0x00000000
#define MSK_NX90_mtgy_cmd_src_addr_x         0xf8000000
#define SRT_NX90_mtgy_cmd_src_addr_x         27
#define DFLT_VAL_NX90_mtgy_cmd_src_addr_x    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_cmd_src_addr_x 0x00000000

/* all used bits of 'NX90_mtgy_cmd': */
#define MSK_USED_BITS_NX90_mtgy_cmd 0xfffffff7

/* --------------------------------------------------------------------- */
/* Register mtgy_stat */
/* => MWMM status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_stat  0x00000004
#define Adr_NX90_mtgy_mtgy_stat 0xFF082004
#define Adr_NX90_mtgy_stat      0xFF082004

#define MSK_NX90_mtgy_stat_done 0x00000001
#define SRT_NX90_mtgy_stat_done 0

/* all used bits of 'NX90_mtgy_stat': */
#define MSK_USED_BITS_NX90_mtgy_stat 0x00000001

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_raw */
/* => MWMM raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_raw  0x00000008
#define Adr_NX90_mtgy_mtgy_irq_raw 0xFF082008
#define Adr_NX90_mtgy_irq_raw      0xFF082008
#define DFLT_VAL_NX90_mtgy_irq_raw 0x00000000

#define MSK_NX90_mtgy_irq_raw_done         0x00000001
#define SRT_NX90_mtgy_irq_raw_done         0
#define DFLT_VAL_NX90_mtgy_irq_raw_done    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_irq_raw_done 0x00000000

/* all used bits of 'NX90_mtgy_irq_raw': */
#define MSK_USED_BITS_NX90_mtgy_irq_raw 0x00000001

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_masked */
/* => MWMM masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_masked  0x0000000C
#define Adr_NX90_mtgy_mtgy_irq_masked 0xFF08200C
#define Adr_NX90_mtgy_irq_masked      0xFF08200C

#define MSK_NX90_mtgy_irq_masked_done 0x00000001
#define SRT_NX90_mtgy_irq_masked_done 0

/* all used bits of 'NX90_mtgy_irq_masked': */
#define MSK_USED_BITS_NX90_mtgy_irq_masked 0x00000001

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_msk_set */
/* => MWMM IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to mtgy_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_msk_set  0x00000010
#define Adr_NX90_mtgy_mtgy_irq_msk_set 0xFF082010
#define Adr_NX90_mtgy_irq_msk_set      0xFF082010
#define DFLT_VAL_NX90_mtgy_irq_msk_set 0x00000000

#define MSK_NX90_mtgy_irq_msk_set_done         0x00000001
#define SRT_NX90_mtgy_irq_msk_set_done         0
#define DFLT_VAL_NX90_mtgy_irq_msk_set_done    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_irq_msk_set_done 0x00000000

/* all used bits of 'NX90_mtgy_irq_msk_set': */
#define MSK_USED_BITS_NX90_mtgy_irq_msk_set 0x00000001

/* --------------------------------------------------------------------- */
/* Register mtgy_irq_msk_reset */
/* => MWMM IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_irq_msk_reset  0x00000014
#define Adr_NX90_mtgy_mtgy_irq_msk_reset 0xFF082014
#define Adr_NX90_mtgy_irq_msk_reset      0xFF082014
#define DFLT_VAL_NX90_mtgy_irq_msk_reset 0x00000000

#define MSK_NX90_mtgy_irq_msk_reset_done         0x00000001
#define SRT_NX90_mtgy_irq_msk_reset_done         0
#define DFLT_VAL_NX90_mtgy_irq_msk_reset_done    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_irq_msk_reset_done 0x00000000

/* all used bits of 'NX90_mtgy_irq_msk_reset': */
#define MSK_USED_BITS_NX90_mtgy_irq_msk_reset 0x00000001

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc0 */
/* => MWMM TC register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc0  0x00001000
#define Adr_NX90_mtgy_mtgy_op_tc0 0xFF083000
#define Adr_NX90_mtgy_op_tc0      0xFF083000
#define DFLT_VAL_NX90_mtgy_op_tc0 0x00000000

#define MSK_NX90_mtgy_op_tc0_val         0xffffffff
#define SRT_NX90_mtgy_op_tc0_val         0
#define DFLT_VAL_NX90_mtgy_op_tc0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc0': */
#define MSK_USED_BITS_NX90_mtgy_op_tc0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc1 */
/* => MWMM TC register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc1  0x00001004
#define Adr_NX90_mtgy_mtgy_op_tc1 0xFF083004
#define Adr_NX90_mtgy_op_tc1      0xFF083004
#define DFLT_VAL_NX90_mtgy_op_tc1 0x00000000

#define MSK_NX90_mtgy_op_tc1_val         0xffffffff
#define SRT_NX90_mtgy_op_tc1_val         0
#define DFLT_VAL_NX90_mtgy_op_tc1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc1': */
#define MSK_USED_BITS_NX90_mtgy_op_tc1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc2 */
/* => MWMM TC register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc2  0x00001008
#define Adr_NX90_mtgy_mtgy_op_tc2 0xFF083008
#define Adr_NX90_mtgy_op_tc2      0xFF083008
#define DFLT_VAL_NX90_mtgy_op_tc2 0x00000000

#define MSK_NX90_mtgy_op_tc2_val         0xffffffff
#define SRT_NX90_mtgy_op_tc2_val         0
#define DFLT_VAL_NX90_mtgy_op_tc2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc2': */
#define MSK_USED_BITS_NX90_mtgy_op_tc2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc3 */
/* => MWMM TC register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc3  0x0000100C
#define Adr_NX90_mtgy_mtgy_op_tc3 0xFF08300C
#define Adr_NX90_mtgy_op_tc3      0xFF08300C
#define DFLT_VAL_NX90_mtgy_op_tc3 0x00000000

#define MSK_NX90_mtgy_op_tc3_val         0xffffffff
#define SRT_NX90_mtgy_op_tc3_val         0
#define DFLT_VAL_NX90_mtgy_op_tc3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc3': */
#define MSK_USED_BITS_NX90_mtgy_op_tc3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc4 */
/* => MWMM TC register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc4  0x00001010
#define Adr_NX90_mtgy_mtgy_op_tc4 0xFF083010
#define Adr_NX90_mtgy_op_tc4      0xFF083010
#define DFLT_VAL_NX90_mtgy_op_tc4 0x00000000

#define MSK_NX90_mtgy_op_tc4_val         0xffffffff
#define SRT_NX90_mtgy_op_tc4_val         0
#define DFLT_VAL_NX90_mtgy_op_tc4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc4': */
#define MSK_USED_BITS_NX90_mtgy_op_tc4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc5 */
/* => MWMM TC register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc5  0x00001014
#define Adr_NX90_mtgy_mtgy_op_tc5 0xFF083014
#define Adr_NX90_mtgy_op_tc5      0xFF083014
#define DFLT_VAL_NX90_mtgy_op_tc5 0x00000000

#define MSK_NX90_mtgy_op_tc5_val         0xffffffff
#define SRT_NX90_mtgy_op_tc5_val         0
#define DFLT_VAL_NX90_mtgy_op_tc5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc5': */
#define MSK_USED_BITS_NX90_mtgy_op_tc5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc6 */
/* => MWMM TC register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc6  0x00001018
#define Adr_NX90_mtgy_mtgy_op_tc6 0xFF083018
#define Adr_NX90_mtgy_op_tc6      0xFF083018
#define DFLT_VAL_NX90_mtgy_op_tc6 0x00000000

#define MSK_NX90_mtgy_op_tc6_val         0xffffffff
#define SRT_NX90_mtgy_op_tc6_val         0
#define DFLT_VAL_NX90_mtgy_op_tc6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc6': */
#define MSK_USED_BITS_NX90_mtgy_op_tc6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc7 */
/* => MWMM TC register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc7  0x0000101C
#define Adr_NX90_mtgy_mtgy_op_tc7 0xFF08301C
#define Adr_NX90_mtgy_op_tc7      0xFF08301C
#define DFLT_VAL_NX90_mtgy_op_tc7 0x00000000

#define MSK_NX90_mtgy_op_tc7_val         0xffffffff
#define SRT_NX90_mtgy_op_tc7_val         0
#define DFLT_VAL_NX90_mtgy_op_tc7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc7': */
#define MSK_USED_BITS_NX90_mtgy_op_tc7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc8 */
/* => MWMM TC register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc8  0x00001020
#define Adr_NX90_mtgy_mtgy_op_tc8 0xFF083020
#define Adr_NX90_mtgy_op_tc8      0xFF083020
#define DFLT_VAL_NX90_mtgy_op_tc8 0x00000000

#define MSK_NX90_mtgy_op_tc8_val         0xffffffff
#define SRT_NX90_mtgy_op_tc8_val         0
#define DFLT_VAL_NX90_mtgy_op_tc8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc8': */
#define MSK_USED_BITS_NX90_mtgy_op_tc8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc9 */
/* => MWMM TC register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc9  0x00001024
#define Adr_NX90_mtgy_mtgy_op_tc9 0xFF083024
#define Adr_NX90_mtgy_op_tc9      0xFF083024
#define DFLT_VAL_NX90_mtgy_op_tc9 0x00000000

#define MSK_NX90_mtgy_op_tc9_val         0xffffffff
#define SRT_NX90_mtgy_op_tc9_val         0
#define DFLT_VAL_NX90_mtgy_op_tc9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc9': */
#define MSK_USED_BITS_NX90_mtgy_op_tc9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc10 */
/* => MWMM TC register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc10  0x00001028
#define Adr_NX90_mtgy_mtgy_op_tc10 0xFF083028
#define Adr_NX90_mtgy_op_tc10      0xFF083028
#define DFLT_VAL_NX90_mtgy_op_tc10 0x00000000

#define MSK_NX90_mtgy_op_tc10_val         0xffffffff
#define SRT_NX90_mtgy_op_tc10_val         0
#define DFLT_VAL_NX90_mtgy_op_tc10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc10': */
#define MSK_USED_BITS_NX90_mtgy_op_tc10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc11 */
/* => MWMM TC register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc11  0x0000102C
#define Adr_NX90_mtgy_mtgy_op_tc11 0xFF08302C
#define Adr_NX90_mtgy_op_tc11      0xFF08302C
#define DFLT_VAL_NX90_mtgy_op_tc11 0x00000000

#define MSK_NX90_mtgy_op_tc11_val         0xffffffff
#define SRT_NX90_mtgy_op_tc11_val         0
#define DFLT_VAL_NX90_mtgy_op_tc11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc11': */
#define MSK_USED_BITS_NX90_mtgy_op_tc11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc12 */
/* => MWMM TC register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc12  0x00001030
#define Adr_NX90_mtgy_mtgy_op_tc12 0xFF083030
#define Adr_NX90_mtgy_op_tc12      0xFF083030
#define DFLT_VAL_NX90_mtgy_op_tc12 0x00000000

#define MSK_NX90_mtgy_op_tc12_val         0xffffffff
#define SRT_NX90_mtgy_op_tc12_val         0
#define DFLT_VAL_NX90_mtgy_op_tc12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc12': */
#define MSK_USED_BITS_NX90_mtgy_op_tc12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc13 */
/* => MWMM TC register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc13  0x00001034
#define Adr_NX90_mtgy_mtgy_op_tc13 0xFF083034
#define Adr_NX90_mtgy_op_tc13      0xFF083034
#define DFLT_VAL_NX90_mtgy_op_tc13 0x00000000

#define MSK_NX90_mtgy_op_tc13_val         0xffffffff
#define SRT_NX90_mtgy_op_tc13_val         0
#define DFLT_VAL_NX90_mtgy_op_tc13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc13': */
#define MSK_USED_BITS_NX90_mtgy_op_tc13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc14 */
/* => MWMM TC register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc14  0x00001038
#define Adr_NX90_mtgy_mtgy_op_tc14 0xFF083038
#define Adr_NX90_mtgy_op_tc14      0xFF083038
#define DFLT_VAL_NX90_mtgy_op_tc14 0x00000000

#define MSK_NX90_mtgy_op_tc14_val         0xffffffff
#define SRT_NX90_mtgy_op_tc14_val         0
#define DFLT_VAL_NX90_mtgy_op_tc14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc14': */
#define MSK_USED_BITS_NX90_mtgy_op_tc14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc15 */
/* => MWMM TC register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc15  0x0000103C
#define Adr_NX90_mtgy_mtgy_op_tc15 0xFF08303C
#define Adr_NX90_mtgy_op_tc15      0xFF08303C
#define DFLT_VAL_NX90_mtgy_op_tc15 0x00000000

#define MSK_NX90_mtgy_op_tc15_val         0xffffffff
#define SRT_NX90_mtgy_op_tc15_val         0
#define DFLT_VAL_NX90_mtgy_op_tc15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc15': */
#define MSK_USED_BITS_NX90_mtgy_op_tc15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc16 */
/* => MWMM TC register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc16  0x00001040
#define Adr_NX90_mtgy_mtgy_op_tc16 0xFF083040
#define Adr_NX90_mtgy_op_tc16      0xFF083040
#define DFLT_VAL_NX90_mtgy_op_tc16 0x00000000

#define MSK_NX90_mtgy_op_tc16_val         0xffffffff
#define SRT_NX90_mtgy_op_tc16_val         0
#define DFLT_VAL_NX90_mtgy_op_tc16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc16': */
#define MSK_USED_BITS_NX90_mtgy_op_tc16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc17 */
/* => MWMM TC register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc17  0x00001044
#define Adr_NX90_mtgy_mtgy_op_tc17 0xFF083044
#define Adr_NX90_mtgy_op_tc17      0xFF083044
#define DFLT_VAL_NX90_mtgy_op_tc17 0x00000000

#define MSK_NX90_mtgy_op_tc17_val         0xffffffff
#define SRT_NX90_mtgy_op_tc17_val         0
#define DFLT_VAL_NX90_mtgy_op_tc17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc17': */
#define MSK_USED_BITS_NX90_mtgy_op_tc17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc18 */
/* => MWMM TC register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc18  0x00001048
#define Adr_NX90_mtgy_mtgy_op_tc18 0xFF083048
#define Adr_NX90_mtgy_op_tc18      0xFF083048
#define DFLT_VAL_NX90_mtgy_op_tc18 0x00000000

#define MSK_NX90_mtgy_op_tc18_val         0xffffffff
#define SRT_NX90_mtgy_op_tc18_val         0
#define DFLT_VAL_NX90_mtgy_op_tc18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc18': */
#define MSK_USED_BITS_NX90_mtgy_op_tc18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc19 */
/* => MWMM TC register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc19  0x0000104C
#define Adr_NX90_mtgy_mtgy_op_tc19 0xFF08304C
#define Adr_NX90_mtgy_op_tc19      0xFF08304C
#define DFLT_VAL_NX90_mtgy_op_tc19 0x00000000

#define MSK_NX90_mtgy_op_tc19_val         0xffffffff
#define SRT_NX90_mtgy_op_tc19_val         0
#define DFLT_VAL_NX90_mtgy_op_tc19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc19': */
#define MSK_USED_BITS_NX90_mtgy_op_tc19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc20 */
/* => MWMM TC register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc20  0x00001050
#define Adr_NX90_mtgy_mtgy_op_tc20 0xFF083050
#define Adr_NX90_mtgy_op_tc20      0xFF083050
#define DFLT_VAL_NX90_mtgy_op_tc20 0x00000000

#define MSK_NX90_mtgy_op_tc20_val         0xffffffff
#define SRT_NX90_mtgy_op_tc20_val         0
#define DFLT_VAL_NX90_mtgy_op_tc20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc20': */
#define MSK_USED_BITS_NX90_mtgy_op_tc20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc21 */
/* => MWMM TC register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc21  0x00001054
#define Adr_NX90_mtgy_mtgy_op_tc21 0xFF083054
#define Adr_NX90_mtgy_op_tc21      0xFF083054
#define DFLT_VAL_NX90_mtgy_op_tc21 0x00000000

#define MSK_NX90_mtgy_op_tc21_val         0xffffffff
#define SRT_NX90_mtgy_op_tc21_val         0
#define DFLT_VAL_NX90_mtgy_op_tc21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc21': */
#define MSK_USED_BITS_NX90_mtgy_op_tc21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc22 */
/* => MWMM TC register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc22  0x00001058
#define Adr_NX90_mtgy_mtgy_op_tc22 0xFF083058
#define Adr_NX90_mtgy_op_tc22      0xFF083058
#define DFLT_VAL_NX90_mtgy_op_tc22 0x00000000

#define MSK_NX90_mtgy_op_tc22_val         0xffffffff
#define SRT_NX90_mtgy_op_tc22_val         0
#define DFLT_VAL_NX90_mtgy_op_tc22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc22': */
#define MSK_USED_BITS_NX90_mtgy_op_tc22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc23 */
/* => MWMM TC register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc23  0x0000105C
#define Adr_NX90_mtgy_mtgy_op_tc23 0xFF08305C
#define Adr_NX90_mtgy_op_tc23      0xFF08305C
#define DFLT_VAL_NX90_mtgy_op_tc23 0x00000000

#define MSK_NX90_mtgy_op_tc23_val         0xffffffff
#define SRT_NX90_mtgy_op_tc23_val         0
#define DFLT_VAL_NX90_mtgy_op_tc23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc23': */
#define MSK_USED_BITS_NX90_mtgy_op_tc23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc24 */
/* => MWMM TC register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc24  0x00001060
#define Adr_NX90_mtgy_mtgy_op_tc24 0xFF083060
#define Adr_NX90_mtgy_op_tc24      0xFF083060
#define DFLT_VAL_NX90_mtgy_op_tc24 0x00000000

#define MSK_NX90_mtgy_op_tc24_val         0xffffffff
#define SRT_NX90_mtgy_op_tc24_val         0
#define DFLT_VAL_NX90_mtgy_op_tc24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc24': */
#define MSK_USED_BITS_NX90_mtgy_op_tc24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc25 */
/* => MWMM TC register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc25  0x00001064
#define Adr_NX90_mtgy_mtgy_op_tc25 0xFF083064
#define Adr_NX90_mtgy_op_tc25      0xFF083064
#define DFLT_VAL_NX90_mtgy_op_tc25 0x00000000

#define MSK_NX90_mtgy_op_tc25_val         0xffffffff
#define SRT_NX90_mtgy_op_tc25_val         0
#define DFLT_VAL_NX90_mtgy_op_tc25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc25': */
#define MSK_USED_BITS_NX90_mtgy_op_tc25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc26 */
/* => MWMM TC register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc26  0x00001068
#define Adr_NX90_mtgy_mtgy_op_tc26 0xFF083068
#define Adr_NX90_mtgy_op_tc26      0xFF083068
#define DFLT_VAL_NX90_mtgy_op_tc26 0x00000000

#define MSK_NX90_mtgy_op_tc26_val         0xffffffff
#define SRT_NX90_mtgy_op_tc26_val         0
#define DFLT_VAL_NX90_mtgy_op_tc26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc26': */
#define MSK_USED_BITS_NX90_mtgy_op_tc26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc27 */
/* => MWMM TC register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc27  0x0000106C
#define Adr_NX90_mtgy_mtgy_op_tc27 0xFF08306C
#define Adr_NX90_mtgy_op_tc27      0xFF08306C
#define DFLT_VAL_NX90_mtgy_op_tc27 0x00000000

#define MSK_NX90_mtgy_op_tc27_val         0xffffffff
#define SRT_NX90_mtgy_op_tc27_val         0
#define DFLT_VAL_NX90_mtgy_op_tc27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc27': */
#define MSK_USED_BITS_NX90_mtgy_op_tc27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc28 */
/* => MWMM TC register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc28  0x00001070
#define Adr_NX90_mtgy_mtgy_op_tc28 0xFF083070
#define Adr_NX90_mtgy_op_tc28      0xFF083070
#define DFLT_VAL_NX90_mtgy_op_tc28 0x00000000

#define MSK_NX90_mtgy_op_tc28_val         0xffffffff
#define SRT_NX90_mtgy_op_tc28_val         0
#define DFLT_VAL_NX90_mtgy_op_tc28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc28': */
#define MSK_USED_BITS_NX90_mtgy_op_tc28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc29 */
/* => MWMM TC register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc29  0x00001074
#define Adr_NX90_mtgy_mtgy_op_tc29 0xFF083074
#define Adr_NX90_mtgy_op_tc29      0xFF083074
#define DFLT_VAL_NX90_mtgy_op_tc29 0x00000000

#define MSK_NX90_mtgy_op_tc29_val         0xffffffff
#define SRT_NX90_mtgy_op_tc29_val         0
#define DFLT_VAL_NX90_mtgy_op_tc29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc29': */
#define MSK_USED_BITS_NX90_mtgy_op_tc29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc30 */
/* => MWMM TC register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc30  0x00001078
#define Adr_NX90_mtgy_mtgy_op_tc30 0xFF083078
#define Adr_NX90_mtgy_op_tc30      0xFF083078
#define DFLT_VAL_NX90_mtgy_op_tc30 0x00000000

#define MSK_NX90_mtgy_op_tc30_val         0xffffffff
#define SRT_NX90_mtgy_op_tc30_val         0
#define DFLT_VAL_NX90_mtgy_op_tc30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc30': */
#define MSK_USED_BITS_NX90_mtgy_op_tc30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc31 */
/* => MWMM TC register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc31  0x0000107C
#define Adr_NX90_mtgy_mtgy_op_tc31 0xFF08307C
#define Adr_NX90_mtgy_op_tc31      0xFF08307C
#define DFLT_VAL_NX90_mtgy_op_tc31 0x00000000

#define MSK_NX90_mtgy_op_tc31_val         0xffffffff
#define SRT_NX90_mtgy_op_tc31_val         0
#define DFLT_VAL_NX90_mtgy_op_tc31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc31': */
#define MSK_USED_BITS_NX90_mtgy_op_tc31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc32 */
/* => MWMM TC register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc32  0x00001080
#define Adr_NX90_mtgy_mtgy_op_tc32 0xFF083080
#define Adr_NX90_mtgy_op_tc32      0xFF083080
#define DFLT_VAL_NX90_mtgy_op_tc32 0x00000000

#define MSK_NX90_mtgy_op_tc32_val         0xffffffff
#define SRT_NX90_mtgy_op_tc32_val         0
#define DFLT_VAL_NX90_mtgy_op_tc32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc32': */
#define MSK_USED_BITS_NX90_mtgy_op_tc32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc33 */
/* => MWMM TC register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc33  0x00001084
#define Adr_NX90_mtgy_mtgy_op_tc33 0xFF083084
#define Adr_NX90_mtgy_op_tc33      0xFF083084
#define DFLT_VAL_NX90_mtgy_op_tc33 0x00000000

#define MSK_NX90_mtgy_op_tc33_val         0xffffffff
#define SRT_NX90_mtgy_op_tc33_val         0
#define DFLT_VAL_NX90_mtgy_op_tc33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc33': */
#define MSK_USED_BITS_NX90_mtgy_op_tc33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc34 */
/* => MWMM TC register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc34  0x00001088
#define Adr_NX90_mtgy_mtgy_op_tc34 0xFF083088
#define Adr_NX90_mtgy_op_tc34      0xFF083088
#define DFLT_VAL_NX90_mtgy_op_tc34 0x00000000

#define MSK_NX90_mtgy_op_tc34_val         0xffffffff
#define SRT_NX90_mtgy_op_tc34_val         0
#define DFLT_VAL_NX90_mtgy_op_tc34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc34': */
#define MSK_USED_BITS_NX90_mtgy_op_tc34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc35 */
/* => MWMM TC register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc35  0x0000108C
#define Adr_NX90_mtgy_mtgy_op_tc35 0xFF08308C
#define Adr_NX90_mtgy_op_tc35      0xFF08308C
#define DFLT_VAL_NX90_mtgy_op_tc35 0x00000000

#define MSK_NX90_mtgy_op_tc35_val         0xffffffff
#define SRT_NX90_mtgy_op_tc35_val         0
#define DFLT_VAL_NX90_mtgy_op_tc35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc35': */
#define MSK_USED_BITS_NX90_mtgy_op_tc35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc36 */
/* => MWMM TC register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc36  0x00001090
#define Adr_NX90_mtgy_mtgy_op_tc36 0xFF083090
#define Adr_NX90_mtgy_op_tc36      0xFF083090
#define DFLT_VAL_NX90_mtgy_op_tc36 0x00000000

#define MSK_NX90_mtgy_op_tc36_val         0xffffffff
#define SRT_NX90_mtgy_op_tc36_val         0
#define DFLT_VAL_NX90_mtgy_op_tc36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc36': */
#define MSK_USED_BITS_NX90_mtgy_op_tc36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc37 */
/* => MWMM TC register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc37  0x00001094
#define Adr_NX90_mtgy_mtgy_op_tc37 0xFF083094
#define Adr_NX90_mtgy_op_tc37      0xFF083094
#define DFLT_VAL_NX90_mtgy_op_tc37 0x00000000

#define MSK_NX90_mtgy_op_tc37_val         0xffffffff
#define SRT_NX90_mtgy_op_tc37_val         0
#define DFLT_VAL_NX90_mtgy_op_tc37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc37': */
#define MSK_USED_BITS_NX90_mtgy_op_tc37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc38 */
/* => MWMM TC register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc38  0x00001098
#define Adr_NX90_mtgy_mtgy_op_tc38 0xFF083098
#define Adr_NX90_mtgy_op_tc38      0xFF083098
#define DFLT_VAL_NX90_mtgy_op_tc38 0x00000000

#define MSK_NX90_mtgy_op_tc38_val         0xffffffff
#define SRT_NX90_mtgy_op_tc38_val         0
#define DFLT_VAL_NX90_mtgy_op_tc38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc38': */
#define MSK_USED_BITS_NX90_mtgy_op_tc38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc39 */
/* => MWMM TC register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc39  0x0000109C
#define Adr_NX90_mtgy_mtgy_op_tc39 0xFF08309C
#define Adr_NX90_mtgy_op_tc39      0xFF08309C
#define DFLT_VAL_NX90_mtgy_op_tc39 0x00000000

#define MSK_NX90_mtgy_op_tc39_val         0xffffffff
#define SRT_NX90_mtgy_op_tc39_val         0
#define DFLT_VAL_NX90_mtgy_op_tc39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc39': */
#define MSK_USED_BITS_NX90_mtgy_op_tc39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc40 */
/* => MWMM TC register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc40  0x000010A0
#define Adr_NX90_mtgy_mtgy_op_tc40 0xFF0830A0
#define Adr_NX90_mtgy_op_tc40      0xFF0830A0
#define DFLT_VAL_NX90_mtgy_op_tc40 0x00000000

#define MSK_NX90_mtgy_op_tc40_val         0xffffffff
#define SRT_NX90_mtgy_op_tc40_val         0
#define DFLT_VAL_NX90_mtgy_op_tc40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc40': */
#define MSK_USED_BITS_NX90_mtgy_op_tc40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc41 */
/* => MWMM TC register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc41  0x000010A4
#define Adr_NX90_mtgy_mtgy_op_tc41 0xFF0830A4
#define Adr_NX90_mtgy_op_tc41      0xFF0830A4
#define DFLT_VAL_NX90_mtgy_op_tc41 0x00000000

#define MSK_NX90_mtgy_op_tc41_val         0xffffffff
#define SRT_NX90_mtgy_op_tc41_val         0
#define DFLT_VAL_NX90_mtgy_op_tc41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc41': */
#define MSK_USED_BITS_NX90_mtgy_op_tc41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc42 */
/* => MWMM TC register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc42  0x000010A8
#define Adr_NX90_mtgy_mtgy_op_tc42 0xFF0830A8
#define Adr_NX90_mtgy_op_tc42      0xFF0830A8
#define DFLT_VAL_NX90_mtgy_op_tc42 0x00000000

#define MSK_NX90_mtgy_op_tc42_val         0xffffffff
#define SRT_NX90_mtgy_op_tc42_val         0
#define DFLT_VAL_NX90_mtgy_op_tc42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc42': */
#define MSK_USED_BITS_NX90_mtgy_op_tc42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc43 */
/* => MWMM TC register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc43  0x000010AC
#define Adr_NX90_mtgy_mtgy_op_tc43 0xFF0830AC
#define Adr_NX90_mtgy_op_tc43      0xFF0830AC
#define DFLT_VAL_NX90_mtgy_op_tc43 0x00000000

#define MSK_NX90_mtgy_op_tc43_val         0xffffffff
#define SRT_NX90_mtgy_op_tc43_val         0
#define DFLT_VAL_NX90_mtgy_op_tc43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc43': */
#define MSK_USED_BITS_NX90_mtgy_op_tc43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc44 */
/* => MWMM TC register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc44  0x000010B0
#define Adr_NX90_mtgy_mtgy_op_tc44 0xFF0830B0
#define Adr_NX90_mtgy_op_tc44      0xFF0830B0
#define DFLT_VAL_NX90_mtgy_op_tc44 0x00000000

#define MSK_NX90_mtgy_op_tc44_val         0xffffffff
#define SRT_NX90_mtgy_op_tc44_val         0
#define DFLT_VAL_NX90_mtgy_op_tc44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc44': */
#define MSK_USED_BITS_NX90_mtgy_op_tc44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc45 */
/* => MWMM TC register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc45  0x000010B4
#define Adr_NX90_mtgy_mtgy_op_tc45 0xFF0830B4
#define Adr_NX90_mtgy_op_tc45      0xFF0830B4
#define DFLT_VAL_NX90_mtgy_op_tc45 0x00000000

#define MSK_NX90_mtgy_op_tc45_val         0xffffffff
#define SRT_NX90_mtgy_op_tc45_val         0
#define DFLT_VAL_NX90_mtgy_op_tc45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc45': */
#define MSK_USED_BITS_NX90_mtgy_op_tc45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc46 */
/* => MWMM TC register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc46  0x000010B8
#define Adr_NX90_mtgy_mtgy_op_tc46 0xFF0830B8
#define Adr_NX90_mtgy_op_tc46      0xFF0830B8
#define DFLT_VAL_NX90_mtgy_op_tc46 0x00000000

#define MSK_NX90_mtgy_op_tc46_val         0xffffffff
#define SRT_NX90_mtgy_op_tc46_val         0
#define DFLT_VAL_NX90_mtgy_op_tc46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc46': */
#define MSK_USED_BITS_NX90_mtgy_op_tc46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc47 */
/* => MWMM TC register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc47  0x000010BC
#define Adr_NX90_mtgy_mtgy_op_tc47 0xFF0830BC
#define Adr_NX90_mtgy_op_tc47      0xFF0830BC
#define DFLT_VAL_NX90_mtgy_op_tc47 0x00000000

#define MSK_NX90_mtgy_op_tc47_val         0xffffffff
#define SRT_NX90_mtgy_op_tc47_val         0
#define DFLT_VAL_NX90_mtgy_op_tc47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc47': */
#define MSK_USED_BITS_NX90_mtgy_op_tc47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc48 */
/* => MWMM TC register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc48  0x000010C0
#define Adr_NX90_mtgy_mtgy_op_tc48 0xFF0830C0
#define Adr_NX90_mtgy_op_tc48      0xFF0830C0
#define DFLT_VAL_NX90_mtgy_op_tc48 0x00000000

#define MSK_NX90_mtgy_op_tc48_val         0xffffffff
#define SRT_NX90_mtgy_op_tc48_val         0
#define DFLT_VAL_NX90_mtgy_op_tc48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc48': */
#define MSK_USED_BITS_NX90_mtgy_op_tc48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc49 */
/* => MWMM TC register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc49  0x000010C4
#define Adr_NX90_mtgy_mtgy_op_tc49 0xFF0830C4
#define Adr_NX90_mtgy_op_tc49      0xFF0830C4
#define DFLT_VAL_NX90_mtgy_op_tc49 0x00000000

#define MSK_NX90_mtgy_op_tc49_val         0xffffffff
#define SRT_NX90_mtgy_op_tc49_val         0
#define DFLT_VAL_NX90_mtgy_op_tc49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc49': */
#define MSK_USED_BITS_NX90_mtgy_op_tc49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc50 */
/* => MWMM TC register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc50  0x000010C8
#define Adr_NX90_mtgy_mtgy_op_tc50 0xFF0830C8
#define Adr_NX90_mtgy_op_tc50      0xFF0830C8
#define DFLT_VAL_NX90_mtgy_op_tc50 0x00000000

#define MSK_NX90_mtgy_op_tc50_val         0xffffffff
#define SRT_NX90_mtgy_op_tc50_val         0
#define DFLT_VAL_NX90_mtgy_op_tc50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc50': */
#define MSK_USED_BITS_NX90_mtgy_op_tc50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc51 */
/* => MWMM TC register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc51  0x000010CC
#define Adr_NX90_mtgy_mtgy_op_tc51 0xFF0830CC
#define Adr_NX90_mtgy_op_tc51      0xFF0830CC
#define DFLT_VAL_NX90_mtgy_op_tc51 0x00000000

#define MSK_NX90_mtgy_op_tc51_val         0xffffffff
#define SRT_NX90_mtgy_op_tc51_val         0
#define DFLT_VAL_NX90_mtgy_op_tc51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc51': */
#define MSK_USED_BITS_NX90_mtgy_op_tc51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc52 */
/* => MWMM TC register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc52  0x000010D0
#define Adr_NX90_mtgy_mtgy_op_tc52 0xFF0830D0
#define Adr_NX90_mtgy_op_tc52      0xFF0830D0
#define DFLT_VAL_NX90_mtgy_op_tc52 0x00000000

#define MSK_NX90_mtgy_op_tc52_val         0xffffffff
#define SRT_NX90_mtgy_op_tc52_val         0
#define DFLT_VAL_NX90_mtgy_op_tc52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc52': */
#define MSK_USED_BITS_NX90_mtgy_op_tc52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc53 */
/* => MWMM TC register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc53  0x000010D4
#define Adr_NX90_mtgy_mtgy_op_tc53 0xFF0830D4
#define Adr_NX90_mtgy_op_tc53      0xFF0830D4
#define DFLT_VAL_NX90_mtgy_op_tc53 0x00000000

#define MSK_NX90_mtgy_op_tc53_val         0xffffffff
#define SRT_NX90_mtgy_op_tc53_val         0
#define DFLT_VAL_NX90_mtgy_op_tc53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc53': */
#define MSK_USED_BITS_NX90_mtgy_op_tc53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc54 */
/* => MWMM TC register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc54  0x000010D8
#define Adr_NX90_mtgy_mtgy_op_tc54 0xFF0830D8
#define Adr_NX90_mtgy_op_tc54      0xFF0830D8
#define DFLT_VAL_NX90_mtgy_op_tc54 0x00000000

#define MSK_NX90_mtgy_op_tc54_val         0xffffffff
#define SRT_NX90_mtgy_op_tc54_val         0
#define DFLT_VAL_NX90_mtgy_op_tc54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc54': */
#define MSK_USED_BITS_NX90_mtgy_op_tc54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc55 */
/* => MWMM TC register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc55  0x000010DC
#define Adr_NX90_mtgy_mtgy_op_tc55 0xFF0830DC
#define Adr_NX90_mtgy_op_tc55      0xFF0830DC
#define DFLT_VAL_NX90_mtgy_op_tc55 0x00000000

#define MSK_NX90_mtgy_op_tc55_val         0xffffffff
#define SRT_NX90_mtgy_op_tc55_val         0
#define DFLT_VAL_NX90_mtgy_op_tc55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc55': */
#define MSK_USED_BITS_NX90_mtgy_op_tc55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc56 */
/* => MWMM TC register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc56  0x000010E0
#define Adr_NX90_mtgy_mtgy_op_tc56 0xFF0830E0
#define Adr_NX90_mtgy_op_tc56      0xFF0830E0
#define DFLT_VAL_NX90_mtgy_op_tc56 0x00000000

#define MSK_NX90_mtgy_op_tc56_val         0xffffffff
#define SRT_NX90_mtgy_op_tc56_val         0
#define DFLT_VAL_NX90_mtgy_op_tc56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc56': */
#define MSK_USED_BITS_NX90_mtgy_op_tc56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc57 */
/* => MWMM TC register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc57  0x000010E4
#define Adr_NX90_mtgy_mtgy_op_tc57 0xFF0830E4
#define Adr_NX90_mtgy_op_tc57      0xFF0830E4
#define DFLT_VAL_NX90_mtgy_op_tc57 0x00000000

#define MSK_NX90_mtgy_op_tc57_val         0xffffffff
#define SRT_NX90_mtgy_op_tc57_val         0
#define DFLT_VAL_NX90_mtgy_op_tc57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc57': */
#define MSK_USED_BITS_NX90_mtgy_op_tc57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc58 */
/* => MWMM TC register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc58  0x000010E8
#define Adr_NX90_mtgy_mtgy_op_tc58 0xFF0830E8
#define Adr_NX90_mtgy_op_tc58      0xFF0830E8
#define DFLT_VAL_NX90_mtgy_op_tc58 0x00000000

#define MSK_NX90_mtgy_op_tc58_val         0xffffffff
#define SRT_NX90_mtgy_op_tc58_val         0
#define DFLT_VAL_NX90_mtgy_op_tc58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc58': */
#define MSK_USED_BITS_NX90_mtgy_op_tc58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc59 */
/* => MWMM TC register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc59  0x000010EC
#define Adr_NX90_mtgy_mtgy_op_tc59 0xFF0830EC
#define Adr_NX90_mtgy_op_tc59      0xFF0830EC
#define DFLT_VAL_NX90_mtgy_op_tc59 0x00000000

#define MSK_NX90_mtgy_op_tc59_val         0xffffffff
#define SRT_NX90_mtgy_op_tc59_val         0
#define DFLT_VAL_NX90_mtgy_op_tc59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc59': */
#define MSK_USED_BITS_NX90_mtgy_op_tc59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc60 */
/* => MWMM TC register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc60  0x000010F0
#define Adr_NX90_mtgy_mtgy_op_tc60 0xFF0830F0
#define Adr_NX90_mtgy_op_tc60      0xFF0830F0
#define DFLT_VAL_NX90_mtgy_op_tc60 0x00000000

#define MSK_NX90_mtgy_op_tc60_val         0xffffffff
#define SRT_NX90_mtgy_op_tc60_val         0
#define DFLT_VAL_NX90_mtgy_op_tc60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc60': */
#define MSK_USED_BITS_NX90_mtgy_op_tc60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc61 */
/* => MWMM TC register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc61  0x000010F4
#define Adr_NX90_mtgy_mtgy_op_tc61 0xFF0830F4
#define Adr_NX90_mtgy_op_tc61      0xFF0830F4
#define DFLT_VAL_NX90_mtgy_op_tc61 0x00000000

#define MSK_NX90_mtgy_op_tc61_val         0xffffffff
#define SRT_NX90_mtgy_op_tc61_val         0
#define DFLT_VAL_NX90_mtgy_op_tc61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc61': */
#define MSK_USED_BITS_NX90_mtgy_op_tc61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc62 */
/* => MWMM TC register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc62  0x000010F8
#define Adr_NX90_mtgy_mtgy_op_tc62 0xFF0830F8
#define Adr_NX90_mtgy_op_tc62      0xFF0830F8
#define DFLT_VAL_NX90_mtgy_op_tc62 0x00000000

#define MSK_NX90_mtgy_op_tc62_val         0xffffffff
#define SRT_NX90_mtgy_op_tc62_val         0
#define DFLT_VAL_NX90_mtgy_op_tc62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc62': */
#define MSK_USED_BITS_NX90_mtgy_op_tc62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc63 */
/* => MWMM TC register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc63  0x000010FC
#define Adr_NX90_mtgy_mtgy_op_tc63 0xFF0830FC
#define Adr_NX90_mtgy_op_tc63      0xFF0830FC
#define DFLT_VAL_NX90_mtgy_op_tc63 0x00000000

#define MSK_NX90_mtgy_op_tc63_val         0xffffffff
#define SRT_NX90_mtgy_op_tc63_val         0
#define DFLT_VAL_NX90_mtgy_op_tc63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc63': */
#define MSK_USED_BITS_NX90_mtgy_op_tc63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc64 */
/* => MWMM TC register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc64  0x00001100
#define Adr_NX90_mtgy_mtgy_op_tc64 0xFF083100
#define Adr_NX90_mtgy_op_tc64      0xFF083100
#define DFLT_VAL_NX90_mtgy_op_tc64 0x00000000

#define MSK_NX90_mtgy_op_tc64_val         0xffffffff
#define SRT_NX90_mtgy_op_tc64_val         0
#define DFLT_VAL_NX90_mtgy_op_tc64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc64': */
#define MSK_USED_BITS_NX90_mtgy_op_tc64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc65 */
/* => MWMM TC register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc65  0x00001104
#define Adr_NX90_mtgy_mtgy_op_tc65 0xFF083104
#define Adr_NX90_mtgy_op_tc65      0xFF083104
#define DFLT_VAL_NX90_mtgy_op_tc65 0x00000000

#define MSK_NX90_mtgy_op_tc65_val         0xffffffff
#define SRT_NX90_mtgy_op_tc65_val         0
#define DFLT_VAL_NX90_mtgy_op_tc65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc65': */
#define MSK_USED_BITS_NX90_mtgy_op_tc65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc66 */
/* => MWMM TC register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc66  0x00001108
#define Adr_NX90_mtgy_mtgy_op_tc66 0xFF083108
#define Adr_NX90_mtgy_op_tc66      0xFF083108
#define DFLT_VAL_NX90_mtgy_op_tc66 0x00000000

#define MSK_NX90_mtgy_op_tc66_val         0xffffffff
#define SRT_NX90_mtgy_op_tc66_val         0
#define DFLT_VAL_NX90_mtgy_op_tc66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc66': */
#define MSK_USED_BITS_NX90_mtgy_op_tc66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc67 */
/* => MWMM TC register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc67  0x0000110C
#define Adr_NX90_mtgy_mtgy_op_tc67 0xFF08310C
#define Adr_NX90_mtgy_op_tc67      0xFF08310C
#define DFLT_VAL_NX90_mtgy_op_tc67 0x00000000

#define MSK_NX90_mtgy_op_tc67_val         0xffffffff
#define SRT_NX90_mtgy_op_tc67_val         0
#define DFLT_VAL_NX90_mtgy_op_tc67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc67': */
#define MSK_USED_BITS_NX90_mtgy_op_tc67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc68 */
/* => MWMM TC register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc68  0x00001110
#define Adr_NX90_mtgy_mtgy_op_tc68 0xFF083110
#define Adr_NX90_mtgy_op_tc68      0xFF083110
#define DFLT_VAL_NX90_mtgy_op_tc68 0x00000000

#define MSK_NX90_mtgy_op_tc68_val         0xffffffff
#define SRT_NX90_mtgy_op_tc68_val         0
#define DFLT_VAL_NX90_mtgy_op_tc68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc68': */
#define MSK_USED_BITS_NX90_mtgy_op_tc68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc69 */
/* => MWMM TC register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc69  0x00001114
#define Adr_NX90_mtgy_mtgy_op_tc69 0xFF083114
#define Adr_NX90_mtgy_op_tc69      0xFF083114
#define DFLT_VAL_NX90_mtgy_op_tc69 0x00000000

#define MSK_NX90_mtgy_op_tc69_val         0xffffffff
#define SRT_NX90_mtgy_op_tc69_val         0
#define DFLT_VAL_NX90_mtgy_op_tc69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc69': */
#define MSK_USED_BITS_NX90_mtgy_op_tc69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc70 */
/* => MWMM TC register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc70  0x00001118
#define Adr_NX90_mtgy_mtgy_op_tc70 0xFF083118
#define Adr_NX90_mtgy_op_tc70      0xFF083118
#define DFLT_VAL_NX90_mtgy_op_tc70 0x00000000

#define MSK_NX90_mtgy_op_tc70_val         0xffffffff
#define SRT_NX90_mtgy_op_tc70_val         0
#define DFLT_VAL_NX90_mtgy_op_tc70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc70': */
#define MSK_USED_BITS_NX90_mtgy_op_tc70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc71 */
/* => MWMM TC register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc71  0x0000111C
#define Adr_NX90_mtgy_mtgy_op_tc71 0xFF08311C
#define Adr_NX90_mtgy_op_tc71      0xFF08311C
#define DFLT_VAL_NX90_mtgy_op_tc71 0x00000000

#define MSK_NX90_mtgy_op_tc71_val         0xffffffff
#define SRT_NX90_mtgy_op_tc71_val         0
#define DFLT_VAL_NX90_mtgy_op_tc71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc71': */
#define MSK_USED_BITS_NX90_mtgy_op_tc71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc72 */
/* => MWMM TC register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc72  0x00001120
#define Adr_NX90_mtgy_mtgy_op_tc72 0xFF083120
#define Adr_NX90_mtgy_op_tc72      0xFF083120
#define DFLT_VAL_NX90_mtgy_op_tc72 0x00000000

#define MSK_NX90_mtgy_op_tc72_val         0xffffffff
#define SRT_NX90_mtgy_op_tc72_val         0
#define DFLT_VAL_NX90_mtgy_op_tc72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc72': */
#define MSK_USED_BITS_NX90_mtgy_op_tc72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc73 */
/* => MWMM TC register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc73  0x00001124
#define Adr_NX90_mtgy_mtgy_op_tc73 0xFF083124
#define Adr_NX90_mtgy_op_tc73      0xFF083124
#define DFLT_VAL_NX90_mtgy_op_tc73 0x00000000

#define MSK_NX90_mtgy_op_tc73_val         0xffffffff
#define SRT_NX90_mtgy_op_tc73_val         0
#define DFLT_VAL_NX90_mtgy_op_tc73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc73': */
#define MSK_USED_BITS_NX90_mtgy_op_tc73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc74 */
/* => MWMM TC register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc74  0x00001128
#define Adr_NX90_mtgy_mtgy_op_tc74 0xFF083128
#define Adr_NX90_mtgy_op_tc74      0xFF083128
#define DFLT_VAL_NX90_mtgy_op_tc74 0x00000000

#define MSK_NX90_mtgy_op_tc74_val         0xffffffff
#define SRT_NX90_mtgy_op_tc74_val         0
#define DFLT_VAL_NX90_mtgy_op_tc74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc74': */
#define MSK_USED_BITS_NX90_mtgy_op_tc74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc75 */
/* => MWMM TC register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc75  0x0000112C
#define Adr_NX90_mtgy_mtgy_op_tc75 0xFF08312C
#define Adr_NX90_mtgy_op_tc75      0xFF08312C
#define DFLT_VAL_NX90_mtgy_op_tc75 0x00000000

#define MSK_NX90_mtgy_op_tc75_val         0xffffffff
#define SRT_NX90_mtgy_op_tc75_val         0
#define DFLT_VAL_NX90_mtgy_op_tc75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc75': */
#define MSK_USED_BITS_NX90_mtgy_op_tc75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc76 */
/* => MWMM TC register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc76  0x00001130
#define Adr_NX90_mtgy_mtgy_op_tc76 0xFF083130
#define Adr_NX90_mtgy_op_tc76      0xFF083130
#define DFLT_VAL_NX90_mtgy_op_tc76 0x00000000

#define MSK_NX90_mtgy_op_tc76_val         0xffffffff
#define SRT_NX90_mtgy_op_tc76_val         0
#define DFLT_VAL_NX90_mtgy_op_tc76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc76': */
#define MSK_USED_BITS_NX90_mtgy_op_tc76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc77 */
/* => MWMM TC register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc77  0x00001134
#define Adr_NX90_mtgy_mtgy_op_tc77 0xFF083134
#define Adr_NX90_mtgy_op_tc77      0xFF083134
#define DFLT_VAL_NX90_mtgy_op_tc77 0x00000000

#define MSK_NX90_mtgy_op_tc77_val         0xffffffff
#define SRT_NX90_mtgy_op_tc77_val         0
#define DFLT_VAL_NX90_mtgy_op_tc77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc77': */
#define MSK_USED_BITS_NX90_mtgy_op_tc77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc78 */
/* => MWMM TC register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc78  0x00001138
#define Adr_NX90_mtgy_mtgy_op_tc78 0xFF083138
#define Adr_NX90_mtgy_op_tc78      0xFF083138
#define DFLT_VAL_NX90_mtgy_op_tc78 0x00000000

#define MSK_NX90_mtgy_op_tc78_val         0xffffffff
#define SRT_NX90_mtgy_op_tc78_val         0
#define DFLT_VAL_NX90_mtgy_op_tc78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc78': */
#define MSK_USED_BITS_NX90_mtgy_op_tc78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc79 */
/* => MWMM TC register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc79  0x0000113C
#define Adr_NX90_mtgy_mtgy_op_tc79 0xFF08313C
#define Adr_NX90_mtgy_op_tc79      0xFF08313C
#define DFLT_VAL_NX90_mtgy_op_tc79 0x00000000

#define MSK_NX90_mtgy_op_tc79_val         0xffffffff
#define SRT_NX90_mtgy_op_tc79_val         0
#define DFLT_VAL_NX90_mtgy_op_tc79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc79': */
#define MSK_USED_BITS_NX90_mtgy_op_tc79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc80 */
/* => MWMM TC register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc80  0x00001140
#define Adr_NX90_mtgy_mtgy_op_tc80 0xFF083140
#define Adr_NX90_mtgy_op_tc80      0xFF083140
#define DFLT_VAL_NX90_mtgy_op_tc80 0x00000000

#define MSK_NX90_mtgy_op_tc80_val         0xffffffff
#define SRT_NX90_mtgy_op_tc80_val         0
#define DFLT_VAL_NX90_mtgy_op_tc80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc80': */
#define MSK_USED_BITS_NX90_mtgy_op_tc80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc81 */
/* => MWMM TC register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc81  0x00001144
#define Adr_NX90_mtgy_mtgy_op_tc81 0xFF083144
#define Adr_NX90_mtgy_op_tc81      0xFF083144
#define DFLT_VAL_NX90_mtgy_op_tc81 0x00000000

#define MSK_NX90_mtgy_op_tc81_val         0xffffffff
#define SRT_NX90_mtgy_op_tc81_val         0
#define DFLT_VAL_NX90_mtgy_op_tc81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc81': */
#define MSK_USED_BITS_NX90_mtgy_op_tc81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc82 */
/* => MWMM TC register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc82  0x00001148
#define Adr_NX90_mtgy_mtgy_op_tc82 0xFF083148
#define Adr_NX90_mtgy_op_tc82      0xFF083148
#define DFLT_VAL_NX90_mtgy_op_tc82 0x00000000

#define MSK_NX90_mtgy_op_tc82_val         0xffffffff
#define SRT_NX90_mtgy_op_tc82_val         0
#define DFLT_VAL_NX90_mtgy_op_tc82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc82': */
#define MSK_USED_BITS_NX90_mtgy_op_tc82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc83 */
/* => MWMM TC register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc83  0x0000114C
#define Adr_NX90_mtgy_mtgy_op_tc83 0xFF08314C
#define Adr_NX90_mtgy_op_tc83      0xFF08314C
#define DFLT_VAL_NX90_mtgy_op_tc83 0x00000000

#define MSK_NX90_mtgy_op_tc83_val         0xffffffff
#define SRT_NX90_mtgy_op_tc83_val         0
#define DFLT_VAL_NX90_mtgy_op_tc83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc83': */
#define MSK_USED_BITS_NX90_mtgy_op_tc83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc84 */
/* => MWMM TC register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc84  0x00001150
#define Adr_NX90_mtgy_mtgy_op_tc84 0xFF083150
#define Adr_NX90_mtgy_op_tc84      0xFF083150
#define DFLT_VAL_NX90_mtgy_op_tc84 0x00000000

#define MSK_NX90_mtgy_op_tc84_val         0xffffffff
#define SRT_NX90_mtgy_op_tc84_val         0
#define DFLT_VAL_NX90_mtgy_op_tc84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc84': */
#define MSK_USED_BITS_NX90_mtgy_op_tc84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc85 */
/* => MWMM TC register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc85  0x00001154
#define Adr_NX90_mtgy_mtgy_op_tc85 0xFF083154
#define Adr_NX90_mtgy_op_tc85      0xFF083154
#define DFLT_VAL_NX90_mtgy_op_tc85 0x00000000

#define MSK_NX90_mtgy_op_tc85_val         0xffffffff
#define SRT_NX90_mtgy_op_tc85_val         0
#define DFLT_VAL_NX90_mtgy_op_tc85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc85': */
#define MSK_USED_BITS_NX90_mtgy_op_tc85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc86 */
/* => MWMM TC register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc86  0x00001158
#define Adr_NX90_mtgy_mtgy_op_tc86 0xFF083158
#define Adr_NX90_mtgy_op_tc86      0xFF083158
#define DFLT_VAL_NX90_mtgy_op_tc86 0x00000000

#define MSK_NX90_mtgy_op_tc86_val         0xffffffff
#define SRT_NX90_mtgy_op_tc86_val         0
#define DFLT_VAL_NX90_mtgy_op_tc86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc86': */
#define MSK_USED_BITS_NX90_mtgy_op_tc86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc87 */
/* => MWMM TC register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc87  0x0000115C
#define Adr_NX90_mtgy_mtgy_op_tc87 0xFF08315C
#define Adr_NX90_mtgy_op_tc87      0xFF08315C
#define DFLT_VAL_NX90_mtgy_op_tc87 0x00000000

#define MSK_NX90_mtgy_op_tc87_val         0xffffffff
#define SRT_NX90_mtgy_op_tc87_val         0
#define DFLT_VAL_NX90_mtgy_op_tc87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc87': */
#define MSK_USED_BITS_NX90_mtgy_op_tc87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc88 */
/* => MWMM TC register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc88  0x00001160
#define Adr_NX90_mtgy_mtgy_op_tc88 0xFF083160
#define Adr_NX90_mtgy_op_tc88      0xFF083160
#define DFLT_VAL_NX90_mtgy_op_tc88 0x00000000

#define MSK_NX90_mtgy_op_tc88_val         0xffffffff
#define SRT_NX90_mtgy_op_tc88_val         0
#define DFLT_VAL_NX90_mtgy_op_tc88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc88': */
#define MSK_USED_BITS_NX90_mtgy_op_tc88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc89 */
/* => MWMM TC register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc89  0x00001164
#define Adr_NX90_mtgy_mtgy_op_tc89 0xFF083164
#define Adr_NX90_mtgy_op_tc89      0xFF083164
#define DFLT_VAL_NX90_mtgy_op_tc89 0x00000000

#define MSK_NX90_mtgy_op_tc89_val         0xffffffff
#define SRT_NX90_mtgy_op_tc89_val         0
#define DFLT_VAL_NX90_mtgy_op_tc89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc89': */
#define MSK_USED_BITS_NX90_mtgy_op_tc89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc90 */
/* => MWMM TC register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc90  0x00001168
#define Adr_NX90_mtgy_mtgy_op_tc90 0xFF083168
#define Adr_NX90_mtgy_op_tc90      0xFF083168
#define DFLT_VAL_NX90_mtgy_op_tc90 0x00000000

#define MSK_NX90_mtgy_op_tc90_val         0xffffffff
#define SRT_NX90_mtgy_op_tc90_val         0
#define DFLT_VAL_NX90_mtgy_op_tc90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc90': */
#define MSK_USED_BITS_NX90_mtgy_op_tc90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc91 */
/* => MWMM TC register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc91  0x0000116C
#define Adr_NX90_mtgy_mtgy_op_tc91 0xFF08316C
#define Adr_NX90_mtgy_op_tc91      0xFF08316C
#define DFLT_VAL_NX90_mtgy_op_tc91 0x00000000

#define MSK_NX90_mtgy_op_tc91_val         0xffffffff
#define SRT_NX90_mtgy_op_tc91_val         0
#define DFLT_VAL_NX90_mtgy_op_tc91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc91': */
#define MSK_USED_BITS_NX90_mtgy_op_tc91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc92 */
/* => MWMM TC register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc92  0x00001170
#define Adr_NX90_mtgy_mtgy_op_tc92 0xFF083170
#define Adr_NX90_mtgy_op_tc92      0xFF083170
#define DFLT_VAL_NX90_mtgy_op_tc92 0x00000000

#define MSK_NX90_mtgy_op_tc92_val         0xffffffff
#define SRT_NX90_mtgy_op_tc92_val         0
#define DFLT_VAL_NX90_mtgy_op_tc92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc92': */
#define MSK_USED_BITS_NX90_mtgy_op_tc92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc93 */
/* => MWMM TC register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc93  0x00001174
#define Adr_NX90_mtgy_mtgy_op_tc93 0xFF083174
#define Adr_NX90_mtgy_op_tc93      0xFF083174
#define DFLT_VAL_NX90_mtgy_op_tc93 0x00000000

#define MSK_NX90_mtgy_op_tc93_val         0xffffffff
#define SRT_NX90_mtgy_op_tc93_val         0
#define DFLT_VAL_NX90_mtgy_op_tc93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc93': */
#define MSK_USED_BITS_NX90_mtgy_op_tc93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc94 */
/* => MWMM TC register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc94  0x00001178
#define Adr_NX90_mtgy_mtgy_op_tc94 0xFF083178
#define Adr_NX90_mtgy_op_tc94      0xFF083178
#define DFLT_VAL_NX90_mtgy_op_tc94 0x00000000

#define MSK_NX90_mtgy_op_tc94_val         0xffffffff
#define SRT_NX90_mtgy_op_tc94_val         0
#define DFLT_VAL_NX90_mtgy_op_tc94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc94': */
#define MSK_USED_BITS_NX90_mtgy_op_tc94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc95 */
/* => MWMM TC register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc95  0x0000117C
#define Adr_NX90_mtgy_mtgy_op_tc95 0xFF08317C
#define Adr_NX90_mtgy_op_tc95      0xFF08317C
#define DFLT_VAL_NX90_mtgy_op_tc95 0x00000000

#define MSK_NX90_mtgy_op_tc95_val         0xffffffff
#define SRT_NX90_mtgy_op_tc95_val         0
#define DFLT_VAL_NX90_mtgy_op_tc95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc95': */
#define MSK_USED_BITS_NX90_mtgy_op_tc95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc96 */
/* => MWMM TC register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc96  0x00001180
#define Adr_NX90_mtgy_mtgy_op_tc96 0xFF083180
#define Adr_NX90_mtgy_op_tc96      0xFF083180
#define DFLT_VAL_NX90_mtgy_op_tc96 0x00000000

#define MSK_NX90_mtgy_op_tc96_val         0xffffffff
#define SRT_NX90_mtgy_op_tc96_val         0
#define DFLT_VAL_NX90_mtgy_op_tc96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc96': */
#define MSK_USED_BITS_NX90_mtgy_op_tc96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc97 */
/* => MWMM TC register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc97  0x00001184
#define Adr_NX90_mtgy_mtgy_op_tc97 0xFF083184
#define Adr_NX90_mtgy_op_tc97      0xFF083184
#define DFLT_VAL_NX90_mtgy_op_tc97 0x00000000

#define MSK_NX90_mtgy_op_tc97_val         0xffffffff
#define SRT_NX90_mtgy_op_tc97_val         0
#define DFLT_VAL_NX90_mtgy_op_tc97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc97': */
#define MSK_USED_BITS_NX90_mtgy_op_tc97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc98 */
/* => MWMM TC register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc98  0x00001188
#define Adr_NX90_mtgy_mtgy_op_tc98 0xFF083188
#define Adr_NX90_mtgy_op_tc98      0xFF083188
#define DFLT_VAL_NX90_mtgy_op_tc98 0x00000000

#define MSK_NX90_mtgy_op_tc98_val         0xffffffff
#define SRT_NX90_mtgy_op_tc98_val         0
#define DFLT_VAL_NX90_mtgy_op_tc98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc98': */
#define MSK_USED_BITS_NX90_mtgy_op_tc98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc99 */
/* => MWMM TC register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc99  0x0000118C
#define Adr_NX90_mtgy_mtgy_op_tc99 0xFF08318C
#define Adr_NX90_mtgy_op_tc99      0xFF08318C
#define DFLT_VAL_NX90_mtgy_op_tc99 0x00000000

#define MSK_NX90_mtgy_op_tc99_val         0xffffffff
#define SRT_NX90_mtgy_op_tc99_val         0
#define DFLT_VAL_NX90_mtgy_op_tc99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc99': */
#define MSK_USED_BITS_NX90_mtgy_op_tc99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc100 */
/* => MWMM TC register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc100  0x00001190
#define Adr_NX90_mtgy_mtgy_op_tc100 0xFF083190
#define Adr_NX90_mtgy_op_tc100      0xFF083190
#define DFLT_VAL_NX90_mtgy_op_tc100 0x00000000

#define MSK_NX90_mtgy_op_tc100_val         0xffffffff
#define SRT_NX90_mtgy_op_tc100_val         0
#define DFLT_VAL_NX90_mtgy_op_tc100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc100': */
#define MSK_USED_BITS_NX90_mtgy_op_tc100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc101 */
/* => MWMM TC register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc101  0x00001194
#define Adr_NX90_mtgy_mtgy_op_tc101 0xFF083194
#define Adr_NX90_mtgy_op_tc101      0xFF083194
#define DFLT_VAL_NX90_mtgy_op_tc101 0x00000000

#define MSK_NX90_mtgy_op_tc101_val         0xffffffff
#define SRT_NX90_mtgy_op_tc101_val         0
#define DFLT_VAL_NX90_mtgy_op_tc101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc101': */
#define MSK_USED_BITS_NX90_mtgy_op_tc101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc102 */
/* => MWMM TC register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc102  0x00001198
#define Adr_NX90_mtgy_mtgy_op_tc102 0xFF083198
#define Adr_NX90_mtgy_op_tc102      0xFF083198
#define DFLT_VAL_NX90_mtgy_op_tc102 0x00000000

#define MSK_NX90_mtgy_op_tc102_val         0xffffffff
#define SRT_NX90_mtgy_op_tc102_val         0
#define DFLT_VAL_NX90_mtgy_op_tc102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc102': */
#define MSK_USED_BITS_NX90_mtgy_op_tc102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc103 */
/* => MWMM TC register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc103  0x0000119C
#define Adr_NX90_mtgy_mtgy_op_tc103 0xFF08319C
#define Adr_NX90_mtgy_op_tc103      0xFF08319C
#define DFLT_VAL_NX90_mtgy_op_tc103 0x00000000

#define MSK_NX90_mtgy_op_tc103_val         0xffffffff
#define SRT_NX90_mtgy_op_tc103_val         0
#define DFLT_VAL_NX90_mtgy_op_tc103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc103': */
#define MSK_USED_BITS_NX90_mtgy_op_tc103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc104 */
/* => MWMM TC register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc104  0x000011A0
#define Adr_NX90_mtgy_mtgy_op_tc104 0xFF0831A0
#define Adr_NX90_mtgy_op_tc104      0xFF0831A0
#define DFLT_VAL_NX90_mtgy_op_tc104 0x00000000

#define MSK_NX90_mtgy_op_tc104_val         0xffffffff
#define SRT_NX90_mtgy_op_tc104_val         0
#define DFLT_VAL_NX90_mtgy_op_tc104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc104': */
#define MSK_USED_BITS_NX90_mtgy_op_tc104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc105 */
/* => MWMM TC register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc105  0x000011A4
#define Adr_NX90_mtgy_mtgy_op_tc105 0xFF0831A4
#define Adr_NX90_mtgy_op_tc105      0xFF0831A4
#define DFLT_VAL_NX90_mtgy_op_tc105 0x00000000

#define MSK_NX90_mtgy_op_tc105_val         0xffffffff
#define SRT_NX90_mtgy_op_tc105_val         0
#define DFLT_VAL_NX90_mtgy_op_tc105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc105': */
#define MSK_USED_BITS_NX90_mtgy_op_tc105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc106 */
/* => MWMM TC register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc106  0x000011A8
#define Adr_NX90_mtgy_mtgy_op_tc106 0xFF0831A8
#define Adr_NX90_mtgy_op_tc106      0xFF0831A8
#define DFLT_VAL_NX90_mtgy_op_tc106 0x00000000

#define MSK_NX90_mtgy_op_tc106_val         0xffffffff
#define SRT_NX90_mtgy_op_tc106_val         0
#define DFLT_VAL_NX90_mtgy_op_tc106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc106': */
#define MSK_USED_BITS_NX90_mtgy_op_tc106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc107 */
/* => MWMM TC register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc107  0x000011AC
#define Adr_NX90_mtgy_mtgy_op_tc107 0xFF0831AC
#define Adr_NX90_mtgy_op_tc107      0xFF0831AC
#define DFLT_VAL_NX90_mtgy_op_tc107 0x00000000

#define MSK_NX90_mtgy_op_tc107_val         0xffffffff
#define SRT_NX90_mtgy_op_tc107_val         0
#define DFLT_VAL_NX90_mtgy_op_tc107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc107': */
#define MSK_USED_BITS_NX90_mtgy_op_tc107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc108 */
/* => MWMM TC register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc108  0x000011B0
#define Adr_NX90_mtgy_mtgy_op_tc108 0xFF0831B0
#define Adr_NX90_mtgy_op_tc108      0xFF0831B0
#define DFLT_VAL_NX90_mtgy_op_tc108 0x00000000

#define MSK_NX90_mtgy_op_tc108_val         0xffffffff
#define SRT_NX90_mtgy_op_tc108_val         0
#define DFLT_VAL_NX90_mtgy_op_tc108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc108': */
#define MSK_USED_BITS_NX90_mtgy_op_tc108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc109 */
/* => MWMM TC register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc109  0x000011B4
#define Adr_NX90_mtgy_mtgy_op_tc109 0xFF0831B4
#define Adr_NX90_mtgy_op_tc109      0xFF0831B4
#define DFLT_VAL_NX90_mtgy_op_tc109 0x00000000

#define MSK_NX90_mtgy_op_tc109_val         0xffffffff
#define SRT_NX90_mtgy_op_tc109_val         0
#define DFLT_VAL_NX90_mtgy_op_tc109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc109': */
#define MSK_USED_BITS_NX90_mtgy_op_tc109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc110 */
/* => MWMM TC register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc110  0x000011B8
#define Adr_NX90_mtgy_mtgy_op_tc110 0xFF0831B8
#define Adr_NX90_mtgy_op_tc110      0xFF0831B8
#define DFLT_VAL_NX90_mtgy_op_tc110 0x00000000

#define MSK_NX90_mtgy_op_tc110_val         0xffffffff
#define SRT_NX90_mtgy_op_tc110_val         0
#define DFLT_VAL_NX90_mtgy_op_tc110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc110': */
#define MSK_USED_BITS_NX90_mtgy_op_tc110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc111 */
/* => MWMM TC register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc111  0x000011BC
#define Adr_NX90_mtgy_mtgy_op_tc111 0xFF0831BC
#define Adr_NX90_mtgy_op_tc111      0xFF0831BC
#define DFLT_VAL_NX90_mtgy_op_tc111 0x00000000

#define MSK_NX90_mtgy_op_tc111_val         0xffffffff
#define SRT_NX90_mtgy_op_tc111_val         0
#define DFLT_VAL_NX90_mtgy_op_tc111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc111': */
#define MSK_USED_BITS_NX90_mtgy_op_tc111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc112 */
/* => MWMM TC register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc112  0x000011C0
#define Adr_NX90_mtgy_mtgy_op_tc112 0xFF0831C0
#define Adr_NX90_mtgy_op_tc112      0xFF0831C0
#define DFLT_VAL_NX90_mtgy_op_tc112 0x00000000

#define MSK_NX90_mtgy_op_tc112_val         0xffffffff
#define SRT_NX90_mtgy_op_tc112_val         0
#define DFLT_VAL_NX90_mtgy_op_tc112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc112': */
#define MSK_USED_BITS_NX90_mtgy_op_tc112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc113 */
/* => MWMM TC register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc113  0x000011C4
#define Adr_NX90_mtgy_mtgy_op_tc113 0xFF0831C4
#define Adr_NX90_mtgy_op_tc113      0xFF0831C4
#define DFLT_VAL_NX90_mtgy_op_tc113 0x00000000

#define MSK_NX90_mtgy_op_tc113_val         0xffffffff
#define SRT_NX90_mtgy_op_tc113_val         0
#define DFLT_VAL_NX90_mtgy_op_tc113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc113': */
#define MSK_USED_BITS_NX90_mtgy_op_tc113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc114 */
/* => MWMM TC register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc114  0x000011C8
#define Adr_NX90_mtgy_mtgy_op_tc114 0xFF0831C8
#define Adr_NX90_mtgy_op_tc114      0xFF0831C8
#define DFLT_VAL_NX90_mtgy_op_tc114 0x00000000

#define MSK_NX90_mtgy_op_tc114_val         0xffffffff
#define SRT_NX90_mtgy_op_tc114_val         0
#define DFLT_VAL_NX90_mtgy_op_tc114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc114': */
#define MSK_USED_BITS_NX90_mtgy_op_tc114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc115 */
/* => MWMM TC register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc115  0x000011CC
#define Adr_NX90_mtgy_mtgy_op_tc115 0xFF0831CC
#define Adr_NX90_mtgy_op_tc115      0xFF0831CC
#define DFLT_VAL_NX90_mtgy_op_tc115 0x00000000

#define MSK_NX90_mtgy_op_tc115_val         0xffffffff
#define SRT_NX90_mtgy_op_tc115_val         0
#define DFLT_VAL_NX90_mtgy_op_tc115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc115': */
#define MSK_USED_BITS_NX90_mtgy_op_tc115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc116 */
/* => MWMM TC register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc116  0x000011D0
#define Adr_NX90_mtgy_mtgy_op_tc116 0xFF0831D0
#define Adr_NX90_mtgy_op_tc116      0xFF0831D0
#define DFLT_VAL_NX90_mtgy_op_tc116 0x00000000

#define MSK_NX90_mtgy_op_tc116_val         0xffffffff
#define SRT_NX90_mtgy_op_tc116_val         0
#define DFLT_VAL_NX90_mtgy_op_tc116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc116': */
#define MSK_USED_BITS_NX90_mtgy_op_tc116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc117 */
/* => MWMM TC register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc117  0x000011D4
#define Adr_NX90_mtgy_mtgy_op_tc117 0xFF0831D4
#define Adr_NX90_mtgy_op_tc117      0xFF0831D4
#define DFLT_VAL_NX90_mtgy_op_tc117 0x00000000

#define MSK_NX90_mtgy_op_tc117_val         0xffffffff
#define SRT_NX90_mtgy_op_tc117_val         0
#define DFLT_VAL_NX90_mtgy_op_tc117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc117': */
#define MSK_USED_BITS_NX90_mtgy_op_tc117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc118 */
/* => MWMM TC register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc118  0x000011D8
#define Adr_NX90_mtgy_mtgy_op_tc118 0xFF0831D8
#define Adr_NX90_mtgy_op_tc118      0xFF0831D8
#define DFLT_VAL_NX90_mtgy_op_tc118 0x00000000

#define MSK_NX90_mtgy_op_tc118_val         0xffffffff
#define SRT_NX90_mtgy_op_tc118_val         0
#define DFLT_VAL_NX90_mtgy_op_tc118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc118': */
#define MSK_USED_BITS_NX90_mtgy_op_tc118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc119 */
/* => MWMM TC register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc119  0x000011DC
#define Adr_NX90_mtgy_mtgy_op_tc119 0xFF0831DC
#define Adr_NX90_mtgy_op_tc119      0xFF0831DC
#define DFLT_VAL_NX90_mtgy_op_tc119 0x00000000

#define MSK_NX90_mtgy_op_tc119_val         0xffffffff
#define SRT_NX90_mtgy_op_tc119_val         0
#define DFLT_VAL_NX90_mtgy_op_tc119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc119': */
#define MSK_USED_BITS_NX90_mtgy_op_tc119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc120 */
/* => MWMM TC register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc120  0x000011E0
#define Adr_NX90_mtgy_mtgy_op_tc120 0xFF0831E0
#define Adr_NX90_mtgy_op_tc120      0xFF0831E0
#define DFLT_VAL_NX90_mtgy_op_tc120 0x00000000

#define MSK_NX90_mtgy_op_tc120_val         0xffffffff
#define SRT_NX90_mtgy_op_tc120_val         0
#define DFLT_VAL_NX90_mtgy_op_tc120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc120': */
#define MSK_USED_BITS_NX90_mtgy_op_tc120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc121 */
/* => MWMM TC register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc121  0x000011E4
#define Adr_NX90_mtgy_mtgy_op_tc121 0xFF0831E4
#define Adr_NX90_mtgy_op_tc121      0xFF0831E4
#define DFLT_VAL_NX90_mtgy_op_tc121 0x00000000

#define MSK_NX90_mtgy_op_tc121_val         0xffffffff
#define SRT_NX90_mtgy_op_tc121_val         0
#define DFLT_VAL_NX90_mtgy_op_tc121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc121': */
#define MSK_USED_BITS_NX90_mtgy_op_tc121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc122 */
/* => MWMM TC register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc122  0x000011E8
#define Adr_NX90_mtgy_mtgy_op_tc122 0xFF0831E8
#define Adr_NX90_mtgy_op_tc122      0xFF0831E8
#define DFLT_VAL_NX90_mtgy_op_tc122 0x00000000

#define MSK_NX90_mtgy_op_tc122_val         0xffffffff
#define SRT_NX90_mtgy_op_tc122_val         0
#define DFLT_VAL_NX90_mtgy_op_tc122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc122': */
#define MSK_USED_BITS_NX90_mtgy_op_tc122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc123 */
/* => MWMM TC register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc123  0x000011EC
#define Adr_NX90_mtgy_mtgy_op_tc123 0xFF0831EC
#define Adr_NX90_mtgy_op_tc123      0xFF0831EC
#define DFLT_VAL_NX90_mtgy_op_tc123 0x00000000

#define MSK_NX90_mtgy_op_tc123_val         0xffffffff
#define SRT_NX90_mtgy_op_tc123_val         0
#define DFLT_VAL_NX90_mtgy_op_tc123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc123': */
#define MSK_USED_BITS_NX90_mtgy_op_tc123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc124 */
/* => MWMM TC register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc124  0x000011F0
#define Adr_NX90_mtgy_mtgy_op_tc124 0xFF0831F0
#define Adr_NX90_mtgy_op_tc124      0xFF0831F0
#define DFLT_VAL_NX90_mtgy_op_tc124 0x00000000

#define MSK_NX90_mtgy_op_tc124_val         0xffffffff
#define SRT_NX90_mtgy_op_tc124_val         0
#define DFLT_VAL_NX90_mtgy_op_tc124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc124': */
#define MSK_USED_BITS_NX90_mtgy_op_tc124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc125 */
/* => MWMM TC register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc125  0x000011F4
#define Adr_NX90_mtgy_mtgy_op_tc125 0xFF0831F4
#define Adr_NX90_mtgy_op_tc125      0xFF0831F4
#define DFLT_VAL_NX90_mtgy_op_tc125 0x00000000

#define MSK_NX90_mtgy_op_tc125_val         0xffffffff
#define SRT_NX90_mtgy_op_tc125_val         0
#define DFLT_VAL_NX90_mtgy_op_tc125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc125': */
#define MSK_USED_BITS_NX90_mtgy_op_tc125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc126 */
/* => MWMM TC register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc126  0x000011F8
#define Adr_NX90_mtgy_mtgy_op_tc126 0xFF0831F8
#define Adr_NX90_mtgy_op_tc126      0xFF0831F8
#define DFLT_VAL_NX90_mtgy_op_tc126 0x00000000

#define MSK_NX90_mtgy_op_tc126_val         0xffffffff
#define SRT_NX90_mtgy_op_tc126_val         0
#define DFLT_VAL_NX90_mtgy_op_tc126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc126': */
#define MSK_USED_BITS_NX90_mtgy_op_tc126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_tc127 */
/* => MWMM TC register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_tc127  0x000011FC
#define Adr_NX90_mtgy_mtgy_op_tc127 0xFF0831FC
#define Adr_NX90_mtgy_op_tc127      0xFF0831FC
#define DFLT_VAL_NX90_mtgy_op_tc127 0x00000000

#define MSK_NX90_mtgy_op_tc127_val         0xffffffff
#define SRT_NX90_mtgy_op_tc127_val         0
#define DFLT_VAL_NX90_mtgy_op_tc127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_tc127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_tc127': */
#define MSK_USED_BITS_NX90_mtgy_op_tc127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts0 */
/* => MWMM TS register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts0  0x00001200
#define Adr_NX90_mtgy_mtgy_op_ts0 0xFF083200
#define Adr_NX90_mtgy_op_ts0      0xFF083200
#define DFLT_VAL_NX90_mtgy_op_ts0 0x00000000

#define MSK_NX90_mtgy_op_ts0_val         0xffffffff
#define SRT_NX90_mtgy_op_ts0_val         0
#define DFLT_VAL_NX90_mtgy_op_ts0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts0': */
#define MSK_USED_BITS_NX90_mtgy_op_ts0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts1 */
/* => MWMM TS register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts1  0x00001204
#define Adr_NX90_mtgy_mtgy_op_ts1 0xFF083204
#define Adr_NX90_mtgy_op_ts1      0xFF083204
#define DFLT_VAL_NX90_mtgy_op_ts1 0x00000000

#define MSK_NX90_mtgy_op_ts1_val         0xffffffff
#define SRT_NX90_mtgy_op_ts1_val         0
#define DFLT_VAL_NX90_mtgy_op_ts1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts1': */
#define MSK_USED_BITS_NX90_mtgy_op_ts1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts2 */
/* => MWMM TS register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts2  0x00001208
#define Adr_NX90_mtgy_mtgy_op_ts2 0xFF083208
#define Adr_NX90_mtgy_op_ts2      0xFF083208
#define DFLT_VAL_NX90_mtgy_op_ts2 0x00000000

#define MSK_NX90_mtgy_op_ts2_val         0xffffffff
#define SRT_NX90_mtgy_op_ts2_val         0
#define DFLT_VAL_NX90_mtgy_op_ts2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts2': */
#define MSK_USED_BITS_NX90_mtgy_op_ts2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts3 */
/* => MWMM TS register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts3  0x0000120C
#define Adr_NX90_mtgy_mtgy_op_ts3 0xFF08320C
#define Adr_NX90_mtgy_op_ts3      0xFF08320C
#define DFLT_VAL_NX90_mtgy_op_ts3 0x00000000

#define MSK_NX90_mtgy_op_ts3_val         0xffffffff
#define SRT_NX90_mtgy_op_ts3_val         0
#define DFLT_VAL_NX90_mtgy_op_ts3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts3': */
#define MSK_USED_BITS_NX90_mtgy_op_ts3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts4 */
/* => MWMM TS register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts4  0x00001210
#define Adr_NX90_mtgy_mtgy_op_ts4 0xFF083210
#define Adr_NX90_mtgy_op_ts4      0xFF083210
#define DFLT_VAL_NX90_mtgy_op_ts4 0x00000000

#define MSK_NX90_mtgy_op_ts4_val         0xffffffff
#define SRT_NX90_mtgy_op_ts4_val         0
#define DFLT_VAL_NX90_mtgy_op_ts4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts4': */
#define MSK_USED_BITS_NX90_mtgy_op_ts4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts5 */
/* => MWMM TS register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts5  0x00001214
#define Adr_NX90_mtgy_mtgy_op_ts5 0xFF083214
#define Adr_NX90_mtgy_op_ts5      0xFF083214
#define DFLT_VAL_NX90_mtgy_op_ts5 0x00000000

#define MSK_NX90_mtgy_op_ts5_val         0xffffffff
#define SRT_NX90_mtgy_op_ts5_val         0
#define DFLT_VAL_NX90_mtgy_op_ts5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts5': */
#define MSK_USED_BITS_NX90_mtgy_op_ts5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts6 */
/* => MWMM TS register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts6  0x00001218
#define Adr_NX90_mtgy_mtgy_op_ts6 0xFF083218
#define Adr_NX90_mtgy_op_ts6      0xFF083218
#define DFLT_VAL_NX90_mtgy_op_ts6 0x00000000

#define MSK_NX90_mtgy_op_ts6_val         0xffffffff
#define SRT_NX90_mtgy_op_ts6_val         0
#define DFLT_VAL_NX90_mtgy_op_ts6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts6': */
#define MSK_USED_BITS_NX90_mtgy_op_ts6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts7 */
/* => MWMM TS register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts7  0x0000121C
#define Adr_NX90_mtgy_mtgy_op_ts7 0xFF08321C
#define Adr_NX90_mtgy_op_ts7      0xFF08321C
#define DFLT_VAL_NX90_mtgy_op_ts7 0x00000000

#define MSK_NX90_mtgy_op_ts7_val         0xffffffff
#define SRT_NX90_mtgy_op_ts7_val         0
#define DFLT_VAL_NX90_mtgy_op_ts7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts7': */
#define MSK_USED_BITS_NX90_mtgy_op_ts7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts8 */
/* => MWMM TS register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts8  0x00001220
#define Adr_NX90_mtgy_mtgy_op_ts8 0xFF083220
#define Adr_NX90_mtgy_op_ts8      0xFF083220
#define DFLT_VAL_NX90_mtgy_op_ts8 0x00000000

#define MSK_NX90_mtgy_op_ts8_val         0xffffffff
#define SRT_NX90_mtgy_op_ts8_val         0
#define DFLT_VAL_NX90_mtgy_op_ts8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts8': */
#define MSK_USED_BITS_NX90_mtgy_op_ts8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts9 */
/* => MWMM TS register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts9  0x00001224
#define Adr_NX90_mtgy_mtgy_op_ts9 0xFF083224
#define Adr_NX90_mtgy_op_ts9      0xFF083224
#define DFLT_VAL_NX90_mtgy_op_ts9 0x00000000

#define MSK_NX90_mtgy_op_ts9_val         0xffffffff
#define SRT_NX90_mtgy_op_ts9_val         0
#define DFLT_VAL_NX90_mtgy_op_ts9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts9': */
#define MSK_USED_BITS_NX90_mtgy_op_ts9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts10 */
/* => MWMM TS register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts10  0x00001228
#define Adr_NX90_mtgy_mtgy_op_ts10 0xFF083228
#define Adr_NX90_mtgy_op_ts10      0xFF083228
#define DFLT_VAL_NX90_mtgy_op_ts10 0x00000000

#define MSK_NX90_mtgy_op_ts10_val         0xffffffff
#define SRT_NX90_mtgy_op_ts10_val         0
#define DFLT_VAL_NX90_mtgy_op_ts10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts10': */
#define MSK_USED_BITS_NX90_mtgy_op_ts10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts11 */
/* => MWMM TS register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts11  0x0000122C
#define Adr_NX90_mtgy_mtgy_op_ts11 0xFF08322C
#define Adr_NX90_mtgy_op_ts11      0xFF08322C
#define DFLT_VAL_NX90_mtgy_op_ts11 0x00000000

#define MSK_NX90_mtgy_op_ts11_val         0xffffffff
#define SRT_NX90_mtgy_op_ts11_val         0
#define DFLT_VAL_NX90_mtgy_op_ts11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts11': */
#define MSK_USED_BITS_NX90_mtgy_op_ts11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts12 */
/* => MWMM TS register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts12  0x00001230
#define Adr_NX90_mtgy_mtgy_op_ts12 0xFF083230
#define Adr_NX90_mtgy_op_ts12      0xFF083230
#define DFLT_VAL_NX90_mtgy_op_ts12 0x00000000

#define MSK_NX90_mtgy_op_ts12_val         0xffffffff
#define SRT_NX90_mtgy_op_ts12_val         0
#define DFLT_VAL_NX90_mtgy_op_ts12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts12': */
#define MSK_USED_BITS_NX90_mtgy_op_ts12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts13 */
/* => MWMM TS register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts13  0x00001234
#define Adr_NX90_mtgy_mtgy_op_ts13 0xFF083234
#define Adr_NX90_mtgy_op_ts13      0xFF083234
#define DFLT_VAL_NX90_mtgy_op_ts13 0x00000000

#define MSK_NX90_mtgy_op_ts13_val         0xffffffff
#define SRT_NX90_mtgy_op_ts13_val         0
#define DFLT_VAL_NX90_mtgy_op_ts13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts13': */
#define MSK_USED_BITS_NX90_mtgy_op_ts13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts14 */
/* => MWMM TS register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts14  0x00001238
#define Adr_NX90_mtgy_mtgy_op_ts14 0xFF083238
#define Adr_NX90_mtgy_op_ts14      0xFF083238
#define DFLT_VAL_NX90_mtgy_op_ts14 0x00000000

#define MSK_NX90_mtgy_op_ts14_val         0xffffffff
#define SRT_NX90_mtgy_op_ts14_val         0
#define DFLT_VAL_NX90_mtgy_op_ts14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts14': */
#define MSK_USED_BITS_NX90_mtgy_op_ts14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts15 */
/* => MWMM TS register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts15  0x0000123C
#define Adr_NX90_mtgy_mtgy_op_ts15 0xFF08323C
#define Adr_NX90_mtgy_op_ts15      0xFF08323C
#define DFLT_VAL_NX90_mtgy_op_ts15 0x00000000

#define MSK_NX90_mtgy_op_ts15_val         0xffffffff
#define SRT_NX90_mtgy_op_ts15_val         0
#define DFLT_VAL_NX90_mtgy_op_ts15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts15': */
#define MSK_USED_BITS_NX90_mtgy_op_ts15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts16 */
/* => MWMM TS register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts16  0x00001240
#define Adr_NX90_mtgy_mtgy_op_ts16 0xFF083240
#define Adr_NX90_mtgy_op_ts16      0xFF083240
#define DFLT_VAL_NX90_mtgy_op_ts16 0x00000000

#define MSK_NX90_mtgy_op_ts16_val         0xffffffff
#define SRT_NX90_mtgy_op_ts16_val         0
#define DFLT_VAL_NX90_mtgy_op_ts16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts16': */
#define MSK_USED_BITS_NX90_mtgy_op_ts16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts17 */
/* => MWMM TS register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts17  0x00001244
#define Adr_NX90_mtgy_mtgy_op_ts17 0xFF083244
#define Adr_NX90_mtgy_op_ts17      0xFF083244
#define DFLT_VAL_NX90_mtgy_op_ts17 0x00000000

#define MSK_NX90_mtgy_op_ts17_val         0xffffffff
#define SRT_NX90_mtgy_op_ts17_val         0
#define DFLT_VAL_NX90_mtgy_op_ts17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts17': */
#define MSK_USED_BITS_NX90_mtgy_op_ts17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts18 */
/* => MWMM TS register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts18  0x00001248
#define Adr_NX90_mtgy_mtgy_op_ts18 0xFF083248
#define Adr_NX90_mtgy_op_ts18      0xFF083248
#define DFLT_VAL_NX90_mtgy_op_ts18 0x00000000

#define MSK_NX90_mtgy_op_ts18_val         0xffffffff
#define SRT_NX90_mtgy_op_ts18_val         0
#define DFLT_VAL_NX90_mtgy_op_ts18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts18': */
#define MSK_USED_BITS_NX90_mtgy_op_ts18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts19 */
/* => MWMM TS register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts19  0x0000124C
#define Adr_NX90_mtgy_mtgy_op_ts19 0xFF08324C
#define Adr_NX90_mtgy_op_ts19      0xFF08324C
#define DFLT_VAL_NX90_mtgy_op_ts19 0x00000000

#define MSK_NX90_mtgy_op_ts19_val         0xffffffff
#define SRT_NX90_mtgy_op_ts19_val         0
#define DFLT_VAL_NX90_mtgy_op_ts19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts19': */
#define MSK_USED_BITS_NX90_mtgy_op_ts19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts20 */
/* => MWMM TS register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts20  0x00001250
#define Adr_NX90_mtgy_mtgy_op_ts20 0xFF083250
#define Adr_NX90_mtgy_op_ts20      0xFF083250
#define DFLT_VAL_NX90_mtgy_op_ts20 0x00000000

#define MSK_NX90_mtgy_op_ts20_val         0xffffffff
#define SRT_NX90_mtgy_op_ts20_val         0
#define DFLT_VAL_NX90_mtgy_op_ts20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts20': */
#define MSK_USED_BITS_NX90_mtgy_op_ts20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts21 */
/* => MWMM TS register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts21  0x00001254
#define Adr_NX90_mtgy_mtgy_op_ts21 0xFF083254
#define Adr_NX90_mtgy_op_ts21      0xFF083254
#define DFLT_VAL_NX90_mtgy_op_ts21 0x00000000

#define MSK_NX90_mtgy_op_ts21_val         0xffffffff
#define SRT_NX90_mtgy_op_ts21_val         0
#define DFLT_VAL_NX90_mtgy_op_ts21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts21': */
#define MSK_USED_BITS_NX90_mtgy_op_ts21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts22 */
/* => MWMM TS register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts22  0x00001258
#define Adr_NX90_mtgy_mtgy_op_ts22 0xFF083258
#define Adr_NX90_mtgy_op_ts22      0xFF083258
#define DFLT_VAL_NX90_mtgy_op_ts22 0x00000000

#define MSK_NX90_mtgy_op_ts22_val         0xffffffff
#define SRT_NX90_mtgy_op_ts22_val         0
#define DFLT_VAL_NX90_mtgy_op_ts22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts22': */
#define MSK_USED_BITS_NX90_mtgy_op_ts22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts23 */
/* => MWMM TS register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts23  0x0000125C
#define Adr_NX90_mtgy_mtgy_op_ts23 0xFF08325C
#define Adr_NX90_mtgy_op_ts23      0xFF08325C
#define DFLT_VAL_NX90_mtgy_op_ts23 0x00000000

#define MSK_NX90_mtgy_op_ts23_val         0xffffffff
#define SRT_NX90_mtgy_op_ts23_val         0
#define DFLT_VAL_NX90_mtgy_op_ts23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts23': */
#define MSK_USED_BITS_NX90_mtgy_op_ts23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts24 */
/* => MWMM TS register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts24  0x00001260
#define Adr_NX90_mtgy_mtgy_op_ts24 0xFF083260
#define Adr_NX90_mtgy_op_ts24      0xFF083260
#define DFLT_VAL_NX90_mtgy_op_ts24 0x00000000

#define MSK_NX90_mtgy_op_ts24_val         0xffffffff
#define SRT_NX90_mtgy_op_ts24_val         0
#define DFLT_VAL_NX90_mtgy_op_ts24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts24': */
#define MSK_USED_BITS_NX90_mtgy_op_ts24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts25 */
/* => MWMM TS register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts25  0x00001264
#define Adr_NX90_mtgy_mtgy_op_ts25 0xFF083264
#define Adr_NX90_mtgy_op_ts25      0xFF083264
#define DFLT_VAL_NX90_mtgy_op_ts25 0x00000000

#define MSK_NX90_mtgy_op_ts25_val         0xffffffff
#define SRT_NX90_mtgy_op_ts25_val         0
#define DFLT_VAL_NX90_mtgy_op_ts25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts25': */
#define MSK_USED_BITS_NX90_mtgy_op_ts25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts26 */
/* => MWMM TS register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts26  0x00001268
#define Adr_NX90_mtgy_mtgy_op_ts26 0xFF083268
#define Adr_NX90_mtgy_op_ts26      0xFF083268
#define DFLT_VAL_NX90_mtgy_op_ts26 0x00000000

#define MSK_NX90_mtgy_op_ts26_val         0xffffffff
#define SRT_NX90_mtgy_op_ts26_val         0
#define DFLT_VAL_NX90_mtgy_op_ts26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts26': */
#define MSK_USED_BITS_NX90_mtgy_op_ts26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts27 */
/* => MWMM TS register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts27  0x0000126C
#define Adr_NX90_mtgy_mtgy_op_ts27 0xFF08326C
#define Adr_NX90_mtgy_op_ts27      0xFF08326C
#define DFLT_VAL_NX90_mtgy_op_ts27 0x00000000

#define MSK_NX90_mtgy_op_ts27_val         0xffffffff
#define SRT_NX90_mtgy_op_ts27_val         0
#define DFLT_VAL_NX90_mtgy_op_ts27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts27': */
#define MSK_USED_BITS_NX90_mtgy_op_ts27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts28 */
/* => MWMM TS register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts28  0x00001270
#define Adr_NX90_mtgy_mtgy_op_ts28 0xFF083270
#define Adr_NX90_mtgy_op_ts28      0xFF083270
#define DFLT_VAL_NX90_mtgy_op_ts28 0x00000000

#define MSK_NX90_mtgy_op_ts28_val         0xffffffff
#define SRT_NX90_mtgy_op_ts28_val         0
#define DFLT_VAL_NX90_mtgy_op_ts28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts28': */
#define MSK_USED_BITS_NX90_mtgy_op_ts28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts29 */
/* => MWMM TS register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts29  0x00001274
#define Adr_NX90_mtgy_mtgy_op_ts29 0xFF083274
#define Adr_NX90_mtgy_op_ts29      0xFF083274
#define DFLT_VAL_NX90_mtgy_op_ts29 0x00000000

#define MSK_NX90_mtgy_op_ts29_val         0xffffffff
#define SRT_NX90_mtgy_op_ts29_val         0
#define DFLT_VAL_NX90_mtgy_op_ts29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts29': */
#define MSK_USED_BITS_NX90_mtgy_op_ts29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts30 */
/* => MWMM TS register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts30  0x00001278
#define Adr_NX90_mtgy_mtgy_op_ts30 0xFF083278
#define Adr_NX90_mtgy_op_ts30      0xFF083278
#define DFLT_VAL_NX90_mtgy_op_ts30 0x00000000

#define MSK_NX90_mtgy_op_ts30_val         0xffffffff
#define SRT_NX90_mtgy_op_ts30_val         0
#define DFLT_VAL_NX90_mtgy_op_ts30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts30': */
#define MSK_USED_BITS_NX90_mtgy_op_ts30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts31 */
/* => MWMM TS register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts31  0x0000127C
#define Adr_NX90_mtgy_mtgy_op_ts31 0xFF08327C
#define Adr_NX90_mtgy_op_ts31      0xFF08327C
#define DFLT_VAL_NX90_mtgy_op_ts31 0x00000000

#define MSK_NX90_mtgy_op_ts31_val         0xffffffff
#define SRT_NX90_mtgy_op_ts31_val         0
#define DFLT_VAL_NX90_mtgy_op_ts31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts31': */
#define MSK_USED_BITS_NX90_mtgy_op_ts31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts32 */
/* => MWMM TS register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts32  0x00001280
#define Adr_NX90_mtgy_mtgy_op_ts32 0xFF083280
#define Adr_NX90_mtgy_op_ts32      0xFF083280
#define DFLT_VAL_NX90_mtgy_op_ts32 0x00000000

#define MSK_NX90_mtgy_op_ts32_val         0xffffffff
#define SRT_NX90_mtgy_op_ts32_val         0
#define DFLT_VAL_NX90_mtgy_op_ts32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts32': */
#define MSK_USED_BITS_NX90_mtgy_op_ts32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts33 */
/* => MWMM TS register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts33  0x00001284
#define Adr_NX90_mtgy_mtgy_op_ts33 0xFF083284
#define Adr_NX90_mtgy_op_ts33      0xFF083284
#define DFLT_VAL_NX90_mtgy_op_ts33 0x00000000

#define MSK_NX90_mtgy_op_ts33_val         0xffffffff
#define SRT_NX90_mtgy_op_ts33_val         0
#define DFLT_VAL_NX90_mtgy_op_ts33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts33': */
#define MSK_USED_BITS_NX90_mtgy_op_ts33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts34 */
/* => MWMM TS register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts34  0x00001288
#define Adr_NX90_mtgy_mtgy_op_ts34 0xFF083288
#define Adr_NX90_mtgy_op_ts34      0xFF083288
#define DFLT_VAL_NX90_mtgy_op_ts34 0x00000000

#define MSK_NX90_mtgy_op_ts34_val         0xffffffff
#define SRT_NX90_mtgy_op_ts34_val         0
#define DFLT_VAL_NX90_mtgy_op_ts34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts34': */
#define MSK_USED_BITS_NX90_mtgy_op_ts34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts35 */
/* => MWMM TS register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts35  0x0000128C
#define Adr_NX90_mtgy_mtgy_op_ts35 0xFF08328C
#define Adr_NX90_mtgy_op_ts35      0xFF08328C
#define DFLT_VAL_NX90_mtgy_op_ts35 0x00000000

#define MSK_NX90_mtgy_op_ts35_val         0xffffffff
#define SRT_NX90_mtgy_op_ts35_val         0
#define DFLT_VAL_NX90_mtgy_op_ts35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts35': */
#define MSK_USED_BITS_NX90_mtgy_op_ts35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts36 */
/* => MWMM TS register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts36  0x00001290
#define Adr_NX90_mtgy_mtgy_op_ts36 0xFF083290
#define Adr_NX90_mtgy_op_ts36      0xFF083290
#define DFLT_VAL_NX90_mtgy_op_ts36 0x00000000

#define MSK_NX90_mtgy_op_ts36_val         0xffffffff
#define SRT_NX90_mtgy_op_ts36_val         0
#define DFLT_VAL_NX90_mtgy_op_ts36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts36': */
#define MSK_USED_BITS_NX90_mtgy_op_ts36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts37 */
/* => MWMM TS register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts37  0x00001294
#define Adr_NX90_mtgy_mtgy_op_ts37 0xFF083294
#define Adr_NX90_mtgy_op_ts37      0xFF083294
#define DFLT_VAL_NX90_mtgy_op_ts37 0x00000000

#define MSK_NX90_mtgy_op_ts37_val         0xffffffff
#define SRT_NX90_mtgy_op_ts37_val         0
#define DFLT_VAL_NX90_mtgy_op_ts37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts37': */
#define MSK_USED_BITS_NX90_mtgy_op_ts37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts38 */
/* => MWMM TS register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts38  0x00001298
#define Adr_NX90_mtgy_mtgy_op_ts38 0xFF083298
#define Adr_NX90_mtgy_op_ts38      0xFF083298
#define DFLT_VAL_NX90_mtgy_op_ts38 0x00000000

#define MSK_NX90_mtgy_op_ts38_val         0xffffffff
#define SRT_NX90_mtgy_op_ts38_val         0
#define DFLT_VAL_NX90_mtgy_op_ts38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts38': */
#define MSK_USED_BITS_NX90_mtgy_op_ts38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts39 */
/* => MWMM TS register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts39  0x0000129C
#define Adr_NX90_mtgy_mtgy_op_ts39 0xFF08329C
#define Adr_NX90_mtgy_op_ts39      0xFF08329C
#define DFLT_VAL_NX90_mtgy_op_ts39 0x00000000

#define MSK_NX90_mtgy_op_ts39_val         0xffffffff
#define SRT_NX90_mtgy_op_ts39_val         0
#define DFLT_VAL_NX90_mtgy_op_ts39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts39': */
#define MSK_USED_BITS_NX90_mtgy_op_ts39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts40 */
/* => MWMM TS register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts40  0x000012A0
#define Adr_NX90_mtgy_mtgy_op_ts40 0xFF0832A0
#define Adr_NX90_mtgy_op_ts40      0xFF0832A0
#define DFLT_VAL_NX90_mtgy_op_ts40 0x00000000

#define MSK_NX90_mtgy_op_ts40_val         0xffffffff
#define SRT_NX90_mtgy_op_ts40_val         0
#define DFLT_VAL_NX90_mtgy_op_ts40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts40': */
#define MSK_USED_BITS_NX90_mtgy_op_ts40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts41 */
/* => MWMM TS register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts41  0x000012A4
#define Adr_NX90_mtgy_mtgy_op_ts41 0xFF0832A4
#define Adr_NX90_mtgy_op_ts41      0xFF0832A4
#define DFLT_VAL_NX90_mtgy_op_ts41 0x00000000

#define MSK_NX90_mtgy_op_ts41_val         0xffffffff
#define SRT_NX90_mtgy_op_ts41_val         0
#define DFLT_VAL_NX90_mtgy_op_ts41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts41': */
#define MSK_USED_BITS_NX90_mtgy_op_ts41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts42 */
/* => MWMM TS register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts42  0x000012A8
#define Adr_NX90_mtgy_mtgy_op_ts42 0xFF0832A8
#define Adr_NX90_mtgy_op_ts42      0xFF0832A8
#define DFLT_VAL_NX90_mtgy_op_ts42 0x00000000

#define MSK_NX90_mtgy_op_ts42_val         0xffffffff
#define SRT_NX90_mtgy_op_ts42_val         0
#define DFLT_VAL_NX90_mtgy_op_ts42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts42': */
#define MSK_USED_BITS_NX90_mtgy_op_ts42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts43 */
/* => MWMM TS register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts43  0x000012AC
#define Adr_NX90_mtgy_mtgy_op_ts43 0xFF0832AC
#define Adr_NX90_mtgy_op_ts43      0xFF0832AC
#define DFLT_VAL_NX90_mtgy_op_ts43 0x00000000

#define MSK_NX90_mtgy_op_ts43_val         0xffffffff
#define SRT_NX90_mtgy_op_ts43_val         0
#define DFLT_VAL_NX90_mtgy_op_ts43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts43': */
#define MSK_USED_BITS_NX90_mtgy_op_ts43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts44 */
/* => MWMM TS register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts44  0x000012B0
#define Adr_NX90_mtgy_mtgy_op_ts44 0xFF0832B0
#define Adr_NX90_mtgy_op_ts44      0xFF0832B0
#define DFLT_VAL_NX90_mtgy_op_ts44 0x00000000

#define MSK_NX90_mtgy_op_ts44_val         0xffffffff
#define SRT_NX90_mtgy_op_ts44_val         0
#define DFLT_VAL_NX90_mtgy_op_ts44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts44': */
#define MSK_USED_BITS_NX90_mtgy_op_ts44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts45 */
/* => MWMM TS register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts45  0x000012B4
#define Adr_NX90_mtgy_mtgy_op_ts45 0xFF0832B4
#define Adr_NX90_mtgy_op_ts45      0xFF0832B4
#define DFLT_VAL_NX90_mtgy_op_ts45 0x00000000

#define MSK_NX90_mtgy_op_ts45_val         0xffffffff
#define SRT_NX90_mtgy_op_ts45_val         0
#define DFLT_VAL_NX90_mtgy_op_ts45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts45': */
#define MSK_USED_BITS_NX90_mtgy_op_ts45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts46 */
/* => MWMM TS register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts46  0x000012B8
#define Adr_NX90_mtgy_mtgy_op_ts46 0xFF0832B8
#define Adr_NX90_mtgy_op_ts46      0xFF0832B8
#define DFLT_VAL_NX90_mtgy_op_ts46 0x00000000

#define MSK_NX90_mtgy_op_ts46_val         0xffffffff
#define SRT_NX90_mtgy_op_ts46_val         0
#define DFLT_VAL_NX90_mtgy_op_ts46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts46': */
#define MSK_USED_BITS_NX90_mtgy_op_ts46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts47 */
/* => MWMM TS register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts47  0x000012BC
#define Adr_NX90_mtgy_mtgy_op_ts47 0xFF0832BC
#define Adr_NX90_mtgy_op_ts47      0xFF0832BC
#define DFLT_VAL_NX90_mtgy_op_ts47 0x00000000

#define MSK_NX90_mtgy_op_ts47_val         0xffffffff
#define SRT_NX90_mtgy_op_ts47_val         0
#define DFLT_VAL_NX90_mtgy_op_ts47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts47': */
#define MSK_USED_BITS_NX90_mtgy_op_ts47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts48 */
/* => MWMM TS register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts48  0x000012C0
#define Adr_NX90_mtgy_mtgy_op_ts48 0xFF0832C0
#define Adr_NX90_mtgy_op_ts48      0xFF0832C0
#define DFLT_VAL_NX90_mtgy_op_ts48 0x00000000

#define MSK_NX90_mtgy_op_ts48_val         0xffffffff
#define SRT_NX90_mtgy_op_ts48_val         0
#define DFLT_VAL_NX90_mtgy_op_ts48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts48': */
#define MSK_USED_BITS_NX90_mtgy_op_ts48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts49 */
/* => MWMM TS register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts49  0x000012C4
#define Adr_NX90_mtgy_mtgy_op_ts49 0xFF0832C4
#define Adr_NX90_mtgy_op_ts49      0xFF0832C4
#define DFLT_VAL_NX90_mtgy_op_ts49 0x00000000

#define MSK_NX90_mtgy_op_ts49_val         0xffffffff
#define SRT_NX90_mtgy_op_ts49_val         0
#define DFLT_VAL_NX90_mtgy_op_ts49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts49': */
#define MSK_USED_BITS_NX90_mtgy_op_ts49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts50 */
/* => MWMM TS register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts50  0x000012C8
#define Adr_NX90_mtgy_mtgy_op_ts50 0xFF0832C8
#define Adr_NX90_mtgy_op_ts50      0xFF0832C8
#define DFLT_VAL_NX90_mtgy_op_ts50 0x00000000

#define MSK_NX90_mtgy_op_ts50_val         0xffffffff
#define SRT_NX90_mtgy_op_ts50_val         0
#define DFLT_VAL_NX90_mtgy_op_ts50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts50': */
#define MSK_USED_BITS_NX90_mtgy_op_ts50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts51 */
/* => MWMM TS register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts51  0x000012CC
#define Adr_NX90_mtgy_mtgy_op_ts51 0xFF0832CC
#define Adr_NX90_mtgy_op_ts51      0xFF0832CC
#define DFLT_VAL_NX90_mtgy_op_ts51 0x00000000

#define MSK_NX90_mtgy_op_ts51_val         0xffffffff
#define SRT_NX90_mtgy_op_ts51_val         0
#define DFLT_VAL_NX90_mtgy_op_ts51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts51': */
#define MSK_USED_BITS_NX90_mtgy_op_ts51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts52 */
/* => MWMM TS register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts52  0x000012D0
#define Adr_NX90_mtgy_mtgy_op_ts52 0xFF0832D0
#define Adr_NX90_mtgy_op_ts52      0xFF0832D0
#define DFLT_VAL_NX90_mtgy_op_ts52 0x00000000

#define MSK_NX90_mtgy_op_ts52_val         0xffffffff
#define SRT_NX90_mtgy_op_ts52_val         0
#define DFLT_VAL_NX90_mtgy_op_ts52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts52': */
#define MSK_USED_BITS_NX90_mtgy_op_ts52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts53 */
/* => MWMM TS register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts53  0x000012D4
#define Adr_NX90_mtgy_mtgy_op_ts53 0xFF0832D4
#define Adr_NX90_mtgy_op_ts53      0xFF0832D4
#define DFLT_VAL_NX90_mtgy_op_ts53 0x00000000

#define MSK_NX90_mtgy_op_ts53_val         0xffffffff
#define SRT_NX90_mtgy_op_ts53_val         0
#define DFLT_VAL_NX90_mtgy_op_ts53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts53': */
#define MSK_USED_BITS_NX90_mtgy_op_ts53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts54 */
/* => MWMM TS register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts54  0x000012D8
#define Adr_NX90_mtgy_mtgy_op_ts54 0xFF0832D8
#define Adr_NX90_mtgy_op_ts54      0xFF0832D8
#define DFLT_VAL_NX90_mtgy_op_ts54 0x00000000

#define MSK_NX90_mtgy_op_ts54_val         0xffffffff
#define SRT_NX90_mtgy_op_ts54_val         0
#define DFLT_VAL_NX90_mtgy_op_ts54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts54': */
#define MSK_USED_BITS_NX90_mtgy_op_ts54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts55 */
/* => MWMM TS register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts55  0x000012DC
#define Adr_NX90_mtgy_mtgy_op_ts55 0xFF0832DC
#define Adr_NX90_mtgy_op_ts55      0xFF0832DC
#define DFLT_VAL_NX90_mtgy_op_ts55 0x00000000

#define MSK_NX90_mtgy_op_ts55_val         0xffffffff
#define SRT_NX90_mtgy_op_ts55_val         0
#define DFLT_VAL_NX90_mtgy_op_ts55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts55': */
#define MSK_USED_BITS_NX90_mtgy_op_ts55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts56 */
/* => MWMM TS register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts56  0x000012E0
#define Adr_NX90_mtgy_mtgy_op_ts56 0xFF0832E0
#define Adr_NX90_mtgy_op_ts56      0xFF0832E0
#define DFLT_VAL_NX90_mtgy_op_ts56 0x00000000

#define MSK_NX90_mtgy_op_ts56_val         0xffffffff
#define SRT_NX90_mtgy_op_ts56_val         0
#define DFLT_VAL_NX90_mtgy_op_ts56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts56': */
#define MSK_USED_BITS_NX90_mtgy_op_ts56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts57 */
/* => MWMM TS register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts57  0x000012E4
#define Adr_NX90_mtgy_mtgy_op_ts57 0xFF0832E4
#define Adr_NX90_mtgy_op_ts57      0xFF0832E4
#define DFLT_VAL_NX90_mtgy_op_ts57 0x00000000

#define MSK_NX90_mtgy_op_ts57_val         0xffffffff
#define SRT_NX90_mtgy_op_ts57_val         0
#define DFLT_VAL_NX90_mtgy_op_ts57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts57': */
#define MSK_USED_BITS_NX90_mtgy_op_ts57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts58 */
/* => MWMM TS register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts58  0x000012E8
#define Adr_NX90_mtgy_mtgy_op_ts58 0xFF0832E8
#define Adr_NX90_mtgy_op_ts58      0xFF0832E8
#define DFLT_VAL_NX90_mtgy_op_ts58 0x00000000

#define MSK_NX90_mtgy_op_ts58_val         0xffffffff
#define SRT_NX90_mtgy_op_ts58_val         0
#define DFLT_VAL_NX90_mtgy_op_ts58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts58': */
#define MSK_USED_BITS_NX90_mtgy_op_ts58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts59 */
/* => MWMM TS register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts59  0x000012EC
#define Adr_NX90_mtgy_mtgy_op_ts59 0xFF0832EC
#define Adr_NX90_mtgy_op_ts59      0xFF0832EC
#define DFLT_VAL_NX90_mtgy_op_ts59 0x00000000

#define MSK_NX90_mtgy_op_ts59_val         0xffffffff
#define SRT_NX90_mtgy_op_ts59_val         0
#define DFLT_VAL_NX90_mtgy_op_ts59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts59': */
#define MSK_USED_BITS_NX90_mtgy_op_ts59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts60 */
/* => MWMM TS register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts60  0x000012F0
#define Adr_NX90_mtgy_mtgy_op_ts60 0xFF0832F0
#define Adr_NX90_mtgy_op_ts60      0xFF0832F0
#define DFLT_VAL_NX90_mtgy_op_ts60 0x00000000

#define MSK_NX90_mtgy_op_ts60_val         0xffffffff
#define SRT_NX90_mtgy_op_ts60_val         0
#define DFLT_VAL_NX90_mtgy_op_ts60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts60': */
#define MSK_USED_BITS_NX90_mtgy_op_ts60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts61 */
/* => MWMM TS register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts61  0x000012F4
#define Adr_NX90_mtgy_mtgy_op_ts61 0xFF0832F4
#define Adr_NX90_mtgy_op_ts61      0xFF0832F4
#define DFLT_VAL_NX90_mtgy_op_ts61 0x00000000

#define MSK_NX90_mtgy_op_ts61_val         0xffffffff
#define SRT_NX90_mtgy_op_ts61_val         0
#define DFLT_VAL_NX90_mtgy_op_ts61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts61': */
#define MSK_USED_BITS_NX90_mtgy_op_ts61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts62 */
/* => MWMM TS register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts62  0x000012F8
#define Adr_NX90_mtgy_mtgy_op_ts62 0xFF0832F8
#define Adr_NX90_mtgy_op_ts62      0xFF0832F8
#define DFLT_VAL_NX90_mtgy_op_ts62 0x00000000

#define MSK_NX90_mtgy_op_ts62_val         0xffffffff
#define SRT_NX90_mtgy_op_ts62_val         0
#define DFLT_VAL_NX90_mtgy_op_ts62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts62': */
#define MSK_USED_BITS_NX90_mtgy_op_ts62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts63 */
/* => MWMM TS register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts63  0x000012FC
#define Adr_NX90_mtgy_mtgy_op_ts63 0xFF0832FC
#define Adr_NX90_mtgy_op_ts63      0xFF0832FC
#define DFLT_VAL_NX90_mtgy_op_ts63 0x00000000

#define MSK_NX90_mtgy_op_ts63_val         0xffffffff
#define SRT_NX90_mtgy_op_ts63_val         0
#define DFLT_VAL_NX90_mtgy_op_ts63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts63': */
#define MSK_USED_BITS_NX90_mtgy_op_ts63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts64 */
/* => MWMM TS register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts64  0x00001300
#define Adr_NX90_mtgy_mtgy_op_ts64 0xFF083300
#define Adr_NX90_mtgy_op_ts64      0xFF083300
#define DFLT_VAL_NX90_mtgy_op_ts64 0x00000000

#define MSK_NX90_mtgy_op_ts64_val         0xffffffff
#define SRT_NX90_mtgy_op_ts64_val         0
#define DFLT_VAL_NX90_mtgy_op_ts64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts64': */
#define MSK_USED_BITS_NX90_mtgy_op_ts64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts65 */
/* => MWMM TS register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts65  0x00001304
#define Adr_NX90_mtgy_mtgy_op_ts65 0xFF083304
#define Adr_NX90_mtgy_op_ts65      0xFF083304
#define DFLT_VAL_NX90_mtgy_op_ts65 0x00000000

#define MSK_NX90_mtgy_op_ts65_val         0xffffffff
#define SRT_NX90_mtgy_op_ts65_val         0
#define DFLT_VAL_NX90_mtgy_op_ts65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts65': */
#define MSK_USED_BITS_NX90_mtgy_op_ts65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts66 */
/* => MWMM TS register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts66  0x00001308
#define Adr_NX90_mtgy_mtgy_op_ts66 0xFF083308
#define Adr_NX90_mtgy_op_ts66      0xFF083308
#define DFLT_VAL_NX90_mtgy_op_ts66 0x00000000

#define MSK_NX90_mtgy_op_ts66_val         0xffffffff
#define SRT_NX90_mtgy_op_ts66_val         0
#define DFLT_VAL_NX90_mtgy_op_ts66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts66': */
#define MSK_USED_BITS_NX90_mtgy_op_ts66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts67 */
/* => MWMM TS register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts67  0x0000130C
#define Adr_NX90_mtgy_mtgy_op_ts67 0xFF08330C
#define Adr_NX90_mtgy_op_ts67      0xFF08330C
#define DFLT_VAL_NX90_mtgy_op_ts67 0x00000000

#define MSK_NX90_mtgy_op_ts67_val         0xffffffff
#define SRT_NX90_mtgy_op_ts67_val         0
#define DFLT_VAL_NX90_mtgy_op_ts67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts67': */
#define MSK_USED_BITS_NX90_mtgy_op_ts67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts68 */
/* => MWMM TS register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts68  0x00001310
#define Adr_NX90_mtgy_mtgy_op_ts68 0xFF083310
#define Adr_NX90_mtgy_op_ts68      0xFF083310
#define DFLT_VAL_NX90_mtgy_op_ts68 0x00000000

#define MSK_NX90_mtgy_op_ts68_val         0xffffffff
#define SRT_NX90_mtgy_op_ts68_val         0
#define DFLT_VAL_NX90_mtgy_op_ts68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts68': */
#define MSK_USED_BITS_NX90_mtgy_op_ts68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts69 */
/* => MWMM TS register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts69  0x00001314
#define Adr_NX90_mtgy_mtgy_op_ts69 0xFF083314
#define Adr_NX90_mtgy_op_ts69      0xFF083314
#define DFLT_VAL_NX90_mtgy_op_ts69 0x00000000

#define MSK_NX90_mtgy_op_ts69_val         0xffffffff
#define SRT_NX90_mtgy_op_ts69_val         0
#define DFLT_VAL_NX90_mtgy_op_ts69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts69': */
#define MSK_USED_BITS_NX90_mtgy_op_ts69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts70 */
/* => MWMM TS register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts70  0x00001318
#define Adr_NX90_mtgy_mtgy_op_ts70 0xFF083318
#define Adr_NX90_mtgy_op_ts70      0xFF083318
#define DFLT_VAL_NX90_mtgy_op_ts70 0x00000000

#define MSK_NX90_mtgy_op_ts70_val         0xffffffff
#define SRT_NX90_mtgy_op_ts70_val         0
#define DFLT_VAL_NX90_mtgy_op_ts70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts70': */
#define MSK_USED_BITS_NX90_mtgy_op_ts70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts71 */
/* => MWMM TS register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts71  0x0000131C
#define Adr_NX90_mtgy_mtgy_op_ts71 0xFF08331C
#define Adr_NX90_mtgy_op_ts71      0xFF08331C
#define DFLT_VAL_NX90_mtgy_op_ts71 0x00000000

#define MSK_NX90_mtgy_op_ts71_val         0xffffffff
#define SRT_NX90_mtgy_op_ts71_val         0
#define DFLT_VAL_NX90_mtgy_op_ts71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts71': */
#define MSK_USED_BITS_NX90_mtgy_op_ts71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts72 */
/* => MWMM TS register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts72  0x00001320
#define Adr_NX90_mtgy_mtgy_op_ts72 0xFF083320
#define Adr_NX90_mtgy_op_ts72      0xFF083320
#define DFLT_VAL_NX90_mtgy_op_ts72 0x00000000

#define MSK_NX90_mtgy_op_ts72_val         0xffffffff
#define SRT_NX90_mtgy_op_ts72_val         0
#define DFLT_VAL_NX90_mtgy_op_ts72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts72': */
#define MSK_USED_BITS_NX90_mtgy_op_ts72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts73 */
/* => MWMM TS register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts73  0x00001324
#define Adr_NX90_mtgy_mtgy_op_ts73 0xFF083324
#define Adr_NX90_mtgy_op_ts73      0xFF083324
#define DFLT_VAL_NX90_mtgy_op_ts73 0x00000000

#define MSK_NX90_mtgy_op_ts73_val         0xffffffff
#define SRT_NX90_mtgy_op_ts73_val         0
#define DFLT_VAL_NX90_mtgy_op_ts73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts73': */
#define MSK_USED_BITS_NX90_mtgy_op_ts73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts74 */
/* => MWMM TS register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts74  0x00001328
#define Adr_NX90_mtgy_mtgy_op_ts74 0xFF083328
#define Adr_NX90_mtgy_op_ts74      0xFF083328
#define DFLT_VAL_NX90_mtgy_op_ts74 0x00000000

#define MSK_NX90_mtgy_op_ts74_val         0xffffffff
#define SRT_NX90_mtgy_op_ts74_val         0
#define DFLT_VAL_NX90_mtgy_op_ts74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts74': */
#define MSK_USED_BITS_NX90_mtgy_op_ts74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts75 */
/* => MWMM TS register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts75  0x0000132C
#define Adr_NX90_mtgy_mtgy_op_ts75 0xFF08332C
#define Adr_NX90_mtgy_op_ts75      0xFF08332C
#define DFLT_VAL_NX90_mtgy_op_ts75 0x00000000

#define MSK_NX90_mtgy_op_ts75_val         0xffffffff
#define SRT_NX90_mtgy_op_ts75_val         0
#define DFLT_VAL_NX90_mtgy_op_ts75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts75': */
#define MSK_USED_BITS_NX90_mtgy_op_ts75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts76 */
/* => MWMM TS register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts76  0x00001330
#define Adr_NX90_mtgy_mtgy_op_ts76 0xFF083330
#define Adr_NX90_mtgy_op_ts76      0xFF083330
#define DFLT_VAL_NX90_mtgy_op_ts76 0x00000000

#define MSK_NX90_mtgy_op_ts76_val         0xffffffff
#define SRT_NX90_mtgy_op_ts76_val         0
#define DFLT_VAL_NX90_mtgy_op_ts76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts76': */
#define MSK_USED_BITS_NX90_mtgy_op_ts76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts77 */
/* => MWMM TS register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts77  0x00001334
#define Adr_NX90_mtgy_mtgy_op_ts77 0xFF083334
#define Adr_NX90_mtgy_op_ts77      0xFF083334
#define DFLT_VAL_NX90_mtgy_op_ts77 0x00000000

#define MSK_NX90_mtgy_op_ts77_val         0xffffffff
#define SRT_NX90_mtgy_op_ts77_val         0
#define DFLT_VAL_NX90_mtgy_op_ts77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts77': */
#define MSK_USED_BITS_NX90_mtgy_op_ts77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts78 */
/* => MWMM TS register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts78  0x00001338
#define Adr_NX90_mtgy_mtgy_op_ts78 0xFF083338
#define Adr_NX90_mtgy_op_ts78      0xFF083338
#define DFLT_VAL_NX90_mtgy_op_ts78 0x00000000

#define MSK_NX90_mtgy_op_ts78_val         0xffffffff
#define SRT_NX90_mtgy_op_ts78_val         0
#define DFLT_VAL_NX90_mtgy_op_ts78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts78': */
#define MSK_USED_BITS_NX90_mtgy_op_ts78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts79 */
/* => MWMM TS register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts79  0x0000133C
#define Adr_NX90_mtgy_mtgy_op_ts79 0xFF08333C
#define Adr_NX90_mtgy_op_ts79      0xFF08333C
#define DFLT_VAL_NX90_mtgy_op_ts79 0x00000000

#define MSK_NX90_mtgy_op_ts79_val         0xffffffff
#define SRT_NX90_mtgy_op_ts79_val         0
#define DFLT_VAL_NX90_mtgy_op_ts79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts79': */
#define MSK_USED_BITS_NX90_mtgy_op_ts79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts80 */
/* => MWMM TS register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts80  0x00001340
#define Adr_NX90_mtgy_mtgy_op_ts80 0xFF083340
#define Adr_NX90_mtgy_op_ts80      0xFF083340
#define DFLT_VAL_NX90_mtgy_op_ts80 0x00000000

#define MSK_NX90_mtgy_op_ts80_val         0xffffffff
#define SRT_NX90_mtgy_op_ts80_val         0
#define DFLT_VAL_NX90_mtgy_op_ts80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts80': */
#define MSK_USED_BITS_NX90_mtgy_op_ts80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts81 */
/* => MWMM TS register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts81  0x00001344
#define Adr_NX90_mtgy_mtgy_op_ts81 0xFF083344
#define Adr_NX90_mtgy_op_ts81      0xFF083344
#define DFLT_VAL_NX90_mtgy_op_ts81 0x00000000

#define MSK_NX90_mtgy_op_ts81_val         0xffffffff
#define SRT_NX90_mtgy_op_ts81_val         0
#define DFLT_VAL_NX90_mtgy_op_ts81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts81': */
#define MSK_USED_BITS_NX90_mtgy_op_ts81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts82 */
/* => MWMM TS register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts82  0x00001348
#define Adr_NX90_mtgy_mtgy_op_ts82 0xFF083348
#define Adr_NX90_mtgy_op_ts82      0xFF083348
#define DFLT_VAL_NX90_mtgy_op_ts82 0x00000000

#define MSK_NX90_mtgy_op_ts82_val         0xffffffff
#define SRT_NX90_mtgy_op_ts82_val         0
#define DFLT_VAL_NX90_mtgy_op_ts82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts82': */
#define MSK_USED_BITS_NX90_mtgy_op_ts82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts83 */
/* => MWMM TS register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts83  0x0000134C
#define Adr_NX90_mtgy_mtgy_op_ts83 0xFF08334C
#define Adr_NX90_mtgy_op_ts83      0xFF08334C
#define DFLT_VAL_NX90_mtgy_op_ts83 0x00000000

#define MSK_NX90_mtgy_op_ts83_val         0xffffffff
#define SRT_NX90_mtgy_op_ts83_val         0
#define DFLT_VAL_NX90_mtgy_op_ts83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts83': */
#define MSK_USED_BITS_NX90_mtgy_op_ts83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts84 */
/* => MWMM TS register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts84  0x00001350
#define Adr_NX90_mtgy_mtgy_op_ts84 0xFF083350
#define Adr_NX90_mtgy_op_ts84      0xFF083350
#define DFLT_VAL_NX90_mtgy_op_ts84 0x00000000

#define MSK_NX90_mtgy_op_ts84_val         0xffffffff
#define SRT_NX90_mtgy_op_ts84_val         0
#define DFLT_VAL_NX90_mtgy_op_ts84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts84': */
#define MSK_USED_BITS_NX90_mtgy_op_ts84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts85 */
/* => MWMM TS register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts85  0x00001354
#define Adr_NX90_mtgy_mtgy_op_ts85 0xFF083354
#define Adr_NX90_mtgy_op_ts85      0xFF083354
#define DFLT_VAL_NX90_mtgy_op_ts85 0x00000000

#define MSK_NX90_mtgy_op_ts85_val         0xffffffff
#define SRT_NX90_mtgy_op_ts85_val         0
#define DFLT_VAL_NX90_mtgy_op_ts85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts85': */
#define MSK_USED_BITS_NX90_mtgy_op_ts85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts86 */
/* => MWMM TS register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts86  0x00001358
#define Adr_NX90_mtgy_mtgy_op_ts86 0xFF083358
#define Adr_NX90_mtgy_op_ts86      0xFF083358
#define DFLT_VAL_NX90_mtgy_op_ts86 0x00000000

#define MSK_NX90_mtgy_op_ts86_val         0xffffffff
#define SRT_NX90_mtgy_op_ts86_val         0
#define DFLT_VAL_NX90_mtgy_op_ts86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts86': */
#define MSK_USED_BITS_NX90_mtgy_op_ts86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts87 */
/* => MWMM TS register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts87  0x0000135C
#define Adr_NX90_mtgy_mtgy_op_ts87 0xFF08335C
#define Adr_NX90_mtgy_op_ts87      0xFF08335C
#define DFLT_VAL_NX90_mtgy_op_ts87 0x00000000

#define MSK_NX90_mtgy_op_ts87_val         0xffffffff
#define SRT_NX90_mtgy_op_ts87_val         0
#define DFLT_VAL_NX90_mtgy_op_ts87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts87': */
#define MSK_USED_BITS_NX90_mtgy_op_ts87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts88 */
/* => MWMM TS register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts88  0x00001360
#define Adr_NX90_mtgy_mtgy_op_ts88 0xFF083360
#define Adr_NX90_mtgy_op_ts88      0xFF083360
#define DFLT_VAL_NX90_mtgy_op_ts88 0x00000000

#define MSK_NX90_mtgy_op_ts88_val         0xffffffff
#define SRT_NX90_mtgy_op_ts88_val         0
#define DFLT_VAL_NX90_mtgy_op_ts88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts88': */
#define MSK_USED_BITS_NX90_mtgy_op_ts88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts89 */
/* => MWMM TS register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts89  0x00001364
#define Adr_NX90_mtgy_mtgy_op_ts89 0xFF083364
#define Adr_NX90_mtgy_op_ts89      0xFF083364
#define DFLT_VAL_NX90_mtgy_op_ts89 0x00000000

#define MSK_NX90_mtgy_op_ts89_val         0xffffffff
#define SRT_NX90_mtgy_op_ts89_val         0
#define DFLT_VAL_NX90_mtgy_op_ts89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts89': */
#define MSK_USED_BITS_NX90_mtgy_op_ts89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts90 */
/* => MWMM TS register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts90  0x00001368
#define Adr_NX90_mtgy_mtgy_op_ts90 0xFF083368
#define Adr_NX90_mtgy_op_ts90      0xFF083368
#define DFLT_VAL_NX90_mtgy_op_ts90 0x00000000

#define MSK_NX90_mtgy_op_ts90_val         0xffffffff
#define SRT_NX90_mtgy_op_ts90_val         0
#define DFLT_VAL_NX90_mtgy_op_ts90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts90': */
#define MSK_USED_BITS_NX90_mtgy_op_ts90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts91 */
/* => MWMM TS register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts91  0x0000136C
#define Adr_NX90_mtgy_mtgy_op_ts91 0xFF08336C
#define Adr_NX90_mtgy_op_ts91      0xFF08336C
#define DFLT_VAL_NX90_mtgy_op_ts91 0x00000000

#define MSK_NX90_mtgy_op_ts91_val         0xffffffff
#define SRT_NX90_mtgy_op_ts91_val         0
#define DFLT_VAL_NX90_mtgy_op_ts91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts91': */
#define MSK_USED_BITS_NX90_mtgy_op_ts91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts92 */
/* => MWMM TS register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts92  0x00001370
#define Adr_NX90_mtgy_mtgy_op_ts92 0xFF083370
#define Adr_NX90_mtgy_op_ts92      0xFF083370
#define DFLT_VAL_NX90_mtgy_op_ts92 0x00000000

#define MSK_NX90_mtgy_op_ts92_val         0xffffffff
#define SRT_NX90_mtgy_op_ts92_val         0
#define DFLT_VAL_NX90_mtgy_op_ts92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts92': */
#define MSK_USED_BITS_NX90_mtgy_op_ts92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts93 */
/* => MWMM TS register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts93  0x00001374
#define Adr_NX90_mtgy_mtgy_op_ts93 0xFF083374
#define Adr_NX90_mtgy_op_ts93      0xFF083374
#define DFLT_VAL_NX90_mtgy_op_ts93 0x00000000

#define MSK_NX90_mtgy_op_ts93_val         0xffffffff
#define SRT_NX90_mtgy_op_ts93_val         0
#define DFLT_VAL_NX90_mtgy_op_ts93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts93': */
#define MSK_USED_BITS_NX90_mtgy_op_ts93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts94 */
/* => MWMM TS register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts94  0x00001378
#define Adr_NX90_mtgy_mtgy_op_ts94 0xFF083378
#define Adr_NX90_mtgy_op_ts94      0xFF083378
#define DFLT_VAL_NX90_mtgy_op_ts94 0x00000000

#define MSK_NX90_mtgy_op_ts94_val         0xffffffff
#define SRT_NX90_mtgy_op_ts94_val         0
#define DFLT_VAL_NX90_mtgy_op_ts94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts94': */
#define MSK_USED_BITS_NX90_mtgy_op_ts94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts95 */
/* => MWMM TS register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts95  0x0000137C
#define Adr_NX90_mtgy_mtgy_op_ts95 0xFF08337C
#define Adr_NX90_mtgy_op_ts95      0xFF08337C
#define DFLT_VAL_NX90_mtgy_op_ts95 0x00000000

#define MSK_NX90_mtgy_op_ts95_val         0xffffffff
#define SRT_NX90_mtgy_op_ts95_val         0
#define DFLT_VAL_NX90_mtgy_op_ts95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts95': */
#define MSK_USED_BITS_NX90_mtgy_op_ts95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts96 */
/* => MWMM TS register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts96  0x00001380
#define Adr_NX90_mtgy_mtgy_op_ts96 0xFF083380
#define Adr_NX90_mtgy_op_ts96      0xFF083380
#define DFLT_VAL_NX90_mtgy_op_ts96 0x00000000

#define MSK_NX90_mtgy_op_ts96_val         0xffffffff
#define SRT_NX90_mtgy_op_ts96_val         0
#define DFLT_VAL_NX90_mtgy_op_ts96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts96': */
#define MSK_USED_BITS_NX90_mtgy_op_ts96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts97 */
/* => MWMM TS register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts97  0x00001384
#define Adr_NX90_mtgy_mtgy_op_ts97 0xFF083384
#define Adr_NX90_mtgy_op_ts97      0xFF083384
#define DFLT_VAL_NX90_mtgy_op_ts97 0x00000000

#define MSK_NX90_mtgy_op_ts97_val         0xffffffff
#define SRT_NX90_mtgy_op_ts97_val         0
#define DFLT_VAL_NX90_mtgy_op_ts97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts97': */
#define MSK_USED_BITS_NX90_mtgy_op_ts97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts98 */
/* => MWMM TS register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts98  0x00001388
#define Adr_NX90_mtgy_mtgy_op_ts98 0xFF083388
#define Adr_NX90_mtgy_op_ts98      0xFF083388
#define DFLT_VAL_NX90_mtgy_op_ts98 0x00000000

#define MSK_NX90_mtgy_op_ts98_val         0xffffffff
#define SRT_NX90_mtgy_op_ts98_val         0
#define DFLT_VAL_NX90_mtgy_op_ts98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts98': */
#define MSK_USED_BITS_NX90_mtgy_op_ts98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts99 */
/* => MWMM TS register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts99  0x0000138C
#define Adr_NX90_mtgy_mtgy_op_ts99 0xFF08338C
#define Adr_NX90_mtgy_op_ts99      0xFF08338C
#define DFLT_VAL_NX90_mtgy_op_ts99 0x00000000

#define MSK_NX90_mtgy_op_ts99_val         0xffffffff
#define SRT_NX90_mtgy_op_ts99_val         0
#define DFLT_VAL_NX90_mtgy_op_ts99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts99': */
#define MSK_USED_BITS_NX90_mtgy_op_ts99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts100 */
/* => MWMM TS register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts100  0x00001390
#define Adr_NX90_mtgy_mtgy_op_ts100 0xFF083390
#define Adr_NX90_mtgy_op_ts100      0xFF083390
#define DFLT_VAL_NX90_mtgy_op_ts100 0x00000000

#define MSK_NX90_mtgy_op_ts100_val         0xffffffff
#define SRT_NX90_mtgy_op_ts100_val         0
#define DFLT_VAL_NX90_mtgy_op_ts100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts100': */
#define MSK_USED_BITS_NX90_mtgy_op_ts100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts101 */
/* => MWMM TS register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts101  0x00001394
#define Adr_NX90_mtgy_mtgy_op_ts101 0xFF083394
#define Adr_NX90_mtgy_op_ts101      0xFF083394
#define DFLT_VAL_NX90_mtgy_op_ts101 0x00000000

#define MSK_NX90_mtgy_op_ts101_val         0xffffffff
#define SRT_NX90_mtgy_op_ts101_val         0
#define DFLT_VAL_NX90_mtgy_op_ts101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts101': */
#define MSK_USED_BITS_NX90_mtgy_op_ts101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts102 */
/* => MWMM TS register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts102  0x00001398
#define Adr_NX90_mtgy_mtgy_op_ts102 0xFF083398
#define Adr_NX90_mtgy_op_ts102      0xFF083398
#define DFLT_VAL_NX90_mtgy_op_ts102 0x00000000

#define MSK_NX90_mtgy_op_ts102_val         0xffffffff
#define SRT_NX90_mtgy_op_ts102_val         0
#define DFLT_VAL_NX90_mtgy_op_ts102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts102': */
#define MSK_USED_BITS_NX90_mtgy_op_ts102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts103 */
/* => MWMM TS register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts103  0x0000139C
#define Adr_NX90_mtgy_mtgy_op_ts103 0xFF08339C
#define Adr_NX90_mtgy_op_ts103      0xFF08339C
#define DFLT_VAL_NX90_mtgy_op_ts103 0x00000000

#define MSK_NX90_mtgy_op_ts103_val         0xffffffff
#define SRT_NX90_mtgy_op_ts103_val         0
#define DFLT_VAL_NX90_mtgy_op_ts103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts103': */
#define MSK_USED_BITS_NX90_mtgy_op_ts103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts104 */
/* => MWMM TS register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts104  0x000013A0
#define Adr_NX90_mtgy_mtgy_op_ts104 0xFF0833A0
#define Adr_NX90_mtgy_op_ts104      0xFF0833A0
#define DFLT_VAL_NX90_mtgy_op_ts104 0x00000000

#define MSK_NX90_mtgy_op_ts104_val         0xffffffff
#define SRT_NX90_mtgy_op_ts104_val         0
#define DFLT_VAL_NX90_mtgy_op_ts104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts104': */
#define MSK_USED_BITS_NX90_mtgy_op_ts104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts105 */
/* => MWMM TS register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts105  0x000013A4
#define Adr_NX90_mtgy_mtgy_op_ts105 0xFF0833A4
#define Adr_NX90_mtgy_op_ts105      0xFF0833A4
#define DFLT_VAL_NX90_mtgy_op_ts105 0x00000000

#define MSK_NX90_mtgy_op_ts105_val         0xffffffff
#define SRT_NX90_mtgy_op_ts105_val         0
#define DFLT_VAL_NX90_mtgy_op_ts105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts105': */
#define MSK_USED_BITS_NX90_mtgy_op_ts105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts106 */
/* => MWMM TS register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts106  0x000013A8
#define Adr_NX90_mtgy_mtgy_op_ts106 0xFF0833A8
#define Adr_NX90_mtgy_op_ts106      0xFF0833A8
#define DFLT_VAL_NX90_mtgy_op_ts106 0x00000000

#define MSK_NX90_mtgy_op_ts106_val         0xffffffff
#define SRT_NX90_mtgy_op_ts106_val         0
#define DFLT_VAL_NX90_mtgy_op_ts106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts106': */
#define MSK_USED_BITS_NX90_mtgy_op_ts106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts107 */
/* => MWMM TS register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts107  0x000013AC
#define Adr_NX90_mtgy_mtgy_op_ts107 0xFF0833AC
#define Adr_NX90_mtgy_op_ts107      0xFF0833AC
#define DFLT_VAL_NX90_mtgy_op_ts107 0x00000000

#define MSK_NX90_mtgy_op_ts107_val         0xffffffff
#define SRT_NX90_mtgy_op_ts107_val         0
#define DFLT_VAL_NX90_mtgy_op_ts107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts107': */
#define MSK_USED_BITS_NX90_mtgy_op_ts107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts108 */
/* => MWMM TS register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts108  0x000013B0
#define Adr_NX90_mtgy_mtgy_op_ts108 0xFF0833B0
#define Adr_NX90_mtgy_op_ts108      0xFF0833B0
#define DFLT_VAL_NX90_mtgy_op_ts108 0x00000000

#define MSK_NX90_mtgy_op_ts108_val         0xffffffff
#define SRT_NX90_mtgy_op_ts108_val         0
#define DFLT_VAL_NX90_mtgy_op_ts108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts108': */
#define MSK_USED_BITS_NX90_mtgy_op_ts108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts109 */
/* => MWMM TS register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts109  0x000013B4
#define Adr_NX90_mtgy_mtgy_op_ts109 0xFF0833B4
#define Adr_NX90_mtgy_op_ts109      0xFF0833B4
#define DFLT_VAL_NX90_mtgy_op_ts109 0x00000000

#define MSK_NX90_mtgy_op_ts109_val         0xffffffff
#define SRT_NX90_mtgy_op_ts109_val         0
#define DFLT_VAL_NX90_mtgy_op_ts109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts109': */
#define MSK_USED_BITS_NX90_mtgy_op_ts109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts110 */
/* => MWMM TS register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts110  0x000013B8
#define Adr_NX90_mtgy_mtgy_op_ts110 0xFF0833B8
#define Adr_NX90_mtgy_op_ts110      0xFF0833B8
#define DFLT_VAL_NX90_mtgy_op_ts110 0x00000000

#define MSK_NX90_mtgy_op_ts110_val         0xffffffff
#define SRT_NX90_mtgy_op_ts110_val         0
#define DFLT_VAL_NX90_mtgy_op_ts110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts110': */
#define MSK_USED_BITS_NX90_mtgy_op_ts110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts111 */
/* => MWMM TS register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts111  0x000013BC
#define Adr_NX90_mtgy_mtgy_op_ts111 0xFF0833BC
#define Adr_NX90_mtgy_op_ts111      0xFF0833BC
#define DFLT_VAL_NX90_mtgy_op_ts111 0x00000000

#define MSK_NX90_mtgy_op_ts111_val         0xffffffff
#define SRT_NX90_mtgy_op_ts111_val         0
#define DFLT_VAL_NX90_mtgy_op_ts111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts111': */
#define MSK_USED_BITS_NX90_mtgy_op_ts111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts112 */
/* => MWMM TS register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts112  0x000013C0
#define Adr_NX90_mtgy_mtgy_op_ts112 0xFF0833C0
#define Adr_NX90_mtgy_op_ts112      0xFF0833C0
#define DFLT_VAL_NX90_mtgy_op_ts112 0x00000000

#define MSK_NX90_mtgy_op_ts112_val         0xffffffff
#define SRT_NX90_mtgy_op_ts112_val         0
#define DFLT_VAL_NX90_mtgy_op_ts112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts112': */
#define MSK_USED_BITS_NX90_mtgy_op_ts112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts113 */
/* => MWMM TS register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts113  0x000013C4
#define Adr_NX90_mtgy_mtgy_op_ts113 0xFF0833C4
#define Adr_NX90_mtgy_op_ts113      0xFF0833C4
#define DFLT_VAL_NX90_mtgy_op_ts113 0x00000000

#define MSK_NX90_mtgy_op_ts113_val         0xffffffff
#define SRT_NX90_mtgy_op_ts113_val         0
#define DFLT_VAL_NX90_mtgy_op_ts113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts113': */
#define MSK_USED_BITS_NX90_mtgy_op_ts113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts114 */
/* => MWMM TS register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts114  0x000013C8
#define Adr_NX90_mtgy_mtgy_op_ts114 0xFF0833C8
#define Adr_NX90_mtgy_op_ts114      0xFF0833C8
#define DFLT_VAL_NX90_mtgy_op_ts114 0x00000000

#define MSK_NX90_mtgy_op_ts114_val         0xffffffff
#define SRT_NX90_mtgy_op_ts114_val         0
#define DFLT_VAL_NX90_mtgy_op_ts114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts114': */
#define MSK_USED_BITS_NX90_mtgy_op_ts114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts115 */
/* => MWMM TS register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts115  0x000013CC
#define Adr_NX90_mtgy_mtgy_op_ts115 0xFF0833CC
#define Adr_NX90_mtgy_op_ts115      0xFF0833CC
#define DFLT_VAL_NX90_mtgy_op_ts115 0x00000000

#define MSK_NX90_mtgy_op_ts115_val         0xffffffff
#define SRT_NX90_mtgy_op_ts115_val         0
#define DFLT_VAL_NX90_mtgy_op_ts115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts115': */
#define MSK_USED_BITS_NX90_mtgy_op_ts115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts116 */
/* => MWMM TS register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts116  0x000013D0
#define Adr_NX90_mtgy_mtgy_op_ts116 0xFF0833D0
#define Adr_NX90_mtgy_op_ts116      0xFF0833D0
#define DFLT_VAL_NX90_mtgy_op_ts116 0x00000000

#define MSK_NX90_mtgy_op_ts116_val         0xffffffff
#define SRT_NX90_mtgy_op_ts116_val         0
#define DFLT_VAL_NX90_mtgy_op_ts116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts116': */
#define MSK_USED_BITS_NX90_mtgy_op_ts116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts117 */
/* => MWMM TS register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts117  0x000013D4
#define Adr_NX90_mtgy_mtgy_op_ts117 0xFF0833D4
#define Adr_NX90_mtgy_op_ts117      0xFF0833D4
#define DFLT_VAL_NX90_mtgy_op_ts117 0x00000000

#define MSK_NX90_mtgy_op_ts117_val         0xffffffff
#define SRT_NX90_mtgy_op_ts117_val         0
#define DFLT_VAL_NX90_mtgy_op_ts117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts117': */
#define MSK_USED_BITS_NX90_mtgy_op_ts117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts118 */
/* => MWMM TS register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts118  0x000013D8
#define Adr_NX90_mtgy_mtgy_op_ts118 0xFF0833D8
#define Adr_NX90_mtgy_op_ts118      0xFF0833D8
#define DFLT_VAL_NX90_mtgy_op_ts118 0x00000000

#define MSK_NX90_mtgy_op_ts118_val         0xffffffff
#define SRT_NX90_mtgy_op_ts118_val         0
#define DFLT_VAL_NX90_mtgy_op_ts118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts118': */
#define MSK_USED_BITS_NX90_mtgy_op_ts118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts119 */
/* => MWMM TS register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts119  0x000013DC
#define Adr_NX90_mtgy_mtgy_op_ts119 0xFF0833DC
#define Adr_NX90_mtgy_op_ts119      0xFF0833DC
#define DFLT_VAL_NX90_mtgy_op_ts119 0x00000000

#define MSK_NX90_mtgy_op_ts119_val         0xffffffff
#define SRT_NX90_mtgy_op_ts119_val         0
#define DFLT_VAL_NX90_mtgy_op_ts119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts119': */
#define MSK_USED_BITS_NX90_mtgy_op_ts119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts120 */
/* => MWMM TS register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts120  0x000013E0
#define Adr_NX90_mtgy_mtgy_op_ts120 0xFF0833E0
#define Adr_NX90_mtgy_op_ts120      0xFF0833E0
#define DFLT_VAL_NX90_mtgy_op_ts120 0x00000000

#define MSK_NX90_mtgy_op_ts120_val         0xffffffff
#define SRT_NX90_mtgy_op_ts120_val         0
#define DFLT_VAL_NX90_mtgy_op_ts120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts120': */
#define MSK_USED_BITS_NX90_mtgy_op_ts120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts121 */
/* => MWMM TS register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts121  0x000013E4
#define Adr_NX90_mtgy_mtgy_op_ts121 0xFF0833E4
#define Adr_NX90_mtgy_op_ts121      0xFF0833E4
#define DFLT_VAL_NX90_mtgy_op_ts121 0x00000000

#define MSK_NX90_mtgy_op_ts121_val         0xffffffff
#define SRT_NX90_mtgy_op_ts121_val         0
#define DFLT_VAL_NX90_mtgy_op_ts121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts121': */
#define MSK_USED_BITS_NX90_mtgy_op_ts121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts122 */
/* => MWMM TS register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts122  0x000013E8
#define Adr_NX90_mtgy_mtgy_op_ts122 0xFF0833E8
#define Adr_NX90_mtgy_op_ts122      0xFF0833E8
#define DFLT_VAL_NX90_mtgy_op_ts122 0x00000000

#define MSK_NX90_mtgy_op_ts122_val         0xffffffff
#define SRT_NX90_mtgy_op_ts122_val         0
#define DFLT_VAL_NX90_mtgy_op_ts122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts122': */
#define MSK_USED_BITS_NX90_mtgy_op_ts122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts123 */
/* => MWMM TS register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts123  0x000013EC
#define Adr_NX90_mtgy_mtgy_op_ts123 0xFF0833EC
#define Adr_NX90_mtgy_op_ts123      0xFF0833EC
#define DFLT_VAL_NX90_mtgy_op_ts123 0x00000000

#define MSK_NX90_mtgy_op_ts123_val         0xffffffff
#define SRT_NX90_mtgy_op_ts123_val         0
#define DFLT_VAL_NX90_mtgy_op_ts123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts123': */
#define MSK_USED_BITS_NX90_mtgy_op_ts123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts124 */
/* => MWMM TS register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts124  0x000013F0
#define Adr_NX90_mtgy_mtgy_op_ts124 0xFF0833F0
#define Adr_NX90_mtgy_op_ts124      0xFF0833F0
#define DFLT_VAL_NX90_mtgy_op_ts124 0x00000000

#define MSK_NX90_mtgy_op_ts124_val         0xffffffff
#define SRT_NX90_mtgy_op_ts124_val         0
#define DFLT_VAL_NX90_mtgy_op_ts124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts124': */
#define MSK_USED_BITS_NX90_mtgy_op_ts124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts125 */
/* => MWMM TS register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts125  0x000013F4
#define Adr_NX90_mtgy_mtgy_op_ts125 0xFF0833F4
#define Adr_NX90_mtgy_op_ts125      0xFF0833F4
#define DFLT_VAL_NX90_mtgy_op_ts125 0x00000000

#define MSK_NX90_mtgy_op_ts125_val         0xffffffff
#define SRT_NX90_mtgy_op_ts125_val         0
#define DFLT_VAL_NX90_mtgy_op_ts125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts125': */
#define MSK_USED_BITS_NX90_mtgy_op_ts125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts126 */
/* => MWMM TS register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts126  0x000013F8
#define Adr_NX90_mtgy_mtgy_op_ts126 0xFF0833F8
#define Adr_NX90_mtgy_op_ts126      0xFF0833F8
#define DFLT_VAL_NX90_mtgy_op_ts126 0x00000000

#define MSK_NX90_mtgy_op_ts126_val         0xffffffff
#define SRT_NX90_mtgy_op_ts126_val         0
#define DFLT_VAL_NX90_mtgy_op_ts126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts126': */
#define MSK_USED_BITS_NX90_mtgy_op_ts126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_ts127 */
/* => MWMM TS register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_ts127  0x000013FC
#define Adr_NX90_mtgy_mtgy_op_ts127 0xFF0833FC
#define Adr_NX90_mtgy_op_ts127      0xFF0833FC
#define DFLT_VAL_NX90_mtgy_op_ts127 0x00000000

#define MSK_NX90_mtgy_op_ts127_val         0xffffffff
#define SRT_NX90_mtgy_op_ts127_val         0
#define DFLT_VAL_NX90_mtgy_op_ts127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_ts127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_ts127': */
#define MSK_USED_BITS_NX90_mtgy_op_ts127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p0 */
/* => MWMM operand P register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p0  0x00001400
#define Adr_NX90_mtgy_mtgy_op_p0 0xFF083400
#define Adr_NX90_mtgy_op_p0      0xFF083400
#define DFLT_VAL_NX90_mtgy_op_p0 0x00000000

#define MSK_NX90_mtgy_op_p0_val         0xffffffff
#define SRT_NX90_mtgy_op_p0_val         0
#define DFLT_VAL_NX90_mtgy_op_p0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p0': */
#define MSK_USED_BITS_NX90_mtgy_op_p0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p1 */
/* => MWMM operand P register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p1  0x00001404
#define Adr_NX90_mtgy_mtgy_op_p1 0xFF083404
#define Adr_NX90_mtgy_op_p1      0xFF083404
#define DFLT_VAL_NX90_mtgy_op_p1 0x00000000

#define MSK_NX90_mtgy_op_p1_val         0xffffffff
#define SRT_NX90_mtgy_op_p1_val         0
#define DFLT_VAL_NX90_mtgy_op_p1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p1': */
#define MSK_USED_BITS_NX90_mtgy_op_p1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p2 */
/* => MWMM operand P register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p2  0x00001408
#define Adr_NX90_mtgy_mtgy_op_p2 0xFF083408
#define Adr_NX90_mtgy_op_p2      0xFF083408
#define DFLT_VAL_NX90_mtgy_op_p2 0x00000000

#define MSK_NX90_mtgy_op_p2_val         0xffffffff
#define SRT_NX90_mtgy_op_p2_val         0
#define DFLT_VAL_NX90_mtgy_op_p2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p2': */
#define MSK_USED_BITS_NX90_mtgy_op_p2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p3 */
/* => MWMM operand P register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p3  0x0000140C
#define Adr_NX90_mtgy_mtgy_op_p3 0xFF08340C
#define Adr_NX90_mtgy_op_p3      0xFF08340C
#define DFLT_VAL_NX90_mtgy_op_p3 0x00000000

#define MSK_NX90_mtgy_op_p3_val         0xffffffff
#define SRT_NX90_mtgy_op_p3_val         0
#define DFLT_VAL_NX90_mtgy_op_p3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p3': */
#define MSK_USED_BITS_NX90_mtgy_op_p3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p4 */
/* => MWMM operand P register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p4  0x00001410
#define Adr_NX90_mtgy_mtgy_op_p4 0xFF083410
#define Adr_NX90_mtgy_op_p4      0xFF083410
#define DFLT_VAL_NX90_mtgy_op_p4 0x00000000

#define MSK_NX90_mtgy_op_p4_val         0xffffffff
#define SRT_NX90_mtgy_op_p4_val         0
#define DFLT_VAL_NX90_mtgy_op_p4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p4': */
#define MSK_USED_BITS_NX90_mtgy_op_p4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p5 */
/* => MWMM operand P register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p5  0x00001414
#define Adr_NX90_mtgy_mtgy_op_p5 0xFF083414
#define Adr_NX90_mtgy_op_p5      0xFF083414
#define DFLT_VAL_NX90_mtgy_op_p5 0x00000000

#define MSK_NX90_mtgy_op_p5_val         0xffffffff
#define SRT_NX90_mtgy_op_p5_val         0
#define DFLT_VAL_NX90_mtgy_op_p5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p5': */
#define MSK_USED_BITS_NX90_mtgy_op_p5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p6 */
/* => MWMM operand P register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p6  0x00001418
#define Adr_NX90_mtgy_mtgy_op_p6 0xFF083418
#define Adr_NX90_mtgy_op_p6      0xFF083418
#define DFLT_VAL_NX90_mtgy_op_p6 0x00000000

#define MSK_NX90_mtgy_op_p6_val         0xffffffff
#define SRT_NX90_mtgy_op_p6_val         0
#define DFLT_VAL_NX90_mtgy_op_p6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p6': */
#define MSK_USED_BITS_NX90_mtgy_op_p6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p7 */
/* => MWMM operand P register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p7  0x0000141C
#define Adr_NX90_mtgy_mtgy_op_p7 0xFF08341C
#define Adr_NX90_mtgy_op_p7      0xFF08341C
#define DFLT_VAL_NX90_mtgy_op_p7 0x00000000

#define MSK_NX90_mtgy_op_p7_val         0xffffffff
#define SRT_NX90_mtgy_op_p7_val         0
#define DFLT_VAL_NX90_mtgy_op_p7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p7': */
#define MSK_USED_BITS_NX90_mtgy_op_p7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p8 */
/* => MWMM operand P register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p8  0x00001420
#define Adr_NX90_mtgy_mtgy_op_p8 0xFF083420
#define Adr_NX90_mtgy_op_p8      0xFF083420
#define DFLT_VAL_NX90_mtgy_op_p8 0x00000000

#define MSK_NX90_mtgy_op_p8_val         0xffffffff
#define SRT_NX90_mtgy_op_p8_val         0
#define DFLT_VAL_NX90_mtgy_op_p8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p8': */
#define MSK_USED_BITS_NX90_mtgy_op_p8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p9 */
/* => MWMM operand P register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p9  0x00001424
#define Adr_NX90_mtgy_mtgy_op_p9 0xFF083424
#define Adr_NX90_mtgy_op_p9      0xFF083424
#define DFLT_VAL_NX90_mtgy_op_p9 0x00000000

#define MSK_NX90_mtgy_op_p9_val         0xffffffff
#define SRT_NX90_mtgy_op_p9_val         0
#define DFLT_VAL_NX90_mtgy_op_p9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p9': */
#define MSK_USED_BITS_NX90_mtgy_op_p9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p10 */
/* => MWMM operand P register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p10  0x00001428
#define Adr_NX90_mtgy_mtgy_op_p10 0xFF083428
#define Adr_NX90_mtgy_op_p10      0xFF083428
#define DFLT_VAL_NX90_mtgy_op_p10 0x00000000

#define MSK_NX90_mtgy_op_p10_val         0xffffffff
#define SRT_NX90_mtgy_op_p10_val         0
#define DFLT_VAL_NX90_mtgy_op_p10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p10': */
#define MSK_USED_BITS_NX90_mtgy_op_p10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p11 */
/* => MWMM operand P register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p11  0x0000142C
#define Adr_NX90_mtgy_mtgy_op_p11 0xFF08342C
#define Adr_NX90_mtgy_op_p11      0xFF08342C
#define DFLT_VAL_NX90_mtgy_op_p11 0x00000000

#define MSK_NX90_mtgy_op_p11_val         0xffffffff
#define SRT_NX90_mtgy_op_p11_val         0
#define DFLT_VAL_NX90_mtgy_op_p11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p11': */
#define MSK_USED_BITS_NX90_mtgy_op_p11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p12 */
/* => MWMM operand P register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p12  0x00001430
#define Adr_NX90_mtgy_mtgy_op_p12 0xFF083430
#define Adr_NX90_mtgy_op_p12      0xFF083430
#define DFLT_VAL_NX90_mtgy_op_p12 0x00000000

#define MSK_NX90_mtgy_op_p12_val         0xffffffff
#define SRT_NX90_mtgy_op_p12_val         0
#define DFLT_VAL_NX90_mtgy_op_p12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p12': */
#define MSK_USED_BITS_NX90_mtgy_op_p12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p13 */
/* => MWMM operand P register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p13  0x00001434
#define Adr_NX90_mtgy_mtgy_op_p13 0xFF083434
#define Adr_NX90_mtgy_op_p13      0xFF083434
#define DFLT_VAL_NX90_mtgy_op_p13 0x00000000

#define MSK_NX90_mtgy_op_p13_val         0xffffffff
#define SRT_NX90_mtgy_op_p13_val         0
#define DFLT_VAL_NX90_mtgy_op_p13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p13': */
#define MSK_USED_BITS_NX90_mtgy_op_p13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p14 */
/* => MWMM operand P register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p14  0x00001438
#define Adr_NX90_mtgy_mtgy_op_p14 0xFF083438
#define Adr_NX90_mtgy_op_p14      0xFF083438
#define DFLT_VAL_NX90_mtgy_op_p14 0x00000000

#define MSK_NX90_mtgy_op_p14_val         0xffffffff
#define SRT_NX90_mtgy_op_p14_val         0
#define DFLT_VAL_NX90_mtgy_op_p14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p14': */
#define MSK_USED_BITS_NX90_mtgy_op_p14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p15 */
/* => MWMM operand P register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p15  0x0000143C
#define Adr_NX90_mtgy_mtgy_op_p15 0xFF08343C
#define Adr_NX90_mtgy_op_p15      0xFF08343C
#define DFLT_VAL_NX90_mtgy_op_p15 0x00000000

#define MSK_NX90_mtgy_op_p15_val         0xffffffff
#define SRT_NX90_mtgy_op_p15_val         0
#define DFLT_VAL_NX90_mtgy_op_p15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p15': */
#define MSK_USED_BITS_NX90_mtgy_op_p15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p16 */
/* => MWMM operand P register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p16  0x00001440
#define Adr_NX90_mtgy_mtgy_op_p16 0xFF083440
#define Adr_NX90_mtgy_op_p16      0xFF083440
#define DFLT_VAL_NX90_mtgy_op_p16 0x00000000

#define MSK_NX90_mtgy_op_p16_val         0xffffffff
#define SRT_NX90_mtgy_op_p16_val         0
#define DFLT_VAL_NX90_mtgy_op_p16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p16': */
#define MSK_USED_BITS_NX90_mtgy_op_p16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p17 */
/* => MWMM operand P register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p17  0x00001444
#define Adr_NX90_mtgy_mtgy_op_p17 0xFF083444
#define Adr_NX90_mtgy_op_p17      0xFF083444
#define DFLT_VAL_NX90_mtgy_op_p17 0x00000000

#define MSK_NX90_mtgy_op_p17_val         0xffffffff
#define SRT_NX90_mtgy_op_p17_val         0
#define DFLT_VAL_NX90_mtgy_op_p17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p17': */
#define MSK_USED_BITS_NX90_mtgy_op_p17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p18 */
/* => MWMM operand P register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p18  0x00001448
#define Adr_NX90_mtgy_mtgy_op_p18 0xFF083448
#define Adr_NX90_mtgy_op_p18      0xFF083448
#define DFLT_VAL_NX90_mtgy_op_p18 0x00000000

#define MSK_NX90_mtgy_op_p18_val         0xffffffff
#define SRT_NX90_mtgy_op_p18_val         0
#define DFLT_VAL_NX90_mtgy_op_p18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p18': */
#define MSK_USED_BITS_NX90_mtgy_op_p18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p19 */
/* => MWMM operand P register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p19  0x0000144C
#define Adr_NX90_mtgy_mtgy_op_p19 0xFF08344C
#define Adr_NX90_mtgy_op_p19      0xFF08344C
#define DFLT_VAL_NX90_mtgy_op_p19 0x00000000

#define MSK_NX90_mtgy_op_p19_val         0xffffffff
#define SRT_NX90_mtgy_op_p19_val         0
#define DFLT_VAL_NX90_mtgy_op_p19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p19': */
#define MSK_USED_BITS_NX90_mtgy_op_p19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p20 */
/* => MWMM operand P register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p20  0x00001450
#define Adr_NX90_mtgy_mtgy_op_p20 0xFF083450
#define Adr_NX90_mtgy_op_p20      0xFF083450
#define DFLT_VAL_NX90_mtgy_op_p20 0x00000000

#define MSK_NX90_mtgy_op_p20_val         0xffffffff
#define SRT_NX90_mtgy_op_p20_val         0
#define DFLT_VAL_NX90_mtgy_op_p20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p20': */
#define MSK_USED_BITS_NX90_mtgy_op_p20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p21 */
/* => MWMM operand P register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p21  0x00001454
#define Adr_NX90_mtgy_mtgy_op_p21 0xFF083454
#define Adr_NX90_mtgy_op_p21      0xFF083454
#define DFLT_VAL_NX90_mtgy_op_p21 0x00000000

#define MSK_NX90_mtgy_op_p21_val         0xffffffff
#define SRT_NX90_mtgy_op_p21_val         0
#define DFLT_VAL_NX90_mtgy_op_p21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p21': */
#define MSK_USED_BITS_NX90_mtgy_op_p21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p22 */
/* => MWMM operand P register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p22  0x00001458
#define Adr_NX90_mtgy_mtgy_op_p22 0xFF083458
#define Adr_NX90_mtgy_op_p22      0xFF083458
#define DFLT_VAL_NX90_mtgy_op_p22 0x00000000

#define MSK_NX90_mtgy_op_p22_val         0xffffffff
#define SRT_NX90_mtgy_op_p22_val         0
#define DFLT_VAL_NX90_mtgy_op_p22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p22': */
#define MSK_USED_BITS_NX90_mtgy_op_p22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p23 */
/* => MWMM operand P register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p23  0x0000145C
#define Adr_NX90_mtgy_mtgy_op_p23 0xFF08345C
#define Adr_NX90_mtgy_op_p23      0xFF08345C
#define DFLT_VAL_NX90_mtgy_op_p23 0x00000000

#define MSK_NX90_mtgy_op_p23_val         0xffffffff
#define SRT_NX90_mtgy_op_p23_val         0
#define DFLT_VAL_NX90_mtgy_op_p23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p23': */
#define MSK_USED_BITS_NX90_mtgy_op_p23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p24 */
/* => MWMM operand P register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p24  0x00001460
#define Adr_NX90_mtgy_mtgy_op_p24 0xFF083460
#define Adr_NX90_mtgy_op_p24      0xFF083460
#define DFLT_VAL_NX90_mtgy_op_p24 0x00000000

#define MSK_NX90_mtgy_op_p24_val         0xffffffff
#define SRT_NX90_mtgy_op_p24_val         0
#define DFLT_VAL_NX90_mtgy_op_p24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p24': */
#define MSK_USED_BITS_NX90_mtgy_op_p24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p25 */
/* => MWMM operand P register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p25  0x00001464
#define Adr_NX90_mtgy_mtgy_op_p25 0xFF083464
#define Adr_NX90_mtgy_op_p25      0xFF083464
#define DFLT_VAL_NX90_mtgy_op_p25 0x00000000

#define MSK_NX90_mtgy_op_p25_val         0xffffffff
#define SRT_NX90_mtgy_op_p25_val         0
#define DFLT_VAL_NX90_mtgy_op_p25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p25': */
#define MSK_USED_BITS_NX90_mtgy_op_p25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p26 */
/* => MWMM operand P register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p26  0x00001468
#define Adr_NX90_mtgy_mtgy_op_p26 0xFF083468
#define Adr_NX90_mtgy_op_p26      0xFF083468
#define DFLT_VAL_NX90_mtgy_op_p26 0x00000000

#define MSK_NX90_mtgy_op_p26_val         0xffffffff
#define SRT_NX90_mtgy_op_p26_val         0
#define DFLT_VAL_NX90_mtgy_op_p26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p26': */
#define MSK_USED_BITS_NX90_mtgy_op_p26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p27 */
/* => MWMM operand P register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p27  0x0000146C
#define Adr_NX90_mtgy_mtgy_op_p27 0xFF08346C
#define Adr_NX90_mtgy_op_p27      0xFF08346C
#define DFLT_VAL_NX90_mtgy_op_p27 0x00000000

#define MSK_NX90_mtgy_op_p27_val         0xffffffff
#define SRT_NX90_mtgy_op_p27_val         0
#define DFLT_VAL_NX90_mtgy_op_p27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p27': */
#define MSK_USED_BITS_NX90_mtgy_op_p27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p28 */
/* => MWMM operand P register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p28  0x00001470
#define Adr_NX90_mtgy_mtgy_op_p28 0xFF083470
#define Adr_NX90_mtgy_op_p28      0xFF083470
#define DFLT_VAL_NX90_mtgy_op_p28 0x00000000

#define MSK_NX90_mtgy_op_p28_val         0xffffffff
#define SRT_NX90_mtgy_op_p28_val         0
#define DFLT_VAL_NX90_mtgy_op_p28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p28': */
#define MSK_USED_BITS_NX90_mtgy_op_p28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p29 */
/* => MWMM operand P register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p29  0x00001474
#define Adr_NX90_mtgy_mtgy_op_p29 0xFF083474
#define Adr_NX90_mtgy_op_p29      0xFF083474
#define DFLT_VAL_NX90_mtgy_op_p29 0x00000000

#define MSK_NX90_mtgy_op_p29_val         0xffffffff
#define SRT_NX90_mtgy_op_p29_val         0
#define DFLT_VAL_NX90_mtgy_op_p29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p29': */
#define MSK_USED_BITS_NX90_mtgy_op_p29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p30 */
/* => MWMM operand P register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p30  0x00001478
#define Adr_NX90_mtgy_mtgy_op_p30 0xFF083478
#define Adr_NX90_mtgy_op_p30      0xFF083478
#define DFLT_VAL_NX90_mtgy_op_p30 0x00000000

#define MSK_NX90_mtgy_op_p30_val         0xffffffff
#define SRT_NX90_mtgy_op_p30_val         0
#define DFLT_VAL_NX90_mtgy_op_p30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p30': */
#define MSK_USED_BITS_NX90_mtgy_op_p30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p31 */
/* => MWMM operand P register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p31  0x0000147C
#define Adr_NX90_mtgy_mtgy_op_p31 0xFF08347C
#define Adr_NX90_mtgy_op_p31      0xFF08347C
#define DFLT_VAL_NX90_mtgy_op_p31 0x00000000

#define MSK_NX90_mtgy_op_p31_val         0xffffffff
#define SRT_NX90_mtgy_op_p31_val         0
#define DFLT_VAL_NX90_mtgy_op_p31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p31': */
#define MSK_USED_BITS_NX90_mtgy_op_p31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p32 */
/* => MWMM operand P register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p32  0x00001480
#define Adr_NX90_mtgy_mtgy_op_p32 0xFF083480
#define Adr_NX90_mtgy_op_p32      0xFF083480
#define DFLT_VAL_NX90_mtgy_op_p32 0x00000000

#define MSK_NX90_mtgy_op_p32_val         0xffffffff
#define SRT_NX90_mtgy_op_p32_val         0
#define DFLT_VAL_NX90_mtgy_op_p32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p32': */
#define MSK_USED_BITS_NX90_mtgy_op_p32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p33 */
/* => MWMM operand P register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p33  0x00001484
#define Adr_NX90_mtgy_mtgy_op_p33 0xFF083484
#define Adr_NX90_mtgy_op_p33      0xFF083484
#define DFLT_VAL_NX90_mtgy_op_p33 0x00000000

#define MSK_NX90_mtgy_op_p33_val         0xffffffff
#define SRT_NX90_mtgy_op_p33_val         0
#define DFLT_VAL_NX90_mtgy_op_p33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p33': */
#define MSK_USED_BITS_NX90_mtgy_op_p33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p34 */
/* => MWMM operand P register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p34  0x00001488
#define Adr_NX90_mtgy_mtgy_op_p34 0xFF083488
#define Adr_NX90_mtgy_op_p34      0xFF083488
#define DFLT_VAL_NX90_mtgy_op_p34 0x00000000

#define MSK_NX90_mtgy_op_p34_val         0xffffffff
#define SRT_NX90_mtgy_op_p34_val         0
#define DFLT_VAL_NX90_mtgy_op_p34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p34': */
#define MSK_USED_BITS_NX90_mtgy_op_p34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p35 */
/* => MWMM operand P register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p35  0x0000148C
#define Adr_NX90_mtgy_mtgy_op_p35 0xFF08348C
#define Adr_NX90_mtgy_op_p35      0xFF08348C
#define DFLT_VAL_NX90_mtgy_op_p35 0x00000000

#define MSK_NX90_mtgy_op_p35_val         0xffffffff
#define SRT_NX90_mtgy_op_p35_val         0
#define DFLT_VAL_NX90_mtgy_op_p35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p35': */
#define MSK_USED_BITS_NX90_mtgy_op_p35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p36 */
/* => MWMM operand P register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p36  0x00001490
#define Adr_NX90_mtgy_mtgy_op_p36 0xFF083490
#define Adr_NX90_mtgy_op_p36      0xFF083490
#define DFLT_VAL_NX90_mtgy_op_p36 0x00000000

#define MSK_NX90_mtgy_op_p36_val         0xffffffff
#define SRT_NX90_mtgy_op_p36_val         0
#define DFLT_VAL_NX90_mtgy_op_p36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p36': */
#define MSK_USED_BITS_NX90_mtgy_op_p36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p37 */
/* => MWMM operand P register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p37  0x00001494
#define Adr_NX90_mtgy_mtgy_op_p37 0xFF083494
#define Adr_NX90_mtgy_op_p37      0xFF083494
#define DFLT_VAL_NX90_mtgy_op_p37 0x00000000

#define MSK_NX90_mtgy_op_p37_val         0xffffffff
#define SRT_NX90_mtgy_op_p37_val         0
#define DFLT_VAL_NX90_mtgy_op_p37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p37': */
#define MSK_USED_BITS_NX90_mtgy_op_p37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p38 */
/* => MWMM operand P register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p38  0x00001498
#define Adr_NX90_mtgy_mtgy_op_p38 0xFF083498
#define Adr_NX90_mtgy_op_p38      0xFF083498
#define DFLT_VAL_NX90_mtgy_op_p38 0x00000000

#define MSK_NX90_mtgy_op_p38_val         0xffffffff
#define SRT_NX90_mtgy_op_p38_val         0
#define DFLT_VAL_NX90_mtgy_op_p38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p38': */
#define MSK_USED_BITS_NX90_mtgy_op_p38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p39 */
/* => MWMM operand P register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p39  0x0000149C
#define Adr_NX90_mtgy_mtgy_op_p39 0xFF08349C
#define Adr_NX90_mtgy_op_p39      0xFF08349C
#define DFLT_VAL_NX90_mtgy_op_p39 0x00000000

#define MSK_NX90_mtgy_op_p39_val         0xffffffff
#define SRT_NX90_mtgy_op_p39_val         0
#define DFLT_VAL_NX90_mtgy_op_p39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p39': */
#define MSK_USED_BITS_NX90_mtgy_op_p39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p40 */
/* => MWMM operand P register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p40  0x000014A0
#define Adr_NX90_mtgy_mtgy_op_p40 0xFF0834A0
#define Adr_NX90_mtgy_op_p40      0xFF0834A0
#define DFLT_VAL_NX90_mtgy_op_p40 0x00000000

#define MSK_NX90_mtgy_op_p40_val         0xffffffff
#define SRT_NX90_mtgy_op_p40_val         0
#define DFLT_VAL_NX90_mtgy_op_p40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p40': */
#define MSK_USED_BITS_NX90_mtgy_op_p40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p41 */
/* => MWMM operand P register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p41  0x000014A4
#define Adr_NX90_mtgy_mtgy_op_p41 0xFF0834A4
#define Adr_NX90_mtgy_op_p41      0xFF0834A4
#define DFLT_VAL_NX90_mtgy_op_p41 0x00000000

#define MSK_NX90_mtgy_op_p41_val         0xffffffff
#define SRT_NX90_mtgy_op_p41_val         0
#define DFLT_VAL_NX90_mtgy_op_p41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p41': */
#define MSK_USED_BITS_NX90_mtgy_op_p41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p42 */
/* => MWMM operand P register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p42  0x000014A8
#define Adr_NX90_mtgy_mtgy_op_p42 0xFF0834A8
#define Adr_NX90_mtgy_op_p42      0xFF0834A8
#define DFLT_VAL_NX90_mtgy_op_p42 0x00000000

#define MSK_NX90_mtgy_op_p42_val         0xffffffff
#define SRT_NX90_mtgy_op_p42_val         0
#define DFLT_VAL_NX90_mtgy_op_p42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p42': */
#define MSK_USED_BITS_NX90_mtgy_op_p42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p43 */
/* => MWMM operand P register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p43  0x000014AC
#define Adr_NX90_mtgy_mtgy_op_p43 0xFF0834AC
#define Adr_NX90_mtgy_op_p43      0xFF0834AC
#define DFLT_VAL_NX90_mtgy_op_p43 0x00000000

#define MSK_NX90_mtgy_op_p43_val         0xffffffff
#define SRT_NX90_mtgy_op_p43_val         0
#define DFLT_VAL_NX90_mtgy_op_p43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p43': */
#define MSK_USED_BITS_NX90_mtgy_op_p43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p44 */
/* => MWMM operand P register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p44  0x000014B0
#define Adr_NX90_mtgy_mtgy_op_p44 0xFF0834B0
#define Adr_NX90_mtgy_op_p44      0xFF0834B0
#define DFLT_VAL_NX90_mtgy_op_p44 0x00000000

#define MSK_NX90_mtgy_op_p44_val         0xffffffff
#define SRT_NX90_mtgy_op_p44_val         0
#define DFLT_VAL_NX90_mtgy_op_p44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p44': */
#define MSK_USED_BITS_NX90_mtgy_op_p44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p45 */
/* => MWMM operand P register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p45  0x000014B4
#define Adr_NX90_mtgy_mtgy_op_p45 0xFF0834B4
#define Adr_NX90_mtgy_op_p45      0xFF0834B4
#define DFLT_VAL_NX90_mtgy_op_p45 0x00000000

#define MSK_NX90_mtgy_op_p45_val         0xffffffff
#define SRT_NX90_mtgy_op_p45_val         0
#define DFLT_VAL_NX90_mtgy_op_p45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p45': */
#define MSK_USED_BITS_NX90_mtgy_op_p45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p46 */
/* => MWMM operand P register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p46  0x000014B8
#define Adr_NX90_mtgy_mtgy_op_p46 0xFF0834B8
#define Adr_NX90_mtgy_op_p46      0xFF0834B8
#define DFLT_VAL_NX90_mtgy_op_p46 0x00000000

#define MSK_NX90_mtgy_op_p46_val         0xffffffff
#define SRT_NX90_mtgy_op_p46_val         0
#define DFLT_VAL_NX90_mtgy_op_p46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p46': */
#define MSK_USED_BITS_NX90_mtgy_op_p46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p47 */
/* => MWMM operand P register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p47  0x000014BC
#define Adr_NX90_mtgy_mtgy_op_p47 0xFF0834BC
#define Adr_NX90_mtgy_op_p47      0xFF0834BC
#define DFLT_VAL_NX90_mtgy_op_p47 0x00000000

#define MSK_NX90_mtgy_op_p47_val         0xffffffff
#define SRT_NX90_mtgy_op_p47_val         0
#define DFLT_VAL_NX90_mtgy_op_p47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p47': */
#define MSK_USED_BITS_NX90_mtgy_op_p47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p48 */
/* => MWMM operand P register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p48  0x000014C0
#define Adr_NX90_mtgy_mtgy_op_p48 0xFF0834C0
#define Adr_NX90_mtgy_op_p48      0xFF0834C0
#define DFLT_VAL_NX90_mtgy_op_p48 0x00000000

#define MSK_NX90_mtgy_op_p48_val         0xffffffff
#define SRT_NX90_mtgy_op_p48_val         0
#define DFLT_VAL_NX90_mtgy_op_p48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p48': */
#define MSK_USED_BITS_NX90_mtgy_op_p48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p49 */
/* => MWMM operand P register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p49  0x000014C4
#define Adr_NX90_mtgy_mtgy_op_p49 0xFF0834C4
#define Adr_NX90_mtgy_op_p49      0xFF0834C4
#define DFLT_VAL_NX90_mtgy_op_p49 0x00000000

#define MSK_NX90_mtgy_op_p49_val         0xffffffff
#define SRT_NX90_mtgy_op_p49_val         0
#define DFLT_VAL_NX90_mtgy_op_p49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p49': */
#define MSK_USED_BITS_NX90_mtgy_op_p49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p50 */
/* => MWMM operand P register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p50  0x000014C8
#define Adr_NX90_mtgy_mtgy_op_p50 0xFF0834C8
#define Adr_NX90_mtgy_op_p50      0xFF0834C8
#define DFLT_VAL_NX90_mtgy_op_p50 0x00000000

#define MSK_NX90_mtgy_op_p50_val         0xffffffff
#define SRT_NX90_mtgy_op_p50_val         0
#define DFLT_VAL_NX90_mtgy_op_p50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p50': */
#define MSK_USED_BITS_NX90_mtgy_op_p50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p51 */
/* => MWMM operand P register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p51  0x000014CC
#define Adr_NX90_mtgy_mtgy_op_p51 0xFF0834CC
#define Adr_NX90_mtgy_op_p51      0xFF0834CC
#define DFLT_VAL_NX90_mtgy_op_p51 0x00000000

#define MSK_NX90_mtgy_op_p51_val         0xffffffff
#define SRT_NX90_mtgy_op_p51_val         0
#define DFLT_VAL_NX90_mtgy_op_p51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p51': */
#define MSK_USED_BITS_NX90_mtgy_op_p51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p52 */
/* => MWMM operand P register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p52  0x000014D0
#define Adr_NX90_mtgy_mtgy_op_p52 0xFF0834D0
#define Adr_NX90_mtgy_op_p52      0xFF0834D0
#define DFLT_VAL_NX90_mtgy_op_p52 0x00000000

#define MSK_NX90_mtgy_op_p52_val         0xffffffff
#define SRT_NX90_mtgy_op_p52_val         0
#define DFLT_VAL_NX90_mtgy_op_p52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p52': */
#define MSK_USED_BITS_NX90_mtgy_op_p52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p53 */
/* => MWMM operand P register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p53  0x000014D4
#define Adr_NX90_mtgy_mtgy_op_p53 0xFF0834D4
#define Adr_NX90_mtgy_op_p53      0xFF0834D4
#define DFLT_VAL_NX90_mtgy_op_p53 0x00000000

#define MSK_NX90_mtgy_op_p53_val         0xffffffff
#define SRT_NX90_mtgy_op_p53_val         0
#define DFLT_VAL_NX90_mtgy_op_p53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p53': */
#define MSK_USED_BITS_NX90_mtgy_op_p53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p54 */
/* => MWMM operand P register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p54  0x000014D8
#define Adr_NX90_mtgy_mtgy_op_p54 0xFF0834D8
#define Adr_NX90_mtgy_op_p54      0xFF0834D8
#define DFLT_VAL_NX90_mtgy_op_p54 0x00000000

#define MSK_NX90_mtgy_op_p54_val         0xffffffff
#define SRT_NX90_mtgy_op_p54_val         0
#define DFLT_VAL_NX90_mtgy_op_p54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p54': */
#define MSK_USED_BITS_NX90_mtgy_op_p54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p55 */
/* => MWMM operand P register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p55  0x000014DC
#define Adr_NX90_mtgy_mtgy_op_p55 0xFF0834DC
#define Adr_NX90_mtgy_op_p55      0xFF0834DC
#define DFLT_VAL_NX90_mtgy_op_p55 0x00000000

#define MSK_NX90_mtgy_op_p55_val         0xffffffff
#define SRT_NX90_mtgy_op_p55_val         0
#define DFLT_VAL_NX90_mtgy_op_p55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p55': */
#define MSK_USED_BITS_NX90_mtgy_op_p55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p56 */
/* => MWMM operand P register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p56  0x000014E0
#define Adr_NX90_mtgy_mtgy_op_p56 0xFF0834E0
#define Adr_NX90_mtgy_op_p56      0xFF0834E0
#define DFLT_VAL_NX90_mtgy_op_p56 0x00000000

#define MSK_NX90_mtgy_op_p56_val         0xffffffff
#define SRT_NX90_mtgy_op_p56_val         0
#define DFLT_VAL_NX90_mtgy_op_p56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p56': */
#define MSK_USED_BITS_NX90_mtgy_op_p56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p57 */
/* => MWMM operand P register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p57  0x000014E4
#define Adr_NX90_mtgy_mtgy_op_p57 0xFF0834E4
#define Adr_NX90_mtgy_op_p57      0xFF0834E4
#define DFLT_VAL_NX90_mtgy_op_p57 0x00000000

#define MSK_NX90_mtgy_op_p57_val         0xffffffff
#define SRT_NX90_mtgy_op_p57_val         0
#define DFLT_VAL_NX90_mtgy_op_p57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p57': */
#define MSK_USED_BITS_NX90_mtgy_op_p57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p58 */
/* => MWMM operand P register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p58  0x000014E8
#define Adr_NX90_mtgy_mtgy_op_p58 0xFF0834E8
#define Adr_NX90_mtgy_op_p58      0xFF0834E8
#define DFLT_VAL_NX90_mtgy_op_p58 0x00000000

#define MSK_NX90_mtgy_op_p58_val         0xffffffff
#define SRT_NX90_mtgy_op_p58_val         0
#define DFLT_VAL_NX90_mtgy_op_p58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p58': */
#define MSK_USED_BITS_NX90_mtgy_op_p58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p59 */
/* => MWMM operand P register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p59  0x000014EC
#define Adr_NX90_mtgy_mtgy_op_p59 0xFF0834EC
#define Adr_NX90_mtgy_op_p59      0xFF0834EC
#define DFLT_VAL_NX90_mtgy_op_p59 0x00000000

#define MSK_NX90_mtgy_op_p59_val         0xffffffff
#define SRT_NX90_mtgy_op_p59_val         0
#define DFLT_VAL_NX90_mtgy_op_p59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p59': */
#define MSK_USED_BITS_NX90_mtgy_op_p59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p60 */
/* => MWMM operand P register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p60  0x000014F0
#define Adr_NX90_mtgy_mtgy_op_p60 0xFF0834F0
#define Adr_NX90_mtgy_op_p60      0xFF0834F0
#define DFLT_VAL_NX90_mtgy_op_p60 0x00000000

#define MSK_NX90_mtgy_op_p60_val         0xffffffff
#define SRT_NX90_mtgy_op_p60_val         0
#define DFLT_VAL_NX90_mtgy_op_p60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p60': */
#define MSK_USED_BITS_NX90_mtgy_op_p60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p61 */
/* => MWMM operand P register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p61  0x000014F4
#define Adr_NX90_mtgy_mtgy_op_p61 0xFF0834F4
#define Adr_NX90_mtgy_op_p61      0xFF0834F4
#define DFLT_VAL_NX90_mtgy_op_p61 0x00000000

#define MSK_NX90_mtgy_op_p61_val         0xffffffff
#define SRT_NX90_mtgy_op_p61_val         0
#define DFLT_VAL_NX90_mtgy_op_p61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p61': */
#define MSK_USED_BITS_NX90_mtgy_op_p61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p62 */
/* => MWMM operand P register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p62  0x000014F8
#define Adr_NX90_mtgy_mtgy_op_p62 0xFF0834F8
#define Adr_NX90_mtgy_op_p62      0xFF0834F8
#define DFLT_VAL_NX90_mtgy_op_p62 0x00000000

#define MSK_NX90_mtgy_op_p62_val         0xffffffff
#define SRT_NX90_mtgy_op_p62_val         0
#define DFLT_VAL_NX90_mtgy_op_p62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p62': */
#define MSK_USED_BITS_NX90_mtgy_op_p62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p63 */
/* => MWMM operand P register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p63  0x000014FC
#define Adr_NX90_mtgy_mtgy_op_p63 0xFF0834FC
#define Adr_NX90_mtgy_op_p63      0xFF0834FC
#define DFLT_VAL_NX90_mtgy_op_p63 0x00000000

#define MSK_NX90_mtgy_op_p63_val         0xffffffff
#define SRT_NX90_mtgy_op_p63_val         0
#define DFLT_VAL_NX90_mtgy_op_p63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p63': */
#define MSK_USED_BITS_NX90_mtgy_op_p63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p64 */
/* => MWMM operand P register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p64  0x00001500
#define Adr_NX90_mtgy_mtgy_op_p64 0xFF083500
#define Adr_NX90_mtgy_op_p64      0xFF083500
#define DFLT_VAL_NX90_mtgy_op_p64 0x00000000

#define MSK_NX90_mtgy_op_p64_val         0xffffffff
#define SRT_NX90_mtgy_op_p64_val         0
#define DFLT_VAL_NX90_mtgy_op_p64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p64': */
#define MSK_USED_BITS_NX90_mtgy_op_p64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p65 */
/* => MWMM operand P register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p65  0x00001504
#define Adr_NX90_mtgy_mtgy_op_p65 0xFF083504
#define Adr_NX90_mtgy_op_p65      0xFF083504
#define DFLT_VAL_NX90_mtgy_op_p65 0x00000000

#define MSK_NX90_mtgy_op_p65_val         0xffffffff
#define SRT_NX90_mtgy_op_p65_val         0
#define DFLT_VAL_NX90_mtgy_op_p65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p65': */
#define MSK_USED_BITS_NX90_mtgy_op_p65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p66 */
/* => MWMM operand P register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p66  0x00001508
#define Adr_NX90_mtgy_mtgy_op_p66 0xFF083508
#define Adr_NX90_mtgy_op_p66      0xFF083508
#define DFLT_VAL_NX90_mtgy_op_p66 0x00000000

#define MSK_NX90_mtgy_op_p66_val         0xffffffff
#define SRT_NX90_mtgy_op_p66_val         0
#define DFLT_VAL_NX90_mtgy_op_p66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p66': */
#define MSK_USED_BITS_NX90_mtgy_op_p66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p67 */
/* => MWMM operand P register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p67  0x0000150C
#define Adr_NX90_mtgy_mtgy_op_p67 0xFF08350C
#define Adr_NX90_mtgy_op_p67      0xFF08350C
#define DFLT_VAL_NX90_mtgy_op_p67 0x00000000

#define MSK_NX90_mtgy_op_p67_val         0xffffffff
#define SRT_NX90_mtgy_op_p67_val         0
#define DFLT_VAL_NX90_mtgy_op_p67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p67': */
#define MSK_USED_BITS_NX90_mtgy_op_p67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p68 */
/* => MWMM operand P register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p68  0x00001510
#define Adr_NX90_mtgy_mtgy_op_p68 0xFF083510
#define Adr_NX90_mtgy_op_p68      0xFF083510
#define DFLT_VAL_NX90_mtgy_op_p68 0x00000000

#define MSK_NX90_mtgy_op_p68_val         0xffffffff
#define SRT_NX90_mtgy_op_p68_val         0
#define DFLT_VAL_NX90_mtgy_op_p68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p68': */
#define MSK_USED_BITS_NX90_mtgy_op_p68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p69 */
/* => MWMM operand P register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p69  0x00001514
#define Adr_NX90_mtgy_mtgy_op_p69 0xFF083514
#define Adr_NX90_mtgy_op_p69      0xFF083514
#define DFLT_VAL_NX90_mtgy_op_p69 0x00000000

#define MSK_NX90_mtgy_op_p69_val         0xffffffff
#define SRT_NX90_mtgy_op_p69_val         0
#define DFLT_VAL_NX90_mtgy_op_p69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p69': */
#define MSK_USED_BITS_NX90_mtgy_op_p69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p70 */
/* => MWMM operand P register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p70  0x00001518
#define Adr_NX90_mtgy_mtgy_op_p70 0xFF083518
#define Adr_NX90_mtgy_op_p70      0xFF083518
#define DFLT_VAL_NX90_mtgy_op_p70 0x00000000

#define MSK_NX90_mtgy_op_p70_val         0xffffffff
#define SRT_NX90_mtgy_op_p70_val         0
#define DFLT_VAL_NX90_mtgy_op_p70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p70': */
#define MSK_USED_BITS_NX90_mtgy_op_p70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p71 */
/* => MWMM operand P register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p71  0x0000151C
#define Adr_NX90_mtgy_mtgy_op_p71 0xFF08351C
#define Adr_NX90_mtgy_op_p71      0xFF08351C
#define DFLT_VAL_NX90_mtgy_op_p71 0x00000000

#define MSK_NX90_mtgy_op_p71_val         0xffffffff
#define SRT_NX90_mtgy_op_p71_val         0
#define DFLT_VAL_NX90_mtgy_op_p71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p71': */
#define MSK_USED_BITS_NX90_mtgy_op_p71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p72 */
/* => MWMM operand P register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p72  0x00001520
#define Adr_NX90_mtgy_mtgy_op_p72 0xFF083520
#define Adr_NX90_mtgy_op_p72      0xFF083520
#define DFLT_VAL_NX90_mtgy_op_p72 0x00000000

#define MSK_NX90_mtgy_op_p72_val         0xffffffff
#define SRT_NX90_mtgy_op_p72_val         0
#define DFLT_VAL_NX90_mtgy_op_p72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p72': */
#define MSK_USED_BITS_NX90_mtgy_op_p72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p73 */
/* => MWMM operand P register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p73  0x00001524
#define Adr_NX90_mtgy_mtgy_op_p73 0xFF083524
#define Adr_NX90_mtgy_op_p73      0xFF083524
#define DFLT_VAL_NX90_mtgy_op_p73 0x00000000

#define MSK_NX90_mtgy_op_p73_val         0xffffffff
#define SRT_NX90_mtgy_op_p73_val         0
#define DFLT_VAL_NX90_mtgy_op_p73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p73': */
#define MSK_USED_BITS_NX90_mtgy_op_p73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p74 */
/* => MWMM operand P register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p74  0x00001528
#define Adr_NX90_mtgy_mtgy_op_p74 0xFF083528
#define Adr_NX90_mtgy_op_p74      0xFF083528
#define DFLT_VAL_NX90_mtgy_op_p74 0x00000000

#define MSK_NX90_mtgy_op_p74_val         0xffffffff
#define SRT_NX90_mtgy_op_p74_val         0
#define DFLT_VAL_NX90_mtgy_op_p74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p74': */
#define MSK_USED_BITS_NX90_mtgy_op_p74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p75 */
/* => MWMM operand P register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p75  0x0000152C
#define Adr_NX90_mtgy_mtgy_op_p75 0xFF08352C
#define Adr_NX90_mtgy_op_p75      0xFF08352C
#define DFLT_VAL_NX90_mtgy_op_p75 0x00000000

#define MSK_NX90_mtgy_op_p75_val         0xffffffff
#define SRT_NX90_mtgy_op_p75_val         0
#define DFLT_VAL_NX90_mtgy_op_p75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p75': */
#define MSK_USED_BITS_NX90_mtgy_op_p75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p76 */
/* => MWMM operand P register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p76  0x00001530
#define Adr_NX90_mtgy_mtgy_op_p76 0xFF083530
#define Adr_NX90_mtgy_op_p76      0xFF083530
#define DFLT_VAL_NX90_mtgy_op_p76 0x00000000

#define MSK_NX90_mtgy_op_p76_val         0xffffffff
#define SRT_NX90_mtgy_op_p76_val         0
#define DFLT_VAL_NX90_mtgy_op_p76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p76': */
#define MSK_USED_BITS_NX90_mtgy_op_p76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p77 */
/* => MWMM operand P register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p77  0x00001534
#define Adr_NX90_mtgy_mtgy_op_p77 0xFF083534
#define Adr_NX90_mtgy_op_p77      0xFF083534
#define DFLT_VAL_NX90_mtgy_op_p77 0x00000000

#define MSK_NX90_mtgy_op_p77_val         0xffffffff
#define SRT_NX90_mtgy_op_p77_val         0
#define DFLT_VAL_NX90_mtgy_op_p77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p77': */
#define MSK_USED_BITS_NX90_mtgy_op_p77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p78 */
/* => MWMM operand P register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p78  0x00001538
#define Adr_NX90_mtgy_mtgy_op_p78 0xFF083538
#define Adr_NX90_mtgy_op_p78      0xFF083538
#define DFLT_VAL_NX90_mtgy_op_p78 0x00000000

#define MSK_NX90_mtgy_op_p78_val         0xffffffff
#define SRT_NX90_mtgy_op_p78_val         0
#define DFLT_VAL_NX90_mtgy_op_p78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p78': */
#define MSK_USED_BITS_NX90_mtgy_op_p78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p79 */
/* => MWMM operand P register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p79  0x0000153C
#define Adr_NX90_mtgy_mtgy_op_p79 0xFF08353C
#define Adr_NX90_mtgy_op_p79      0xFF08353C
#define DFLT_VAL_NX90_mtgy_op_p79 0x00000000

#define MSK_NX90_mtgy_op_p79_val         0xffffffff
#define SRT_NX90_mtgy_op_p79_val         0
#define DFLT_VAL_NX90_mtgy_op_p79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p79': */
#define MSK_USED_BITS_NX90_mtgy_op_p79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p80 */
/* => MWMM operand P register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p80  0x00001540
#define Adr_NX90_mtgy_mtgy_op_p80 0xFF083540
#define Adr_NX90_mtgy_op_p80      0xFF083540
#define DFLT_VAL_NX90_mtgy_op_p80 0x00000000

#define MSK_NX90_mtgy_op_p80_val         0xffffffff
#define SRT_NX90_mtgy_op_p80_val         0
#define DFLT_VAL_NX90_mtgy_op_p80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p80': */
#define MSK_USED_BITS_NX90_mtgy_op_p80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p81 */
/* => MWMM operand P register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p81  0x00001544
#define Adr_NX90_mtgy_mtgy_op_p81 0xFF083544
#define Adr_NX90_mtgy_op_p81      0xFF083544
#define DFLT_VAL_NX90_mtgy_op_p81 0x00000000

#define MSK_NX90_mtgy_op_p81_val         0xffffffff
#define SRT_NX90_mtgy_op_p81_val         0
#define DFLT_VAL_NX90_mtgy_op_p81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p81': */
#define MSK_USED_BITS_NX90_mtgy_op_p81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p82 */
/* => MWMM operand P register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p82  0x00001548
#define Adr_NX90_mtgy_mtgy_op_p82 0xFF083548
#define Adr_NX90_mtgy_op_p82      0xFF083548
#define DFLT_VAL_NX90_mtgy_op_p82 0x00000000

#define MSK_NX90_mtgy_op_p82_val         0xffffffff
#define SRT_NX90_mtgy_op_p82_val         0
#define DFLT_VAL_NX90_mtgy_op_p82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p82': */
#define MSK_USED_BITS_NX90_mtgy_op_p82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p83 */
/* => MWMM operand P register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p83  0x0000154C
#define Adr_NX90_mtgy_mtgy_op_p83 0xFF08354C
#define Adr_NX90_mtgy_op_p83      0xFF08354C
#define DFLT_VAL_NX90_mtgy_op_p83 0x00000000

#define MSK_NX90_mtgy_op_p83_val         0xffffffff
#define SRT_NX90_mtgy_op_p83_val         0
#define DFLT_VAL_NX90_mtgy_op_p83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p83': */
#define MSK_USED_BITS_NX90_mtgy_op_p83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p84 */
/* => MWMM operand P register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p84  0x00001550
#define Adr_NX90_mtgy_mtgy_op_p84 0xFF083550
#define Adr_NX90_mtgy_op_p84      0xFF083550
#define DFLT_VAL_NX90_mtgy_op_p84 0x00000000

#define MSK_NX90_mtgy_op_p84_val         0xffffffff
#define SRT_NX90_mtgy_op_p84_val         0
#define DFLT_VAL_NX90_mtgy_op_p84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p84': */
#define MSK_USED_BITS_NX90_mtgy_op_p84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p85 */
/* => MWMM operand P register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p85  0x00001554
#define Adr_NX90_mtgy_mtgy_op_p85 0xFF083554
#define Adr_NX90_mtgy_op_p85      0xFF083554
#define DFLT_VAL_NX90_mtgy_op_p85 0x00000000

#define MSK_NX90_mtgy_op_p85_val         0xffffffff
#define SRT_NX90_mtgy_op_p85_val         0
#define DFLT_VAL_NX90_mtgy_op_p85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p85': */
#define MSK_USED_BITS_NX90_mtgy_op_p85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p86 */
/* => MWMM operand P register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p86  0x00001558
#define Adr_NX90_mtgy_mtgy_op_p86 0xFF083558
#define Adr_NX90_mtgy_op_p86      0xFF083558
#define DFLT_VAL_NX90_mtgy_op_p86 0x00000000

#define MSK_NX90_mtgy_op_p86_val         0xffffffff
#define SRT_NX90_mtgy_op_p86_val         0
#define DFLT_VAL_NX90_mtgy_op_p86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p86': */
#define MSK_USED_BITS_NX90_mtgy_op_p86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p87 */
/* => MWMM operand P register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p87  0x0000155C
#define Adr_NX90_mtgy_mtgy_op_p87 0xFF08355C
#define Adr_NX90_mtgy_op_p87      0xFF08355C
#define DFLT_VAL_NX90_mtgy_op_p87 0x00000000

#define MSK_NX90_mtgy_op_p87_val         0xffffffff
#define SRT_NX90_mtgy_op_p87_val         0
#define DFLT_VAL_NX90_mtgy_op_p87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p87': */
#define MSK_USED_BITS_NX90_mtgy_op_p87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p88 */
/* => MWMM operand P register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p88  0x00001560
#define Adr_NX90_mtgy_mtgy_op_p88 0xFF083560
#define Adr_NX90_mtgy_op_p88      0xFF083560
#define DFLT_VAL_NX90_mtgy_op_p88 0x00000000

#define MSK_NX90_mtgy_op_p88_val         0xffffffff
#define SRT_NX90_mtgy_op_p88_val         0
#define DFLT_VAL_NX90_mtgy_op_p88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p88': */
#define MSK_USED_BITS_NX90_mtgy_op_p88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p89 */
/* => MWMM operand P register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p89  0x00001564
#define Adr_NX90_mtgy_mtgy_op_p89 0xFF083564
#define Adr_NX90_mtgy_op_p89      0xFF083564
#define DFLT_VAL_NX90_mtgy_op_p89 0x00000000

#define MSK_NX90_mtgy_op_p89_val         0xffffffff
#define SRT_NX90_mtgy_op_p89_val         0
#define DFLT_VAL_NX90_mtgy_op_p89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p89': */
#define MSK_USED_BITS_NX90_mtgy_op_p89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p90 */
/* => MWMM operand P register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p90  0x00001568
#define Adr_NX90_mtgy_mtgy_op_p90 0xFF083568
#define Adr_NX90_mtgy_op_p90      0xFF083568
#define DFLT_VAL_NX90_mtgy_op_p90 0x00000000

#define MSK_NX90_mtgy_op_p90_val         0xffffffff
#define SRT_NX90_mtgy_op_p90_val         0
#define DFLT_VAL_NX90_mtgy_op_p90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p90': */
#define MSK_USED_BITS_NX90_mtgy_op_p90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p91 */
/* => MWMM operand P register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p91  0x0000156C
#define Adr_NX90_mtgy_mtgy_op_p91 0xFF08356C
#define Adr_NX90_mtgy_op_p91      0xFF08356C
#define DFLT_VAL_NX90_mtgy_op_p91 0x00000000

#define MSK_NX90_mtgy_op_p91_val         0xffffffff
#define SRT_NX90_mtgy_op_p91_val         0
#define DFLT_VAL_NX90_mtgy_op_p91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p91': */
#define MSK_USED_BITS_NX90_mtgy_op_p91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p92 */
/* => MWMM operand P register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p92  0x00001570
#define Adr_NX90_mtgy_mtgy_op_p92 0xFF083570
#define Adr_NX90_mtgy_op_p92      0xFF083570
#define DFLT_VAL_NX90_mtgy_op_p92 0x00000000

#define MSK_NX90_mtgy_op_p92_val         0xffffffff
#define SRT_NX90_mtgy_op_p92_val         0
#define DFLT_VAL_NX90_mtgy_op_p92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p92': */
#define MSK_USED_BITS_NX90_mtgy_op_p92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p93 */
/* => MWMM operand P register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p93  0x00001574
#define Adr_NX90_mtgy_mtgy_op_p93 0xFF083574
#define Adr_NX90_mtgy_op_p93      0xFF083574
#define DFLT_VAL_NX90_mtgy_op_p93 0x00000000

#define MSK_NX90_mtgy_op_p93_val         0xffffffff
#define SRT_NX90_mtgy_op_p93_val         0
#define DFLT_VAL_NX90_mtgy_op_p93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p93': */
#define MSK_USED_BITS_NX90_mtgy_op_p93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p94 */
/* => MWMM operand P register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p94  0x00001578
#define Adr_NX90_mtgy_mtgy_op_p94 0xFF083578
#define Adr_NX90_mtgy_op_p94      0xFF083578
#define DFLT_VAL_NX90_mtgy_op_p94 0x00000000

#define MSK_NX90_mtgy_op_p94_val         0xffffffff
#define SRT_NX90_mtgy_op_p94_val         0
#define DFLT_VAL_NX90_mtgy_op_p94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p94': */
#define MSK_USED_BITS_NX90_mtgy_op_p94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p95 */
/* => MWMM operand P register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p95  0x0000157C
#define Adr_NX90_mtgy_mtgy_op_p95 0xFF08357C
#define Adr_NX90_mtgy_op_p95      0xFF08357C
#define DFLT_VAL_NX90_mtgy_op_p95 0x00000000

#define MSK_NX90_mtgy_op_p95_val         0xffffffff
#define SRT_NX90_mtgy_op_p95_val         0
#define DFLT_VAL_NX90_mtgy_op_p95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p95': */
#define MSK_USED_BITS_NX90_mtgy_op_p95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p96 */
/* => MWMM operand P register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p96  0x00001580
#define Adr_NX90_mtgy_mtgy_op_p96 0xFF083580
#define Adr_NX90_mtgy_op_p96      0xFF083580
#define DFLT_VAL_NX90_mtgy_op_p96 0x00000000

#define MSK_NX90_mtgy_op_p96_val         0xffffffff
#define SRT_NX90_mtgy_op_p96_val         0
#define DFLT_VAL_NX90_mtgy_op_p96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p96': */
#define MSK_USED_BITS_NX90_mtgy_op_p96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p97 */
/* => MWMM operand P register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p97  0x00001584
#define Adr_NX90_mtgy_mtgy_op_p97 0xFF083584
#define Adr_NX90_mtgy_op_p97      0xFF083584
#define DFLT_VAL_NX90_mtgy_op_p97 0x00000000

#define MSK_NX90_mtgy_op_p97_val         0xffffffff
#define SRT_NX90_mtgy_op_p97_val         0
#define DFLT_VAL_NX90_mtgy_op_p97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p97': */
#define MSK_USED_BITS_NX90_mtgy_op_p97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p98 */
/* => MWMM operand P register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p98  0x00001588
#define Adr_NX90_mtgy_mtgy_op_p98 0xFF083588
#define Adr_NX90_mtgy_op_p98      0xFF083588
#define DFLT_VAL_NX90_mtgy_op_p98 0x00000000

#define MSK_NX90_mtgy_op_p98_val         0xffffffff
#define SRT_NX90_mtgy_op_p98_val         0
#define DFLT_VAL_NX90_mtgy_op_p98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p98': */
#define MSK_USED_BITS_NX90_mtgy_op_p98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p99 */
/* => MWMM operand P register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p99  0x0000158C
#define Adr_NX90_mtgy_mtgy_op_p99 0xFF08358C
#define Adr_NX90_mtgy_op_p99      0xFF08358C
#define DFLT_VAL_NX90_mtgy_op_p99 0x00000000

#define MSK_NX90_mtgy_op_p99_val         0xffffffff
#define SRT_NX90_mtgy_op_p99_val         0
#define DFLT_VAL_NX90_mtgy_op_p99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p99': */
#define MSK_USED_BITS_NX90_mtgy_op_p99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p100 */
/* => MWMM operand P register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p100  0x00001590
#define Adr_NX90_mtgy_mtgy_op_p100 0xFF083590
#define Adr_NX90_mtgy_op_p100      0xFF083590
#define DFLT_VAL_NX90_mtgy_op_p100 0x00000000

#define MSK_NX90_mtgy_op_p100_val         0xffffffff
#define SRT_NX90_mtgy_op_p100_val         0
#define DFLT_VAL_NX90_mtgy_op_p100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p100': */
#define MSK_USED_BITS_NX90_mtgy_op_p100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p101 */
/* => MWMM operand P register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p101  0x00001594
#define Adr_NX90_mtgy_mtgy_op_p101 0xFF083594
#define Adr_NX90_mtgy_op_p101      0xFF083594
#define DFLT_VAL_NX90_mtgy_op_p101 0x00000000

#define MSK_NX90_mtgy_op_p101_val         0xffffffff
#define SRT_NX90_mtgy_op_p101_val         0
#define DFLT_VAL_NX90_mtgy_op_p101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p101': */
#define MSK_USED_BITS_NX90_mtgy_op_p101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p102 */
/* => MWMM operand P register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p102  0x00001598
#define Adr_NX90_mtgy_mtgy_op_p102 0xFF083598
#define Adr_NX90_mtgy_op_p102      0xFF083598
#define DFLT_VAL_NX90_mtgy_op_p102 0x00000000

#define MSK_NX90_mtgy_op_p102_val         0xffffffff
#define SRT_NX90_mtgy_op_p102_val         0
#define DFLT_VAL_NX90_mtgy_op_p102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p102': */
#define MSK_USED_BITS_NX90_mtgy_op_p102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p103 */
/* => MWMM operand P register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p103  0x0000159C
#define Adr_NX90_mtgy_mtgy_op_p103 0xFF08359C
#define Adr_NX90_mtgy_op_p103      0xFF08359C
#define DFLT_VAL_NX90_mtgy_op_p103 0x00000000

#define MSK_NX90_mtgy_op_p103_val         0xffffffff
#define SRT_NX90_mtgy_op_p103_val         0
#define DFLT_VAL_NX90_mtgy_op_p103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p103': */
#define MSK_USED_BITS_NX90_mtgy_op_p103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p104 */
/* => MWMM operand P register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p104  0x000015A0
#define Adr_NX90_mtgy_mtgy_op_p104 0xFF0835A0
#define Adr_NX90_mtgy_op_p104      0xFF0835A0
#define DFLT_VAL_NX90_mtgy_op_p104 0x00000000

#define MSK_NX90_mtgy_op_p104_val         0xffffffff
#define SRT_NX90_mtgy_op_p104_val         0
#define DFLT_VAL_NX90_mtgy_op_p104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p104': */
#define MSK_USED_BITS_NX90_mtgy_op_p104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p105 */
/* => MWMM operand P register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p105  0x000015A4
#define Adr_NX90_mtgy_mtgy_op_p105 0xFF0835A4
#define Adr_NX90_mtgy_op_p105      0xFF0835A4
#define DFLT_VAL_NX90_mtgy_op_p105 0x00000000

#define MSK_NX90_mtgy_op_p105_val         0xffffffff
#define SRT_NX90_mtgy_op_p105_val         0
#define DFLT_VAL_NX90_mtgy_op_p105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p105': */
#define MSK_USED_BITS_NX90_mtgy_op_p105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p106 */
/* => MWMM operand P register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p106  0x000015A8
#define Adr_NX90_mtgy_mtgy_op_p106 0xFF0835A8
#define Adr_NX90_mtgy_op_p106      0xFF0835A8
#define DFLT_VAL_NX90_mtgy_op_p106 0x00000000

#define MSK_NX90_mtgy_op_p106_val         0xffffffff
#define SRT_NX90_mtgy_op_p106_val         0
#define DFLT_VAL_NX90_mtgy_op_p106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p106': */
#define MSK_USED_BITS_NX90_mtgy_op_p106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p107 */
/* => MWMM operand P register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p107  0x000015AC
#define Adr_NX90_mtgy_mtgy_op_p107 0xFF0835AC
#define Adr_NX90_mtgy_op_p107      0xFF0835AC
#define DFLT_VAL_NX90_mtgy_op_p107 0x00000000

#define MSK_NX90_mtgy_op_p107_val         0xffffffff
#define SRT_NX90_mtgy_op_p107_val         0
#define DFLT_VAL_NX90_mtgy_op_p107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p107': */
#define MSK_USED_BITS_NX90_mtgy_op_p107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p108 */
/* => MWMM operand P register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p108  0x000015B0
#define Adr_NX90_mtgy_mtgy_op_p108 0xFF0835B0
#define Adr_NX90_mtgy_op_p108      0xFF0835B0
#define DFLT_VAL_NX90_mtgy_op_p108 0x00000000

#define MSK_NX90_mtgy_op_p108_val         0xffffffff
#define SRT_NX90_mtgy_op_p108_val         0
#define DFLT_VAL_NX90_mtgy_op_p108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p108': */
#define MSK_USED_BITS_NX90_mtgy_op_p108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p109 */
/* => MWMM operand P register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p109  0x000015B4
#define Adr_NX90_mtgy_mtgy_op_p109 0xFF0835B4
#define Adr_NX90_mtgy_op_p109      0xFF0835B4
#define DFLT_VAL_NX90_mtgy_op_p109 0x00000000

#define MSK_NX90_mtgy_op_p109_val         0xffffffff
#define SRT_NX90_mtgy_op_p109_val         0
#define DFLT_VAL_NX90_mtgy_op_p109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p109': */
#define MSK_USED_BITS_NX90_mtgy_op_p109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p110 */
/* => MWMM operand P register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p110  0x000015B8
#define Adr_NX90_mtgy_mtgy_op_p110 0xFF0835B8
#define Adr_NX90_mtgy_op_p110      0xFF0835B8
#define DFLT_VAL_NX90_mtgy_op_p110 0x00000000

#define MSK_NX90_mtgy_op_p110_val         0xffffffff
#define SRT_NX90_mtgy_op_p110_val         0
#define DFLT_VAL_NX90_mtgy_op_p110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p110': */
#define MSK_USED_BITS_NX90_mtgy_op_p110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p111 */
/* => MWMM operand P register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p111  0x000015BC
#define Adr_NX90_mtgy_mtgy_op_p111 0xFF0835BC
#define Adr_NX90_mtgy_op_p111      0xFF0835BC
#define DFLT_VAL_NX90_mtgy_op_p111 0x00000000

#define MSK_NX90_mtgy_op_p111_val         0xffffffff
#define SRT_NX90_mtgy_op_p111_val         0
#define DFLT_VAL_NX90_mtgy_op_p111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p111': */
#define MSK_USED_BITS_NX90_mtgy_op_p111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p112 */
/* => MWMM operand P register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p112  0x000015C0
#define Adr_NX90_mtgy_mtgy_op_p112 0xFF0835C0
#define Adr_NX90_mtgy_op_p112      0xFF0835C0
#define DFLT_VAL_NX90_mtgy_op_p112 0x00000000

#define MSK_NX90_mtgy_op_p112_val         0xffffffff
#define SRT_NX90_mtgy_op_p112_val         0
#define DFLT_VAL_NX90_mtgy_op_p112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p112': */
#define MSK_USED_BITS_NX90_mtgy_op_p112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p113 */
/* => MWMM operand P register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p113  0x000015C4
#define Adr_NX90_mtgy_mtgy_op_p113 0xFF0835C4
#define Adr_NX90_mtgy_op_p113      0xFF0835C4
#define DFLT_VAL_NX90_mtgy_op_p113 0x00000000

#define MSK_NX90_mtgy_op_p113_val         0xffffffff
#define SRT_NX90_mtgy_op_p113_val         0
#define DFLT_VAL_NX90_mtgy_op_p113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p113': */
#define MSK_USED_BITS_NX90_mtgy_op_p113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p114 */
/* => MWMM operand P register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p114  0x000015C8
#define Adr_NX90_mtgy_mtgy_op_p114 0xFF0835C8
#define Adr_NX90_mtgy_op_p114      0xFF0835C8
#define DFLT_VAL_NX90_mtgy_op_p114 0x00000000

#define MSK_NX90_mtgy_op_p114_val         0xffffffff
#define SRT_NX90_mtgy_op_p114_val         0
#define DFLT_VAL_NX90_mtgy_op_p114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p114': */
#define MSK_USED_BITS_NX90_mtgy_op_p114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p115 */
/* => MWMM operand P register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p115  0x000015CC
#define Adr_NX90_mtgy_mtgy_op_p115 0xFF0835CC
#define Adr_NX90_mtgy_op_p115      0xFF0835CC
#define DFLT_VAL_NX90_mtgy_op_p115 0x00000000

#define MSK_NX90_mtgy_op_p115_val         0xffffffff
#define SRT_NX90_mtgy_op_p115_val         0
#define DFLT_VAL_NX90_mtgy_op_p115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p115': */
#define MSK_USED_BITS_NX90_mtgy_op_p115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p116 */
/* => MWMM operand P register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p116  0x000015D0
#define Adr_NX90_mtgy_mtgy_op_p116 0xFF0835D0
#define Adr_NX90_mtgy_op_p116      0xFF0835D0
#define DFLT_VAL_NX90_mtgy_op_p116 0x00000000

#define MSK_NX90_mtgy_op_p116_val         0xffffffff
#define SRT_NX90_mtgy_op_p116_val         0
#define DFLT_VAL_NX90_mtgy_op_p116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p116': */
#define MSK_USED_BITS_NX90_mtgy_op_p116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p117 */
/* => MWMM operand P register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p117  0x000015D4
#define Adr_NX90_mtgy_mtgy_op_p117 0xFF0835D4
#define Adr_NX90_mtgy_op_p117      0xFF0835D4
#define DFLT_VAL_NX90_mtgy_op_p117 0x00000000

#define MSK_NX90_mtgy_op_p117_val         0xffffffff
#define SRT_NX90_mtgy_op_p117_val         0
#define DFLT_VAL_NX90_mtgy_op_p117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p117': */
#define MSK_USED_BITS_NX90_mtgy_op_p117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p118 */
/* => MWMM operand P register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p118  0x000015D8
#define Adr_NX90_mtgy_mtgy_op_p118 0xFF0835D8
#define Adr_NX90_mtgy_op_p118      0xFF0835D8
#define DFLT_VAL_NX90_mtgy_op_p118 0x00000000

#define MSK_NX90_mtgy_op_p118_val         0xffffffff
#define SRT_NX90_mtgy_op_p118_val         0
#define DFLT_VAL_NX90_mtgy_op_p118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p118': */
#define MSK_USED_BITS_NX90_mtgy_op_p118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p119 */
/* => MWMM operand P register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p119  0x000015DC
#define Adr_NX90_mtgy_mtgy_op_p119 0xFF0835DC
#define Adr_NX90_mtgy_op_p119      0xFF0835DC
#define DFLT_VAL_NX90_mtgy_op_p119 0x00000000

#define MSK_NX90_mtgy_op_p119_val         0xffffffff
#define SRT_NX90_mtgy_op_p119_val         0
#define DFLT_VAL_NX90_mtgy_op_p119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p119': */
#define MSK_USED_BITS_NX90_mtgy_op_p119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p120 */
/* => MWMM operand P register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p120  0x000015E0
#define Adr_NX90_mtgy_mtgy_op_p120 0xFF0835E0
#define Adr_NX90_mtgy_op_p120      0xFF0835E0
#define DFLT_VAL_NX90_mtgy_op_p120 0x00000000

#define MSK_NX90_mtgy_op_p120_val         0xffffffff
#define SRT_NX90_mtgy_op_p120_val         0
#define DFLT_VAL_NX90_mtgy_op_p120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p120': */
#define MSK_USED_BITS_NX90_mtgy_op_p120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p121 */
/* => MWMM operand P register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p121  0x000015E4
#define Adr_NX90_mtgy_mtgy_op_p121 0xFF0835E4
#define Adr_NX90_mtgy_op_p121      0xFF0835E4
#define DFLT_VAL_NX90_mtgy_op_p121 0x00000000

#define MSK_NX90_mtgy_op_p121_val         0xffffffff
#define SRT_NX90_mtgy_op_p121_val         0
#define DFLT_VAL_NX90_mtgy_op_p121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p121': */
#define MSK_USED_BITS_NX90_mtgy_op_p121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p122 */
/* => MWMM operand P register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p122  0x000015E8
#define Adr_NX90_mtgy_mtgy_op_p122 0xFF0835E8
#define Adr_NX90_mtgy_op_p122      0xFF0835E8
#define DFLT_VAL_NX90_mtgy_op_p122 0x00000000

#define MSK_NX90_mtgy_op_p122_val         0xffffffff
#define SRT_NX90_mtgy_op_p122_val         0
#define DFLT_VAL_NX90_mtgy_op_p122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p122': */
#define MSK_USED_BITS_NX90_mtgy_op_p122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p123 */
/* => MWMM operand P register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p123  0x000015EC
#define Adr_NX90_mtgy_mtgy_op_p123 0xFF0835EC
#define Adr_NX90_mtgy_op_p123      0xFF0835EC
#define DFLT_VAL_NX90_mtgy_op_p123 0x00000000

#define MSK_NX90_mtgy_op_p123_val         0xffffffff
#define SRT_NX90_mtgy_op_p123_val         0
#define DFLT_VAL_NX90_mtgy_op_p123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p123': */
#define MSK_USED_BITS_NX90_mtgy_op_p123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p124 */
/* => MWMM operand P register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p124  0x000015F0
#define Adr_NX90_mtgy_mtgy_op_p124 0xFF0835F0
#define Adr_NX90_mtgy_op_p124      0xFF0835F0
#define DFLT_VAL_NX90_mtgy_op_p124 0x00000000

#define MSK_NX90_mtgy_op_p124_val         0xffffffff
#define SRT_NX90_mtgy_op_p124_val         0
#define DFLT_VAL_NX90_mtgy_op_p124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p124': */
#define MSK_USED_BITS_NX90_mtgy_op_p124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p125 */
/* => MWMM operand P register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p125  0x000015F4
#define Adr_NX90_mtgy_mtgy_op_p125 0xFF0835F4
#define Adr_NX90_mtgy_op_p125      0xFF0835F4
#define DFLT_VAL_NX90_mtgy_op_p125 0x00000000

#define MSK_NX90_mtgy_op_p125_val         0xffffffff
#define SRT_NX90_mtgy_op_p125_val         0
#define DFLT_VAL_NX90_mtgy_op_p125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p125': */
#define MSK_USED_BITS_NX90_mtgy_op_p125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p126 */
/* => MWMM operand P register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p126  0x000015F8
#define Adr_NX90_mtgy_mtgy_op_p126 0xFF0835F8
#define Adr_NX90_mtgy_op_p126      0xFF0835F8
#define DFLT_VAL_NX90_mtgy_op_p126 0x00000000

#define MSK_NX90_mtgy_op_p126_val         0xffffffff
#define SRT_NX90_mtgy_op_p126_val         0
#define DFLT_VAL_NX90_mtgy_op_p126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p126': */
#define MSK_USED_BITS_NX90_mtgy_op_p126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_p127 */
/* => MWMM operand P register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_p127  0x000015FC
#define Adr_NX90_mtgy_mtgy_op_p127 0xFF0835FC
#define Adr_NX90_mtgy_op_p127      0xFF0835FC
#define DFLT_VAL_NX90_mtgy_op_p127 0x00000000

#define MSK_NX90_mtgy_op_p127_val         0xffffffff
#define SRT_NX90_mtgy_op_p127_val         0
#define DFLT_VAL_NX90_mtgy_op_p127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_p127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_p127': */
#define MSK_USED_BITS_NX90_mtgy_op_p127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b0 */
/* => MWMM operand B register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b0  0x00001600
#define Adr_NX90_mtgy_mtgy_op_b0 0xFF083600
#define Adr_NX90_mtgy_op_b0      0xFF083600
#define DFLT_VAL_NX90_mtgy_op_b0 0x00000000

#define MSK_NX90_mtgy_op_b0_val         0xffffffff
#define SRT_NX90_mtgy_op_b0_val         0
#define DFLT_VAL_NX90_mtgy_op_b0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b0': */
#define MSK_USED_BITS_NX90_mtgy_op_b0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b1 */
/* => MWMM operand B register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b1  0x00001604
#define Adr_NX90_mtgy_mtgy_op_b1 0xFF083604
#define Adr_NX90_mtgy_op_b1      0xFF083604
#define DFLT_VAL_NX90_mtgy_op_b1 0x00000000

#define MSK_NX90_mtgy_op_b1_val         0xffffffff
#define SRT_NX90_mtgy_op_b1_val         0
#define DFLT_VAL_NX90_mtgy_op_b1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b1': */
#define MSK_USED_BITS_NX90_mtgy_op_b1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b2 */
/* => MWMM operand B register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b2  0x00001608
#define Adr_NX90_mtgy_mtgy_op_b2 0xFF083608
#define Adr_NX90_mtgy_op_b2      0xFF083608
#define DFLT_VAL_NX90_mtgy_op_b2 0x00000000

#define MSK_NX90_mtgy_op_b2_val         0xffffffff
#define SRT_NX90_mtgy_op_b2_val         0
#define DFLT_VAL_NX90_mtgy_op_b2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b2': */
#define MSK_USED_BITS_NX90_mtgy_op_b2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b3 */
/* => MWMM operand B register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b3  0x0000160C
#define Adr_NX90_mtgy_mtgy_op_b3 0xFF08360C
#define Adr_NX90_mtgy_op_b3      0xFF08360C
#define DFLT_VAL_NX90_mtgy_op_b3 0x00000000

#define MSK_NX90_mtgy_op_b3_val         0xffffffff
#define SRT_NX90_mtgy_op_b3_val         0
#define DFLT_VAL_NX90_mtgy_op_b3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b3': */
#define MSK_USED_BITS_NX90_mtgy_op_b3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b4 */
/* => MWMM operand B register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b4  0x00001610
#define Adr_NX90_mtgy_mtgy_op_b4 0xFF083610
#define Adr_NX90_mtgy_op_b4      0xFF083610
#define DFLT_VAL_NX90_mtgy_op_b4 0x00000000

#define MSK_NX90_mtgy_op_b4_val         0xffffffff
#define SRT_NX90_mtgy_op_b4_val         0
#define DFLT_VAL_NX90_mtgy_op_b4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b4': */
#define MSK_USED_BITS_NX90_mtgy_op_b4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b5 */
/* => MWMM operand B register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b5  0x00001614
#define Adr_NX90_mtgy_mtgy_op_b5 0xFF083614
#define Adr_NX90_mtgy_op_b5      0xFF083614
#define DFLT_VAL_NX90_mtgy_op_b5 0x00000000

#define MSK_NX90_mtgy_op_b5_val         0xffffffff
#define SRT_NX90_mtgy_op_b5_val         0
#define DFLT_VAL_NX90_mtgy_op_b5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b5': */
#define MSK_USED_BITS_NX90_mtgy_op_b5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b6 */
/* => MWMM operand B register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b6  0x00001618
#define Adr_NX90_mtgy_mtgy_op_b6 0xFF083618
#define Adr_NX90_mtgy_op_b6      0xFF083618
#define DFLT_VAL_NX90_mtgy_op_b6 0x00000000

#define MSK_NX90_mtgy_op_b6_val         0xffffffff
#define SRT_NX90_mtgy_op_b6_val         0
#define DFLT_VAL_NX90_mtgy_op_b6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b6': */
#define MSK_USED_BITS_NX90_mtgy_op_b6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b7 */
/* => MWMM operand B register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b7  0x0000161C
#define Adr_NX90_mtgy_mtgy_op_b7 0xFF08361C
#define Adr_NX90_mtgy_op_b7      0xFF08361C
#define DFLT_VAL_NX90_mtgy_op_b7 0x00000000

#define MSK_NX90_mtgy_op_b7_val         0xffffffff
#define SRT_NX90_mtgy_op_b7_val         0
#define DFLT_VAL_NX90_mtgy_op_b7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b7': */
#define MSK_USED_BITS_NX90_mtgy_op_b7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b8 */
/* => MWMM operand B register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b8  0x00001620
#define Adr_NX90_mtgy_mtgy_op_b8 0xFF083620
#define Adr_NX90_mtgy_op_b8      0xFF083620
#define DFLT_VAL_NX90_mtgy_op_b8 0x00000000

#define MSK_NX90_mtgy_op_b8_val         0xffffffff
#define SRT_NX90_mtgy_op_b8_val         0
#define DFLT_VAL_NX90_mtgy_op_b8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b8': */
#define MSK_USED_BITS_NX90_mtgy_op_b8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b9 */
/* => MWMM operand B register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b9  0x00001624
#define Adr_NX90_mtgy_mtgy_op_b9 0xFF083624
#define Adr_NX90_mtgy_op_b9      0xFF083624
#define DFLT_VAL_NX90_mtgy_op_b9 0x00000000

#define MSK_NX90_mtgy_op_b9_val         0xffffffff
#define SRT_NX90_mtgy_op_b9_val         0
#define DFLT_VAL_NX90_mtgy_op_b9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b9': */
#define MSK_USED_BITS_NX90_mtgy_op_b9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b10 */
/* => MWMM operand B register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b10  0x00001628
#define Adr_NX90_mtgy_mtgy_op_b10 0xFF083628
#define Adr_NX90_mtgy_op_b10      0xFF083628
#define DFLT_VAL_NX90_mtgy_op_b10 0x00000000

#define MSK_NX90_mtgy_op_b10_val         0xffffffff
#define SRT_NX90_mtgy_op_b10_val         0
#define DFLT_VAL_NX90_mtgy_op_b10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b10': */
#define MSK_USED_BITS_NX90_mtgy_op_b10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b11 */
/* => MWMM operand B register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b11  0x0000162C
#define Adr_NX90_mtgy_mtgy_op_b11 0xFF08362C
#define Adr_NX90_mtgy_op_b11      0xFF08362C
#define DFLT_VAL_NX90_mtgy_op_b11 0x00000000

#define MSK_NX90_mtgy_op_b11_val         0xffffffff
#define SRT_NX90_mtgy_op_b11_val         0
#define DFLT_VAL_NX90_mtgy_op_b11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b11': */
#define MSK_USED_BITS_NX90_mtgy_op_b11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b12 */
/* => MWMM operand B register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b12  0x00001630
#define Adr_NX90_mtgy_mtgy_op_b12 0xFF083630
#define Adr_NX90_mtgy_op_b12      0xFF083630
#define DFLT_VAL_NX90_mtgy_op_b12 0x00000000

#define MSK_NX90_mtgy_op_b12_val         0xffffffff
#define SRT_NX90_mtgy_op_b12_val         0
#define DFLT_VAL_NX90_mtgy_op_b12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b12': */
#define MSK_USED_BITS_NX90_mtgy_op_b12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b13 */
/* => MWMM operand B register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b13  0x00001634
#define Adr_NX90_mtgy_mtgy_op_b13 0xFF083634
#define Adr_NX90_mtgy_op_b13      0xFF083634
#define DFLT_VAL_NX90_mtgy_op_b13 0x00000000

#define MSK_NX90_mtgy_op_b13_val         0xffffffff
#define SRT_NX90_mtgy_op_b13_val         0
#define DFLT_VAL_NX90_mtgy_op_b13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b13': */
#define MSK_USED_BITS_NX90_mtgy_op_b13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b14 */
/* => MWMM operand B register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b14  0x00001638
#define Adr_NX90_mtgy_mtgy_op_b14 0xFF083638
#define Adr_NX90_mtgy_op_b14      0xFF083638
#define DFLT_VAL_NX90_mtgy_op_b14 0x00000000

#define MSK_NX90_mtgy_op_b14_val         0xffffffff
#define SRT_NX90_mtgy_op_b14_val         0
#define DFLT_VAL_NX90_mtgy_op_b14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b14': */
#define MSK_USED_BITS_NX90_mtgy_op_b14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b15 */
/* => MWMM operand B register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b15  0x0000163C
#define Adr_NX90_mtgy_mtgy_op_b15 0xFF08363C
#define Adr_NX90_mtgy_op_b15      0xFF08363C
#define DFLT_VAL_NX90_mtgy_op_b15 0x00000000

#define MSK_NX90_mtgy_op_b15_val         0xffffffff
#define SRT_NX90_mtgy_op_b15_val         0
#define DFLT_VAL_NX90_mtgy_op_b15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b15': */
#define MSK_USED_BITS_NX90_mtgy_op_b15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b16 */
/* => MWMM operand B register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b16  0x00001640
#define Adr_NX90_mtgy_mtgy_op_b16 0xFF083640
#define Adr_NX90_mtgy_op_b16      0xFF083640
#define DFLT_VAL_NX90_mtgy_op_b16 0x00000000

#define MSK_NX90_mtgy_op_b16_val         0xffffffff
#define SRT_NX90_mtgy_op_b16_val         0
#define DFLT_VAL_NX90_mtgy_op_b16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b16': */
#define MSK_USED_BITS_NX90_mtgy_op_b16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b17 */
/* => MWMM operand B register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b17  0x00001644
#define Adr_NX90_mtgy_mtgy_op_b17 0xFF083644
#define Adr_NX90_mtgy_op_b17      0xFF083644
#define DFLT_VAL_NX90_mtgy_op_b17 0x00000000

#define MSK_NX90_mtgy_op_b17_val         0xffffffff
#define SRT_NX90_mtgy_op_b17_val         0
#define DFLT_VAL_NX90_mtgy_op_b17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b17': */
#define MSK_USED_BITS_NX90_mtgy_op_b17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b18 */
/* => MWMM operand B register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b18  0x00001648
#define Adr_NX90_mtgy_mtgy_op_b18 0xFF083648
#define Adr_NX90_mtgy_op_b18      0xFF083648
#define DFLT_VAL_NX90_mtgy_op_b18 0x00000000

#define MSK_NX90_mtgy_op_b18_val         0xffffffff
#define SRT_NX90_mtgy_op_b18_val         0
#define DFLT_VAL_NX90_mtgy_op_b18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b18': */
#define MSK_USED_BITS_NX90_mtgy_op_b18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b19 */
/* => MWMM operand B register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b19  0x0000164C
#define Adr_NX90_mtgy_mtgy_op_b19 0xFF08364C
#define Adr_NX90_mtgy_op_b19      0xFF08364C
#define DFLT_VAL_NX90_mtgy_op_b19 0x00000000

#define MSK_NX90_mtgy_op_b19_val         0xffffffff
#define SRT_NX90_mtgy_op_b19_val         0
#define DFLT_VAL_NX90_mtgy_op_b19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b19': */
#define MSK_USED_BITS_NX90_mtgy_op_b19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b20 */
/* => MWMM operand B register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b20  0x00001650
#define Adr_NX90_mtgy_mtgy_op_b20 0xFF083650
#define Adr_NX90_mtgy_op_b20      0xFF083650
#define DFLT_VAL_NX90_mtgy_op_b20 0x00000000

#define MSK_NX90_mtgy_op_b20_val         0xffffffff
#define SRT_NX90_mtgy_op_b20_val         0
#define DFLT_VAL_NX90_mtgy_op_b20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b20': */
#define MSK_USED_BITS_NX90_mtgy_op_b20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b21 */
/* => MWMM operand B register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b21  0x00001654
#define Adr_NX90_mtgy_mtgy_op_b21 0xFF083654
#define Adr_NX90_mtgy_op_b21      0xFF083654
#define DFLT_VAL_NX90_mtgy_op_b21 0x00000000

#define MSK_NX90_mtgy_op_b21_val         0xffffffff
#define SRT_NX90_mtgy_op_b21_val         0
#define DFLT_VAL_NX90_mtgy_op_b21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b21': */
#define MSK_USED_BITS_NX90_mtgy_op_b21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b22 */
/* => MWMM operand B register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b22  0x00001658
#define Adr_NX90_mtgy_mtgy_op_b22 0xFF083658
#define Adr_NX90_mtgy_op_b22      0xFF083658
#define DFLT_VAL_NX90_mtgy_op_b22 0x00000000

#define MSK_NX90_mtgy_op_b22_val         0xffffffff
#define SRT_NX90_mtgy_op_b22_val         0
#define DFLT_VAL_NX90_mtgy_op_b22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b22': */
#define MSK_USED_BITS_NX90_mtgy_op_b22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b23 */
/* => MWMM operand B register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b23  0x0000165C
#define Adr_NX90_mtgy_mtgy_op_b23 0xFF08365C
#define Adr_NX90_mtgy_op_b23      0xFF08365C
#define DFLT_VAL_NX90_mtgy_op_b23 0x00000000

#define MSK_NX90_mtgy_op_b23_val         0xffffffff
#define SRT_NX90_mtgy_op_b23_val         0
#define DFLT_VAL_NX90_mtgy_op_b23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b23': */
#define MSK_USED_BITS_NX90_mtgy_op_b23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b24 */
/* => MWMM operand B register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b24  0x00001660
#define Adr_NX90_mtgy_mtgy_op_b24 0xFF083660
#define Adr_NX90_mtgy_op_b24      0xFF083660
#define DFLT_VAL_NX90_mtgy_op_b24 0x00000000

#define MSK_NX90_mtgy_op_b24_val         0xffffffff
#define SRT_NX90_mtgy_op_b24_val         0
#define DFLT_VAL_NX90_mtgy_op_b24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b24': */
#define MSK_USED_BITS_NX90_mtgy_op_b24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b25 */
/* => MWMM operand B register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b25  0x00001664
#define Adr_NX90_mtgy_mtgy_op_b25 0xFF083664
#define Adr_NX90_mtgy_op_b25      0xFF083664
#define DFLT_VAL_NX90_mtgy_op_b25 0x00000000

#define MSK_NX90_mtgy_op_b25_val         0xffffffff
#define SRT_NX90_mtgy_op_b25_val         0
#define DFLT_VAL_NX90_mtgy_op_b25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b25': */
#define MSK_USED_BITS_NX90_mtgy_op_b25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b26 */
/* => MWMM operand B register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b26  0x00001668
#define Adr_NX90_mtgy_mtgy_op_b26 0xFF083668
#define Adr_NX90_mtgy_op_b26      0xFF083668
#define DFLT_VAL_NX90_mtgy_op_b26 0x00000000

#define MSK_NX90_mtgy_op_b26_val         0xffffffff
#define SRT_NX90_mtgy_op_b26_val         0
#define DFLT_VAL_NX90_mtgy_op_b26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b26': */
#define MSK_USED_BITS_NX90_mtgy_op_b26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b27 */
/* => MWMM operand B register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b27  0x0000166C
#define Adr_NX90_mtgy_mtgy_op_b27 0xFF08366C
#define Adr_NX90_mtgy_op_b27      0xFF08366C
#define DFLT_VAL_NX90_mtgy_op_b27 0x00000000

#define MSK_NX90_mtgy_op_b27_val         0xffffffff
#define SRT_NX90_mtgy_op_b27_val         0
#define DFLT_VAL_NX90_mtgy_op_b27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b27': */
#define MSK_USED_BITS_NX90_mtgy_op_b27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b28 */
/* => MWMM operand B register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b28  0x00001670
#define Adr_NX90_mtgy_mtgy_op_b28 0xFF083670
#define Adr_NX90_mtgy_op_b28      0xFF083670
#define DFLT_VAL_NX90_mtgy_op_b28 0x00000000

#define MSK_NX90_mtgy_op_b28_val         0xffffffff
#define SRT_NX90_mtgy_op_b28_val         0
#define DFLT_VAL_NX90_mtgy_op_b28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b28': */
#define MSK_USED_BITS_NX90_mtgy_op_b28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b29 */
/* => MWMM operand B register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b29  0x00001674
#define Adr_NX90_mtgy_mtgy_op_b29 0xFF083674
#define Adr_NX90_mtgy_op_b29      0xFF083674
#define DFLT_VAL_NX90_mtgy_op_b29 0x00000000

#define MSK_NX90_mtgy_op_b29_val         0xffffffff
#define SRT_NX90_mtgy_op_b29_val         0
#define DFLT_VAL_NX90_mtgy_op_b29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b29': */
#define MSK_USED_BITS_NX90_mtgy_op_b29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b30 */
/* => MWMM operand B register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b30  0x00001678
#define Adr_NX90_mtgy_mtgy_op_b30 0xFF083678
#define Adr_NX90_mtgy_op_b30      0xFF083678
#define DFLT_VAL_NX90_mtgy_op_b30 0x00000000

#define MSK_NX90_mtgy_op_b30_val         0xffffffff
#define SRT_NX90_mtgy_op_b30_val         0
#define DFLT_VAL_NX90_mtgy_op_b30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b30': */
#define MSK_USED_BITS_NX90_mtgy_op_b30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b31 */
/* => MWMM operand B register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b31  0x0000167C
#define Adr_NX90_mtgy_mtgy_op_b31 0xFF08367C
#define Adr_NX90_mtgy_op_b31      0xFF08367C
#define DFLT_VAL_NX90_mtgy_op_b31 0x00000000

#define MSK_NX90_mtgy_op_b31_val         0xffffffff
#define SRT_NX90_mtgy_op_b31_val         0
#define DFLT_VAL_NX90_mtgy_op_b31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b31': */
#define MSK_USED_BITS_NX90_mtgy_op_b31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b32 */
/* => MWMM operand B register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b32  0x00001680
#define Adr_NX90_mtgy_mtgy_op_b32 0xFF083680
#define Adr_NX90_mtgy_op_b32      0xFF083680
#define DFLT_VAL_NX90_mtgy_op_b32 0x00000000

#define MSK_NX90_mtgy_op_b32_val         0xffffffff
#define SRT_NX90_mtgy_op_b32_val         0
#define DFLT_VAL_NX90_mtgy_op_b32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b32': */
#define MSK_USED_BITS_NX90_mtgy_op_b32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b33 */
/* => MWMM operand B register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b33  0x00001684
#define Adr_NX90_mtgy_mtgy_op_b33 0xFF083684
#define Adr_NX90_mtgy_op_b33      0xFF083684
#define DFLT_VAL_NX90_mtgy_op_b33 0x00000000

#define MSK_NX90_mtgy_op_b33_val         0xffffffff
#define SRT_NX90_mtgy_op_b33_val         0
#define DFLT_VAL_NX90_mtgy_op_b33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b33': */
#define MSK_USED_BITS_NX90_mtgy_op_b33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b34 */
/* => MWMM operand B register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b34  0x00001688
#define Adr_NX90_mtgy_mtgy_op_b34 0xFF083688
#define Adr_NX90_mtgy_op_b34      0xFF083688
#define DFLT_VAL_NX90_mtgy_op_b34 0x00000000

#define MSK_NX90_mtgy_op_b34_val         0xffffffff
#define SRT_NX90_mtgy_op_b34_val         0
#define DFLT_VAL_NX90_mtgy_op_b34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b34': */
#define MSK_USED_BITS_NX90_mtgy_op_b34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b35 */
/* => MWMM operand B register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b35  0x0000168C
#define Adr_NX90_mtgy_mtgy_op_b35 0xFF08368C
#define Adr_NX90_mtgy_op_b35      0xFF08368C
#define DFLT_VAL_NX90_mtgy_op_b35 0x00000000

#define MSK_NX90_mtgy_op_b35_val         0xffffffff
#define SRT_NX90_mtgy_op_b35_val         0
#define DFLT_VAL_NX90_mtgy_op_b35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b35': */
#define MSK_USED_BITS_NX90_mtgy_op_b35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b36 */
/* => MWMM operand B register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b36  0x00001690
#define Adr_NX90_mtgy_mtgy_op_b36 0xFF083690
#define Adr_NX90_mtgy_op_b36      0xFF083690
#define DFLT_VAL_NX90_mtgy_op_b36 0x00000000

#define MSK_NX90_mtgy_op_b36_val         0xffffffff
#define SRT_NX90_mtgy_op_b36_val         0
#define DFLT_VAL_NX90_mtgy_op_b36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b36': */
#define MSK_USED_BITS_NX90_mtgy_op_b36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b37 */
/* => MWMM operand B register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b37  0x00001694
#define Adr_NX90_mtgy_mtgy_op_b37 0xFF083694
#define Adr_NX90_mtgy_op_b37      0xFF083694
#define DFLT_VAL_NX90_mtgy_op_b37 0x00000000

#define MSK_NX90_mtgy_op_b37_val         0xffffffff
#define SRT_NX90_mtgy_op_b37_val         0
#define DFLT_VAL_NX90_mtgy_op_b37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b37': */
#define MSK_USED_BITS_NX90_mtgy_op_b37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b38 */
/* => MWMM operand B register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b38  0x00001698
#define Adr_NX90_mtgy_mtgy_op_b38 0xFF083698
#define Adr_NX90_mtgy_op_b38      0xFF083698
#define DFLT_VAL_NX90_mtgy_op_b38 0x00000000

#define MSK_NX90_mtgy_op_b38_val         0xffffffff
#define SRT_NX90_mtgy_op_b38_val         0
#define DFLT_VAL_NX90_mtgy_op_b38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b38': */
#define MSK_USED_BITS_NX90_mtgy_op_b38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b39 */
/* => MWMM operand B register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b39  0x0000169C
#define Adr_NX90_mtgy_mtgy_op_b39 0xFF08369C
#define Adr_NX90_mtgy_op_b39      0xFF08369C
#define DFLT_VAL_NX90_mtgy_op_b39 0x00000000

#define MSK_NX90_mtgy_op_b39_val         0xffffffff
#define SRT_NX90_mtgy_op_b39_val         0
#define DFLT_VAL_NX90_mtgy_op_b39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b39': */
#define MSK_USED_BITS_NX90_mtgy_op_b39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b40 */
/* => MWMM operand B register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b40  0x000016A0
#define Adr_NX90_mtgy_mtgy_op_b40 0xFF0836A0
#define Adr_NX90_mtgy_op_b40      0xFF0836A0
#define DFLT_VAL_NX90_mtgy_op_b40 0x00000000

#define MSK_NX90_mtgy_op_b40_val         0xffffffff
#define SRT_NX90_mtgy_op_b40_val         0
#define DFLT_VAL_NX90_mtgy_op_b40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b40': */
#define MSK_USED_BITS_NX90_mtgy_op_b40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b41 */
/* => MWMM operand B register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b41  0x000016A4
#define Adr_NX90_mtgy_mtgy_op_b41 0xFF0836A4
#define Adr_NX90_mtgy_op_b41      0xFF0836A4
#define DFLT_VAL_NX90_mtgy_op_b41 0x00000000

#define MSK_NX90_mtgy_op_b41_val         0xffffffff
#define SRT_NX90_mtgy_op_b41_val         0
#define DFLT_VAL_NX90_mtgy_op_b41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b41': */
#define MSK_USED_BITS_NX90_mtgy_op_b41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b42 */
/* => MWMM operand B register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b42  0x000016A8
#define Adr_NX90_mtgy_mtgy_op_b42 0xFF0836A8
#define Adr_NX90_mtgy_op_b42      0xFF0836A8
#define DFLT_VAL_NX90_mtgy_op_b42 0x00000000

#define MSK_NX90_mtgy_op_b42_val         0xffffffff
#define SRT_NX90_mtgy_op_b42_val         0
#define DFLT_VAL_NX90_mtgy_op_b42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b42': */
#define MSK_USED_BITS_NX90_mtgy_op_b42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b43 */
/* => MWMM operand B register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b43  0x000016AC
#define Adr_NX90_mtgy_mtgy_op_b43 0xFF0836AC
#define Adr_NX90_mtgy_op_b43      0xFF0836AC
#define DFLT_VAL_NX90_mtgy_op_b43 0x00000000

#define MSK_NX90_mtgy_op_b43_val         0xffffffff
#define SRT_NX90_mtgy_op_b43_val         0
#define DFLT_VAL_NX90_mtgy_op_b43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b43': */
#define MSK_USED_BITS_NX90_mtgy_op_b43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b44 */
/* => MWMM operand B register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b44  0x000016B0
#define Adr_NX90_mtgy_mtgy_op_b44 0xFF0836B0
#define Adr_NX90_mtgy_op_b44      0xFF0836B0
#define DFLT_VAL_NX90_mtgy_op_b44 0x00000000

#define MSK_NX90_mtgy_op_b44_val         0xffffffff
#define SRT_NX90_mtgy_op_b44_val         0
#define DFLT_VAL_NX90_mtgy_op_b44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b44': */
#define MSK_USED_BITS_NX90_mtgy_op_b44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b45 */
/* => MWMM operand B register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b45  0x000016B4
#define Adr_NX90_mtgy_mtgy_op_b45 0xFF0836B4
#define Adr_NX90_mtgy_op_b45      0xFF0836B4
#define DFLT_VAL_NX90_mtgy_op_b45 0x00000000

#define MSK_NX90_mtgy_op_b45_val         0xffffffff
#define SRT_NX90_mtgy_op_b45_val         0
#define DFLT_VAL_NX90_mtgy_op_b45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b45': */
#define MSK_USED_BITS_NX90_mtgy_op_b45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b46 */
/* => MWMM operand B register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b46  0x000016B8
#define Adr_NX90_mtgy_mtgy_op_b46 0xFF0836B8
#define Adr_NX90_mtgy_op_b46      0xFF0836B8
#define DFLT_VAL_NX90_mtgy_op_b46 0x00000000

#define MSK_NX90_mtgy_op_b46_val         0xffffffff
#define SRT_NX90_mtgy_op_b46_val         0
#define DFLT_VAL_NX90_mtgy_op_b46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b46': */
#define MSK_USED_BITS_NX90_mtgy_op_b46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b47 */
/* => MWMM operand B register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b47  0x000016BC
#define Adr_NX90_mtgy_mtgy_op_b47 0xFF0836BC
#define Adr_NX90_mtgy_op_b47      0xFF0836BC
#define DFLT_VAL_NX90_mtgy_op_b47 0x00000000

#define MSK_NX90_mtgy_op_b47_val         0xffffffff
#define SRT_NX90_mtgy_op_b47_val         0
#define DFLT_VAL_NX90_mtgy_op_b47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b47': */
#define MSK_USED_BITS_NX90_mtgy_op_b47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b48 */
/* => MWMM operand B register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b48  0x000016C0
#define Adr_NX90_mtgy_mtgy_op_b48 0xFF0836C0
#define Adr_NX90_mtgy_op_b48      0xFF0836C0
#define DFLT_VAL_NX90_mtgy_op_b48 0x00000000

#define MSK_NX90_mtgy_op_b48_val         0xffffffff
#define SRT_NX90_mtgy_op_b48_val         0
#define DFLT_VAL_NX90_mtgy_op_b48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b48': */
#define MSK_USED_BITS_NX90_mtgy_op_b48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b49 */
/* => MWMM operand B register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b49  0x000016C4
#define Adr_NX90_mtgy_mtgy_op_b49 0xFF0836C4
#define Adr_NX90_mtgy_op_b49      0xFF0836C4
#define DFLT_VAL_NX90_mtgy_op_b49 0x00000000

#define MSK_NX90_mtgy_op_b49_val         0xffffffff
#define SRT_NX90_mtgy_op_b49_val         0
#define DFLT_VAL_NX90_mtgy_op_b49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b49': */
#define MSK_USED_BITS_NX90_mtgy_op_b49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b50 */
/* => MWMM operand B register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b50  0x000016C8
#define Adr_NX90_mtgy_mtgy_op_b50 0xFF0836C8
#define Adr_NX90_mtgy_op_b50      0xFF0836C8
#define DFLT_VAL_NX90_mtgy_op_b50 0x00000000

#define MSK_NX90_mtgy_op_b50_val         0xffffffff
#define SRT_NX90_mtgy_op_b50_val         0
#define DFLT_VAL_NX90_mtgy_op_b50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b50': */
#define MSK_USED_BITS_NX90_mtgy_op_b50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b51 */
/* => MWMM operand B register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b51  0x000016CC
#define Adr_NX90_mtgy_mtgy_op_b51 0xFF0836CC
#define Adr_NX90_mtgy_op_b51      0xFF0836CC
#define DFLT_VAL_NX90_mtgy_op_b51 0x00000000

#define MSK_NX90_mtgy_op_b51_val         0xffffffff
#define SRT_NX90_mtgy_op_b51_val         0
#define DFLT_VAL_NX90_mtgy_op_b51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b51': */
#define MSK_USED_BITS_NX90_mtgy_op_b51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b52 */
/* => MWMM operand B register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b52  0x000016D0
#define Adr_NX90_mtgy_mtgy_op_b52 0xFF0836D0
#define Adr_NX90_mtgy_op_b52      0xFF0836D0
#define DFLT_VAL_NX90_mtgy_op_b52 0x00000000

#define MSK_NX90_mtgy_op_b52_val         0xffffffff
#define SRT_NX90_mtgy_op_b52_val         0
#define DFLT_VAL_NX90_mtgy_op_b52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b52': */
#define MSK_USED_BITS_NX90_mtgy_op_b52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b53 */
/* => MWMM operand B register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b53  0x000016D4
#define Adr_NX90_mtgy_mtgy_op_b53 0xFF0836D4
#define Adr_NX90_mtgy_op_b53      0xFF0836D4
#define DFLT_VAL_NX90_mtgy_op_b53 0x00000000

#define MSK_NX90_mtgy_op_b53_val         0xffffffff
#define SRT_NX90_mtgy_op_b53_val         0
#define DFLT_VAL_NX90_mtgy_op_b53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b53': */
#define MSK_USED_BITS_NX90_mtgy_op_b53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b54 */
/* => MWMM operand B register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b54  0x000016D8
#define Adr_NX90_mtgy_mtgy_op_b54 0xFF0836D8
#define Adr_NX90_mtgy_op_b54      0xFF0836D8
#define DFLT_VAL_NX90_mtgy_op_b54 0x00000000

#define MSK_NX90_mtgy_op_b54_val         0xffffffff
#define SRT_NX90_mtgy_op_b54_val         0
#define DFLT_VAL_NX90_mtgy_op_b54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b54': */
#define MSK_USED_BITS_NX90_mtgy_op_b54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b55 */
/* => MWMM operand B register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b55  0x000016DC
#define Adr_NX90_mtgy_mtgy_op_b55 0xFF0836DC
#define Adr_NX90_mtgy_op_b55      0xFF0836DC
#define DFLT_VAL_NX90_mtgy_op_b55 0x00000000

#define MSK_NX90_mtgy_op_b55_val         0xffffffff
#define SRT_NX90_mtgy_op_b55_val         0
#define DFLT_VAL_NX90_mtgy_op_b55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b55': */
#define MSK_USED_BITS_NX90_mtgy_op_b55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b56 */
/* => MWMM operand B register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b56  0x000016E0
#define Adr_NX90_mtgy_mtgy_op_b56 0xFF0836E0
#define Adr_NX90_mtgy_op_b56      0xFF0836E0
#define DFLT_VAL_NX90_mtgy_op_b56 0x00000000

#define MSK_NX90_mtgy_op_b56_val         0xffffffff
#define SRT_NX90_mtgy_op_b56_val         0
#define DFLT_VAL_NX90_mtgy_op_b56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b56': */
#define MSK_USED_BITS_NX90_mtgy_op_b56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b57 */
/* => MWMM operand B register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b57  0x000016E4
#define Adr_NX90_mtgy_mtgy_op_b57 0xFF0836E4
#define Adr_NX90_mtgy_op_b57      0xFF0836E4
#define DFLT_VAL_NX90_mtgy_op_b57 0x00000000

#define MSK_NX90_mtgy_op_b57_val         0xffffffff
#define SRT_NX90_mtgy_op_b57_val         0
#define DFLT_VAL_NX90_mtgy_op_b57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b57': */
#define MSK_USED_BITS_NX90_mtgy_op_b57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b58 */
/* => MWMM operand B register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b58  0x000016E8
#define Adr_NX90_mtgy_mtgy_op_b58 0xFF0836E8
#define Adr_NX90_mtgy_op_b58      0xFF0836E8
#define DFLT_VAL_NX90_mtgy_op_b58 0x00000000

#define MSK_NX90_mtgy_op_b58_val         0xffffffff
#define SRT_NX90_mtgy_op_b58_val         0
#define DFLT_VAL_NX90_mtgy_op_b58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b58': */
#define MSK_USED_BITS_NX90_mtgy_op_b58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b59 */
/* => MWMM operand B register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b59  0x000016EC
#define Adr_NX90_mtgy_mtgy_op_b59 0xFF0836EC
#define Adr_NX90_mtgy_op_b59      0xFF0836EC
#define DFLT_VAL_NX90_mtgy_op_b59 0x00000000

#define MSK_NX90_mtgy_op_b59_val         0xffffffff
#define SRT_NX90_mtgy_op_b59_val         0
#define DFLT_VAL_NX90_mtgy_op_b59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b59': */
#define MSK_USED_BITS_NX90_mtgy_op_b59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b60 */
/* => MWMM operand B register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b60  0x000016F0
#define Adr_NX90_mtgy_mtgy_op_b60 0xFF0836F0
#define Adr_NX90_mtgy_op_b60      0xFF0836F0
#define DFLT_VAL_NX90_mtgy_op_b60 0x00000000

#define MSK_NX90_mtgy_op_b60_val         0xffffffff
#define SRT_NX90_mtgy_op_b60_val         0
#define DFLT_VAL_NX90_mtgy_op_b60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b60': */
#define MSK_USED_BITS_NX90_mtgy_op_b60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b61 */
/* => MWMM operand B register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b61  0x000016F4
#define Adr_NX90_mtgy_mtgy_op_b61 0xFF0836F4
#define Adr_NX90_mtgy_op_b61      0xFF0836F4
#define DFLT_VAL_NX90_mtgy_op_b61 0x00000000

#define MSK_NX90_mtgy_op_b61_val         0xffffffff
#define SRT_NX90_mtgy_op_b61_val         0
#define DFLT_VAL_NX90_mtgy_op_b61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b61': */
#define MSK_USED_BITS_NX90_mtgy_op_b61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b62 */
/* => MWMM operand B register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b62  0x000016F8
#define Adr_NX90_mtgy_mtgy_op_b62 0xFF0836F8
#define Adr_NX90_mtgy_op_b62      0xFF0836F8
#define DFLT_VAL_NX90_mtgy_op_b62 0x00000000

#define MSK_NX90_mtgy_op_b62_val         0xffffffff
#define SRT_NX90_mtgy_op_b62_val         0
#define DFLT_VAL_NX90_mtgy_op_b62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b62': */
#define MSK_USED_BITS_NX90_mtgy_op_b62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b63 */
/* => MWMM operand B register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b63  0x000016FC
#define Adr_NX90_mtgy_mtgy_op_b63 0xFF0836FC
#define Adr_NX90_mtgy_op_b63      0xFF0836FC
#define DFLT_VAL_NX90_mtgy_op_b63 0x00000000

#define MSK_NX90_mtgy_op_b63_val         0xffffffff
#define SRT_NX90_mtgy_op_b63_val         0
#define DFLT_VAL_NX90_mtgy_op_b63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b63': */
#define MSK_USED_BITS_NX90_mtgy_op_b63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b64 */
/* => MWMM operand B register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b64  0x00001700
#define Adr_NX90_mtgy_mtgy_op_b64 0xFF083700
#define Adr_NX90_mtgy_op_b64      0xFF083700
#define DFLT_VAL_NX90_mtgy_op_b64 0x00000000

#define MSK_NX90_mtgy_op_b64_val         0xffffffff
#define SRT_NX90_mtgy_op_b64_val         0
#define DFLT_VAL_NX90_mtgy_op_b64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b64': */
#define MSK_USED_BITS_NX90_mtgy_op_b64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b65 */
/* => MWMM operand B register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b65  0x00001704
#define Adr_NX90_mtgy_mtgy_op_b65 0xFF083704
#define Adr_NX90_mtgy_op_b65      0xFF083704
#define DFLT_VAL_NX90_mtgy_op_b65 0x00000000

#define MSK_NX90_mtgy_op_b65_val         0xffffffff
#define SRT_NX90_mtgy_op_b65_val         0
#define DFLT_VAL_NX90_mtgy_op_b65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b65': */
#define MSK_USED_BITS_NX90_mtgy_op_b65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b66 */
/* => MWMM operand B register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b66  0x00001708
#define Adr_NX90_mtgy_mtgy_op_b66 0xFF083708
#define Adr_NX90_mtgy_op_b66      0xFF083708
#define DFLT_VAL_NX90_mtgy_op_b66 0x00000000

#define MSK_NX90_mtgy_op_b66_val         0xffffffff
#define SRT_NX90_mtgy_op_b66_val         0
#define DFLT_VAL_NX90_mtgy_op_b66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b66': */
#define MSK_USED_BITS_NX90_mtgy_op_b66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b67 */
/* => MWMM operand B register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b67  0x0000170C
#define Adr_NX90_mtgy_mtgy_op_b67 0xFF08370C
#define Adr_NX90_mtgy_op_b67      0xFF08370C
#define DFLT_VAL_NX90_mtgy_op_b67 0x00000000

#define MSK_NX90_mtgy_op_b67_val         0xffffffff
#define SRT_NX90_mtgy_op_b67_val         0
#define DFLT_VAL_NX90_mtgy_op_b67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b67': */
#define MSK_USED_BITS_NX90_mtgy_op_b67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b68 */
/* => MWMM operand B register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b68  0x00001710
#define Adr_NX90_mtgy_mtgy_op_b68 0xFF083710
#define Adr_NX90_mtgy_op_b68      0xFF083710
#define DFLT_VAL_NX90_mtgy_op_b68 0x00000000

#define MSK_NX90_mtgy_op_b68_val         0xffffffff
#define SRT_NX90_mtgy_op_b68_val         0
#define DFLT_VAL_NX90_mtgy_op_b68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b68': */
#define MSK_USED_BITS_NX90_mtgy_op_b68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b69 */
/* => MWMM operand B register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b69  0x00001714
#define Adr_NX90_mtgy_mtgy_op_b69 0xFF083714
#define Adr_NX90_mtgy_op_b69      0xFF083714
#define DFLT_VAL_NX90_mtgy_op_b69 0x00000000

#define MSK_NX90_mtgy_op_b69_val         0xffffffff
#define SRT_NX90_mtgy_op_b69_val         0
#define DFLT_VAL_NX90_mtgy_op_b69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b69': */
#define MSK_USED_BITS_NX90_mtgy_op_b69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b70 */
/* => MWMM operand B register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b70  0x00001718
#define Adr_NX90_mtgy_mtgy_op_b70 0xFF083718
#define Adr_NX90_mtgy_op_b70      0xFF083718
#define DFLT_VAL_NX90_mtgy_op_b70 0x00000000

#define MSK_NX90_mtgy_op_b70_val         0xffffffff
#define SRT_NX90_mtgy_op_b70_val         0
#define DFLT_VAL_NX90_mtgy_op_b70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b70': */
#define MSK_USED_BITS_NX90_mtgy_op_b70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b71 */
/* => MWMM operand B register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b71  0x0000171C
#define Adr_NX90_mtgy_mtgy_op_b71 0xFF08371C
#define Adr_NX90_mtgy_op_b71      0xFF08371C
#define DFLT_VAL_NX90_mtgy_op_b71 0x00000000

#define MSK_NX90_mtgy_op_b71_val         0xffffffff
#define SRT_NX90_mtgy_op_b71_val         0
#define DFLT_VAL_NX90_mtgy_op_b71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b71': */
#define MSK_USED_BITS_NX90_mtgy_op_b71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b72 */
/* => MWMM operand B register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b72  0x00001720
#define Adr_NX90_mtgy_mtgy_op_b72 0xFF083720
#define Adr_NX90_mtgy_op_b72      0xFF083720
#define DFLT_VAL_NX90_mtgy_op_b72 0x00000000

#define MSK_NX90_mtgy_op_b72_val         0xffffffff
#define SRT_NX90_mtgy_op_b72_val         0
#define DFLT_VAL_NX90_mtgy_op_b72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b72': */
#define MSK_USED_BITS_NX90_mtgy_op_b72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b73 */
/* => MWMM operand B register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b73  0x00001724
#define Adr_NX90_mtgy_mtgy_op_b73 0xFF083724
#define Adr_NX90_mtgy_op_b73      0xFF083724
#define DFLT_VAL_NX90_mtgy_op_b73 0x00000000

#define MSK_NX90_mtgy_op_b73_val         0xffffffff
#define SRT_NX90_mtgy_op_b73_val         0
#define DFLT_VAL_NX90_mtgy_op_b73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b73': */
#define MSK_USED_BITS_NX90_mtgy_op_b73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b74 */
/* => MWMM operand B register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b74  0x00001728
#define Adr_NX90_mtgy_mtgy_op_b74 0xFF083728
#define Adr_NX90_mtgy_op_b74      0xFF083728
#define DFLT_VAL_NX90_mtgy_op_b74 0x00000000

#define MSK_NX90_mtgy_op_b74_val         0xffffffff
#define SRT_NX90_mtgy_op_b74_val         0
#define DFLT_VAL_NX90_mtgy_op_b74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b74': */
#define MSK_USED_BITS_NX90_mtgy_op_b74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b75 */
/* => MWMM operand B register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b75  0x0000172C
#define Adr_NX90_mtgy_mtgy_op_b75 0xFF08372C
#define Adr_NX90_mtgy_op_b75      0xFF08372C
#define DFLT_VAL_NX90_mtgy_op_b75 0x00000000

#define MSK_NX90_mtgy_op_b75_val         0xffffffff
#define SRT_NX90_mtgy_op_b75_val         0
#define DFLT_VAL_NX90_mtgy_op_b75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b75': */
#define MSK_USED_BITS_NX90_mtgy_op_b75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b76 */
/* => MWMM operand B register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b76  0x00001730
#define Adr_NX90_mtgy_mtgy_op_b76 0xFF083730
#define Adr_NX90_mtgy_op_b76      0xFF083730
#define DFLT_VAL_NX90_mtgy_op_b76 0x00000000

#define MSK_NX90_mtgy_op_b76_val         0xffffffff
#define SRT_NX90_mtgy_op_b76_val         0
#define DFLT_VAL_NX90_mtgy_op_b76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b76': */
#define MSK_USED_BITS_NX90_mtgy_op_b76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b77 */
/* => MWMM operand B register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b77  0x00001734
#define Adr_NX90_mtgy_mtgy_op_b77 0xFF083734
#define Adr_NX90_mtgy_op_b77      0xFF083734
#define DFLT_VAL_NX90_mtgy_op_b77 0x00000000

#define MSK_NX90_mtgy_op_b77_val         0xffffffff
#define SRT_NX90_mtgy_op_b77_val         0
#define DFLT_VAL_NX90_mtgy_op_b77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b77': */
#define MSK_USED_BITS_NX90_mtgy_op_b77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b78 */
/* => MWMM operand B register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b78  0x00001738
#define Adr_NX90_mtgy_mtgy_op_b78 0xFF083738
#define Adr_NX90_mtgy_op_b78      0xFF083738
#define DFLT_VAL_NX90_mtgy_op_b78 0x00000000

#define MSK_NX90_mtgy_op_b78_val         0xffffffff
#define SRT_NX90_mtgy_op_b78_val         0
#define DFLT_VAL_NX90_mtgy_op_b78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b78': */
#define MSK_USED_BITS_NX90_mtgy_op_b78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b79 */
/* => MWMM operand B register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b79  0x0000173C
#define Adr_NX90_mtgy_mtgy_op_b79 0xFF08373C
#define Adr_NX90_mtgy_op_b79      0xFF08373C
#define DFLT_VAL_NX90_mtgy_op_b79 0x00000000

#define MSK_NX90_mtgy_op_b79_val         0xffffffff
#define SRT_NX90_mtgy_op_b79_val         0
#define DFLT_VAL_NX90_mtgy_op_b79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b79': */
#define MSK_USED_BITS_NX90_mtgy_op_b79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b80 */
/* => MWMM operand B register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b80  0x00001740
#define Adr_NX90_mtgy_mtgy_op_b80 0xFF083740
#define Adr_NX90_mtgy_op_b80      0xFF083740
#define DFLT_VAL_NX90_mtgy_op_b80 0x00000000

#define MSK_NX90_mtgy_op_b80_val         0xffffffff
#define SRT_NX90_mtgy_op_b80_val         0
#define DFLT_VAL_NX90_mtgy_op_b80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b80': */
#define MSK_USED_BITS_NX90_mtgy_op_b80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b81 */
/* => MWMM operand B register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b81  0x00001744
#define Adr_NX90_mtgy_mtgy_op_b81 0xFF083744
#define Adr_NX90_mtgy_op_b81      0xFF083744
#define DFLT_VAL_NX90_mtgy_op_b81 0x00000000

#define MSK_NX90_mtgy_op_b81_val         0xffffffff
#define SRT_NX90_mtgy_op_b81_val         0
#define DFLT_VAL_NX90_mtgy_op_b81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b81': */
#define MSK_USED_BITS_NX90_mtgy_op_b81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b82 */
/* => MWMM operand B register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b82  0x00001748
#define Adr_NX90_mtgy_mtgy_op_b82 0xFF083748
#define Adr_NX90_mtgy_op_b82      0xFF083748
#define DFLT_VAL_NX90_mtgy_op_b82 0x00000000

#define MSK_NX90_mtgy_op_b82_val         0xffffffff
#define SRT_NX90_mtgy_op_b82_val         0
#define DFLT_VAL_NX90_mtgy_op_b82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b82': */
#define MSK_USED_BITS_NX90_mtgy_op_b82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b83 */
/* => MWMM operand B register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b83  0x0000174C
#define Adr_NX90_mtgy_mtgy_op_b83 0xFF08374C
#define Adr_NX90_mtgy_op_b83      0xFF08374C
#define DFLT_VAL_NX90_mtgy_op_b83 0x00000000

#define MSK_NX90_mtgy_op_b83_val         0xffffffff
#define SRT_NX90_mtgy_op_b83_val         0
#define DFLT_VAL_NX90_mtgy_op_b83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b83': */
#define MSK_USED_BITS_NX90_mtgy_op_b83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b84 */
/* => MWMM operand B register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b84  0x00001750
#define Adr_NX90_mtgy_mtgy_op_b84 0xFF083750
#define Adr_NX90_mtgy_op_b84      0xFF083750
#define DFLT_VAL_NX90_mtgy_op_b84 0x00000000

#define MSK_NX90_mtgy_op_b84_val         0xffffffff
#define SRT_NX90_mtgy_op_b84_val         0
#define DFLT_VAL_NX90_mtgy_op_b84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b84': */
#define MSK_USED_BITS_NX90_mtgy_op_b84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b85 */
/* => MWMM operand B register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b85  0x00001754
#define Adr_NX90_mtgy_mtgy_op_b85 0xFF083754
#define Adr_NX90_mtgy_op_b85      0xFF083754
#define DFLT_VAL_NX90_mtgy_op_b85 0x00000000

#define MSK_NX90_mtgy_op_b85_val         0xffffffff
#define SRT_NX90_mtgy_op_b85_val         0
#define DFLT_VAL_NX90_mtgy_op_b85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b85': */
#define MSK_USED_BITS_NX90_mtgy_op_b85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b86 */
/* => MWMM operand B register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b86  0x00001758
#define Adr_NX90_mtgy_mtgy_op_b86 0xFF083758
#define Adr_NX90_mtgy_op_b86      0xFF083758
#define DFLT_VAL_NX90_mtgy_op_b86 0x00000000

#define MSK_NX90_mtgy_op_b86_val         0xffffffff
#define SRT_NX90_mtgy_op_b86_val         0
#define DFLT_VAL_NX90_mtgy_op_b86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b86': */
#define MSK_USED_BITS_NX90_mtgy_op_b86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b87 */
/* => MWMM operand B register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b87  0x0000175C
#define Adr_NX90_mtgy_mtgy_op_b87 0xFF08375C
#define Adr_NX90_mtgy_op_b87      0xFF08375C
#define DFLT_VAL_NX90_mtgy_op_b87 0x00000000

#define MSK_NX90_mtgy_op_b87_val         0xffffffff
#define SRT_NX90_mtgy_op_b87_val         0
#define DFLT_VAL_NX90_mtgy_op_b87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b87': */
#define MSK_USED_BITS_NX90_mtgy_op_b87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b88 */
/* => MWMM operand B register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b88  0x00001760
#define Adr_NX90_mtgy_mtgy_op_b88 0xFF083760
#define Adr_NX90_mtgy_op_b88      0xFF083760
#define DFLT_VAL_NX90_mtgy_op_b88 0x00000000

#define MSK_NX90_mtgy_op_b88_val         0xffffffff
#define SRT_NX90_mtgy_op_b88_val         0
#define DFLT_VAL_NX90_mtgy_op_b88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b88': */
#define MSK_USED_BITS_NX90_mtgy_op_b88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b89 */
/* => MWMM operand B register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b89  0x00001764
#define Adr_NX90_mtgy_mtgy_op_b89 0xFF083764
#define Adr_NX90_mtgy_op_b89      0xFF083764
#define DFLT_VAL_NX90_mtgy_op_b89 0x00000000

#define MSK_NX90_mtgy_op_b89_val         0xffffffff
#define SRT_NX90_mtgy_op_b89_val         0
#define DFLT_VAL_NX90_mtgy_op_b89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b89': */
#define MSK_USED_BITS_NX90_mtgy_op_b89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b90 */
/* => MWMM operand B register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b90  0x00001768
#define Adr_NX90_mtgy_mtgy_op_b90 0xFF083768
#define Adr_NX90_mtgy_op_b90      0xFF083768
#define DFLT_VAL_NX90_mtgy_op_b90 0x00000000

#define MSK_NX90_mtgy_op_b90_val         0xffffffff
#define SRT_NX90_mtgy_op_b90_val         0
#define DFLT_VAL_NX90_mtgy_op_b90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b90': */
#define MSK_USED_BITS_NX90_mtgy_op_b90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b91 */
/* => MWMM operand B register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b91  0x0000176C
#define Adr_NX90_mtgy_mtgy_op_b91 0xFF08376C
#define Adr_NX90_mtgy_op_b91      0xFF08376C
#define DFLT_VAL_NX90_mtgy_op_b91 0x00000000

#define MSK_NX90_mtgy_op_b91_val         0xffffffff
#define SRT_NX90_mtgy_op_b91_val         0
#define DFLT_VAL_NX90_mtgy_op_b91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b91': */
#define MSK_USED_BITS_NX90_mtgy_op_b91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b92 */
/* => MWMM operand B register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b92  0x00001770
#define Adr_NX90_mtgy_mtgy_op_b92 0xFF083770
#define Adr_NX90_mtgy_op_b92      0xFF083770
#define DFLT_VAL_NX90_mtgy_op_b92 0x00000000

#define MSK_NX90_mtgy_op_b92_val         0xffffffff
#define SRT_NX90_mtgy_op_b92_val         0
#define DFLT_VAL_NX90_mtgy_op_b92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b92': */
#define MSK_USED_BITS_NX90_mtgy_op_b92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b93 */
/* => MWMM operand B register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b93  0x00001774
#define Adr_NX90_mtgy_mtgy_op_b93 0xFF083774
#define Adr_NX90_mtgy_op_b93      0xFF083774
#define DFLT_VAL_NX90_mtgy_op_b93 0x00000000

#define MSK_NX90_mtgy_op_b93_val         0xffffffff
#define SRT_NX90_mtgy_op_b93_val         0
#define DFLT_VAL_NX90_mtgy_op_b93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b93': */
#define MSK_USED_BITS_NX90_mtgy_op_b93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b94 */
/* => MWMM operand B register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b94  0x00001778
#define Adr_NX90_mtgy_mtgy_op_b94 0xFF083778
#define Adr_NX90_mtgy_op_b94      0xFF083778
#define DFLT_VAL_NX90_mtgy_op_b94 0x00000000

#define MSK_NX90_mtgy_op_b94_val         0xffffffff
#define SRT_NX90_mtgy_op_b94_val         0
#define DFLT_VAL_NX90_mtgy_op_b94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b94': */
#define MSK_USED_BITS_NX90_mtgy_op_b94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b95 */
/* => MWMM operand B register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b95  0x0000177C
#define Adr_NX90_mtgy_mtgy_op_b95 0xFF08377C
#define Adr_NX90_mtgy_op_b95      0xFF08377C
#define DFLT_VAL_NX90_mtgy_op_b95 0x00000000

#define MSK_NX90_mtgy_op_b95_val         0xffffffff
#define SRT_NX90_mtgy_op_b95_val         0
#define DFLT_VAL_NX90_mtgy_op_b95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b95': */
#define MSK_USED_BITS_NX90_mtgy_op_b95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b96 */
/* => MWMM operand B register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b96  0x00001780
#define Adr_NX90_mtgy_mtgy_op_b96 0xFF083780
#define Adr_NX90_mtgy_op_b96      0xFF083780
#define DFLT_VAL_NX90_mtgy_op_b96 0x00000000

#define MSK_NX90_mtgy_op_b96_val         0xffffffff
#define SRT_NX90_mtgy_op_b96_val         0
#define DFLT_VAL_NX90_mtgy_op_b96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b96': */
#define MSK_USED_BITS_NX90_mtgy_op_b96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b97 */
/* => MWMM operand B register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b97  0x00001784
#define Adr_NX90_mtgy_mtgy_op_b97 0xFF083784
#define Adr_NX90_mtgy_op_b97      0xFF083784
#define DFLT_VAL_NX90_mtgy_op_b97 0x00000000

#define MSK_NX90_mtgy_op_b97_val         0xffffffff
#define SRT_NX90_mtgy_op_b97_val         0
#define DFLT_VAL_NX90_mtgy_op_b97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b97': */
#define MSK_USED_BITS_NX90_mtgy_op_b97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b98 */
/* => MWMM operand B register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b98  0x00001788
#define Adr_NX90_mtgy_mtgy_op_b98 0xFF083788
#define Adr_NX90_mtgy_op_b98      0xFF083788
#define DFLT_VAL_NX90_mtgy_op_b98 0x00000000

#define MSK_NX90_mtgy_op_b98_val         0xffffffff
#define SRT_NX90_mtgy_op_b98_val         0
#define DFLT_VAL_NX90_mtgy_op_b98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b98': */
#define MSK_USED_BITS_NX90_mtgy_op_b98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b99 */
/* => MWMM operand B register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b99  0x0000178C
#define Adr_NX90_mtgy_mtgy_op_b99 0xFF08378C
#define Adr_NX90_mtgy_op_b99      0xFF08378C
#define DFLT_VAL_NX90_mtgy_op_b99 0x00000000

#define MSK_NX90_mtgy_op_b99_val         0xffffffff
#define SRT_NX90_mtgy_op_b99_val         0
#define DFLT_VAL_NX90_mtgy_op_b99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b99': */
#define MSK_USED_BITS_NX90_mtgy_op_b99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b100 */
/* => MWMM operand B register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b100  0x00001790
#define Adr_NX90_mtgy_mtgy_op_b100 0xFF083790
#define Adr_NX90_mtgy_op_b100      0xFF083790
#define DFLT_VAL_NX90_mtgy_op_b100 0x00000000

#define MSK_NX90_mtgy_op_b100_val         0xffffffff
#define SRT_NX90_mtgy_op_b100_val         0
#define DFLT_VAL_NX90_mtgy_op_b100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b100': */
#define MSK_USED_BITS_NX90_mtgy_op_b100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b101 */
/* => MWMM operand B register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b101  0x00001794
#define Adr_NX90_mtgy_mtgy_op_b101 0xFF083794
#define Adr_NX90_mtgy_op_b101      0xFF083794
#define DFLT_VAL_NX90_mtgy_op_b101 0x00000000

#define MSK_NX90_mtgy_op_b101_val         0xffffffff
#define SRT_NX90_mtgy_op_b101_val         0
#define DFLT_VAL_NX90_mtgy_op_b101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b101': */
#define MSK_USED_BITS_NX90_mtgy_op_b101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b102 */
/* => MWMM operand B register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b102  0x00001798
#define Adr_NX90_mtgy_mtgy_op_b102 0xFF083798
#define Adr_NX90_mtgy_op_b102      0xFF083798
#define DFLT_VAL_NX90_mtgy_op_b102 0x00000000

#define MSK_NX90_mtgy_op_b102_val         0xffffffff
#define SRT_NX90_mtgy_op_b102_val         0
#define DFLT_VAL_NX90_mtgy_op_b102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b102': */
#define MSK_USED_BITS_NX90_mtgy_op_b102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b103 */
/* => MWMM operand B register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b103  0x0000179C
#define Adr_NX90_mtgy_mtgy_op_b103 0xFF08379C
#define Adr_NX90_mtgy_op_b103      0xFF08379C
#define DFLT_VAL_NX90_mtgy_op_b103 0x00000000

#define MSK_NX90_mtgy_op_b103_val         0xffffffff
#define SRT_NX90_mtgy_op_b103_val         0
#define DFLT_VAL_NX90_mtgy_op_b103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b103': */
#define MSK_USED_BITS_NX90_mtgy_op_b103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b104 */
/* => MWMM operand B register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b104  0x000017A0
#define Adr_NX90_mtgy_mtgy_op_b104 0xFF0837A0
#define Adr_NX90_mtgy_op_b104      0xFF0837A0
#define DFLT_VAL_NX90_mtgy_op_b104 0x00000000

#define MSK_NX90_mtgy_op_b104_val         0xffffffff
#define SRT_NX90_mtgy_op_b104_val         0
#define DFLT_VAL_NX90_mtgy_op_b104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b104': */
#define MSK_USED_BITS_NX90_mtgy_op_b104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b105 */
/* => MWMM operand B register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b105  0x000017A4
#define Adr_NX90_mtgy_mtgy_op_b105 0xFF0837A4
#define Adr_NX90_mtgy_op_b105      0xFF0837A4
#define DFLT_VAL_NX90_mtgy_op_b105 0x00000000

#define MSK_NX90_mtgy_op_b105_val         0xffffffff
#define SRT_NX90_mtgy_op_b105_val         0
#define DFLT_VAL_NX90_mtgy_op_b105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b105': */
#define MSK_USED_BITS_NX90_mtgy_op_b105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b106 */
/* => MWMM operand B register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b106  0x000017A8
#define Adr_NX90_mtgy_mtgy_op_b106 0xFF0837A8
#define Adr_NX90_mtgy_op_b106      0xFF0837A8
#define DFLT_VAL_NX90_mtgy_op_b106 0x00000000

#define MSK_NX90_mtgy_op_b106_val         0xffffffff
#define SRT_NX90_mtgy_op_b106_val         0
#define DFLT_VAL_NX90_mtgy_op_b106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b106': */
#define MSK_USED_BITS_NX90_mtgy_op_b106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b107 */
/* => MWMM operand B register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b107  0x000017AC
#define Adr_NX90_mtgy_mtgy_op_b107 0xFF0837AC
#define Adr_NX90_mtgy_op_b107      0xFF0837AC
#define DFLT_VAL_NX90_mtgy_op_b107 0x00000000

#define MSK_NX90_mtgy_op_b107_val         0xffffffff
#define SRT_NX90_mtgy_op_b107_val         0
#define DFLT_VAL_NX90_mtgy_op_b107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b107': */
#define MSK_USED_BITS_NX90_mtgy_op_b107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b108 */
/* => MWMM operand B register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b108  0x000017B0
#define Adr_NX90_mtgy_mtgy_op_b108 0xFF0837B0
#define Adr_NX90_mtgy_op_b108      0xFF0837B0
#define DFLT_VAL_NX90_mtgy_op_b108 0x00000000

#define MSK_NX90_mtgy_op_b108_val         0xffffffff
#define SRT_NX90_mtgy_op_b108_val         0
#define DFLT_VAL_NX90_mtgy_op_b108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b108': */
#define MSK_USED_BITS_NX90_mtgy_op_b108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b109 */
/* => MWMM operand B register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b109  0x000017B4
#define Adr_NX90_mtgy_mtgy_op_b109 0xFF0837B4
#define Adr_NX90_mtgy_op_b109      0xFF0837B4
#define DFLT_VAL_NX90_mtgy_op_b109 0x00000000

#define MSK_NX90_mtgy_op_b109_val         0xffffffff
#define SRT_NX90_mtgy_op_b109_val         0
#define DFLT_VAL_NX90_mtgy_op_b109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b109': */
#define MSK_USED_BITS_NX90_mtgy_op_b109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b110 */
/* => MWMM operand B register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b110  0x000017B8
#define Adr_NX90_mtgy_mtgy_op_b110 0xFF0837B8
#define Adr_NX90_mtgy_op_b110      0xFF0837B8
#define DFLT_VAL_NX90_mtgy_op_b110 0x00000000

#define MSK_NX90_mtgy_op_b110_val         0xffffffff
#define SRT_NX90_mtgy_op_b110_val         0
#define DFLT_VAL_NX90_mtgy_op_b110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b110': */
#define MSK_USED_BITS_NX90_mtgy_op_b110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b111 */
/* => MWMM operand B register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b111  0x000017BC
#define Adr_NX90_mtgy_mtgy_op_b111 0xFF0837BC
#define Adr_NX90_mtgy_op_b111      0xFF0837BC
#define DFLT_VAL_NX90_mtgy_op_b111 0x00000000

#define MSK_NX90_mtgy_op_b111_val         0xffffffff
#define SRT_NX90_mtgy_op_b111_val         0
#define DFLT_VAL_NX90_mtgy_op_b111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b111': */
#define MSK_USED_BITS_NX90_mtgy_op_b111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b112 */
/* => MWMM operand B register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b112  0x000017C0
#define Adr_NX90_mtgy_mtgy_op_b112 0xFF0837C0
#define Adr_NX90_mtgy_op_b112      0xFF0837C0
#define DFLT_VAL_NX90_mtgy_op_b112 0x00000000

#define MSK_NX90_mtgy_op_b112_val         0xffffffff
#define SRT_NX90_mtgy_op_b112_val         0
#define DFLT_VAL_NX90_mtgy_op_b112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b112': */
#define MSK_USED_BITS_NX90_mtgy_op_b112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b113 */
/* => MWMM operand B register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b113  0x000017C4
#define Adr_NX90_mtgy_mtgy_op_b113 0xFF0837C4
#define Adr_NX90_mtgy_op_b113      0xFF0837C4
#define DFLT_VAL_NX90_mtgy_op_b113 0x00000000

#define MSK_NX90_mtgy_op_b113_val         0xffffffff
#define SRT_NX90_mtgy_op_b113_val         0
#define DFLT_VAL_NX90_mtgy_op_b113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b113': */
#define MSK_USED_BITS_NX90_mtgy_op_b113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b114 */
/* => MWMM operand B register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b114  0x000017C8
#define Adr_NX90_mtgy_mtgy_op_b114 0xFF0837C8
#define Adr_NX90_mtgy_op_b114      0xFF0837C8
#define DFLT_VAL_NX90_mtgy_op_b114 0x00000000

#define MSK_NX90_mtgy_op_b114_val         0xffffffff
#define SRT_NX90_mtgy_op_b114_val         0
#define DFLT_VAL_NX90_mtgy_op_b114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b114': */
#define MSK_USED_BITS_NX90_mtgy_op_b114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b115 */
/* => MWMM operand B register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b115  0x000017CC
#define Adr_NX90_mtgy_mtgy_op_b115 0xFF0837CC
#define Adr_NX90_mtgy_op_b115      0xFF0837CC
#define DFLT_VAL_NX90_mtgy_op_b115 0x00000000

#define MSK_NX90_mtgy_op_b115_val         0xffffffff
#define SRT_NX90_mtgy_op_b115_val         0
#define DFLT_VAL_NX90_mtgy_op_b115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b115': */
#define MSK_USED_BITS_NX90_mtgy_op_b115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b116 */
/* => MWMM operand B register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b116  0x000017D0
#define Adr_NX90_mtgy_mtgy_op_b116 0xFF0837D0
#define Adr_NX90_mtgy_op_b116      0xFF0837D0
#define DFLT_VAL_NX90_mtgy_op_b116 0x00000000

#define MSK_NX90_mtgy_op_b116_val         0xffffffff
#define SRT_NX90_mtgy_op_b116_val         0
#define DFLT_VAL_NX90_mtgy_op_b116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b116': */
#define MSK_USED_BITS_NX90_mtgy_op_b116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b117 */
/* => MWMM operand B register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b117  0x000017D4
#define Adr_NX90_mtgy_mtgy_op_b117 0xFF0837D4
#define Adr_NX90_mtgy_op_b117      0xFF0837D4
#define DFLT_VAL_NX90_mtgy_op_b117 0x00000000

#define MSK_NX90_mtgy_op_b117_val         0xffffffff
#define SRT_NX90_mtgy_op_b117_val         0
#define DFLT_VAL_NX90_mtgy_op_b117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b117': */
#define MSK_USED_BITS_NX90_mtgy_op_b117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b118 */
/* => MWMM operand B register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b118  0x000017D8
#define Adr_NX90_mtgy_mtgy_op_b118 0xFF0837D8
#define Adr_NX90_mtgy_op_b118      0xFF0837D8
#define DFLT_VAL_NX90_mtgy_op_b118 0x00000000

#define MSK_NX90_mtgy_op_b118_val         0xffffffff
#define SRT_NX90_mtgy_op_b118_val         0
#define DFLT_VAL_NX90_mtgy_op_b118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b118': */
#define MSK_USED_BITS_NX90_mtgy_op_b118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b119 */
/* => MWMM operand B register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b119  0x000017DC
#define Adr_NX90_mtgy_mtgy_op_b119 0xFF0837DC
#define Adr_NX90_mtgy_op_b119      0xFF0837DC
#define DFLT_VAL_NX90_mtgy_op_b119 0x00000000

#define MSK_NX90_mtgy_op_b119_val         0xffffffff
#define SRT_NX90_mtgy_op_b119_val         0
#define DFLT_VAL_NX90_mtgy_op_b119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b119': */
#define MSK_USED_BITS_NX90_mtgy_op_b119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b120 */
/* => MWMM operand B register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b120  0x000017E0
#define Adr_NX90_mtgy_mtgy_op_b120 0xFF0837E0
#define Adr_NX90_mtgy_op_b120      0xFF0837E0
#define DFLT_VAL_NX90_mtgy_op_b120 0x00000000

#define MSK_NX90_mtgy_op_b120_val         0xffffffff
#define SRT_NX90_mtgy_op_b120_val         0
#define DFLT_VAL_NX90_mtgy_op_b120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b120': */
#define MSK_USED_BITS_NX90_mtgy_op_b120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b121 */
/* => MWMM operand B register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b121  0x000017E4
#define Adr_NX90_mtgy_mtgy_op_b121 0xFF0837E4
#define Adr_NX90_mtgy_op_b121      0xFF0837E4
#define DFLT_VAL_NX90_mtgy_op_b121 0x00000000

#define MSK_NX90_mtgy_op_b121_val         0xffffffff
#define SRT_NX90_mtgy_op_b121_val         0
#define DFLT_VAL_NX90_mtgy_op_b121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b121': */
#define MSK_USED_BITS_NX90_mtgy_op_b121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b122 */
/* => MWMM operand B register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b122  0x000017E8
#define Adr_NX90_mtgy_mtgy_op_b122 0xFF0837E8
#define Adr_NX90_mtgy_op_b122      0xFF0837E8
#define DFLT_VAL_NX90_mtgy_op_b122 0x00000000

#define MSK_NX90_mtgy_op_b122_val         0xffffffff
#define SRT_NX90_mtgy_op_b122_val         0
#define DFLT_VAL_NX90_mtgy_op_b122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b122': */
#define MSK_USED_BITS_NX90_mtgy_op_b122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b123 */
/* => MWMM operand B register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b123  0x000017EC
#define Adr_NX90_mtgy_mtgy_op_b123 0xFF0837EC
#define Adr_NX90_mtgy_op_b123      0xFF0837EC
#define DFLT_VAL_NX90_mtgy_op_b123 0x00000000

#define MSK_NX90_mtgy_op_b123_val         0xffffffff
#define SRT_NX90_mtgy_op_b123_val         0
#define DFLT_VAL_NX90_mtgy_op_b123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b123': */
#define MSK_USED_BITS_NX90_mtgy_op_b123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b124 */
/* => MWMM operand B register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b124  0x000017F0
#define Adr_NX90_mtgy_mtgy_op_b124 0xFF0837F0
#define Adr_NX90_mtgy_op_b124      0xFF0837F0
#define DFLT_VAL_NX90_mtgy_op_b124 0x00000000

#define MSK_NX90_mtgy_op_b124_val         0xffffffff
#define SRT_NX90_mtgy_op_b124_val         0
#define DFLT_VAL_NX90_mtgy_op_b124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b124': */
#define MSK_USED_BITS_NX90_mtgy_op_b124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b125 */
/* => MWMM operand B register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b125  0x000017F4
#define Adr_NX90_mtgy_mtgy_op_b125 0xFF0837F4
#define Adr_NX90_mtgy_op_b125      0xFF0837F4
#define DFLT_VAL_NX90_mtgy_op_b125 0x00000000

#define MSK_NX90_mtgy_op_b125_val         0xffffffff
#define SRT_NX90_mtgy_op_b125_val         0
#define DFLT_VAL_NX90_mtgy_op_b125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b125': */
#define MSK_USED_BITS_NX90_mtgy_op_b125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b126 */
/* => MWMM operand B register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b126  0x000017F8
#define Adr_NX90_mtgy_mtgy_op_b126 0xFF0837F8
#define Adr_NX90_mtgy_op_b126      0xFF0837F8
#define DFLT_VAL_NX90_mtgy_op_b126 0x00000000

#define MSK_NX90_mtgy_op_b126_val         0xffffffff
#define SRT_NX90_mtgy_op_b126_val         0
#define DFLT_VAL_NX90_mtgy_op_b126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b126': */
#define MSK_USED_BITS_NX90_mtgy_op_b126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_b127 */
/* => MWMM operand B register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_b127  0x000017FC
#define Adr_NX90_mtgy_mtgy_op_b127 0xFF0837FC
#define Adr_NX90_mtgy_op_b127      0xFF0837FC
#define DFLT_VAL_NX90_mtgy_op_b127 0x00000000

#define MSK_NX90_mtgy_op_b127_val         0xffffffff
#define SRT_NX90_mtgy_op_b127_val         0
#define DFLT_VAL_NX90_mtgy_op_b127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_b127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_b127': */
#define MSK_USED_BITS_NX90_mtgy_op_b127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a0 */
/* => MWMM operand A register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a0  0x00001800
#define Adr_NX90_mtgy_mtgy_op_a0 0xFF083800
#define Adr_NX90_mtgy_op_a0      0xFF083800
#define DFLT_VAL_NX90_mtgy_op_a0 0x00000000

#define MSK_NX90_mtgy_op_a0_val         0xffffffff
#define SRT_NX90_mtgy_op_a0_val         0
#define DFLT_VAL_NX90_mtgy_op_a0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a0': */
#define MSK_USED_BITS_NX90_mtgy_op_a0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a1 */
/* => MWMM operand A register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a1  0x00001804
#define Adr_NX90_mtgy_mtgy_op_a1 0xFF083804
#define Adr_NX90_mtgy_op_a1      0xFF083804
#define DFLT_VAL_NX90_mtgy_op_a1 0x00000000

#define MSK_NX90_mtgy_op_a1_val         0xffffffff
#define SRT_NX90_mtgy_op_a1_val         0
#define DFLT_VAL_NX90_mtgy_op_a1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a1': */
#define MSK_USED_BITS_NX90_mtgy_op_a1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a2 */
/* => MWMM operand A register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a2  0x00001808
#define Adr_NX90_mtgy_mtgy_op_a2 0xFF083808
#define Adr_NX90_mtgy_op_a2      0xFF083808
#define DFLT_VAL_NX90_mtgy_op_a2 0x00000000

#define MSK_NX90_mtgy_op_a2_val         0xffffffff
#define SRT_NX90_mtgy_op_a2_val         0
#define DFLT_VAL_NX90_mtgy_op_a2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a2': */
#define MSK_USED_BITS_NX90_mtgy_op_a2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a3 */
/* => MWMM operand A register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a3  0x0000180C
#define Adr_NX90_mtgy_mtgy_op_a3 0xFF08380C
#define Adr_NX90_mtgy_op_a3      0xFF08380C
#define DFLT_VAL_NX90_mtgy_op_a3 0x00000000

#define MSK_NX90_mtgy_op_a3_val         0xffffffff
#define SRT_NX90_mtgy_op_a3_val         0
#define DFLT_VAL_NX90_mtgy_op_a3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a3': */
#define MSK_USED_BITS_NX90_mtgy_op_a3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a4 */
/* => MWMM operand A register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a4  0x00001810
#define Adr_NX90_mtgy_mtgy_op_a4 0xFF083810
#define Adr_NX90_mtgy_op_a4      0xFF083810
#define DFLT_VAL_NX90_mtgy_op_a4 0x00000000

#define MSK_NX90_mtgy_op_a4_val         0xffffffff
#define SRT_NX90_mtgy_op_a4_val         0
#define DFLT_VAL_NX90_mtgy_op_a4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a4': */
#define MSK_USED_BITS_NX90_mtgy_op_a4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a5 */
/* => MWMM operand A register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a5  0x00001814
#define Adr_NX90_mtgy_mtgy_op_a5 0xFF083814
#define Adr_NX90_mtgy_op_a5      0xFF083814
#define DFLT_VAL_NX90_mtgy_op_a5 0x00000000

#define MSK_NX90_mtgy_op_a5_val         0xffffffff
#define SRT_NX90_mtgy_op_a5_val         0
#define DFLT_VAL_NX90_mtgy_op_a5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a5': */
#define MSK_USED_BITS_NX90_mtgy_op_a5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a6 */
/* => MWMM operand A register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a6  0x00001818
#define Adr_NX90_mtgy_mtgy_op_a6 0xFF083818
#define Adr_NX90_mtgy_op_a6      0xFF083818
#define DFLT_VAL_NX90_mtgy_op_a6 0x00000000

#define MSK_NX90_mtgy_op_a6_val         0xffffffff
#define SRT_NX90_mtgy_op_a6_val         0
#define DFLT_VAL_NX90_mtgy_op_a6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a6': */
#define MSK_USED_BITS_NX90_mtgy_op_a6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a7 */
/* => MWMM operand A register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a7  0x0000181C
#define Adr_NX90_mtgy_mtgy_op_a7 0xFF08381C
#define Adr_NX90_mtgy_op_a7      0xFF08381C
#define DFLT_VAL_NX90_mtgy_op_a7 0x00000000

#define MSK_NX90_mtgy_op_a7_val         0xffffffff
#define SRT_NX90_mtgy_op_a7_val         0
#define DFLT_VAL_NX90_mtgy_op_a7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a7': */
#define MSK_USED_BITS_NX90_mtgy_op_a7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a8 */
/* => MWMM operand A register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a8  0x00001820
#define Adr_NX90_mtgy_mtgy_op_a8 0xFF083820
#define Adr_NX90_mtgy_op_a8      0xFF083820
#define DFLT_VAL_NX90_mtgy_op_a8 0x00000000

#define MSK_NX90_mtgy_op_a8_val         0xffffffff
#define SRT_NX90_mtgy_op_a8_val         0
#define DFLT_VAL_NX90_mtgy_op_a8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a8': */
#define MSK_USED_BITS_NX90_mtgy_op_a8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a9 */
/* => MWMM operand A register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a9  0x00001824
#define Adr_NX90_mtgy_mtgy_op_a9 0xFF083824
#define Adr_NX90_mtgy_op_a9      0xFF083824
#define DFLT_VAL_NX90_mtgy_op_a9 0x00000000

#define MSK_NX90_mtgy_op_a9_val         0xffffffff
#define SRT_NX90_mtgy_op_a9_val         0
#define DFLT_VAL_NX90_mtgy_op_a9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a9': */
#define MSK_USED_BITS_NX90_mtgy_op_a9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a10 */
/* => MWMM operand A register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a10  0x00001828
#define Adr_NX90_mtgy_mtgy_op_a10 0xFF083828
#define Adr_NX90_mtgy_op_a10      0xFF083828
#define DFLT_VAL_NX90_mtgy_op_a10 0x00000000

#define MSK_NX90_mtgy_op_a10_val         0xffffffff
#define SRT_NX90_mtgy_op_a10_val         0
#define DFLT_VAL_NX90_mtgy_op_a10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a10': */
#define MSK_USED_BITS_NX90_mtgy_op_a10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a11 */
/* => MWMM operand A register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a11  0x0000182C
#define Adr_NX90_mtgy_mtgy_op_a11 0xFF08382C
#define Adr_NX90_mtgy_op_a11      0xFF08382C
#define DFLT_VAL_NX90_mtgy_op_a11 0x00000000

#define MSK_NX90_mtgy_op_a11_val         0xffffffff
#define SRT_NX90_mtgy_op_a11_val         0
#define DFLT_VAL_NX90_mtgy_op_a11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a11': */
#define MSK_USED_BITS_NX90_mtgy_op_a11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a12 */
/* => MWMM operand A register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a12  0x00001830
#define Adr_NX90_mtgy_mtgy_op_a12 0xFF083830
#define Adr_NX90_mtgy_op_a12      0xFF083830
#define DFLT_VAL_NX90_mtgy_op_a12 0x00000000

#define MSK_NX90_mtgy_op_a12_val         0xffffffff
#define SRT_NX90_mtgy_op_a12_val         0
#define DFLT_VAL_NX90_mtgy_op_a12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a12': */
#define MSK_USED_BITS_NX90_mtgy_op_a12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a13 */
/* => MWMM operand A register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a13  0x00001834
#define Adr_NX90_mtgy_mtgy_op_a13 0xFF083834
#define Adr_NX90_mtgy_op_a13      0xFF083834
#define DFLT_VAL_NX90_mtgy_op_a13 0x00000000

#define MSK_NX90_mtgy_op_a13_val         0xffffffff
#define SRT_NX90_mtgy_op_a13_val         0
#define DFLT_VAL_NX90_mtgy_op_a13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a13': */
#define MSK_USED_BITS_NX90_mtgy_op_a13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a14 */
/* => MWMM operand A register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a14  0x00001838
#define Adr_NX90_mtgy_mtgy_op_a14 0xFF083838
#define Adr_NX90_mtgy_op_a14      0xFF083838
#define DFLT_VAL_NX90_mtgy_op_a14 0x00000000

#define MSK_NX90_mtgy_op_a14_val         0xffffffff
#define SRT_NX90_mtgy_op_a14_val         0
#define DFLT_VAL_NX90_mtgy_op_a14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a14': */
#define MSK_USED_BITS_NX90_mtgy_op_a14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a15 */
/* => MWMM operand A register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a15  0x0000183C
#define Adr_NX90_mtgy_mtgy_op_a15 0xFF08383C
#define Adr_NX90_mtgy_op_a15      0xFF08383C
#define DFLT_VAL_NX90_mtgy_op_a15 0x00000000

#define MSK_NX90_mtgy_op_a15_val         0xffffffff
#define SRT_NX90_mtgy_op_a15_val         0
#define DFLT_VAL_NX90_mtgy_op_a15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a15': */
#define MSK_USED_BITS_NX90_mtgy_op_a15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a16 */
/* => MWMM operand A register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a16  0x00001840
#define Adr_NX90_mtgy_mtgy_op_a16 0xFF083840
#define Adr_NX90_mtgy_op_a16      0xFF083840
#define DFLT_VAL_NX90_mtgy_op_a16 0x00000000

#define MSK_NX90_mtgy_op_a16_val         0xffffffff
#define SRT_NX90_mtgy_op_a16_val         0
#define DFLT_VAL_NX90_mtgy_op_a16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a16': */
#define MSK_USED_BITS_NX90_mtgy_op_a16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a17 */
/* => MWMM operand A register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a17  0x00001844
#define Adr_NX90_mtgy_mtgy_op_a17 0xFF083844
#define Adr_NX90_mtgy_op_a17      0xFF083844
#define DFLT_VAL_NX90_mtgy_op_a17 0x00000000

#define MSK_NX90_mtgy_op_a17_val         0xffffffff
#define SRT_NX90_mtgy_op_a17_val         0
#define DFLT_VAL_NX90_mtgy_op_a17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a17': */
#define MSK_USED_BITS_NX90_mtgy_op_a17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a18 */
/* => MWMM operand A register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a18  0x00001848
#define Adr_NX90_mtgy_mtgy_op_a18 0xFF083848
#define Adr_NX90_mtgy_op_a18      0xFF083848
#define DFLT_VAL_NX90_mtgy_op_a18 0x00000000

#define MSK_NX90_mtgy_op_a18_val         0xffffffff
#define SRT_NX90_mtgy_op_a18_val         0
#define DFLT_VAL_NX90_mtgy_op_a18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a18': */
#define MSK_USED_BITS_NX90_mtgy_op_a18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a19 */
/* => MWMM operand A register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a19  0x0000184C
#define Adr_NX90_mtgy_mtgy_op_a19 0xFF08384C
#define Adr_NX90_mtgy_op_a19      0xFF08384C
#define DFLT_VAL_NX90_mtgy_op_a19 0x00000000

#define MSK_NX90_mtgy_op_a19_val         0xffffffff
#define SRT_NX90_mtgy_op_a19_val         0
#define DFLT_VAL_NX90_mtgy_op_a19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a19': */
#define MSK_USED_BITS_NX90_mtgy_op_a19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a20 */
/* => MWMM operand A register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a20  0x00001850
#define Adr_NX90_mtgy_mtgy_op_a20 0xFF083850
#define Adr_NX90_mtgy_op_a20      0xFF083850
#define DFLT_VAL_NX90_mtgy_op_a20 0x00000000

#define MSK_NX90_mtgy_op_a20_val         0xffffffff
#define SRT_NX90_mtgy_op_a20_val         0
#define DFLT_VAL_NX90_mtgy_op_a20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a20': */
#define MSK_USED_BITS_NX90_mtgy_op_a20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a21 */
/* => MWMM operand A register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a21  0x00001854
#define Adr_NX90_mtgy_mtgy_op_a21 0xFF083854
#define Adr_NX90_mtgy_op_a21      0xFF083854
#define DFLT_VAL_NX90_mtgy_op_a21 0x00000000

#define MSK_NX90_mtgy_op_a21_val         0xffffffff
#define SRT_NX90_mtgy_op_a21_val         0
#define DFLT_VAL_NX90_mtgy_op_a21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a21': */
#define MSK_USED_BITS_NX90_mtgy_op_a21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a22 */
/* => MWMM operand A register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a22  0x00001858
#define Adr_NX90_mtgy_mtgy_op_a22 0xFF083858
#define Adr_NX90_mtgy_op_a22      0xFF083858
#define DFLT_VAL_NX90_mtgy_op_a22 0x00000000

#define MSK_NX90_mtgy_op_a22_val         0xffffffff
#define SRT_NX90_mtgy_op_a22_val         0
#define DFLT_VAL_NX90_mtgy_op_a22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a22': */
#define MSK_USED_BITS_NX90_mtgy_op_a22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a23 */
/* => MWMM operand A register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a23  0x0000185C
#define Adr_NX90_mtgy_mtgy_op_a23 0xFF08385C
#define Adr_NX90_mtgy_op_a23      0xFF08385C
#define DFLT_VAL_NX90_mtgy_op_a23 0x00000000

#define MSK_NX90_mtgy_op_a23_val         0xffffffff
#define SRT_NX90_mtgy_op_a23_val         0
#define DFLT_VAL_NX90_mtgy_op_a23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a23': */
#define MSK_USED_BITS_NX90_mtgy_op_a23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a24 */
/* => MWMM operand A register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a24  0x00001860
#define Adr_NX90_mtgy_mtgy_op_a24 0xFF083860
#define Adr_NX90_mtgy_op_a24      0xFF083860
#define DFLT_VAL_NX90_mtgy_op_a24 0x00000000

#define MSK_NX90_mtgy_op_a24_val         0xffffffff
#define SRT_NX90_mtgy_op_a24_val         0
#define DFLT_VAL_NX90_mtgy_op_a24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a24': */
#define MSK_USED_BITS_NX90_mtgy_op_a24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a25 */
/* => MWMM operand A register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a25  0x00001864
#define Adr_NX90_mtgy_mtgy_op_a25 0xFF083864
#define Adr_NX90_mtgy_op_a25      0xFF083864
#define DFLT_VAL_NX90_mtgy_op_a25 0x00000000

#define MSK_NX90_mtgy_op_a25_val         0xffffffff
#define SRT_NX90_mtgy_op_a25_val         0
#define DFLT_VAL_NX90_mtgy_op_a25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a25': */
#define MSK_USED_BITS_NX90_mtgy_op_a25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a26 */
/* => MWMM operand A register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a26  0x00001868
#define Adr_NX90_mtgy_mtgy_op_a26 0xFF083868
#define Adr_NX90_mtgy_op_a26      0xFF083868
#define DFLT_VAL_NX90_mtgy_op_a26 0x00000000

#define MSK_NX90_mtgy_op_a26_val         0xffffffff
#define SRT_NX90_mtgy_op_a26_val         0
#define DFLT_VAL_NX90_mtgy_op_a26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a26': */
#define MSK_USED_BITS_NX90_mtgy_op_a26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a27 */
/* => MWMM operand A register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a27  0x0000186C
#define Adr_NX90_mtgy_mtgy_op_a27 0xFF08386C
#define Adr_NX90_mtgy_op_a27      0xFF08386C
#define DFLT_VAL_NX90_mtgy_op_a27 0x00000000

#define MSK_NX90_mtgy_op_a27_val         0xffffffff
#define SRT_NX90_mtgy_op_a27_val         0
#define DFLT_VAL_NX90_mtgy_op_a27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a27': */
#define MSK_USED_BITS_NX90_mtgy_op_a27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a28 */
/* => MWMM operand A register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a28  0x00001870
#define Adr_NX90_mtgy_mtgy_op_a28 0xFF083870
#define Adr_NX90_mtgy_op_a28      0xFF083870
#define DFLT_VAL_NX90_mtgy_op_a28 0x00000000

#define MSK_NX90_mtgy_op_a28_val         0xffffffff
#define SRT_NX90_mtgy_op_a28_val         0
#define DFLT_VAL_NX90_mtgy_op_a28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a28': */
#define MSK_USED_BITS_NX90_mtgy_op_a28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a29 */
/* => MWMM operand A register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a29  0x00001874
#define Adr_NX90_mtgy_mtgy_op_a29 0xFF083874
#define Adr_NX90_mtgy_op_a29      0xFF083874
#define DFLT_VAL_NX90_mtgy_op_a29 0x00000000

#define MSK_NX90_mtgy_op_a29_val         0xffffffff
#define SRT_NX90_mtgy_op_a29_val         0
#define DFLT_VAL_NX90_mtgy_op_a29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a29': */
#define MSK_USED_BITS_NX90_mtgy_op_a29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a30 */
/* => MWMM operand A register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a30  0x00001878
#define Adr_NX90_mtgy_mtgy_op_a30 0xFF083878
#define Adr_NX90_mtgy_op_a30      0xFF083878
#define DFLT_VAL_NX90_mtgy_op_a30 0x00000000

#define MSK_NX90_mtgy_op_a30_val         0xffffffff
#define SRT_NX90_mtgy_op_a30_val         0
#define DFLT_VAL_NX90_mtgy_op_a30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a30': */
#define MSK_USED_BITS_NX90_mtgy_op_a30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a31 */
/* => MWMM operand A register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a31  0x0000187C
#define Adr_NX90_mtgy_mtgy_op_a31 0xFF08387C
#define Adr_NX90_mtgy_op_a31      0xFF08387C
#define DFLT_VAL_NX90_mtgy_op_a31 0x00000000

#define MSK_NX90_mtgy_op_a31_val         0xffffffff
#define SRT_NX90_mtgy_op_a31_val         0
#define DFLT_VAL_NX90_mtgy_op_a31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a31': */
#define MSK_USED_BITS_NX90_mtgy_op_a31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a32 */
/* => MWMM operand A register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a32  0x00001880
#define Adr_NX90_mtgy_mtgy_op_a32 0xFF083880
#define Adr_NX90_mtgy_op_a32      0xFF083880
#define DFLT_VAL_NX90_mtgy_op_a32 0x00000000

#define MSK_NX90_mtgy_op_a32_val         0xffffffff
#define SRT_NX90_mtgy_op_a32_val         0
#define DFLT_VAL_NX90_mtgy_op_a32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a32': */
#define MSK_USED_BITS_NX90_mtgy_op_a32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a33 */
/* => MWMM operand A register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a33  0x00001884
#define Adr_NX90_mtgy_mtgy_op_a33 0xFF083884
#define Adr_NX90_mtgy_op_a33      0xFF083884
#define DFLT_VAL_NX90_mtgy_op_a33 0x00000000

#define MSK_NX90_mtgy_op_a33_val         0xffffffff
#define SRT_NX90_mtgy_op_a33_val         0
#define DFLT_VAL_NX90_mtgy_op_a33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a33': */
#define MSK_USED_BITS_NX90_mtgy_op_a33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a34 */
/* => MWMM operand A register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a34  0x00001888
#define Adr_NX90_mtgy_mtgy_op_a34 0xFF083888
#define Adr_NX90_mtgy_op_a34      0xFF083888
#define DFLT_VAL_NX90_mtgy_op_a34 0x00000000

#define MSK_NX90_mtgy_op_a34_val         0xffffffff
#define SRT_NX90_mtgy_op_a34_val         0
#define DFLT_VAL_NX90_mtgy_op_a34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a34': */
#define MSK_USED_BITS_NX90_mtgy_op_a34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a35 */
/* => MWMM operand A register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a35  0x0000188C
#define Adr_NX90_mtgy_mtgy_op_a35 0xFF08388C
#define Adr_NX90_mtgy_op_a35      0xFF08388C
#define DFLT_VAL_NX90_mtgy_op_a35 0x00000000

#define MSK_NX90_mtgy_op_a35_val         0xffffffff
#define SRT_NX90_mtgy_op_a35_val         0
#define DFLT_VAL_NX90_mtgy_op_a35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a35': */
#define MSK_USED_BITS_NX90_mtgy_op_a35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a36 */
/* => MWMM operand A register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a36  0x00001890
#define Adr_NX90_mtgy_mtgy_op_a36 0xFF083890
#define Adr_NX90_mtgy_op_a36      0xFF083890
#define DFLT_VAL_NX90_mtgy_op_a36 0x00000000

#define MSK_NX90_mtgy_op_a36_val         0xffffffff
#define SRT_NX90_mtgy_op_a36_val         0
#define DFLT_VAL_NX90_mtgy_op_a36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a36': */
#define MSK_USED_BITS_NX90_mtgy_op_a36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a37 */
/* => MWMM operand A register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a37  0x00001894
#define Adr_NX90_mtgy_mtgy_op_a37 0xFF083894
#define Adr_NX90_mtgy_op_a37      0xFF083894
#define DFLT_VAL_NX90_mtgy_op_a37 0x00000000

#define MSK_NX90_mtgy_op_a37_val         0xffffffff
#define SRT_NX90_mtgy_op_a37_val         0
#define DFLT_VAL_NX90_mtgy_op_a37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a37': */
#define MSK_USED_BITS_NX90_mtgy_op_a37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a38 */
/* => MWMM operand A register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a38  0x00001898
#define Adr_NX90_mtgy_mtgy_op_a38 0xFF083898
#define Adr_NX90_mtgy_op_a38      0xFF083898
#define DFLT_VAL_NX90_mtgy_op_a38 0x00000000

#define MSK_NX90_mtgy_op_a38_val         0xffffffff
#define SRT_NX90_mtgy_op_a38_val         0
#define DFLT_VAL_NX90_mtgy_op_a38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a38': */
#define MSK_USED_BITS_NX90_mtgy_op_a38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a39 */
/* => MWMM operand A register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a39  0x0000189C
#define Adr_NX90_mtgy_mtgy_op_a39 0xFF08389C
#define Adr_NX90_mtgy_op_a39      0xFF08389C
#define DFLT_VAL_NX90_mtgy_op_a39 0x00000000

#define MSK_NX90_mtgy_op_a39_val         0xffffffff
#define SRT_NX90_mtgy_op_a39_val         0
#define DFLT_VAL_NX90_mtgy_op_a39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a39': */
#define MSK_USED_BITS_NX90_mtgy_op_a39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a40 */
/* => MWMM operand A register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a40  0x000018A0
#define Adr_NX90_mtgy_mtgy_op_a40 0xFF0838A0
#define Adr_NX90_mtgy_op_a40      0xFF0838A0
#define DFLT_VAL_NX90_mtgy_op_a40 0x00000000

#define MSK_NX90_mtgy_op_a40_val         0xffffffff
#define SRT_NX90_mtgy_op_a40_val         0
#define DFLT_VAL_NX90_mtgy_op_a40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a40': */
#define MSK_USED_BITS_NX90_mtgy_op_a40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a41 */
/* => MWMM operand A register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a41  0x000018A4
#define Adr_NX90_mtgy_mtgy_op_a41 0xFF0838A4
#define Adr_NX90_mtgy_op_a41      0xFF0838A4
#define DFLT_VAL_NX90_mtgy_op_a41 0x00000000

#define MSK_NX90_mtgy_op_a41_val         0xffffffff
#define SRT_NX90_mtgy_op_a41_val         0
#define DFLT_VAL_NX90_mtgy_op_a41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a41': */
#define MSK_USED_BITS_NX90_mtgy_op_a41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a42 */
/* => MWMM operand A register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a42  0x000018A8
#define Adr_NX90_mtgy_mtgy_op_a42 0xFF0838A8
#define Adr_NX90_mtgy_op_a42      0xFF0838A8
#define DFLT_VAL_NX90_mtgy_op_a42 0x00000000

#define MSK_NX90_mtgy_op_a42_val         0xffffffff
#define SRT_NX90_mtgy_op_a42_val         0
#define DFLT_VAL_NX90_mtgy_op_a42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a42': */
#define MSK_USED_BITS_NX90_mtgy_op_a42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a43 */
/* => MWMM operand A register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a43  0x000018AC
#define Adr_NX90_mtgy_mtgy_op_a43 0xFF0838AC
#define Adr_NX90_mtgy_op_a43      0xFF0838AC
#define DFLT_VAL_NX90_mtgy_op_a43 0x00000000

#define MSK_NX90_mtgy_op_a43_val         0xffffffff
#define SRT_NX90_mtgy_op_a43_val         0
#define DFLT_VAL_NX90_mtgy_op_a43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a43': */
#define MSK_USED_BITS_NX90_mtgy_op_a43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a44 */
/* => MWMM operand A register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a44  0x000018B0
#define Adr_NX90_mtgy_mtgy_op_a44 0xFF0838B0
#define Adr_NX90_mtgy_op_a44      0xFF0838B0
#define DFLT_VAL_NX90_mtgy_op_a44 0x00000000

#define MSK_NX90_mtgy_op_a44_val         0xffffffff
#define SRT_NX90_mtgy_op_a44_val         0
#define DFLT_VAL_NX90_mtgy_op_a44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a44': */
#define MSK_USED_BITS_NX90_mtgy_op_a44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a45 */
/* => MWMM operand A register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a45  0x000018B4
#define Adr_NX90_mtgy_mtgy_op_a45 0xFF0838B4
#define Adr_NX90_mtgy_op_a45      0xFF0838B4
#define DFLT_VAL_NX90_mtgy_op_a45 0x00000000

#define MSK_NX90_mtgy_op_a45_val         0xffffffff
#define SRT_NX90_mtgy_op_a45_val         0
#define DFLT_VAL_NX90_mtgy_op_a45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a45': */
#define MSK_USED_BITS_NX90_mtgy_op_a45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a46 */
/* => MWMM operand A register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a46  0x000018B8
#define Adr_NX90_mtgy_mtgy_op_a46 0xFF0838B8
#define Adr_NX90_mtgy_op_a46      0xFF0838B8
#define DFLT_VAL_NX90_mtgy_op_a46 0x00000000

#define MSK_NX90_mtgy_op_a46_val         0xffffffff
#define SRT_NX90_mtgy_op_a46_val         0
#define DFLT_VAL_NX90_mtgy_op_a46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a46': */
#define MSK_USED_BITS_NX90_mtgy_op_a46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a47 */
/* => MWMM operand A register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a47  0x000018BC
#define Adr_NX90_mtgy_mtgy_op_a47 0xFF0838BC
#define Adr_NX90_mtgy_op_a47      0xFF0838BC
#define DFLT_VAL_NX90_mtgy_op_a47 0x00000000

#define MSK_NX90_mtgy_op_a47_val         0xffffffff
#define SRT_NX90_mtgy_op_a47_val         0
#define DFLT_VAL_NX90_mtgy_op_a47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a47': */
#define MSK_USED_BITS_NX90_mtgy_op_a47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a48 */
/* => MWMM operand A register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a48  0x000018C0
#define Adr_NX90_mtgy_mtgy_op_a48 0xFF0838C0
#define Adr_NX90_mtgy_op_a48      0xFF0838C0
#define DFLT_VAL_NX90_mtgy_op_a48 0x00000000

#define MSK_NX90_mtgy_op_a48_val         0xffffffff
#define SRT_NX90_mtgy_op_a48_val         0
#define DFLT_VAL_NX90_mtgy_op_a48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a48': */
#define MSK_USED_BITS_NX90_mtgy_op_a48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a49 */
/* => MWMM operand A register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a49  0x000018C4
#define Adr_NX90_mtgy_mtgy_op_a49 0xFF0838C4
#define Adr_NX90_mtgy_op_a49      0xFF0838C4
#define DFLT_VAL_NX90_mtgy_op_a49 0x00000000

#define MSK_NX90_mtgy_op_a49_val         0xffffffff
#define SRT_NX90_mtgy_op_a49_val         0
#define DFLT_VAL_NX90_mtgy_op_a49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a49': */
#define MSK_USED_BITS_NX90_mtgy_op_a49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a50 */
/* => MWMM operand A register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a50  0x000018C8
#define Adr_NX90_mtgy_mtgy_op_a50 0xFF0838C8
#define Adr_NX90_mtgy_op_a50      0xFF0838C8
#define DFLT_VAL_NX90_mtgy_op_a50 0x00000000

#define MSK_NX90_mtgy_op_a50_val         0xffffffff
#define SRT_NX90_mtgy_op_a50_val         0
#define DFLT_VAL_NX90_mtgy_op_a50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a50': */
#define MSK_USED_BITS_NX90_mtgy_op_a50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a51 */
/* => MWMM operand A register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a51  0x000018CC
#define Adr_NX90_mtgy_mtgy_op_a51 0xFF0838CC
#define Adr_NX90_mtgy_op_a51      0xFF0838CC
#define DFLT_VAL_NX90_mtgy_op_a51 0x00000000

#define MSK_NX90_mtgy_op_a51_val         0xffffffff
#define SRT_NX90_mtgy_op_a51_val         0
#define DFLT_VAL_NX90_mtgy_op_a51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a51': */
#define MSK_USED_BITS_NX90_mtgy_op_a51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a52 */
/* => MWMM operand A register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a52  0x000018D0
#define Adr_NX90_mtgy_mtgy_op_a52 0xFF0838D0
#define Adr_NX90_mtgy_op_a52      0xFF0838D0
#define DFLT_VAL_NX90_mtgy_op_a52 0x00000000

#define MSK_NX90_mtgy_op_a52_val         0xffffffff
#define SRT_NX90_mtgy_op_a52_val         0
#define DFLT_VAL_NX90_mtgy_op_a52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a52': */
#define MSK_USED_BITS_NX90_mtgy_op_a52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a53 */
/* => MWMM operand A register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a53  0x000018D4
#define Adr_NX90_mtgy_mtgy_op_a53 0xFF0838D4
#define Adr_NX90_mtgy_op_a53      0xFF0838D4
#define DFLT_VAL_NX90_mtgy_op_a53 0x00000000

#define MSK_NX90_mtgy_op_a53_val         0xffffffff
#define SRT_NX90_mtgy_op_a53_val         0
#define DFLT_VAL_NX90_mtgy_op_a53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a53': */
#define MSK_USED_BITS_NX90_mtgy_op_a53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a54 */
/* => MWMM operand A register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a54  0x000018D8
#define Adr_NX90_mtgy_mtgy_op_a54 0xFF0838D8
#define Adr_NX90_mtgy_op_a54      0xFF0838D8
#define DFLT_VAL_NX90_mtgy_op_a54 0x00000000

#define MSK_NX90_mtgy_op_a54_val         0xffffffff
#define SRT_NX90_mtgy_op_a54_val         0
#define DFLT_VAL_NX90_mtgy_op_a54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a54': */
#define MSK_USED_BITS_NX90_mtgy_op_a54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a55 */
/* => MWMM operand A register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a55  0x000018DC
#define Adr_NX90_mtgy_mtgy_op_a55 0xFF0838DC
#define Adr_NX90_mtgy_op_a55      0xFF0838DC
#define DFLT_VAL_NX90_mtgy_op_a55 0x00000000

#define MSK_NX90_mtgy_op_a55_val         0xffffffff
#define SRT_NX90_mtgy_op_a55_val         0
#define DFLT_VAL_NX90_mtgy_op_a55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a55': */
#define MSK_USED_BITS_NX90_mtgy_op_a55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a56 */
/* => MWMM operand A register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a56  0x000018E0
#define Adr_NX90_mtgy_mtgy_op_a56 0xFF0838E0
#define Adr_NX90_mtgy_op_a56      0xFF0838E0
#define DFLT_VAL_NX90_mtgy_op_a56 0x00000000

#define MSK_NX90_mtgy_op_a56_val         0xffffffff
#define SRT_NX90_mtgy_op_a56_val         0
#define DFLT_VAL_NX90_mtgy_op_a56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a56': */
#define MSK_USED_BITS_NX90_mtgy_op_a56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a57 */
/* => MWMM operand A register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a57  0x000018E4
#define Adr_NX90_mtgy_mtgy_op_a57 0xFF0838E4
#define Adr_NX90_mtgy_op_a57      0xFF0838E4
#define DFLT_VAL_NX90_mtgy_op_a57 0x00000000

#define MSK_NX90_mtgy_op_a57_val         0xffffffff
#define SRT_NX90_mtgy_op_a57_val         0
#define DFLT_VAL_NX90_mtgy_op_a57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a57': */
#define MSK_USED_BITS_NX90_mtgy_op_a57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a58 */
/* => MWMM operand A register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a58  0x000018E8
#define Adr_NX90_mtgy_mtgy_op_a58 0xFF0838E8
#define Adr_NX90_mtgy_op_a58      0xFF0838E8
#define DFLT_VAL_NX90_mtgy_op_a58 0x00000000

#define MSK_NX90_mtgy_op_a58_val         0xffffffff
#define SRT_NX90_mtgy_op_a58_val         0
#define DFLT_VAL_NX90_mtgy_op_a58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a58': */
#define MSK_USED_BITS_NX90_mtgy_op_a58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a59 */
/* => MWMM operand A register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a59  0x000018EC
#define Adr_NX90_mtgy_mtgy_op_a59 0xFF0838EC
#define Adr_NX90_mtgy_op_a59      0xFF0838EC
#define DFLT_VAL_NX90_mtgy_op_a59 0x00000000

#define MSK_NX90_mtgy_op_a59_val         0xffffffff
#define SRT_NX90_mtgy_op_a59_val         0
#define DFLT_VAL_NX90_mtgy_op_a59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a59': */
#define MSK_USED_BITS_NX90_mtgy_op_a59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a60 */
/* => MWMM operand A register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a60  0x000018F0
#define Adr_NX90_mtgy_mtgy_op_a60 0xFF0838F0
#define Adr_NX90_mtgy_op_a60      0xFF0838F0
#define DFLT_VAL_NX90_mtgy_op_a60 0x00000000

#define MSK_NX90_mtgy_op_a60_val         0xffffffff
#define SRT_NX90_mtgy_op_a60_val         0
#define DFLT_VAL_NX90_mtgy_op_a60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a60': */
#define MSK_USED_BITS_NX90_mtgy_op_a60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a61 */
/* => MWMM operand A register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a61  0x000018F4
#define Adr_NX90_mtgy_mtgy_op_a61 0xFF0838F4
#define Adr_NX90_mtgy_op_a61      0xFF0838F4
#define DFLT_VAL_NX90_mtgy_op_a61 0x00000000

#define MSK_NX90_mtgy_op_a61_val         0xffffffff
#define SRT_NX90_mtgy_op_a61_val         0
#define DFLT_VAL_NX90_mtgy_op_a61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a61': */
#define MSK_USED_BITS_NX90_mtgy_op_a61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a62 */
/* => MWMM operand A register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a62  0x000018F8
#define Adr_NX90_mtgy_mtgy_op_a62 0xFF0838F8
#define Adr_NX90_mtgy_op_a62      0xFF0838F8
#define DFLT_VAL_NX90_mtgy_op_a62 0x00000000

#define MSK_NX90_mtgy_op_a62_val         0xffffffff
#define SRT_NX90_mtgy_op_a62_val         0
#define DFLT_VAL_NX90_mtgy_op_a62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a62': */
#define MSK_USED_BITS_NX90_mtgy_op_a62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a63 */
/* => MWMM operand A register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a63  0x000018FC
#define Adr_NX90_mtgy_mtgy_op_a63 0xFF0838FC
#define Adr_NX90_mtgy_op_a63      0xFF0838FC
#define DFLT_VAL_NX90_mtgy_op_a63 0x00000000

#define MSK_NX90_mtgy_op_a63_val         0xffffffff
#define SRT_NX90_mtgy_op_a63_val         0
#define DFLT_VAL_NX90_mtgy_op_a63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a63': */
#define MSK_USED_BITS_NX90_mtgy_op_a63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a64 */
/* => MWMM operand A register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a64  0x00001900
#define Adr_NX90_mtgy_mtgy_op_a64 0xFF083900
#define Adr_NX90_mtgy_op_a64      0xFF083900
#define DFLT_VAL_NX90_mtgy_op_a64 0x00000000

#define MSK_NX90_mtgy_op_a64_val         0xffffffff
#define SRT_NX90_mtgy_op_a64_val         0
#define DFLT_VAL_NX90_mtgy_op_a64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a64': */
#define MSK_USED_BITS_NX90_mtgy_op_a64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a65 */
/* => MWMM operand A register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a65  0x00001904
#define Adr_NX90_mtgy_mtgy_op_a65 0xFF083904
#define Adr_NX90_mtgy_op_a65      0xFF083904
#define DFLT_VAL_NX90_mtgy_op_a65 0x00000000

#define MSK_NX90_mtgy_op_a65_val         0xffffffff
#define SRT_NX90_mtgy_op_a65_val         0
#define DFLT_VAL_NX90_mtgy_op_a65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a65': */
#define MSK_USED_BITS_NX90_mtgy_op_a65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a66 */
/* => MWMM operand A register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a66  0x00001908
#define Adr_NX90_mtgy_mtgy_op_a66 0xFF083908
#define Adr_NX90_mtgy_op_a66      0xFF083908
#define DFLT_VAL_NX90_mtgy_op_a66 0x00000000

#define MSK_NX90_mtgy_op_a66_val         0xffffffff
#define SRT_NX90_mtgy_op_a66_val         0
#define DFLT_VAL_NX90_mtgy_op_a66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a66': */
#define MSK_USED_BITS_NX90_mtgy_op_a66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a67 */
/* => MWMM operand A register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a67  0x0000190C
#define Adr_NX90_mtgy_mtgy_op_a67 0xFF08390C
#define Adr_NX90_mtgy_op_a67      0xFF08390C
#define DFLT_VAL_NX90_mtgy_op_a67 0x00000000

#define MSK_NX90_mtgy_op_a67_val         0xffffffff
#define SRT_NX90_mtgy_op_a67_val         0
#define DFLT_VAL_NX90_mtgy_op_a67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a67': */
#define MSK_USED_BITS_NX90_mtgy_op_a67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a68 */
/* => MWMM operand A register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a68  0x00001910
#define Adr_NX90_mtgy_mtgy_op_a68 0xFF083910
#define Adr_NX90_mtgy_op_a68      0xFF083910
#define DFLT_VAL_NX90_mtgy_op_a68 0x00000000

#define MSK_NX90_mtgy_op_a68_val         0xffffffff
#define SRT_NX90_mtgy_op_a68_val         0
#define DFLT_VAL_NX90_mtgy_op_a68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a68': */
#define MSK_USED_BITS_NX90_mtgy_op_a68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a69 */
/* => MWMM operand A register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a69  0x00001914
#define Adr_NX90_mtgy_mtgy_op_a69 0xFF083914
#define Adr_NX90_mtgy_op_a69      0xFF083914
#define DFLT_VAL_NX90_mtgy_op_a69 0x00000000

#define MSK_NX90_mtgy_op_a69_val         0xffffffff
#define SRT_NX90_mtgy_op_a69_val         0
#define DFLT_VAL_NX90_mtgy_op_a69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a69': */
#define MSK_USED_BITS_NX90_mtgy_op_a69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a70 */
/* => MWMM operand A register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a70  0x00001918
#define Adr_NX90_mtgy_mtgy_op_a70 0xFF083918
#define Adr_NX90_mtgy_op_a70      0xFF083918
#define DFLT_VAL_NX90_mtgy_op_a70 0x00000000

#define MSK_NX90_mtgy_op_a70_val         0xffffffff
#define SRT_NX90_mtgy_op_a70_val         0
#define DFLT_VAL_NX90_mtgy_op_a70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a70': */
#define MSK_USED_BITS_NX90_mtgy_op_a70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a71 */
/* => MWMM operand A register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a71  0x0000191C
#define Adr_NX90_mtgy_mtgy_op_a71 0xFF08391C
#define Adr_NX90_mtgy_op_a71      0xFF08391C
#define DFLT_VAL_NX90_mtgy_op_a71 0x00000000

#define MSK_NX90_mtgy_op_a71_val         0xffffffff
#define SRT_NX90_mtgy_op_a71_val         0
#define DFLT_VAL_NX90_mtgy_op_a71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a71': */
#define MSK_USED_BITS_NX90_mtgy_op_a71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a72 */
/* => MWMM operand A register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a72  0x00001920
#define Adr_NX90_mtgy_mtgy_op_a72 0xFF083920
#define Adr_NX90_mtgy_op_a72      0xFF083920
#define DFLT_VAL_NX90_mtgy_op_a72 0x00000000

#define MSK_NX90_mtgy_op_a72_val         0xffffffff
#define SRT_NX90_mtgy_op_a72_val         0
#define DFLT_VAL_NX90_mtgy_op_a72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a72': */
#define MSK_USED_BITS_NX90_mtgy_op_a72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a73 */
/* => MWMM operand A register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a73  0x00001924
#define Adr_NX90_mtgy_mtgy_op_a73 0xFF083924
#define Adr_NX90_mtgy_op_a73      0xFF083924
#define DFLT_VAL_NX90_mtgy_op_a73 0x00000000

#define MSK_NX90_mtgy_op_a73_val         0xffffffff
#define SRT_NX90_mtgy_op_a73_val         0
#define DFLT_VAL_NX90_mtgy_op_a73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a73': */
#define MSK_USED_BITS_NX90_mtgy_op_a73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a74 */
/* => MWMM operand A register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a74  0x00001928
#define Adr_NX90_mtgy_mtgy_op_a74 0xFF083928
#define Adr_NX90_mtgy_op_a74      0xFF083928
#define DFLT_VAL_NX90_mtgy_op_a74 0x00000000

#define MSK_NX90_mtgy_op_a74_val         0xffffffff
#define SRT_NX90_mtgy_op_a74_val         0
#define DFLT_VAL_NX90_mtgy_op_a74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a74': */
#define MSK_USED_BITS_NX90_mtgy_op_a74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a75 */
/* => MWMM operand A register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a75  0x0000192C
#define Adr_NX90_mtgy_mtgy_op_a75 0xFF08392C
#define Adr_NX90_mtgy_op_a75      0xFF08392C
#define DFLT_VAL_NX90_mtgy_op_a75 0x00000000

#define MSK_NX90_mtgy_op_a75_val         0xffffffff
#define SRT_NX90_mtgy_op_a75_val         0
#define DFLT_VAL_NX90_mtgy_op_a75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a75': */
#define MSK_USED_BITS_NX90_mtgy_op_a75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a76 */
/* => MWMM operand A register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a76  0x00001930
#define Adr_NX90_mtgy_mtgy_op_a76 0xFF083930
#define Adr_NX90_mtgy_op_a76      0xFF083930
#define DFLT_VAL_NX90_mtgy_op_a76 0x00000000

#define MSK_NX90_mtgy_op_a76_val         0xffffffff
#define SRT_NX90_mtgy_op_a76_val         0
#define DFLT_VAL_NX90_mtgy_op_a76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a76': */
#define MSK_USED_BITS_NX90_mtgy_op_a76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a77 */
/* => MWMM operand A register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a77  0x00001934
#define Adr_NX90_mtgy_mtgy_op_a77 0xFF083934
#define Adr_NX90_mtgy_op_a77      0xFF083934
#define DFLT_VAL_NX90_mtgy_op_a77 0x00000000

#define MSK_NX90_mtgy_op_a77_val         0xffffffff
#define SRT_NX90_mtgy_op_a77_val         0
#define DFLT_VAL_NX90_mtgy_op_a77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a77': */
#define MSK_USED_BITS_NX90_mtgy_op_a77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a78 */
/* => MWMM operand A register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a78  0x00001938
#define Adr_NX90_mtgy_mtgy_op_a78 0xFF083938
#define Adr_NX90_mtgy_op_a78      0xFF083938
#define DFLT_VAL_NX90_mtgy_op_a78 0x00000000

#define MSK_NX90_mtgy_op_a78_val         0xffffffff
#define SRT_NX90_mtgy_op_a78_val         0
#define DFLT_VAL_NX90_mtgy_op_a78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a78': */
#define MSK_USED_BITS_NX90_mtgy_op_a78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a79 */
/* => MWMM operand A register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a79  0x0000193C
#define Adr_NX90_mtgy_mtgy_op_a79 0xFF08393C
#define Adr_NX90_mtgy_op_a79      0xFF08393C
#define DFLT_VAL_NX90_mtgy_op_a79 0x00000000

#define MSK_NX90_mtgy_op_a79_val         0xffffffff
#define SRT_NX90_mtgy_op_a79_val         0
#define DFLT_VAL_NX90_mtgy_op_a79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a79': */
#define MSK_USED_BITS_NX90_mtgy_op_a79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a80 */
/* => MWMM operand A register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a80  0x00001940
#define Adr_NX90_mtgy_mtgy_op_a80 0xFF083940
#define Adr_NX90_mtgy_op_a80      0xFF083940
#define DFLT_VAL_NX90_mtgy_op_a80 0x00000000

#define MSK_NX90_mtgy_op_a80_val         0xffffffff
#define SRT_NX90_mtgy_op_a80_val         0
#define DFLT_VAL_NX90_mtgy_op_a80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a80': */
#define MSK_USED_BITS_NX90_mtgy_op_a80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a81 */
/* => MWMM operand A register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a81  0x00001944
#define Adr_NX90_mtgy_mtgy_op_a81 0xFF083944
#define Adr_NX90_mtgy_op_a81      0xFF083944
#define DFLT_VAL_NX90_mtgy_op_a81 0x00000000

#define MSK_NX90_mtgy_op_a81_val         0xffffffff
#define SRT_NX90_mtgy_op_a81_val         0
#define DFLT_VAL_NX90_mtgy_op_a81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a81': */
#define MSK_USED_BITS_NX90_mtgy_op_a81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a82 */
/* => MWMM operand A register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a82  0x00001948
#define Adr_NX90_mtgy_mtgy_op_a82 0xFF083948
#define Adr_NX90_mtgy_op_a82      0xFF083948
#define DFLT_VAL_NX90_mtgy_op_a82 0x00000000

#define MSK_NX90_mtgy_op_a82_val         0xffffffff
#define SRT_NX90_mtgy_op_a82_val         0
#define DFLT_VAL_NX90_mtgy_op_a82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a82': */
#define MSK_USED_BITS_NX90_mtgy_op_a82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a83 */
/* => MWMM operand A register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a83  0x0000194C
#define Adr_NX90_mtgy_mtgy_op_a83 0xFF08394C
#define Adr_NX90_mtgy_op_a83      0xFF08394C
#define DFLT_VAL_NX90_mtgy_op_a83 0x00000000

#define MSK_NX90_mtgy_op_a83_val         0xffffffff
#define SRT_NX90_mtgy_op_a83_val         0
#define DFLT_VAL_NX90_mtgy_op_a83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a83': */
#define MSK_USED_BITS_NX90_mtgy_op_a83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a84 */
/* => MWMM operand A register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a84  0x00001950
#define Adr_NX90_mtgy_mtgy_op_a84 0xFF083950
#define Adr_NX90_mtgy_op_a84      0xFF083950
#define DFLT_VAL_NX90_mtgy_op_a84 0x00000000

#define MSK_NX90_mtgy_op_a84_val         0xffffffff
#define SRT_NX90_mtgy_op_a84_val         0
#define DFLT_VAL_NX90_mtgy_op_a84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a84': */
#define MSK_USED_BITS_NX90_mtgy_op_a84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a85 */
/* => MWMM operand A register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a85  0x00001954
#define Adr_NX90_mtgy_mtgy_op_a85 0xFF083954
#define Adr_NX90_mtgy_op_a85      0xFF083954
#define DFLT_VAL_NX90_mtgy_op_a85 0x00000000

#define MSK_NX90_mtgy_op_a85_val         0xffffffff
#define SRT_NX90_mtgy_op_a85_val         0
#define DFLT_VAL_NX90_mtgy_op_a85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a85': */
#define MSK_USED_BITS_NX90_mtgy_op_a85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a86 */
/* => MWMM operand A register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a86  0x00001958
#define Adr_NX90_mtgy_mtgy_op_a86 0xFF083958
#define Adr_NX90_mtgy_op_a86      0xFF083958
#define DFLT_VAL_NX90_mtgy_op_a86 0x00000000

#define MSK_NX90_mtgy_op_a86_val         0xffffffff
#define SRT_NX90_mtgy_op_a86_val         0
#define DFLT_VAL_NX90_mtgy_op_a86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a86': */
#define MSK_USED_BITS_NX90_mtgy_op_a86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a87 */
/* => MWMM operand A register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a87  0x0000195C
#define Adr_NX90_mtgy_mtgy_op_a87 0xFF08395C
#define Adr_NX90_mtgy_op_a87      0xFF08395C
#define DFLT_VAL_NX90_mtgy_op_a87 0x00000000

#define MSK_NX90_mtgy_op_a87_val         0xffffffff
#define SRT_NX90_mtgy_op_a87_val         0
#define DFLT_VAL_NX90_mtgy_op_a87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a87': */
#define MSK_USED_BITS_NX90_mtgy_op_a87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a88 */
/* => MWMM operand A register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a88  0x00001960
#define Adr_NX90_mtgy_mtgy_op_a88 0xFF083960
#define Adr_NX90_mtgy_op_a88      0xFF083960
#define DFLT_VAL_NX90_mtgy_op_a88 0x00000000

#define MSK_NX90_mtgy_op_a88_val         0xffffffff
#define SRT_NX90_mtgy_op_a88_val         0
#define DFLT_VAL_NX90_mtgy_op_a88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a88': */
#define MSK_USED_BITS_NX90_mtgy_op_a88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a89 */
/* => MWMM operand A register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a89  0x00001964
#define Adr_NX90_mtgy_mtgy_op_a89 0xFF083964
#define Adr_NX90_mtgy_op_a89      0xFF083964
#define DFLT_VAL_NX90_mtgy_op_a89 0x00000000

#define MSK_NX90_mtgy_op_a89_val         0xffffffff
#define SRT_NX90_mtgy_op_a89_val         0
#define DFLT_VAL_NX90_mtgy_op_a89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a89': */
#define MSK_USED_BITS_NX90_mtgy_op_a89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a90 */
/* => MWMM operand A register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a90  0x00001968
#define Adr_NX90_mtgy_mtgy_op_a90 0xFF083968
#define Adr_NX90_mtgy_op_a90      0xFF083968
#define DFLT_VAL_NX90_mtgy_op_a90 0x00000000

#define MSK_NX90_mtgy_op_a90_val         0xffffffff
#define SRT_NX90_mtgy_op_a90_val         0
#define DFLT_VAL_NX90_mtgy_op_a90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a90': */
#define MSK_USED_BITS_NX90_mtgy_op_a90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a91 */
/* => MWMM operand A register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a91  0x0000196C
#define Adr_NX90_mtgy_mtgy_op_a91 0xFF08396C
#define Adr_NX90_mtgy_op_a91      0xFF08396C
#define DFLT_VAL_NX90_mtgy_op_a91 0x00000000

#define MSK_NX90_mtgy_op_a91_val         0xffffffff
#define SRT_NX90_mtgy_op_a91_val         0
#define DFLT_VAL_NX90_mtgy_op_a91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a91': */
#define MSK_USED_BITS_NX90_mtgy_op_a91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a92 */
/* => MWMM operand A register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a92  0x00001970
#define Adr_NX90_mtgy_mtgy_op_a92 0xFF083970
#define Adr_NX90_mtgy_op_a92      0xFF083970
#define DFLT_VAL_NX90_mtgy_op_a92 0x00000000

#define MSK_NX90_mtgy_op_a92_val         0xffffffff
#define SRT_NX90_mtgy_op_a92_val         0
#define DFLT_VAL_NX90_mtgy_op_a92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a92': */
#define MSK_USED_BITS_NX90_mtgy_op_a92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a93 */
/* => MWMM operand A register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a93  0x00001974
#define Adr_NX90_mtgy_mtgy_op_a93 0xFF083974
#define Adr_NX90_mtgy_op_a93      0xFF083974
#define DFLT_VAL_NX90_mtgy_op_a93 0x00000000

#define MSK_NX90_mtgy_op_a93_val         0xffffffff
#define SRT_NX90_mtgy_op_a93_val         0
#define DFLT_VAL_NX90_mtgy_op_a93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a93': */
#define MSK_USED_BITS_NX90_mtgy_op_a93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a94 */
/* => MWMM operand A register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a94  0x00001978
#define Adr_NX90_mtgy_mtgy_op_a94 0xFF083978
#define Adr_NX90_mtgy_op_a94      0xFF083978
#define DFLT_VAL_NX90_mtgy_op_a94 0x00000000

#define MSK_NX90_mtgy_op_a94_val         0xffffffff
#define SRT_NX90_mtgy_op_a94_val         0
#define DFLT_VAL_NX90_mtgy_op_a94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a94': */
#define MSK_USED_BITS_NX90_mtgy_op_a94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a95 */
/* => MWMM operand A register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a95  0x0000197C
#define Adr_NX90_mtgy_mtgy_op_a95 0xFF08397C
#define Adr_NX90_mtgy_op_a95      0xFF08397C
#define DFLT_VAL_NX90_mtgy_op_a95 0x00000000

#define MSK_NX90_mtgy_op_a95_val         0xffffffff
#define SRT_NX90_mtgy_op_a95_val         0
#define DFLT_VAL_NX90_mtgy_op_a95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a95': */
#define MSK_USED_BITS_NX90_mtgy_op_a95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a96 */
/* => MWMM operand A register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a96  0x00001980
#define Adr_NX90_mtgy_mtgy_op_a96 0xFF083980
#define Adr_NX90_mtgy_op_a96      0xFF083980
#define DFLT_VAL_NX90_mtgy_op_a96 0x00000000

#define MSK_NX90_mtgy_op_a96_val         0xffffffff
#define SRT_NX90_mtgy_op_a96_val         0
#define DFLT_VAL_NX90_mtgy_op_a96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a96': */
#define MSK_USED_BITS_NX90_mtgy_op_a96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a97 */
/* => MWMM operand A register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a97  0x00001984
#define Adr_NX90_mtgy_mtgy_op_a97 0xFF083984
#define Adr_NX90_mtgy_op_a97      0xFF083984
#define DFLT_VAL_NX90_mtgy_op_a97 0x00000000

#define MSK_NX90_mtgy_op_a97_val         0xffffffff
#define SRT_NX90_mtgy_op_a97_val         0
#define DFLT_VAL_NX90_mtgy_op_a97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a97': */
#define MSK_USED_BITS_NX90_mtgy_op_a97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a98 */
/* => MWMM operand A register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a98  0x00001988
#define Adr_NX90_mtgy_mtgy_op_a98 0xFF083988
#define Adr_NX90_mtgy_op_a98      0xFF083988
#define DFLT_VAL_NX90_mtgy_op_a98 0x00000000

#define MSK_NX90_mtgy_op_a98_val         0xffffffff
#define SRT_NX90_mtgy_op_a98_val         0
#define DFLT_VAL_NX90_mtgy_op_a98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a98': */
#define MSK_USED_BITS_NX90_mtgy_op_a98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a99 */
/* => MWMM operand A register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a99  0x0000198C
#define Adr_NX90_mtgy_mtgy_op_a99 0xFF08398C
#define Adr_NX90_mtgy_op_a99      0xFF08398C
#define DFLT_VAL_NX90_mtgy_op_a99 0x00000000

#define MSK_NX90_mtgy_op_a99_val         0xffffffff
#define SRT_NX90_mtgy_op_a99_val         0
#define DFLT_VAL_NX90_mtgy_op_a99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a99': */
#define MSK_USED_BITS_NX90_mtgy_op_a99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a100 */
/* => MWMM operand A register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a100  0x00001990
#define Adr_NX90_mtgy_mtgy_op_a100 0xFF083990
#define Adr_NX90_mtgy_op_a100      0xFF083990
#define DFLT_VAL_NX90_mtgy_op_a100 0x00000000

#define MSK_NX90_mtgy_op_a100_val         0xffffffff
#define SRT_NX90_mtgy_op_a100_val         0
#define DFLT_VAL_NX90_mtgy_op_a100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a100': */
#define MSK_USED_BITS_NX90_mtgy_op_a100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a101 */
/* => MWMM operand A register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a101  0x00001994
#define Adr_NX90_mtgy_mtgy_op_a101 0xFF083994
#define Adr_NX90_mtgy_op_a101      0xFF083994
#define DFLT_VAL_NX90_mtgy_op_a101 0x00000000

#define MSK_NX90_mtgy_op_a101_val         0xffffffff
#define SRT_NX90_mtgy_op_a101_val         0
#define DFLT_VAL_NX90_mtgy_op_a101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a101': */
#define MSK_USED_BITS_NX90_mtgy_op_a101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a102 */
/* => MWMM operand A register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a102  0x00001998
#define Adr_NX90_mtgy_mtgy_op_a102 0xFF083998
#define Adr_NX90_mtgy_op_a102      0xFF083998
#define DFLT_VAL_NX90_mtgy_op_a102 0x00000000

#define MSK_NX90_mtgy_op_a102_val         0xffffffff
#define SRT_NX90_mtgy_op_a102_val         0
#define DFLT_VAL_NX90_mtgy_op_a102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a102': */
#define MSK_USED_BITS_NX90_mtgy_op_a102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a103 */
/* => MWMM operand A register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a103  0x0000199C
#define Adr_NX90_mtgy_mtgy_op_a103 0xFF08399C
#define Adr_NX90_mtgy_op_a103      0xFF08399C
#define DFLT_VAL_NX90_mtgy_op_a103 0x00000000

#define MSK_NX90_mtgy_op_a103_val         0xffffffff
#define SRT_NX90_mtgy_op_a103_val         0
#define DFLT_VAL_NX90_mtgy_op_a103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a103': */
#define MSK_USED_BITS_NX90_mtgy_op_a103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a104 */
/* => MWMM operand A register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a104  0x000019A0
#define Adr_NX90_mtgy_mtgy_op_a104 0xFF0839A0
#define Adr_NX90_mtgy_op_a104      0xFF0839A0
#define DFLT_VAL_NX90_mtgy_op_a104 0x00000000

#define MSK_NX90_mtgy_op_a104_val         0xffffffff
#define SRT_NX90_mtgy_op_a104_val         0
#define DFLT_VAL_NX90_mtgy_op_a104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a104': */
#define MSK_USED_BITS_NX90_mtgy_op_a104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a105 */
/* => MWMM operand A register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a105  0x000019A4
#define Adr_NX90_mtgy_mtgy_op_a105 0xFF0839A4
#define Adr_NX90_mtgy_op_a105      0xFF0839A4
#define DFLT_VAL_NX90_mtgy_op_a105 0x00000000

#define MSK_NX90_mtgy_op_a105_val         0xffffffff
#define SRT_NX90_mtgy_op_a105_val         0
#define DFLT_VAL_NX90_mtgy_op_a105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a105': */
#define MSK_USED_BITS_NX90_mtgy_op_a105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a106 */
/* => MWMM operand A register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a106  0x000019A8
#define Adr_NX90_mtgy_mtgy_op_a106 0xFF0839A8
#define Adr_NX90_mtgy_op_a106      0xFF0839A8
#define DFLT_VAL_NX90_mtgy_op_a106 0x00000000

#define MSK_NX90_mtgy_op_a106_val         0xffffffff
#define SRT_NX90_mtgy_op_a106_val         0
#define DFLT_VAL_NX90_mtgy_op_a106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a106': */
#define MSK_USED_BITS_NX90_mtgy_op_a106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a107 */
/* => MWMM operand A register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a107  0x000019AC
#define Adr_NX90_mtgy_mtgy_op_a107 0xFF0839AC
#define Adr_NX90_mtgy_op_a107      0xFF0839AC
#define DFLT_VAL_NX90_mtgy_op_a107 0x00000000

#define MSK_NX90_mtgy_op_a107_val         0xffffffff
#define SRT_NX90_mtgy_op_a107_val         0
#define DFLT_VAL_NX90_mtgy_op_a107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a107': */
#define MSK_USED_BITS_NX90_mtgy_op_a107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a108 */
/* => MWMM operand A register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a108  0x000019B0
#define Adr_NX90_mtgy_mtgy_op_a108 0xFF0839B0
#define Adr_NX90_mtgy_op_a108      0xFF0839B0
#define DFLT_VAL_NX90_mtgy_op_a108 0x00000000

#define MSK_NX90_mtgy_op_a108_val         0xffffffff
#define SRT_NX90_mtgy_op_a108_val         0
#define DFLT_VAL_NX90_mtgy_op_a108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a108': */
#define MSK_USED_BITS_NX90_mtgy_op_a108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a109 */
/* => MWMM operand A register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a109  0x000019B4
#define Adr_NX90_mtgy_mtgy_op_a109 0xFF0839B4
#define Adr_NX90_mtgy_op_a109      0xFF0839B4
#define DFLT_VAL_NX90_mtgy_op_a109 0x00000000

#define MSK_NX90_mtgy_op_a109_val         0xffffffff
#define SRT_NX90_mtgy_op_a109_val         0
#define DFLT_VAL_NX90_mtgy_op_a109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a109': */
#define MSK_USED_BITS_NX90_mtgy_op_a109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a110 */
/* => MWMM operand A register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a110  0x000019B8
#define Adr_NX90_mtgy_mtgy_op_a110 0xFF0839B8
#define Adr_NX90_mtgy_op_a110      0xFF0839B8
#define DFLT_VAL_NX90_mtgy_op_a110 0x00000000

#define MSK_NX90_mtgy_op_a110_val         0xffffffff
#define SRT_NX90_mtgy_op_a110_val         0
#define DFLT_VAL_NX90_mtgy_op_a110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a110': */
#define MSK_USED_BITS_NX90_mtgy_op_a110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a111 */
/* => MWMM operand A register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a111  0x000019BC
#define Adr_NX90_mtgy_mtgy_op_a111 0xFF0839BC
#define Adr_NX90_mtgy_op_a111      0xFF0839BC
#define DFLT_VAL_NX90_mtgy_op_a111 0x00000000

#define MSK_NX90_mtgy_op_a111_val         0xffffffff
#define SRT_NX90_mtgy_op_a111_val         0
#define DFLT_VAL_NX90_mtgy_op_a111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a111': */
#define MSK_USED_BITS_NX90_mtgy_op_a111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a112 */
/* => MWMM operand A register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a112  0x000019C0
#define Adr_NX90_mtgy_mtgy_op_a112 0xFF0839C0
#define Adr_NX90_mtgy_op_a112      0xFF0839C0
#define DFLT_VAL_NX90_mtgy_op_a112 0x00000000

#define MSK_NX90_mtgy_op_a112_val         0xffffffff
#define SRT_NX90_mtgy_op_a112_val         0
#define DFLT_VAL_NX90_mtgy_op_a112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a112': */
#define MSK_USED_BITS_NX90_mtgy_op_a112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a113 */
/* => MWMM operand A register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a113  0x000019C4
#define Adr_NX90_mtgy_mtgy_op_a113 0xFF0839C4
#define Adr_NX90_mtgy_op_a113      0xFF0839C4
#define DFLT_VAL_NX90_mtgy_op_a113 0x00000000

#define MSK_NX90_mtgy_op_a113_val         0xffffffff
#define SRT_NX90_mtgy_op_a113_val         0
#define DFLT_VAL_NX90_mtgy_op_a113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a113': */
#define MSK_USED_BITS_NX90_mtgy_op_a113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a114 */
/* => MWMM operand A register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a114  0x000019C8
#define Adr_NX90_mtgy_mtgy_op_a114 0xFF0839C8
#define Adr_NX90_mtgy_op_a114      0xFF0839C8
#define DFLT_VAL_NX90_mtgy_op_a114 0x00000000

#define MSK_NX90_mtgy_op_a114_val         0xffffffff
#define SRT_NX90_mtgy_op_a114_val         0
#define DFLT_VAL_NX90_mtgy_op_a114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a114': */
#define MSK_USED_BITS_NX90_mtgy_op_a114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a115 */
/* => MWMM operand A register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a115  0x000019CC
#define Adr_NX90_mtgy_mtgy_op_a115 0xFF0839CC
#define Adr_NX90_mtgy_op_a115      0xFF0839CC
#define DFLT_VAL_NX90_mtgy_op_a115 0x00000000

#define MSK_NX90_mtgy_op_a115_val         0xffffffff
#define SRT_NX90_mtgy_op_a115_val         0
#define DFLT_VAL_NX90_mtgy_op_a115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a115': */
#define MSK_USED_BITS_NX90_mtgy_op_a115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a116 */
/* => MWMM operand A register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a116  0x000019D0
#define Adr_NX90_mtgy_mtgy_op_a116 0xFF0839D0
#define Adr_NX90_mtgy_op_a116      0xFF0839D0
#define DFLT_VAL_NX90_mtgy_op_a116 0x00000000

#define MSK_NX90_mtgy_op_a116_val         0xffffffff
#define SRT_NX90_mtgy_op_a116_val         0
#define DFLT_VAL_NX90_mtgy_op_a116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a116': */
#define MSK_USED_BITS_NX90_mtgy_op_a116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a117 */
/* => MWMM operand A register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a117  0x000019D4
#define Adr_NX90_mtgy_mtgy_op_a117 0xFF0839D4
#define Adr_NX90_mtgy_op_a117      0xFF0839D4
#define DFLT_VAL_NX90_mtgy_op_a117 0x00000000

#define MSK_NX90_mtgy_op_a117_val         0xffffffff
#define SRT_NX90_mtgy_op_a117_val         0
#define DFLT_VAL_NX90_mtgy_op_a117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a117': */
#define MSK_USED_BITS_NX90_mtgy_op_a117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a118 */
/* => MWMM operand A register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a118  0x000019D8
#define Adr_NX90_mtgy_mtgy_op_a118 0xFF0839D8
#define Adr_NX90_mtgy_op_a118      0xFF0839D8
#define DFLT_VAL_NX90_mtgy_op_a118 0x00000000

#define MSK_NX90_mtgy_op_a118_val         0xffffffff
#define SRT_NX90_mtgy_op_a118_val         0
#define DFLT_VAL_NX90_mtgy_op_a118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a118': */
#define MSK_USED_BITS_NX90_mtgy_op_a118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a119 */
/* => MWMM operand A register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a119  0x000019DC
#define Adr_NX90_mtgy_mtgy_op_a119 0xFF0839DC
#define Adr_NX90_mtgy_op_a119      0xFF0839DC
#define DFLT_VAL_NX90_mtgy_op_a119 0x00000000

#define MSK_NX90_mtgy_op_a119_val         0xffffffff
#define SRT_NX90_mtgy_op_a119_val         0
#define DFLT_VAL_NX90_mtgy_op_a119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a119': */
#define MSK_USED_BITS_NX90_mtgy_op_a119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a120 */
/* => MWMM operand A register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a120  0x000019E0
#define Adr_NX90_mtgy_mtgy_op_a120 0xFF0839E0
#define Adr_NX90_mtgy_op_a120      0xFF0839E0
#define DFLT_VAL_NX90_mtgy_op_a120 0x00000000

#define MSK_NX90_mtgy_op_a120_val         0xffffffff
#define SRT_NX90_mtgy_op_a120_val         0
#define DFLT_VAL_NX90_mtgy_op_a120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a120': */
#define MSK_USED_BITS_NX90_mtgy_op_a120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a121 */
/* => MWMM operand A register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a121  0x000019E4
#define Adr_NX90_mtgy_mtgy_op_a121 0xFF0839E4
#define Adr_NX90_mtgy_op_a121      0xFF0839E4
#define DFLT_VAL_NX90_mtgy_op_a121 0x00000000

#define MSK_NX90_mtgy_op_a121_val         0xffffffff
#define SRT_NX90_mtgy_op_a121_val         0
#define DFLT_VAL_NX90_mtgy_op_a121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a121': */
#define MSK_USED_BITS_NX90_mtgy_op_a121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a122 */
/* => MWMM operand A register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a122  0x000019E8
#define Adr_NX90_mtgy_mtgy_op_a122 0xFF0839E8
#define Adr_NX90_mtgy_op_a122      0xFF0839E8
#define DFLT_VAL_NX90_mtgy_op_a122 0x00000000

#define MSK_NX90_mtgy_op_a122_val         0xffffffff
#define SRT_NX90_mtgy_op_a122_val         0
#define DFLT_VAL_NX90_mtgy_op_a122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a122': */
#define MSK_USED_BITS_NX90_mtgy_op_a122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a123 */
/* => MWMM operand A register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a123  0x000019EC
#define Adr_NX90_mtgy_mtgy_op_a123 0xFF0839EC
#define Adr_NX90_mtgy_op_a123      0xFF0839EC
#define DFLT_VAL_NX90_mtgy_op_a123 0x00000000

#define MSK_NX90_mtgy_op_a123_val         0xffffffff
#define SRT_NX90_mtgy_op_a123_val         0
#define DFLT_VAL_NX90_mtgy_op_a123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a123': */
#define MSK_USED_BITS_NX90_mtgy_op_a123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a124 */
/* => MWMM operand A register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a124  0x000019F0
#define Adr_NX90_mtgy_mtgy_op_a124 0xFF0839F0
#define Adr_NX90_mtgy_op_a124      0xFF0839F0
#define DFLT_VAL_NX90_mtgy_op_a124 0x00000000

#define MSK_NX90_mtgy_op_a124_val         0xffffffff
#define SRT_NX90_mtgy_op_a124_val         0
#define DFLT_VAL_NX90_mtgy_op_a124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a124': */
#define MSK_USED_BITS_NX90_mtgy_op_a124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a125 */
/* => MWMM operand A register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a125  0x000019F4
#define Adr_NX90_mtgy_mtgy_op_a125 0xFF0839F4
#define Adr_NX90_mtgy_op_a125      0xFF0839F4
#define DFLT_VAL_NX90_mtgy_op_a125 0x00000000

#define MSK_NX90_mtgy_op_a125_val         0xffffffff
#define SRT_NX90_mtgy_op_a125_val         0
#define DFLT_VAL_NX90_mtgy_op_a125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a125': */
#define MSK_USED_BITS_NX90_mtgy_op_a125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a126 */
/* => MWMM operand A register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a126  0x000019F8
#define Adr_NX90_mtgy_mtgy_op_a126 0xFF0839F8
#define Adr_NX90_mtgy_op_a126      0xFF0839F8
#define DFLT_VAL_NX90_mtgy_op_a126 0x00000000

#define MSK_NX90_mtgy_op_a126_val         0xffffffff
#define SRT_NX90_mtgy_op_a126_val         0
#define DFLT_VAL_NX90_mtgy_op_a126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a126': */
#define MSK_USED_BITS_NX90_mtgy_op_a126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_a127 */
/* => MWMM operand A register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_a127  0x000019FC
#define Adr_NX90_mtgy_mtgy_op_a127 0xFF0839FC
#define Adr_NX90_mtgy_op_a127      0xFF0839FC
#define DFLT_VAL_NX90_mtgy_op_a127 0x00000000

#define MSK_NX90_mtgy_op_a127_val         0xffffffff
#define SRT_NX90_mtgy_op_a127_val         0
#define DFLT_VAL_NX90_mtgy_op_a127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_a127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_a127': */
#define MSK_USED_BITS_NX90_mtgy_op_a127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e0 */
/* => MWMM operand E register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e0  0x00001A00
#define Adr_NX90_mtgy_mtgy_op_e0 0xFF083A00
#define Adr_NX90_mtgy_op_e0      0xFF083A00
#define DFLT_VAL_NX90_mtgy_op_e0 0x00000000

#define MSK_NX90_mtgy_op_e0_val         0xffffffff
#define SRT_NX90_mtgy_op_e0_val         0
#define DFLT_VAL_NX90_mtgy_op_e0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e0': */
#define MSK_USED_BITS_NX90_mtgy_op_e0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e1 */
/* => MWMM operand E register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e1  0x00001A04
#define Adr_NX90_mtgy_mtgy_op_e1 0xFF083A04
#define Adr_NX90_mtgy_op_e1      0xFF083A04
#define DFLT_VAL_NX90_mtgy_op_e1 0x00000000

#define MSK_NX90_mtgy_op_e1_val         0xffffffff
#define SRT_NX90_mtgy_op_e1_val         0
#define DFLT_VAL_NX90_mtgy_op_e1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e1': */
#define MSK_USED_BITS_NX90_mtgy_op_e1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e2 */
/* => MWMM operand E register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e2  0x00001A08
#define Adr_NX90_mtgy_mtgy_op_e2 0xFF083A08
#define Adr_NX90_mtgy_op_e2      0xFF083A08
#define DFLT_VAL_NX90_mtgy_op_e2 0x00000000

#define MSK_NX90_mtgy_op_e2_val         0xffffffff
#define SRT_NX90_mtgy_op_e2_val         0
#define DFLT_VAL_NX90_mtgy_op_e2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e2': */
#define MSK_USED_BITS_NX90_mtgy_op_e2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e3 */
/* => MWMM operand E register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e3  0x00001A0C
#define Adr_NX90_mtgy_mtgy_op_e3 0xFF083A0C
#define Adr_NX90_mtgy_op_e3      0xFF083A0C
#define DFLT_VAL_NX90_mtgy_op_e3 0x00000000

#define MSK_NX90_mtgy_op_e3_val         0xffffffff
#define SRT_NX90_mtgy_op_e3_val         0
#define DFLT_VAL_NX90_mtgy_op_e3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e3': */
#define MSK_USED_BITS_NX90_mtgy_op_e3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e4 */
/* => MWMM operand E register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e4  0x00001A10
#define Adr_NX90_mtgy_mtgy_op_e4 0xFF083A10
#define Adr_NX90_mtgy_op_e4      0xFF083A10
#define DFLT_VAL_NX90_mtgy_op_e4 0x00000000

#define MSK_NX90_mtgy_op_e4_val         0xffffffff
#define SRT_NX90_mtgy_op_e4_val         0
#define DFLT_VAL_NX90_mtgy_op_e4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e4': */
#define MSK_USED_BITS_NX90_mtgy_op_e4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e5 */
/* => MWMM operand E register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e5  0x00001A14
#define Adr_NX90_mtgy_mtgy_op_e5 0xFF083A14
#define Adr_NX90_mtgy_op_e5      0xFF083A14
#define DFLT_VAL_NX90_mtgy_op_e5 0x00000000

#define MSK_NX90_mtgy_op_e5_val         0xffffffff
#define SRT_NX90_mtgy_op_e5_val         0
#define DFLT_VAL_NX90_mtgy_op_e5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e5': */
#define MSK_USED_BITS_NX90_mtgy_op_e5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e6 */
/* => MWMM operand E register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e6  0x00001A18
#define Adr_NX90_mtgy_mtgy_op_e6 0xFF083A18
#define Adr_NX90_mtgy_op_e6      0xFF083A18
#define DFLT_VAL_NX90_mtgy_op_e6 0x00000000

#define MSK_NX90_mtgy_op_e6_val         0xffffffff
#define SRT_NX90_mtgy_op_e6_val         0
#define DFLT_VAL_NX90_mtgy_op_e6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e6': */
#define MSK_USED_BITS_NX90_mtgy_op_e6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e7 */
/* => MWMM operand E register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e7  0x00001A1C
#define Adr_NX90_mtgy_mtgy_op_e7 0xFF083A1C
#define Adr_NX90_mtgy_op_e7      0xFF083A1C
#define DFLT_VAL_NX90_mtgy_op_e7 0x00000000

#define MSK_NX90_mtgy_op_e7_val         0xffffffff
#define SRT_NX90_mtgy_op_e7_val         0
#define DFLT_VAL_NX90_mtgy_op_e7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e7': */
#define MSK_USED_BITS_NX90_mtgy_op_e7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e8 */
/* => MWMM operand E register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e8  0x00001A20
#define Adr_NX90_mtgy_mtgy_op_e8 0xFF083A20
#define Adr_NX90_mtgy_op_e8      0xFF083A20
#define DFLT_VAL_NX90_mtgy_op_e8 0x00000000

#define MSK_NX90_mtgy_op_e8_val         0xffffffff
#define SRT_NX90_mtgy_op_e8_val         0
#define DFLT_VAL_NX90_mtgy_op_e8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e8': */
#define MSK_USED_BITS_NX90_mtgy_op_e8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e9 */
/* => MWMM operand E register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e9  0x00001A24
#define Adr_NX90_mtgy_mtgy_op_e9 0xFF083A24
#define Adr_NX90_mtgy_op_e9      0xFF083A24
#define DFLT_VAL_NX90_mtgy_op_e9 0x00000000

#define MSK_NX90_mtgy_op_e9_val         0xffffffff
#define SRT_NX90_mtgy_op_e9_val         0
#define DFLT_VAL_NX90_mtgy_op_e9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e9': */
#define MSK_USED_BITS_NX90_mtgy_op_e9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e10 */
/* => MWMM operand E register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e10  0x00001A28
#define Adr_NX90_mtgy_mtgy_op_e10 0xFF083A28
#define Adr_NX90_mtgy_op_e10      0xFF083A28
#define DFLT_VAL_NX90_mtgy_op_e10 0x00000000

#define MSK_NX90_mtgy_op_e10_val         0xffffffff
#define SRT_NX90_mtgy_op_e10_val         0
#define DFLT_VAL_NX90_mtgy_op_e10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e10': */
#define MSK_USED_BITS_NX90_mtgy_op_e10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e11 */
/* => MWMM operand E register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e11  0x00001A2C
#define Adr_NX90_mtgy_mtgy_op_e11 0xFF083A2C
#define Adr_NX90_mtgy_op_e11      0xFF083A2C
#define DFLT_VAL_NX90_mtgy_op_e11 0x00000000

#define MSK_NX90_mtgy_op_e11_val         0xffffffff
#define SRT_NX90_mtgy_op_e11_val         0
#define DFLT_VAL_NX90_mtgy_op_e11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e11': */
#define MSK_USED_BITS_NX90_mtgy_op_e11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e12 */
/* => MWMM operand E register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e12  0x00001A30
#define Adr_NX90_mtgy_mtgy_op_e12 0xFF083A30
#define Adr_NX90_mtgy_op_e12      0xFF083A30
#define DFLT_VAL_NX90_mtgy_op_e12 0x00000000

#define MSK_NX90_mtgy_op_e12_val         0xffffffff
#define SRT_NX90_mtgy_op_e12_val         0
#define DFLT_VAL_NX90_mtgy_op_e12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e12': */
#define MSK_USED_BITS_NX90_mtgy_op_e12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e13 */
/* => MWMM operand E register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e13  0x00001A34
#define Adr_NX90_mtgy_mtgy_op_e13 0xFF083A34
#define Adr_NX90_mtgy_op_e13      0xFF083A34
#define DFLT_VAL_NX90_mtgy_op_e13 0x00000000

#define MSK_NX90_mtgy_op_e13_val         0xffffffff
#define SRT_NX90_mtgy_op_e13_val         0
#define DFLT_VAL_NX90_mtgy_op_e13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e13': */
#define MSK_USED_BITS_NX90_mtgy_op_e13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e14 */
/* => MWMM operand E register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e14  0x00001A38
#define Adr_NX90_mtgy_mtgy_op_e14 0xFF083A38
#define Adr_NX90_mtgy_op_e14      0xFF083A38
#define DFLT_VAL_NX90_mtgy_op_e14 0x00000000

#define MSK_NX90_mtgy_op_e14_val         0xffffffff
#define SRT_NX90_mtgy_op_e14_val         0
#define DFLT_VAL_NX90_mtgy_op_e14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e14': */
#define MSK_USED_BITS_NX90_mtgy_op_e14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e15 */
/* => MWMM operand E register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e15  0x00001A3C
#define Adr_NX90_mtgy_mtgy_op_e15 0xFF083A3C
#define Adr_NX90_mtgy_op_e15      0xFF083A3C
#define DFLT_VAL_NX90_mtgy_op_e15 0x00000000

#define MSK_NX90_mtgy_op_e15_val         0xffffffff
#define SRT_NX90_mtgy_op_e15_val         0
#define DFLT_VAL_NX90_mtgy_op_e15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e15': */
#define MSK_USED_BITS_NX90_mtgy_op_e15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e16 */
/* => MWMM operand E register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e16  0x00001A40
#define Adr_NX90_mtgy_mtgy_op_e16 0xFF083A40
#define Adr_NX90_mtgy_op_e16      0xFF083A40
#define DFLT_VAL_NX90_mtgy_op_e16 0x00000000

#define MSK_NX90_mtgy_op_e16_val         0xffffffff
#define SRT_NX90_mtgy_op_e16_val         0
#define DFLT_VAL_NX90_mtgy_op_e16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e16': */
#define MSK_USED_BITS_NX90_mtgy_op_e16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e17 */
/* => MWMM operand E register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e17  0x00001A44
#define Adr_NX90_mtgy_mtgy_op_e17 0xFF083A44
#define Adr_NX90_mtgy_op_e17      0xFF083A44
#define DFLT_VAL_NX90_mtgy_op_e17 0x00000000

#define MSK_NX90_mtgy_op_e17_val         0xffffffff
#define SRT_NX90_mtgy_op_e17_val         0
#define DFLT_VAL_NX90_mtgy_op_e17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e17': */
#define MSK_USED_BITS_NX90_mtgy_op_e17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e18 */
/* => MWMM operand E register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e18  0x00001A48
#define Adr_NX90_mtgy_mtgy_op_e18 0xFF083A48
#define Adr_NX90_mtgy_op_e18      0xFF083A48
#define DFLT_VAL_NX90_mtgy_op_e18 0x00000000

#define MSK_NX90_mtgy_op_e18_val         0xffffffff
#define SRT_NX90_mtgy_op_e18_val         0
#define DFLT_VAL_NX90_mtgy_op_e18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e18': */
#define MSK_USED_BITS_NX90_mtgy_op_e18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e19 */
/* => MWMM operand E register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e19  0x00001A4C
#define Adr_NX90_mtgy_mtgy_op_e19 0xFF083A4C
#define Adr_NX90_mtgy_op_e19      0xFF083A4C
#define DFLT_VAL_NX90_mtgy_op_e19 0x00000000

#define MSK_NX90_mtgy_op_e19_val         0xffffffff
#define SRT_NX90_mtgy_op_e19_val         0
#define DFLT_VAL_NX90_mtgy_op_e19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e19': */
#define MSK_USED_BITS_NX90_mtgy_op_e19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e20 */
/* => MWMM operand E register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e20  0x00001A50
#define Adr_NX90_mtgy_mtgy_op_e20 0xFF083A50
#define Adr_NX90_mtgy_op_e20      0xFF083A50
#define DFLT_VAL_NX90_mtgy_op_e20 0x00000000

#define MSK_NX90_mtgy_op_e20_val         0xffffffff
#define SRT_NX90_mtgy_op_e20_val         0
#define DFLT_VAL_NX90_mtgy_op_e20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e20': */
#define MSK_USED_BITS_NX90_mtgy_op_e20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e21 */
/* => MWMM operand E register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e21  0x00001A54
#define Adr_NX90_mtgy_mtgy_op_e21 0xFF083A54
#define Adr_NX90_mtgy_op_e21      0xFF083A54
#define DFLT_VAL_NX90_mtgy_op_e21 0x00000000

#define MSK_NX90_mtgy_op_e21_val         0xffffffff
#define SRT_NX90_mtgy_op_e21_val         0
#define DFLT_VAL_NX90_mtgy_op_e21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e21': */
#define MSK_USED_BITS_NX90_mtgy_op_e21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e22 */
/* => MWMM operand E register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e22  0x00001A58
#define Adr_NX90_mtgy_mtgy_op_e22 0xFF083A58
#define Adr_NX90_mtgy_op_e22      0xFF083A58
#define DFLT_VAL_NX90_mtgy_op_e22 0x00000000

#define MSK_NX90_mtgy_op_e22_val         0xffffffff
#define SRT_NX90_mtgy_op_e22_val         0
#define DFLT_VAL_NX90_mtgy_op_e22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e22': */
#define MSK_USED_BITS_NX90_mtgy_op_e22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e23 */
/* => MWMM operand E register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e23  0x00001A5C
#define Adr_NX90_mtgy_mtgy_op_e23 0xFF083A5C
#define Adr_NX90_mtgy_op_e23      0xFF083A5C
#define DFLT_VAL_NX90_mtgy_op_e23 0x00000000

#define MSK_NX90_mtgy_op_e23_val         0xffffffff
#define SRT_NX90_mtgy_op_e23_val         0
#define DFLT_VAL_NX90_mtgy_op_e23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e23': */
#define MSK_USED_BITS_NX90_mtgy_op_e23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e24 */
/* => MWMM operand E register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e24  0x00001A60
#define Adr_NX90_mtgy_mtgy_op_e24 0xFF083A60
#define Adr_NX90_mtgy_op_e24      0xFF083A60
#define DFLT_VAL_NX90_mtgy_op_e24 0x00000000

#define MSK_NX90_mtgy_op_e24_val         0xffffffff
#define SRT_NX90_mtgy_op_e24_val         0
#define DFLT_VAL_NX90_mtgy_op_e24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e24': */
#define MSK_USED_BITS_NX90_mtgy_op_e24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e25 */
/* => MWMM operand E register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e25  0x00001A64
#define Adr_NX90_mtgy_mtgy_op_e25 0xFF083A64
#define Adr_NX90_mtgy_op_e25      0xFF083A64
#define DFLT_VAL_NX90_mtgy_op_e25 0x00000000

#define MSK_NX90_mtgy_op_e25_val         0xffffffff
#define SRT_NX90_mtgy_op_e25_val         0
#define DFLT_VAL_NX90_mtgy_op_e25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e25': */
#define MSK_USED_BITS_NX90_mtgy_op_e25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e26 */
/* => MWMM operand E register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e26  0x00001A68
#define Adr_NX90_mtgy_mtgy_op_e26 0xFF083A68
#define Adr_NX90_mtgy_op_e26      0xFF083A68
#define DFLT_VAL_NX90_mtgy_op_e26 0x00000000

#define MSK_NX90_mtgy_op_e26_val         0xffffffff
#define SRT_NX90_mtgy_op_e26_val         0
#define DFLT_VAL_NX90_mtgy_op_e26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e26': */
#define MSK_USED_BITS_NX90_mtgy_op_e26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e27 */
/* => MWMM operand E register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e27  0x00001A6C
#define Adr_NX90_mtgy_mtgy_op_e27 0xFF083A6C
#define Adr_NX90_mtgy_op_e27      0xFF083A6C
#define DFLT_VAL_NX90_mtgy_op_e27 0x00000000

#define MSK_NX90_mtgy_op_e27_val         0xffffffff
#define SRT_NX90_mtgy_op_e27_val         0
#define DFLT_VAL_NX90_mtgy_op_e27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e27': */
#define MSK_USED_BITS_NX90_mtgy_op_e27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e28 */
/* => MWMM operand E register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e28  0x00001A70
#define Adr_NX90_mtgy_mtgy_op_e28 0xFF083A70
#define Adr_NX90_mtgy_op_e28      0xFF083A70
#define DFLT_VAL_NX90_mtgy_op_e28 0x00000000

#define MSK_NX90_mtgy_op_e28_val         0xffffffff
#define SRT_NX90_mtgy_op_e28_val         0
#define DFLT_VAL_NX90_mtgy_op_e28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e28': */
#define MSK_USED_BITS_NX90_mtgy_op_e28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e29 */
/* => MWMM operand E register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e29  0x00001A74
#define Adr_NX90_mtgy_mtgy_op_e29 0xFF083A74
#define Adr_NX90_mtgy_op_e29      0xFF083A74
#define DFLT_VAL_NX90_mtgy_op_e29 0x00000000

#define MSK_NX90_mtgy_op_e29_val         0xffffffff
#define SRT_NX90_mtgy_op_e29_val         0
#define DFLT_VAL_NX90_mtgy_op_e29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e29': */
#define MSK_USED_BITS_NX90_mtgy_op_e29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e30 */
/* => MWMM operand E register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e30  0x00001A78
#define Adr_NX90_mtgy_mtgy_op_e30 0xFF083A78
#define Adr_NX90_mtgy_op_e30      0xFF083A78
#define DFLT_VAL_NX90_mtgy_op_e30 0x00000000

#define MSK_NX90_mtgy_op_e30_val         0xffffffff
#define SRT_NX90_mtgy_op_e30_val         0
#define DFLT_VAL_NX90_mtgy_op_e30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e30': */
#define MSK_USED_BITS_NX90_mtgy_op_e30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e31 */
/* => MWMM operand E register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e31  0x00001A7C
#define Adr_NX90_mtgy_mtgy_op_e31 0xFF083A7C
#define Adr_NX90_mtgy_op_e31      0xFF083A7C
#define DFLT_VAL_NX90_mtgy_op_e31 0x00000000

#define MSK_NX90_mtgy_op_e31_val         0xffffffff
#define SRT_NX90_mtgy_op_e31_val         0
#define DFLT_VAL_NX90_mtgy_op_e31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e31': */
#define MSK_USED_BITS_NX90_mtgy_op_e31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e32 */
/* => MWMM operand E register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e32  0x00001A80
#define Adr_NX90_mtgy_mtgy_op_e32 0xFF083A80
#define Adr_NX90_mtgy_op_e32      0xFF083A80
#define DFLT_VAL_NX90_mtgy_op_e32 0x00000000

#define MSK_NX90_mtgy_op_e32_val         0xffffffff
#define SRT_NX90_mtgy_op_e32_val         0
#define DFLT_VAL_NX90_mtgy_op_e32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e32': */
#define MSK_USED_BITS_NX90_mtgy_op_e32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e33 */
/* => MWMM operand E register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e33  0x00001A84
#define Adr_NX90_mtgy_mtgy_op_e33 0xFF083A84
#define Adr_NX90_mtgy_op_e33      0xFF083A84
#define DFLT_VAL_NX90_mtgy_op_e33 0x00000000

#define MSK_NX90_mtgy_op_e33_val         0xffffffff
#define SRT_NX90_mtgy_op_e33_val         0
#define DFLT_VAL_NX90_mtgy_op_e33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e33': */
#define MSK_USED_BITS_NX90_mtgy_op_e33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e34 */
/* => MWMM operand E register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e34  0x00001A88
#define Adr_NX90_mtgy_mtgy_op_e34 0xFF083A88
#define Adr_NX90_mtgy_op_e34      0xFF083A88
#define DFLT_VAL_NX90_mtgy_op_e34 0x00000000

#define MSK_NX90_mtgy_op_e34_val         0xffffffff
#define SRT_NX90_mtgy_op_e34_val         0
#define DFLT_VAL_NX90_mtgy_op_e34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e34': */
#define MSK_USED_BITS_NX90_mtgy_op_e34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e35 */
/* => MWMM operand E register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e35  0x00001A8C
#define Adr_NX90_mtgy_mtgy_op_e35 0xFF083A8C
#define Adr_NX90_mtgy_op_e35      0xFF083A8C
#define DFLT_VAL_NX90_mtgy_op_e35 0x00000000

#define MSK_NX90_mtgy_op_e35_val         0xffffffff
#define SRT_NX90_mtgy_op_e35_val         0
#define DFLT_VAL_NX90_mtgy_op_e35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e35': */
#define MSK_USED_BITS_NX90_mtgy_op_e35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e36 */
/* => MWMM operand E register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e36  0x00001A90
#define Adr_NX90_mtgy_mtgy_op_e36 0xFF083A90
#define Adr_NX90_mtgy_op_e36      0xFF083A90
#define DFLT_VAL_NX90_mtgy_op_e36 0x00000000

#define MSK_NX90_mtgy_op_e36_val         0xffffffff
#define SRT_NX90_mtgy_op_e36_val         0
#define DFLT_VAL_NX90_mtgy_op_e36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e36': */
#define MSK_USED_BITS_NX90_mtgy_op_e36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e37 */
/* => MWMM operand E register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e37  0x00001A94
#define Adr_NX90_mtgy_mtgy_op_e37 0xFF083A94
#define Adr_NX90_mtgy_op_e37      0xFF083A94
#define DFLT_VAL_NX90_mtgy_op_e37 0x00000000

#define MSK_NX90_mtgy_op_e37_val         0xffffffff
#define SRT_NX90_mtgy_op_e37_val         0
#define DFLT_VAL_NX90_mtgy_op_e37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e37': */
#define MSK_USED_BITS_NX90_mtgy_op_e37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e38 */
/* => MWMM operand E register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e38  0x00001A98
#define Adr_NX90_mtgy_mtgy_op_e38 0xFF083A98
#define Adr_NX90_mtgy_op_e38      0xFF083A98
#define DFLT_VAL_NX90_mtgy_op_e38 0x00000000

#define MSK_NX90_mtgy_op_e38_val         0xffffffff
#define SRT_NX90_mtgy_op_e38_val         0
#define DFLT_VAL_NX90_mtgy_op_e38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e38': */
#define MSK_USED_BITS_NX90_mtgy_op_e38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e39 */
/* => MWMM operand E register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e39  0x00001A9C
#define Adr_NX90_mtgy_mtgy_op_e39 0xFF083A9C
#define Adr_NX90_mtgy_op_e39      0xFF083A9C
#define DFLT_VAL_NX90_mtgy_op_e39 0x00000000

#define MSK_NX90_mtgy_op_e39_val         0xffffffff
#define SRT_NX90_mtgy_op_e39_val         0
#define DFLT_VAL_NX90_mtgy_op_e39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e39': */
#define MSK_USED_BITS_NX90_mtgy_op_e39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e40 */
/* => MWMM operand E register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e40  0x00001AA0
#define Adr_NX90_mtgy_mtgy_op_e40 0xFF083AA0
#define Adr_NX90_mtgy_op_e40      0xFF083AA0
#define DFLT_VAL_NX90_mtgy_op_e40 0x00000000

#define MSK_NX90_mtgy_op_e40_val         0xffffffff
#define SRT_NX90_mtgy_op_e40_val         0
#define DFLT_VAL_NX90_mtgy_op_e40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e40': */
#define MSK_USED_BITS_NX90_mtgy_op_e40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e41 */
/* => MWMM operand E register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e41  0x00001AA4
#define Adr_NX90_mtgy_mtgy_op_e41 0xFF083AA4
#define Adr_NX90_mtgy_op_e41      0xFF083AA4
#define DFLT_VAL_NX90_mtgy_op_e41 0x00000000

#define MSK_NX90_mtgy_op_e41_val         0xffffffff
#define SRT_NX90_mtgy_op_e41_val         0
#define DFLT_VAL_NX90_mtgy_op_e41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e41': */
#define MSK_USED_BITS_NX90_mtgy_op_e41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e42 */
/* => MWMM operand E register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e42  0x00001AA8
#define Adr_NX90_mtgy_mtgy_op_e42 0xFF083AA8
#define Adr_NX90_mtgy_op_e42      0xFF083AA8
#define DFLT_VAL_NX90_mtgy_op_e42 0x00000000

#define MSK_NX90_mtgy_op_e42_val         0xffffffff
#define SRT_NX90_mtgy_op_e42_val         0
#define DFLT_VAL_NX90_mtgy_op_e42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e42': */
#define MSK_USED_BITS_NX90_mtgy_op_e42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e43 */
/* => MWMM operand E register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e43  0x00001AAC
#define Adr_NX90_mtgy_mtgy_op_e43 0xFF083AAC
#define Adr_NX90_mtgy_op_e43      0xFF083AAC
#define DFLT_VAL_NX90_mtgy_op_e43 0x00000000

#define MSK_NX90_mtgy_op_e43_val         0xffffffff
#define SRT_NX90_mtgy_op_e43_val         0
#define DFLT_VAL_NX90_mtgy_op_e43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e43': */
#define MSK_USED_BITS_NX90_mtgy_op_e43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e44 */
/* => MWMM operand E register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e44  0x00001AB0
#define Adr_NX90_mtgy_mtgy_op_e44 0xFF083AB0
#define Adr_NX90_mtgy_op_e44      0xFF083AB0
#define DFLT_VAL_NX90_mtgy_op_e44 0x00000000

#define MSK_NX90_mtgy_op_e44_val         0xffffffff
#define SRT_NX90_mtgy_op_e44_val         0
#define DFLT_VAL_NX90_mtgy_op_e44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e44': */
#define MSK_USED_BITS_NX90_mtgy_op_e44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e45 */
/* => MWMM operand E register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e45  0x00001AB4
#define Adr_NX90_mtgy_mtgy_op_e45 0xFF083AB4
#define Adr_NX90_mtgy_op_e45      0xFF083AB4
#define DFLT_VAL_NX90_mtgy_op_e45 0x00000000

#define MSK_NX90_mtgy_op_e45_val         0xffffffff
#define SRT_NX90_mtgy_op_e45_val         0
#define DFLT_VAL_NX90_mtgy_op_e45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e45': */
#define MSK_USED_BITS_NX90_mtgy_op_e45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e46 */
/* => MWMM operand E register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e46  0x00001AB8
#define Adr_NX90_mtgy_mtgy_op_e46 0xFF083AB8
#define Adr_NX90_mtgy_op_e46      0xFF083AB8
#define DFLT_VAL_NX90_mtgy_op_e46 0x00000000

#define MSK_NX90_mtgy_op_e46_val         0xffffffff
#define SRT_NX90_mtgy_op_e46_val         0
#define DFLT_VAL_NX90_mtgy_op_e46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e46': */
#define MSK_USED_BITS_NX90_mtgy_op_e46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e47 */
/* => MWMM operand E register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e47  0x00001ABC
#define Adr_NX90_mtgy_mtgy_op_e47 0xFF083ABC
#define Adr_NX90_mtgy_op_e47      0xFF083ABC
#define DFLT_VAL_NX90_mtgy_op_e47 0x00000000

#define MSK_NX90_mtgy_op_e47_val         0xffffffff
#define SRT_NX90_mtgy_op_e47_val         0
#define DFLT_VAL_NX90_mtgy_op_e47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e47': */
#define MSK_USED_BITS_NX90_mtgy_op_e47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e48 */
/* => MWMM operand E register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e48  0x00001AC0
#define Adr_NX90_mtgy_mtgy_op_e48 0xFF083AC0
#define Adr_NX90_mtgy_op_e48      0xFF083AC0
#define DFLT_VAL_NX90_mtgy_op_e48 0x00000000

#define MSK_NX90_mtgy_op_e48_val         0xffffffff
#define SRT_NX90_mtgy_op_e48_val         0
#define DFLT_VAL_NX90_mtgy_op_e48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e48': */
#define MSK_USED_BITS_NX90_mtgy_op_e48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e49 */
/* => MWMM operand E register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e49  0x00001AC4
#define Adr_NX90_mtgy_mtgy_op_e49 0xFF083AC4
#define Adr_NX90_mtgy_op_e49      0xFF083AC4
#define DFLT_VAL_NX90_mtgy_op_e49 0x00000000

#define MSK_NX90_mtgy_op_e49_val         0xffffffff
#define SRT_NX90_mtgy_op_e49_val         0
#define DFLT_VAL_NX90_mtgy_op_e49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e49': */
#define MSK_USED_BITS_NX90_mtgy_op_e49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e50 */
/* => MWMM operand E register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e50  0x00001AC8
#define Adr_NX90_mtgy_mtgy_op_e50 0xFF083AC8
#define Adr_NX90_mtgy_op_e50      0xFF083AC8
#define DFLT_VAL_NX90_mtgy_op_e50 0x00000000

#define MSK_NX90_mtgy_op_e50_val         0xffffffff
#define SRT_NX90_mtgy_op_e50_val         0
#define DFLT_VAL_NX90_mtgy_op_e50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e50': */
#define MSK_USED_BITS_NX90_mtgy_op_e50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e51 */
/* => MWMM operand E register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e51  0x00001ACC
#define Adr_NX90_mtgy_mtgy_op_e51 0xFF083ACC
#define Adr_NX90_mtgy_op_e51      0xFF083ACC
#define DFLT_VAL_NX90_mtgy_op_e51 0x00000000

#define MSK_NX90_mtgy_op_e51_val         0xffffffff
#define SRT_NX90_mtgy_op_e51_val         0
#define DFLT_VAL_NX90_mtgy_op_e51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e51': */
#define MSK_USED_BITS_NX90_mtgy_op_e51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e52 */
/* => MWMM operand E register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e52  0x00001AD0
#define Adr_NX90_mtgy_mtgy_op_e52 0xFF083AD0
#define Adr_NX90_mtgy_op_e52      0xFF083AD0
#define DFLT_VAL_NX90_mtgy_op_e52 0x00000000

#define MSK_NX90_mtgy_op_e52_val         0xffffffff
#define SRT_NX90_mtgy_op_e52_val         0
#define DFLT_VAL_NX90_mtgy_op_e52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e52': */
#define MSK_USED_BITS_NX90_mtgy_op_e52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e53 */
/* => MWMM operand E register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e53  0x00001AD4
#define Adr_NX90_mtgy_mtgy_op_e53 0xFF083AD4
#define Adr_NX90_mtgy_op_e53      0xFF083AD4
#define DFLT_VAL_NX90_mtgy_op_e53 0x00000000

#define MSK_NX90_mtgy_op_e53_val         0xffffffff
#define SRT_NX90_mtgy_op_e53_val         0
#define DFLT_VAL_NX90_mtgy_op_e53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e53': */
#define MSK_USED_BITS_NX90_mtgy_op_e53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e54 */
/* => MWMM operand E register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e54  0x00001AD8
#define Adr_NX90_mtgy_mtgy_op_e54 0xFF083AD8
#define Adr_NX90_mtgy_op_e54      0xFF083AD8
#define DFLT_VAL_NX90_mtgy_op_e54 0x00000000

#define MSK_NX90_mtgy_op_e54_val         0xffffffff
#define SRT_NX90_mtgy_op_e54_val         0
#define DFLT_VAL_NX90_mtgy_op_e54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e54': */
#define MSK_USED_BITS_NX90_mtgy_op_e54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e55 */
/* => MWMM operand E register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e55  0x00001ADC
#define Adr_NX90_mtgy_mtgy_op_e55 0xFF083ADC
#define Adr_NX90_mtgy_op_e55      0xFF083ADC
#define DFLT_VAL_NX90_mtgy_op_e55 0x00000000

#define MSK_NX90_mtgy_op_e55_val         0xffffffff
#define SRT_NX90_mtgy_op_e55_val         0
#define DFLT_VAL_NX90_mtgy_op_e55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e55': */
#define MSK_USED_BITS_NX90_mtgy_op_e55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e56 */
/* => MWMM operand E register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e56  0x00001AE0
#define Adr_NX90_mtgy_mtgy_op_e56 0xFF083AE0
#define Adr_NX90_mtgy_op_e56      0xFF083AE0
#define DFLT_VAL_NX90_mtgy_op_e56 0x00000000

#define MSK_NX90_mtgy_op_e56_val         0xffffffff
#define SRT_NX90_mtgy_op_e56_val         0
#define DFLT_VAL_NX90_mtgy_op_e56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e56': */
#define MSK_USED_BITS_NX90_mtgy_op_e56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e57 */
/* => MWMM operand E register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e57  0x00001AE4
#define Adr_NX90_mtgy_mtgy_op_e57 0xFF083AE4
#define Adr_NX90_mtgy_op_e57      0xFF083AE4
#define DFLT_VAL_NX90_mtgy_op_e57 0x00000000

#define MSK_NX90_mtgy_op_e57_val         0xffffffff
#define SRT_NX90_mtgy_op_e57_val         0
#define DFLT_VAL_NX90_mtgy_op_e57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e57': */
#define MSK_USED_BITS_NX90_mtgy_op_e57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e58 */
/* => MWMM operand E register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e58  0x00001AE8
#define Adr_NX90_mtgy_mtgy_op_e58 0xFF083AE8
#define Adr_NX90_mtgy_op_e58      0xFF083AE8
#define DFLT_VAL_NX90_mtgy_op_e58 0x00000000

#define MSK_NX90_mtgy_op_e58_val         0xffffffff
#define SRT_NX90_mtgy_op_e58_val         0
#define DFLT_VAL_NX90_mtgy_op_e58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e58': */
#define MSK_USED_BITS_NX90_mtgy_op_e58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e59 */
/* => MWMM operand E register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e59  0x00001AEC
#define Adr_NX90_mtgy_mtgy_op_e59 0xFF083AEC
#define Adr_NX90_mtgy_op_e59      0xFF083AEC
#define DFLT_VAL_NX90_mtgy_op_e59 0x00000000

#define MSK_NX90_mtgy_op_e59_val         0xffffffff
#define SRT_NX90_mtgy_op_e59_val         0
#define DFLT_VAL_NX90_mtgy_op_e59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e59': */
#define MSK_USED_BITS_NX90_mtgy_op_e59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e60 */
/* => MWMM operand E register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e60  0x00001AF0
#define Adr_NX90_mtgy_mtgy_op_e60 0xFF083AF0
#define Adr_NX90_mtgy_op_e60      0xFF083AF0
#define DFLT_VAL_NX90_mtgy_op_e60 0x00000000

#define MSK_NX90_mtgy_op_e60_val         0xffffffff
#define SRT_NX90_mtgy_op_e60_val         0
#define DFLT_VAL_NX90_mtgy_op_e60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e60': */
#define MSK_USED_BITS_NX90_mtgy_op_e60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e61 */
/* => MWMM operand E register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e61  0x00001AF4
#define Adr_NX90_mtgy_mtgy_op_e61 0xFF083AF4
#define Adr_NX90_mtgy_op_e61      0xFF083AF4
#define DFLT_VAL_NX90_mtgy_op_e61 0x00000000

#define MSK_NX90_mtgy_op_e61_val         0xffffffff
#define SRT_NX90_mtgy_op_e61_val         0
#define DFLT_VAL_NX90_mtgy_op_e61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e61': */
#define MSK_USED_BITS_NX90_mtgy_op_e61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e62 */
/* => MWMM operand E register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e62  0x00001AF8
#define Adr_NX90_mtgy_mtgy_op_e62 0xFF083AF8
#define Adr_NX90_mtgy_op_e62      0xFF083AF8
#define DFLT_VAL_NX90_mtgy_op_e62 0x00000000

#define MSK_NX90_mtgy_op_e62_val         0xffffffff
#define SRT_NX90_mtgy_op_e62_val         0
#define DFLT_VAL_NX90_mtgy_op_e62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e62': */
#define MSK_USED_BITS_NX90_mtgy_op_e62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e63 */
/* => MWMM operand E register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e63  0x00001AFC
#define Adr_NX90_mtgy_mtgy_op_e63 0xFF083AFC
#define Adr_NX90_mtgy_op_e63      0xFF083AFC
#define DFLT_VAL_NX90_mtgy_op_e63 0x00000000

#define MSK_NX90_mtgy_op_e63_val         0xffffffff
#define SRT_NX90_mtgy_op_e63_val         0
#define DFLT_VAL_NX90_mtgy_op_e63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e63': */
#define MSK_USED_BITS_NX90_mtgy_op_e63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e64 */
/* => MWMM operand E register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e64  0x00001B00
#define Adr_NX90_mtgy_mtgy_op_e64 0xFF083B00
#define Adr_NX90_mtgy_op_e64      0xFF083B00
#define DFLT_VAL_NX90_mtgy_op_e64 0x00000000

#define MSK_NX90_mtgy_op_e64_val         0xffffffff
#define SRT_NX90_mtgy_op_e64_val         0
#define DFLT_VAL_NX90_mtgy_op_e64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e64': */
#define MSK_USED_BITS_NX90_mtgy_op_e64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e65 */
/* => MWMM operand E register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e65  0x00001B04
#define Adr_NX90_mtgy_mtgy_op_e65 0xFF083B04
#define Adr_NX90_mtgy_op_e65      0xFF083B04
#define DFLT_VAL_NX90_mtgy_op_e65 0x00000000

#define MSK_NX90_mtgy_op_e65_val         0xffffffff
#define SRT_NX90_mtgy_op_e65_val         0
#define DFLT_VAL_NX90_mtgy_op_e65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e65': */
#define MSK_USED_BITS_NX90_mtgy_op_e65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e66 */
/* => MWMM operand E register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e66  0x00001B08
#define Adr_NX90_mtgy_mtgy_op_e66 0xFF083B08
#define Adr_NX90_mtgy_op_e66      0xFF083B08
#define DFLT_VAL_NX90_mtgy_op_e66 0x00000000

#define MSK_NX90_mtgy_op_e66_val         0xffffffff
#define SRT_NX90_mtgy_op_e66_val         0
#define DFLT_VAL_NX90_mtgy_op_e66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e66': */
#define MSK_USED_BITS_NX90_mtgy_op_e66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e67 */
/* => MWMM operand E register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e67  0x00001B0C
#define Adr_NX90_mtgy_mtgy_op_e67 0xFF083B0C
#define Adr_NX90_mtgy_op_e67      0xFF083B0C
#define DFLT_VAL_NX90_mtgy_op_e67 0x00000000

#define MSK_NX90_mtgy_op_e67_val         0xffffffff
#define SRT_NX90_mtgy_op_e67_val         0
#define DFLT_VAL_NX90_mtgy_op_e67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e67': */
#define MSK_USED_BITS_NX90_mtgy_op_e67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e68 */
/* => MWMM operand E register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e68  0x00001B10
#define Adr_NX90_mtgy_mtgy_op_e68 0xFF083B10
#define Adr_NX90_mtgy_op_e68      0xFF083B10
#define DFLT_VAL_NX90_mtgy_op_e68 0x00000000

#define MSK_NX90_mtgy_op_e68_val         0xffffffff
#define SRT_NX90_mtgy_op_e68_val         0
#define DFLT_VAL_NX90_mtgy_op_e68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e68': */
#define MSK_USED_BITS_NX90_mtgy_op_e68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e69 */
/* => MWMM operand E register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e69  0x00001B14
#define Adr_NX90_mtgy_mtgy_op_e69 0xFF083B14
#define Adr_NX90_mtgy_op_e69      0xFF083B14
#define DFLT_VAL_NX90_mtgy_op_e69 0x00000000

#define MSK_NX90_mtgy_op_e69_val         0xffffffff
#define SRT_NX90_mtgy_op_e69_val         0
#define DFLT_VAL_NX90_mtgy_op_e69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e69': */
#define MSK_USED_BITS_NX90_mtgy_op_e69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e70 */
/* => MWMM operand E register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e70  0x00001B18
#define Adr_NX90_mtgy_mtgy_op_e70 0xFF083B18
#define Adr_NX90_mtgy_op_e70      0xFF083B18
#define DFLT_VAL_NX90_mtgy_op_e70 0x00000000

#define MSK_NX90_mtgy_op_e70_val         0xffffffff
#define SRT_NX90_mtgy_op_e70_val         0
#define DFLT_VAL_NX90_mtgy_op_e70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e70': */
#define MSK_USED_BITS_NX90_mtgy_op_e70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e71 */
/* => MWMM operand E register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e71  0x00001B1C
#define Adr_NX90_mtgy_mtgy_op_e71 0xFF083B1C
#define Adr_NX90_mtgy_op_e71      0xFF083B1C
#define DFLT_VAL_NX90_mtgy_op_e71 0x00000000

#define MSK_NX90_mtgy_op_e71_val         0xffffffff
#define SRT_NX90_mtgy_op_e71_val         0
#define DFLT_VAL_NX90_mtgy_op_e71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e71': */
#define MSK_USED_BITS_NX90_mtgy_op_e71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e72 */
/* => MWMM operand E register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e72  0x00001B20
#define Adr_NX90_mtgy_mtgy_op_e72 0xFF083B20
#define Adr_NX90_mtgy_op_e72      0xFF083B20
#define DFLT_VAL_NX90_mtgy_op_e72 0x00000000

#define MSK_NX90_mtgy_op_e72_val         0xffffffff
#define SRT_NX90_mtgy_op_e72_val         0
#define DFLT_VAL_NX90_mtgy_op_e72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e72': */
#define MSK_USED_BITS_NX90_mtgy_op_e72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e73 */
/* => MWMM operand E register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e73  0x00001B24
#define Adr_NX90_mtgy_mtgy_op_e73 0xFF083B24
#define Adr_NX90_mtgy_op_e73      0xFF083B24
#define DFLT_VAL_NX90_mtgy_op_e73 0x00000000

#define MSK_NX90_mtgy_op_e73_val         0xffffffff
#define SRT_NX90_mtgy_op_e73_val         0
#define DFLT_VAL_NX90_mtgy_op_e73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e73': */
#define MSK_USED_BITS_NX90_mtgy_op_e73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e74 */
/* => MWMM operand E register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e74  0x00001B28
#define Adr_NX90_mtgy_mtgy_op_e74 0xFF083B28
#define Adr_NX90_mtgy_op_e74      0xFF083B28
#define DFLT_VAL_NX90_mtgy_op_e74 0x00000000

#define MSK_NX90_mtgy_op_e74_val         0xffffffff
#define SRT_NX90_mtgy_op_e74_val         0
#define DFLT_VAL_NX90_mtgy_op_e74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e74': */
#define MSK_USED_BITS_NX90_mtgy_op_e74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e75 */
/* => MWMM operand E register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e75  0x00001B2C
#define Adr_NX90_mtgy_mtgy_op_e75 0xFF083B2C
#define Adr_NX90_mtgy_op_e75      0xFF083B2C
#define DFLT_VAL_NX90_mtgy_op_e75 0x00000000

#define MSK_NX90_mtgy_op_e75_val         0xffffffff
#define SRT_NX90_mtgy_op_e75_val         0
#define DFLT_VAL_NX90_mtgy_op_e75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e75': */
#define MSK_USED_BITS_NX90_mtgy_op_e75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e76 */
/* => MWMM operand E register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e76  0x00001B30
#define Adr_NX90_mtgy_mtgy_op_e76 0xFF083B30
#define Adr_NX90_mtgy_op_e76      0xFF083B30
#define DFLT_VAL_NX90_mtgy_op_e76 0x00000000

#define MSK_NX90_mtgy_op_e76_val         0xffffffff
#define SRT_NX90_mtgy_op_e76_val         0
#define DFLT_VAL_NX90_mtgy_op_e76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e76': */
#define MSK_USED_BITS_NX90_mtgy_op_e76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e77 */
/* => MWMM operand E register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e77  0x00001B34
#define Adr_NX90_mtgy_mtgy_op_e77 0xFF083B34
#define Adr_NX90_mtgy_op_e77      0xFF083B34
#define DFLT_VAL_NX90_mtgy_op_e77 0x00000000

#define MSK_NX90_mtgy_op_e77_val         0xffffffff
#define SRT_NX90_mtgy_op_e77_val         0
#define DFLT_VAL_NX90_mtgy_op_e77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e77': */
#define MSK_USED_BITS_NX90_mtgy_op_e77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e78 */
/* => MWMM operand E register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e78  0x00001B38
#define Adr_NX90_mtgy_mtgy_op_e78 0xFF083B38
#define Adr_NX90_mtgy_op_e78      0xFF083B38
#define DFLT_VAL_NX90_mtgy_op_e78 0x00000000

#define MSK_NX90_mtgy_op_e78_val         0xffffffff
#define SRT_NX90_mtgy_op_e78_val         0
#define DFLT_VAL_NX90_mtgy_op_e78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e78': */
#define MSK_USED_BITS_NX90_mtgy_op_e78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e79 */
/* => MWMM operand E register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e79  0x00001B3C
#define Adr_NX90_mtgy_mtgy_op_e79 0xFF083B3C
#define Adr_NX90_mtgy_op_e79      0xFF083B3C
#define DFLT_VAL_NX90_mtgy_op_e79 0x00000000

#define MSK_NX90_mtgy_op_e79_val         0xffffffff
#define SRT_NX90_mtgy_op_e79_val         0
#define DFLT_VAL_NX90_mtgy_op_e79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e79': */
#define MSK_USED_BITS_NX90_mtgy_op_e79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e80 */
/* => MWMM operand E register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e80  0x00001B40
#define Adr_NX90_mtgy_mtgy_op_e80 0xFF083B40
#define Adr_NX90_mtgy_op_e80      0xFF083B40
#define DFLT_VAL_NX90_mtgy_op_e80 0x00000000

#define MSK_NX90_mtgy_op_e80_val         0xffffffff
#define SRT_NX90_mtgy_op_e80_val         0
#define DFLT_VAL_NX90_mtgy_op_e80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e80': */
#define MSK_USED_BITS_NX90_mtgy_op_e80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e81 */
/* => MWMM operand E register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e81  0x00001B44
#define Adr_NX90_mtgy_mtgy_op_e81 0xFF083B44
#define Adr_NX90_mtgy_op_e81      0xFF083B44
#define DFLT_VAL_NX90_mtgy_op_e81 0x00000000

#define MSK_NX90_mtgy_op_e81_val         0xffffffff
#define SRT_NX90_mtgy_op_e81_val         0
#define DFLT_VAL_NX90_mtgy_op_e81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e81': */
#define MSK_USED_BITS_NX90_mtgy_op_e81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e82 */
/* => MWMM operand E register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e82  0x00001B48
#define Adr_NX90_mtgy_mtgy_op_e82 0xFF083B48
#define Adr_NX90_mtgy_op_e82      0xFF083B48
#define DFLT_VAL_NX90_mtgy_op_e82 0x00000000

#define MSK_NX90_mtgy_op_e82_val         0xffffffff
#define SRT_NX90_mtgy_op_e82_val         0
#define DFLT_VAL_NX90_mtgy_op_e82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e82': */
#define MSK_USED_BITS_NX90_mtgy_op_e82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e83 */
/* => MWMM operand E register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e83  0x00001B4C
#define Adr_NX90_mtgy_mtgy_op_e83 0xFF083B4C
#define Adr_NX90_mtgy_op_e83      0xFF083B4C
#define DFLT_VAL_NX90_mtgy_op_e83 0x00000000

#define MSK_NX90_mtgy_op_e83_val         0xffffffff
#define SRT_NX90_mtgy_op_e83_val         0
#define DFLT_VAL_NX90_mtgy_op_e83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e83': */
#define MSK_USED_BITS_NX90_mtgy_op_e83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e84 */
/* => MWMM operand E register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e84  0x00001B50
#define Adr_NX90_mtgy_mtgy_op_e84 0xFF083B50
#define Adr_NX90_mtgy_op_e84      0xFF083B50
#define DFLT_VAL_NX90_mtgy_op_e84 0x00000000

#define MSK_NX90_mtgy_op_e84_val         0xffffffff
#define SRT_NX90_mtgy_op_e84_val         0
#define DFLT_VAL_NX90_mtgy_op_e84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e84': */
#define MSK_USED_BITS_NX90_mtgy_op_e84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e85 */
/* => MWMM operand E register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e85  0x00001B54
#define Adr_NX90_mtgy_mtgy_op_e85 0xFF083B54
#define Adr_NX90_mtgy_op_e85      0xFF083B54
#define DFLT_VAL_NX90_mtgy_op_e85 0x00000000

#define MSK_NX90_mtgy_op_e85_val         0xffffffff
#define SRT_NX90_mtgy_op_e85_val         0
#define DFLT_VAL_NX90_mtgy_op_e85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e85': */
#define MSK_USED_BITS_NX90_mtgy_op_e85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e86 */
/* => MWMM operand E register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e86  0x00001B58
#define Adr_NX90_mtgy_mtgy_op_e86 0xFF083B58
#define Adr_NX90_mtgy_op_e86      0xFF083B58
#define DFLT_VAL_NX90_mtgy_op_e86 0x00000000

#define MSK_NX90_mtgy_op_e86_val         0xffffffff
#define SRT_NX90_mtgy_op_e86_val         0
#define DFLT_VAL_NX90_mtgy_op_e86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e86': */
#define MSK_USED_BITS_NX90_mtgy_op_e86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e87 */
/* => MWMM operand E register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e87  0x00001B5C
#define Adr_NX90_mtgy_mtgy_op_e87 0xFF083B5C
#define Adr_NX90_mtgy_op_e87      0xFF083B5C
#define DFLT_VAL_NX90_mtgy_op_e87 0x00000000

#define MSK_NX90_mtgy_op_e87_val         0xffffffff
#define SRT_NX90_mtgy_op_e87_val         0
#define DFLT_VAL_NX90_mtgy_op_e87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e87': */
#define MSK_USED_BITS_NX90_mtgy_op_e87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e88 */
/* => MWMM operand E register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e88  0x00001B60
#define Adr_NX90_mtgy_mtgy_op_e88 0xFF083B60
#define Adr_NX90_mtgy_op_e88      0xFF083B60
#define DFLT_VAL_NX90_mtgy_op_e88 0x00000000

#define MSK_NX90_mtgy_op_e88_val         0xffffffff
#define SRT_NX90_mtgy_op_e88_val         0
#define DFLT_VAL_NX90_mtgy_op_e88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e88': */
#define MSK_USED_BITS_NX90_mtgy_op_e88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e89 */
/* => MWMM operand E register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e89  0x00001B64
#define Adr_NX90_mtgy_mtgy_op_e89 0xFF083B64
#define Adr_NX90_mtgy_op_e89      0xFF083B64
#define DFLT_VAL_NX90_mtgy_op_e89 0x00000000

#define MSK_NX90_mtgy_op_e89_val         0xffffffff
#define SRT_NX90_mtgy_op_e89_val         0
#define DFLT_VAL_NX90_mtgy_op_e89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e89': */
#define MSK_USED_BITS_NX90_mtgy_op_e89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e90 */
/* => MWMM operand E register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e90  0x00001B68
#define Adr_NX90_mtgy_mtgy_op_e90 0xFF083B68
#define Adr_NX90_mtgy_op_e90      0xFF083B68
#define DFLT_VAL_NX90_mtgy_op_e90 0x00000000

#define MSK_NX90_mtgy_op_e90_val         0xffffffff
#define SRT_NX90_mtgy_op_e90_val         0
#define DFLT_VAL_NX90_mtgy_op_e90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e90': */
#define MSK_USED_BITS_NX90_mtgy_op_e90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e91 */
/* => MWMM operand E register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e91  0x00001B6C
#define Adr_NX90_mtgy_mtgy_op_e91 0xFF083B6C
#define Adr_NX90_mtgy_op_e91      0xFF083B6C
#define DFLT_VAL_NX90_mtgy_op_e91 0x00000000

#define MSK_NX90_mtgy_op_e91_val         0xffffffff
#define SRT_NX90_mtgy_op_e91_val         0
#define DFLT_VAL_NX90_mtgy_op_e91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e91': */
#define MSK_USED_BITS_NX90_mtgy_op_e91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e92 */
/* => MWMM operand E register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e92  0x00001B70
#define Adr_NX90_mtgy_mtgy_op_e92 0xFF083B70
#define Adr_NX90_mtgy_op_e92      0xFF083B70
#define DFLT_VAL_NX90_mtgy_op_e92 0x00000000

#define MSK_NX90_mtgy_op_e92_val         0xffffffff
#define SRT_NX90_mtgy_op_e92_val         0
#define DFLT_VAL_NX90_mtgy_op_e92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e92': */
#define MSK_USED_BITS_NX90_mtgy_op_e92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e93 */
/* => MWMM operand E register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e93  0x00001B74
#define Adr_NX90_mtgy_mtgy_op_e93 0xFF083B74
#define Adr_NX90_mtgy_op_e93      0xFF083B74
#define DFLT_VAL_NX90_mtgy_op_e93 0x00000000

#define MSK_NX90_mtgy_op_e93_val         0xffffffff
#define SRT_NX90_mtgy_op_e93_val         0
#define DFLT_VAL_NX90_mtgy_op_e93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e93': */
#define MSK_USED_BITS_NX90_mtgy_op_e93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e94 */
/* => MWMM operand E register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e94  0x00001B78
#define Adr_NX90_mtgy_mtgy_op_e94 0xFF083B78
#define Adr_NX90_mtgy_op_e94      0xFF083B78
#define DFLT_VAL_NX90_mtgy_op_e94 0x00000000

#define MSK_NX90_mtgy_op_e94_val         0xffffffff
#define SRT_NX90_mtgy_op_e94_val         0
#define DFLT_VAL_NX90_mtgy_op_e94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e94': */
#define MSK_USED_BITS_NX90_mtgy_op_e94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e95 */
/* => MWMM operand E register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e95  0x00001B7C
#define Adr_NX90_mtgy_mtgy_op_e95 0xFF083B7C
#define Adr_NX90_mtgy_op_e95      0xFF083B7C
#define DFLT_VAL_NX90_mtgy_op_e95 0x00000000

#define MSK_NX90_mtgy_op_e95_val         0xffffffff
#define SRT_NX90_mtgy_op_e95_val         0
#define DFLT_VAL_NX90_mtgy_op_e95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e95': */
#define MSK_USED_BITS_NX90_mtgy_op_e95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e96 */
/* => MWMM operand E register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e96  0x00001B80
#define Adr_NX90_mtgy_mtgy_op_e96 0xFF083B80
#define Adr_NX90_mtgy_op_e96      0xFF083B80
#define DFLT_VAL_NX90_mtgy_op_e96 0x00000000

#define MSK_NX90_mtgy_op_e96_val         0xffffffff
#define SRT_NX90_mtgy_op_e96_val         0
#define DFLT_VAL_NX90_mtgy_op_e96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e96': */
#define MSK_USED_BITS_NX90_mtgy_op_e96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e97 */
/* => MWMM operand E register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e97  0x00001B84
#define Adr_NX90_mtgy_mtgy_op_e97 0xFF083B84
#define Adr_NX90_mtgy_op_e97      0xFF083B84
#define DFLT_VAL_NX90_mtgy_op_e97 0x00000000

#define MSK_NX90_mtgy_op_e97_val         0xffffffff
#define SRT_NX90_mtgy_op_e97_val         0
#define DFLT_VAL_NX90_mtgy_op_e97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e97': */
#define MSK_USED_BITS_NX90_mtgy_op_e97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e98 */
/* => MWMM operand E register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e98  0x00001B88
#define Adr_NX90_mtgy_mtgy_op_e98 0xFF083B88
#define Adr_NX90_mtgy_op_e98      0xFF083B88
#define DFLT_VAL_NX90_mtgy_op_e98 0x00000000

#define MSK_NX90_mtgy_op_e98_val         0xffffffff
#define SRT_NX90_mtgy_op_e98_val         0
#define DFLT_VAL_NX90_mtgy_op_e98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e98': */
#define MSK_USED_BITS_NX90_mtgy_op_e98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e99 */
/* => MWMM operand E register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e99  0x00001B8C
#define Adr_NX90_mtgy_mtgy_op_e99 0xFF083B8C
#define Adr_NX90_mtgy_op_e99      0xFF083B8C
#define DFLT_VAL_NX90_mtgy_op_e99 0x00000000

#define MSK_NX90_mtgy_op_e99_val         0xffffffff
#define SRT_NX90_mtgy_op_e99_val         0
#define DFLT_VAL_NX90_mtgy_op_e99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e99': */
#define MSK_USED_BITS_NX90_mtgy_op_e99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e100 */
/* => MWMM operand E register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e100  0x00001B90
#define Adr_NX90_mtgy_mtgy_op_e100 0xFF083B90
#define Adr_NX90_mtgy_op_e100      0xFF083B90
#define DFLT_VAL_NX90_mtgy_op_e100 0x00000000

#define MSK_NX90_mtgy_op_e100_val         0xffffffff
#define SRT_NX90_mtgy_op_e100_val         0
#define DFLT_VAL_NX90_mtgy_op_e100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e100': */
#define MSK_USED_BITS_NX90_mtgy_op_e100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e101 */
/* => MWMM operand E register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e101  0x00001B94
#define Adr_NX90_mtgy_mtgy_op_e101 0xFF083B94
#define Adr_NX90_mtgy_op_e101      0xFF083B94
#define DFLT_VAL_NX90_mtgy_op_e101 0x00000000

#define MSK_NX90_mtgy_op_e101_val         0xffffffff
#define SRT_NX90_mtgy_op_e101_val         0
#define DFLT_VAL_NX90_mtgy_op_e101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e101': */
#define MSK_USED_BITS_NX90_mtgy_op_e101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e102 */
/* => MWMM operand E register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e102  0x00001B98
#define Adr_NX90_mtgy_mtgy_op_e102 0xFF083B98
#define Adr_NX90_mtgy_op_e102      0xFF083B98
#define DFLT_VAL_NX90_mtgy_op_e102 0x00000000

#define MSK_NX90_mtgy_op_e102_val         0xffffffff
#define SRT_NX90_mtgy_op_e102_val         0
#define DFLT_VAL_NX90_mtgy_op_e102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e102': */
#define MSK_USED_BITS_NX90_mtgy_op_e102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e103 */
/* => MWMM operand E register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e103  0x00001B9C
#define Adr_NX90_mtgy_mtgy_op_e103 0xFF083B9C
#define Adr_NX90_mtgy_op_e103      0xFF083B9C
#define DFLT_VAL_NX90_mtgy_op_e103 0x00000000

#define MSK_NX90_mtgy_op_e103_val         0xffffffff
#define SRT_NX90_mtgy_op_e103_val         0
#define DFLT_VAL_NX90_mtgy_op_e103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e103': */
#define MSK_USED_BITS_NX90_mtgy_op_e103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e104 */
/* => MWMM operand E register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e104  0x00001BA0
#define Adr_NX90_mtgy_mtgy_op_e104 0xFF083BA0
#define Adr_NX90_mtgy_op_e104      0xFF083BA0
#define DFLT_VAL_NX90_mtgy_op_e104 0x00000000

#define MSK_NX90_mtgy_op_e104_val         0xffffffff
#define SRT_NX90_mtgy_op_e104_val         0
#define DFLT_VAL_NX90_mtgy_op_e104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e104': */
#define MSK_USED_BITS_NX90_mtgy_op_e104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e105 */
/* => MWMM operand E register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e105  0x00001BA4
#define Adr_NX90_mtgy_mtgy_op_e105 0xFF083BA4
#define Adr_NX90_mtgy_op_e105      0xFF083BA4
#define DFLT_VAL_NX90_mtgy_op_e105 0x00000000

#define MSK_NX90_mtgy_op_e105_val         0xffffffff
#define SRT_NX90_mtgy_op_e105_val         0
#define DFLT_VAL_NX90_mtgy_op_e105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e105': */
#define MSK_USED_BITS_NX90_mtgy_op_e105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e106 */
/* => MWMM operand E register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e106  0x00001BA8
#define Adr_NX90_mtgy_mtgy_op_e106 0xFF083BA8
#define Adr_NX90_mtgy_op_e106      0xFF083BA8
#define DFLT_VAL_NX90_mtgy_op_e106 0x00000000

#define MSK_NX90_mtgy_op_e106_val         0xffffffff
#define SRT_NX90_mtgy_op_e106_val         0
#define DFLT_VAL_NX90_mtgy_op_e106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e106': */
#define MSK_USED_BITS_NX90_mtgy_op_e106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e107 */
/* => MWMM operand E register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e107  0x00001BAC
#define Adr_NX90_mtgy_mtgy_op_e107 0xFF083BAC
#define Adr_NX90_mtgy_op_e107      0xFF083BAC
#define DFLT_VAL_NX90_mtgy_op_e107 0x00000000

#define MSK_NX90_mtgy_op_e107_val         0xffffffff
#define SRT_NX90_mtgy_op_e107_val         0
#define DFLT_VAL_NX90_mtgy_op_e107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e107': */
#define MSK_USED_BITS_NX90_mtgy_op_e107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e108 */
/* => MWMM operand E register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e108  0x00001BB0
#define Adr_NX90_mtgy_mtgy_op_e108 0xFF083BB0
#define Adr_NX90_mtgy_op_e108      0xFF083BB0
#define DFLT_VAL_NX90_mtgy_op_e108 0x00000000

#define MSK_NX90_mtgy_op_e108_val         0xffffffff
#define SRT_NX90_mtgy_op_e108_val         0
#define DFLT_VAL_NX90_mtgy_op_e108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e108': */
#define MSK_USED_BITS_NX90_mtgy_op_e108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e109 */
/* => MWMM operand E register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e109  0x00001BB4
#define Adr_NX90_mtgy_mtgy_op_e109 0xFF083BB4
#define Adr_NX90_mtgy_op_e109      0xFF083BB4
#define DFLT_VAL_NX90_mtgy_op_e109 0x00000000

#define MSK_NX90_mtgy_op_e109_val         0xffffffff
#define SRT_NX90_mtgy_op_e109_val         0
#define DFLT_VAL_NX90_mtgy_op_e109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e109': */
#define MSK_USED_BITS_NX90_mtgy_op_e109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e110 */
/* => MWMM operand E register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e110  0x00001BB8
#define Adr_NX90_mtgy_mtgy_op_e110 0xFF083BB8
#define Adr_NX90_mtgy_op_e110      0xFF083BB8
#define DFLT_VAL_NX90_mtgy_op_e110 0x00000000

#define MSK_NX90_mtgy_op_e110_val         0xffffffff
#define SRT_NX90_mtgy_op_e110_val         0
#define DFLT_VAL_NX90_mtgy_op_e110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e110': */
#define MSK_USED_BITS_NX90_mtgy_op_e110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e111 */
/* => MWMM operand E register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e111  0x00001BBC
#define Adr_NX90_mtgy_mtgy_op_e111 0xFF083BBC
#define Adr_NX90_mtgy_op_e111      0xFF083BBC
#define DFLT_VAL_NX90_mtgy_op_e111 0x00000000

#define MSK_NX90_mtgy_op_e111_val         0xffffffff
#define SRT_NX90_mtgy_op_e111_val         0
#define DFLT_VAL_NX90_mtgy_op_e111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e111': */
#define MSK_USED_BITS_NX90_mtgy_op_e111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e112 */
/* => MWMM operand E register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e112  0x00001BC0
#define Adr_NX90_mtgy_mtgy_op_e112 0xFF083BC0
#define Adr_NX90_mtgy_op_e112      0xFF083BC0
#define DFLT_VAL_NX90_mtgy_op_e112 0x00000000

#define MSK_NX90_mtgy_op_e112_val         0xffffffff
#define SRT_NX90_mtgy_op_e112_val         0
#define DFLT_VAL_NX90_mtgy_op_e112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e112': */
#define MSK_USED_BITS_NX90_mtgy_op_e112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e113 */
/* => MWMM operand E register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e113  0x00001BC4
#define Adr_NX90_mtgy_mtgy_op_e113 0xFF083BC4
#define Adr_NX90_mtgy_op_e113      0xFF083BC4
#define DFLT_VAL_NX90_mtgy_op_e113 0x00000000

#define MSK_NX90_mtgy_op_e113_val         0xffffffff
#define SRT_NX90_mtgy_op_e113_val         0
#define DFLT_VAL_NX90_mtgy_op_e113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e113': */
#define MSK_USED_BITS_NX90_mtgy_op_e113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e114 */
/* => MWMM operand E register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e114  0x00001BC8
#define Adr_NX90_mtgy_mtgy_op_e114 0xFF083BC8
#define Adr_NX90_mtgy_op_e114      0xFF083BC8
#define DFLT_VAL_NX90_mtgy_op_e114 0x00000000

#define MSK_NX90_mtgy_op_e114_val         0xffffffff
#define SRT_NX90_mtgy_op_e114_val         0
#define DFLT_VAL_NX90_mtgy_op_e114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e114': */
#define MSK_USED_BITS_NX90_mtgy_op_e114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e115 */
/* => MWMM operand E register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e115  0x00001BCC
#define Adr_NX90_mtgy_mtgy_op_e115 0xFF083BCC
#define Adr_NX90_mtgy_op_e115      0xFF083BCC
#define DFLT_VAL_NX90_mtgy_op_e115 0x00000000

#define MSK_NX90_mtgy_op_e115_val         0xffffffff
#define SRT_NX90_mtgy_op_e115_val         0
#define DFLT_VAL_NX90_mtgy_op_e115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e115': */
#define MSK_USED_BITS_NX90_mtgy_op_e115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e116 */
/* => MWMM operand E register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e116  0x00001BD0
#define Adr_NX90_mtgy_mtgy_op_e116 0xFF083BD0
#define Adr_NX90_mtgy_op_e116      0xFF083BD0
#define DFLT_VAL_NX90_mtgy_op_e116 0x00000000

#define MSK_NX90_mtgy_op_e116_val         0xffffffff
#define SRT_NX90_mtgy_op_e116_val         0
#define DFLT_VAL_NX90_mtgy_op_e116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e116': */
#define MSK_USED_BITS_NX90_mtgy_op_e116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e117 */
/* => MWMM operand E register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e117  0x00001BD4
#define Adr_NX90_mtgy_mtgy_op_e117 0xFF083BD4
#define Adr_NX90_mtgy_op_e117      0xFF083BD4
#define DFLT_VAL_NX90_mtgy_op_e117 0x00000000

#define MSK_NX90_mtgy_op_e117_val         0xffffffff
#define SRT_NX90_mtgy_op_e117_val         0
#define DFLT_VAL_NX90_mtgy_op_e117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e117': */
#define MSK_USED_BITS_NX90_mtgy_op_e117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e118 */
/* => MWMM operand E register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e118  0x00001BD8
#define Adr_NX90_mtgy_mtgy_op_e118 0xFF083BD8
#define Adr_NX90_mtgy_op_e118      0xFF083BD8
#define DFLT_VAL_NX90_mtgy_op_e118 0x00000000

#define MSK_NX90_mtgy_op_e118_val         0xffffffff
#define SRT_NX90_mtgy_op_e118_val         0
#define DFLT_VAL_NX90_mtgy_op_e118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e118': */
#define MSK_USED_BITS_NX90_mtgy_op_e118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e119 */
/* => MWMM operand E register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e119  0x00001BDC
#define Adr_NX90_mtgy_mtgy_op_e119 0xFF083BDC
#define Adr_NX90_mtgy_op_e119      0xFF083BDC
#define DFLT_VAL_NX90_mtgy_op_e119 0x00000000

#define MSK_NX90_mtgy_op_e119_val         0xffffffff
#define SRT_NX90_mtgy_op_e119_val         0
#define DFLT_VAL_NX90_mtgy_op_e119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e119': */
#define MSK_USED_BITS_NX90_mtgy_op_e119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e120 */
/* => MWMM operand E register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e120  0x00001BE0
#define Adr_NX90_mtgy_mtgy_op_e120 0xFF083BE0
#define Adr_NX90_mtgy_op_e120      0xFF083BE0
#define DFLT_VAL_NX90_mtgy_op_e120 0x00000000

#define MSK_NX90_mtgy_op_e120_val         0xffffffff
#define SRT_NX90_mtgy_op_e120_val         0
#define DFLT_VAL_NX90_mtgy_op_e120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e120': */
#define MSK_USED_BITS_NX90_mtgy_op_e120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e121 */
/* => MWMM operand E register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e121  0x00001BE4
#define Adr_NX90_mtgy_mtgy_op_e121 0xFF083BE4
#define Adr_NX90_mtgy_op_e121      0xFF083BE4
#define DFLT_VAL_NX90_mtgy_op_e121 0x00000000

#define MSK_NX90_mtgy_op_e121_val         0xffffffff
#define SRT_NX90_mtgy_op_e121_val         0
#define DFLT_VAL_NX90_mtgy_op_e121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e121': */
#define MSK_USED_BITS_NX90_mtgy_op_e121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e122 */
/* => MWMM operand E register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e122  0x00001BE8
#define Adr_NX90_mtgy_mtgy_op_e122 0xFF083BE8
#define Adr_NX90_mtgy_op_e122      0xFF083BE8
#define DFLT_VAL_NX90_mtgy_op_e122 0x00000000

#define MSK_NX90_mtgy_op_e122_val         0xffffffff
#define SRT_NX90_mtgy_op_e122_val         0
#define DFLT_VAL_NX90_mtgy_op_e122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e122': */
#define MSK_USED_BITS_NX90_mtgy_op_e122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e123 */
/* => MWMM operand E register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e123  0x00001BEC
#define Adr_NX90_mtgy_mtgy_op_e123 0xFF083BEC
#define Adr_NX90_mtgy_op_e123      0xFF083BEC
#define DFLT_VAL_NX90_mtgy_op_e123 0x00000000

#define MSK_NX90_mtgy_op_e123_val         0xffffffff
#define SRT_NX90_mtgy_op_e123_val         0
#define DFLT_VAL_NX90_mtgy_op_e123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e123': */
#define MSK_USED_BITS_NX90_mtgy_op_e123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e124 */
/* => MWMM operand E register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e124  0x00001BF0
#define Adr_NX90_mtgy_mtgy_op_e124 0xFF083BF0
#define Adr_NX90_mtgy_op_e124      0xFF083BF0
#define DFLT_VAL_NX90_mtgy_op_e124 0x00000000

#define MSK_NX90_mtgy_op_e124_val         0xffffffff
#define SRT_NX90_mtgy_op_e124_val         0
#define DFLT_VAL_NX90_mtgy_op_e124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e124': */
#define MSK_USED_BITS_NX90_mtgy_op_e124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e125 */
/* => MWMM operand E register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e125  0x00001BF4
#define Adr_NX90_mtgy_mtgy_op_e125 0xFF083BF4
#define Adr_NX90_mtgy_op_e125      0xFF083BF4
#define DFLT_VAL_NX90_mtgy_op_e125 0x00000000

#define MSK_NX90_mtgy_op_e125_val         0xffffffff
#define SRT_NX90_mtgy_op_e125_val         0
#define DFLT_VAL_NX90_mtgy_op_e125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e125': */
#define MSK_USED_BITS_NX90_mtgy_op_e125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e126 */
/* => MWMM operand E register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e126  0x00001BF8
#define Adr_NX90_mtgy_mtgy_op_e126 0xFF083BF8
#define Adr_NX90_mtgy_op_e126      0xFF083BF8
#define DFLT_VAL_NX90_mtgy_op_e126 0x00000000

#define MSK_NX90_mtgy_op_e126_val         0xffffffff
#define SRT_NX90_mtgy_op_e126_val         0
#define DFLT_VAL_NX90_mtgy_op_e126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e126': */
#define MSK_USED_BITS_NX90_mtgy_op_e126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_e127 */
/* => MWMM operand E register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_e127  0x00001BFC
#define Adr_NX90_mtgy_mtgy_op_e127 0xFF083BFC
#define Adr_NX90_mtgy_op_e127      0xFF083BFC
#define DFLT_VAL_NX90_mtgy_op_e127 0x00000000

#define MSK_NX90_mtgy_op_e127_val         0xffffffff
#define SRT_NX90_mtgy_op_e127_val         0
#define DFLT_VAL_NX90_mtgy_op_e127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_e127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_e127': */
#define MSK_USED_BITS_NX90_mtgy_op_e127 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x0 */
/* => MWMM operand X register 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x0  0x00001C00
#define Adr_NX90_mtgy_mtgy_op_x0 0xFF083C00
#define Adr_NX90_mtgy_op_x0      0xFF083C00
#define DFLT_VAL_NX90_mtgy_op_x0 0x00000000

#define MSK_NX90_mtgy_op_x0_val         0xffffffff
#define SRT_NX90_mtgy_op_x0_val         0
#define DFLT_VAL_NX90_mtgy_op_x0_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x0_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x0': */
#define MSK_USED_BITS_NX90_mtgy_op_x0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x1 */
/* => MWMM operand X register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x1  0x00001C04
#define Adr_NX90_mtgy_mtgy_op_x1 0xFF083C04
#define Adr_NX90_mtgy_op_x1      0xFF083C04
#define DFLT_VAL_NX90_mtgy_op_x1 0x00000000

#define MSK_NX90_mtgy_op_x1_val         0xffffffff
#define SRT_NX90_mtgy_op_x1_val         0
#define DFLT_VAL_NX90_mtgy_op_x1_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x1_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x1': */
#define MSK_USED_BITS_NX90_mtgy_op_x1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x2 */
/* => MWMM operand X register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x2  0x00001C08
#define Adr_NX90_mtgy_mtgy_op_x2 0xFF083C08
#define Adr_NX90_mtgy_op_x2      0xFF083C08
#define DFLT_VAL_NX90_mtgy_op_x2 0x00000000

#define MSK_NX90_mtgy_op_x2_val         0xffffffff
#define SRT_NX90_mtgy_op_x2_val         0
#define DFLT_VAL_NX90_mtgy_op_x2_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x2_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x2': */
#define MSK_USED_BITS_NX90_mtgy_op_x2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x3 */
/* => MWMM operand X register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x3  0x00001C0C
#define Adr_NX90_mtgy_mtgy_op_x3 0xFF083C0C
#define Adr_NX90_mtgy_op_x3      0xFF083C0C
#define DFLT_VAL_NX90_mtgy_op_x3 0x00000000

#define MSK_NX90_mtgy_op_x3_val         0xffffffff
#define SRT_NX90_mtgy_op_x3_val         0
#define DFLT_VAL_NX90_mtgy_op_x3_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x3_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x3': */
#define MSK_USED_BITS_NX90_mtgy_op_x3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x4 */
/* => MWMM operand X register 4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x4  0x00001C10
#define Adr_NX90_mtgy_mtgy_op_x4 0xFF083C10
#define Adr_NX90_mtgy_op_x4      0xFF083C10
#define DFLT_VAL_NX90_mtgy_op_x4 0x00000000

#define MSK_NX90_mtgy_op_x4_val         0xffffffff
#define SRT_NX90_mtgy_op_x4_val         0
#define DFLT_VAL_NX90_mtgy_op_x4_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x4_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x4': */
#define MSK_USED_BITS_NX90_mtgy_op_x4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x5 */
/* => MWMM operand X register 5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x5  0x00001C14
#define Adr_NX90_mtgy_mtgy_op_x5 0xFF083C14
#define Adr_NX90_mtgy_op_x5      0xFF083C14
#define DFLT_VAL_NX90_mtgy_op_x5 0x00000000

#define MSK_NX90_mtgy_op_x5_val         0xffffffff
#define SRT_NX90_mtgy_op_x5_val         0
#define DFLT_VAL_NX90_mtgy_op_x5_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x5_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x5': */
#define MSK_USED_BITS_NX90_mtgy_op_x5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x6 */
/* => MWMM operand X register 6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x6  0x00001C18
#define Adr_NX90_mtgy_mtgy_op_x6 0xFF083C18
#define Adr_NX90_mtgy_op_x6      0xFF083C18
#define DFLT_VAL_NX90_mtgy_op_x6 0x00000000

#define MSK_NX90_mtgy_op_x6_val         0xffffffff
#define SRT_NX90_mtgy_op_x6_val         0
#define DFLT_VAL_NX90_mtgy_op_x6_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x6_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x6': */
#define MSK_USED_BITS_NX90_mtgy_op_x6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x7 */
/* => MWMM operand X register 7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x7  0x00001C1C
#define Adr_NX90_mtgy_mtgy_op_x7 0xFF083C1C
#define Adr_NX90_mtgy_op_x7      0xFF083C1C
#define DFLT_VAL_NX90_mtgy_op_x7 0x00000000

#define MSK_NX90_mtgy_op_x7_val         0xffffffff
#define SRT_NX90_mtgy_op_x7_val         0
#define DFLT_VAL_NX90_mtgy_op_x7_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x7_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x7': */
#define MSK_USED_BITS_NX90_mtgy_op_x7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x8 */
/* => MWMM operand X register 8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x8  0x00001C20
#define Adr_NX90_mtgy_mtgy_op_x8 0xFF083C20
#define Adr_NX90_mtgy_op_x8      0xFF083C20
#define DFLT_VAL_NX90_mtgy_op_x8 0x00000000

#define MSK_NX90_mtgy_op_x8_val         0xffffffff
#define SRT_NX90_mtgy_op_x8_val         0
#define DFLT_VAL_NX90_mtgy_op_x8_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x8_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x8': */
#define MSK_USED_BITS_NX90_mtgy_op_x8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x9 */
/* => MWMM operand X register 9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x9  0x00001C24
#define Adr_NX90_mtgy_mtgy_op_x9 0xFF083C24
#define Adr_NX90_mtgy_op_x9      0xFF083C24
#define DFLT_VAL_NX90_mtgy_op_x9 0x00000000

#define MSK_NX90_mtgy_op_x9_val         0xffffffff
#define SRT_NX90_mtgy_op_x9_val         0
#define DFLT_VAL_NX90_mtgy_op_x9_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x9_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x9': */
#define MSK_USED_BITS_NX90_mtgy_op_x9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x10 */
/* => MWMM operand X register 10 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x10  0x00001C28
#define Adr_NX90_mtgy_mtgy_op_x10 0xFF083C28
#define Adr_NX90_mtgy_op_x10      0xFF083C28
#define DFLT_VAL_NX90_mtgy_op_x10 0x00000000

#define MSK_NX90_mtgy_op_x10_val         0xffffffff
#define SRT_NX90_mtgy_op_x10_val         0
#define DFLT_VAL_NX90_mtgy_op_x10_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x10_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x10': */
#define MSK_USED_BITS_NX90_mtgy_op_x10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x11 */
/* => MWMM operand X register 11 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x11  0x00001C2C
#define Adr_NX90_mtgy_mtgy_op_x11 0xFF083C2C
#define Adr_NX90_mtgy_op_x11      0xFF083C2C
#define DFLT_VAL_NX90_mtgy_op_x11 0x00000000

#define MSK_NX90_mtgy_op_x11_val         0xffffffff
#define SRT_NX90_mtgy_op_x11_val         0
#define DFLT_VAL_NX90_mtgy_op_x11_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x11_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x11': */
#define MSK_USED_BITS_NX90_mtgy_op_x11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x12 */
/* => MWMM operand X register 12 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x12  0x00001C30
#define Adr_NX90_mtgy_mtgy_op_x12 0xFF083C30
#define Adr_NX90_mtgy_op_x12      0xFF083C30
#define DFLT_VAL_NX90_mtgy_op_x12 0x00000000

#define MSK_NX90_mtgy_op_x12_val         0xffffffff
#define SRT_NX90_mtgy_op_x12_val         0
#define DFLT_VAL_NX90_mtgy_op_x12_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x12_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x12': */
#define MSK_USED_BITS_NX90_mtgy_op_x12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x13 */
/* => MWMM operand X register 13 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x13  0x00001C34
#define Adr_NX90_mtgy_mtgy_op_x13 0xFF083C34
#define Adr_NX90_mtgy_op_x13      0xFF083C34
#define DFLT_VAL_NX90_mtgy_op_x13 0x00000000

#define MSK_NX90_mtgy_op_x13_val         0xffffffff
#define SRT_NX90_mtgy_op_x13_val         0
#define DFLT_VAL_NX90_mtgy_op_x13_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x13_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x13': */
#define MSK_USED_BITS_NX90_mtgy_op_x13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x14 */
/* => MWMM operand X register 14 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x14  0x00001C38
#define Adr_NX90_mtgy_mtgy_op_x14 0xFF083C38
#define Adr_NX90_mtgy_op_x14      0xFF083C38
#define DFLT_VAL_NX90_mtgy_op_x14 0x00000000

#define MSK_NX90_mtgy_op_x14_val         0xffffffff
#define SRT_NX90_mtgy_op_x14_val         0
#define DFLT_VAL_NX90_mtgy_op_x14_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x14_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x14': */
#define MSK_USED_BITS_NX90_mtgy_op_x14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x15 */
/* => MWMM operand X register 15 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x15  0x00001C3C
#define Adr_NX90_mtgy_mtgy_op_x15 0xFF083C3C
#define Adr_NX90_mtgy_op_x15      0xFF083C3C
#define DFLT_VAL_NX90_mtgy_op_x15 0x00000000

#define MSK_NX90_mtgy_op_x15_val         0xffffffff
#define SRT_NX90_mtgy_op_x15_val         0
#define DFLT_VAL_NX90_mtgy_op_x15_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x15_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x15': */
#define MSK_USED_BITS_NX90_mtgy_op_x15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x16 */
/* => MWMM operand X register 16 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x16  0x00001C40
#define Adr_NX90_mtgy_mtgy_op_x16 0xFF083C40
#define Adr_NX90_mtgy_op_x16      0xFF083C40
#define DFLT_VAL_NX90_mtgy_op_x16 0x00000000

#define MSK_NX90_mtgy_op_x16_val         0xffffffff
#define SRT_NX90_mtgy_op_x16_val         0
#define DFLT_VAL_NX90_mtgy_op_x16_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x16_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x16': */
#define MSK_USED_BITS_NX90_mtgy_op_x16 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x17 */
/* => MWMM operand X register 17 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x17  0x00001C44
#define Adr_NX90_mtgy_mtgy_op_x17 0xFF083C44
#define Adr_NX90_mtgy_op_x17      0xFF083C44
#define DFLT_VAL_NX90_mtgy_op_x17 0x00000000

#define MSK_NX90_mtgy_op_x17_val         0xffffffff
#define SRT_NX90_mtgy_op_x17_val         0
#define DFLT_VAL_NX90_mtgy_op_x17_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x17_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x17': */
#define MSK_USED_BITS_NX90_mtgy_op_x17 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x18 */
/* => MWMM operand X register 18 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x18  0x00001C48
#define Adr_NX90_mtgy_mtgy_op_x18 0xFF083C48
#define Adr_NX90_mtgy_op_x18      0xFF083C48
#define DFLT_VAL_NX90_mtgy_op_x18 0x00000000

#define MSK_NX90_mtgy_op_x18_val         0xffffffff
#define SRT_NX90_mtgy_op_x18_val         0
#define DFLT_VAL_NX90_mtgy_op_x18_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x18_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x18': */
#define MSK_USED_BITS_NX90_mtgy_op_x18 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x19 */
/* => MWMM operand X register 19 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x19  0x00001C4C
#define Adr_NX90_mtgy_mtgy_op_x19 0xFF083C4C
#define Adr_NX90_mtgy_op_x19      0xFF083C4C
#define DFLT_VAL_NX90_mtgy_op_x19 0x00000000

#define MSK_NX90_mtgy_op_x19_val         0xffffffff
#define SRT_NX90_mtgy_op_x19_val         0
#define DFLT_VAL_NX90_mtgy_op_x19_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x19_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x19': */
#define MSK_USED_BITS_NX90_mtgy_op_x19 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x20 */
/* => MWMM operand X register 20 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x20  0x00001C50
#define Adr_NX90_mtgy_mtgy_op_x20 0xFF083C50
#define Adr_NX90_mtgy_op_x20      0xFF083C50
#define DFLT_VAL_NX90_mtgy_op_x20 0x00000000

#define MSK_NX90_mtgy_op_x20_val         0xffffffff
#define SRT_NX90_mtgy_op_x20_val         0
#define DFLT_VAL_NX90_mtgy_op_x20_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x20_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x20': */
#define MSK_USED_BITS_NX90_mtgy_op_x20 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x21 */
/* => MWMM operand X register 21 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x21  0x00001C54
#define Adr_NX90_mtgy_mtgy_op_x21 0xFF083C54
#define Adr_NX90_mtgy_op_x21      0xFF083C54
#define DFLT_VAL_NX90_mtgy_op_x21 0x00000000

#define MSK_NX90_mtgy_op_x21_val         0xffffffff
#define SRT_NX90_mtgy_op_x21_val         0
#define DFLT_VAL_NX90_mtgy_op_x21_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x21_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x21': */
#define MSK_USED_BITS_NX90_mtgy_op_x21 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x22 */
/* => MWMM operand X register 22 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x22  0x00001C58
#define Adr_NX90_mtgy_mtgy_op_x22 0xFF083C58
#define Adr_NX90_mtgy_op_x22      0xFF083C58
#define DFLT_VAL_NX90_mtgy_op_x22 0x00000000

#define MSK_NX90_mtgy_op_x22_val         0xffffffff
#define SRT_NX90_mtgy_op_x22_val         0
#define DFLT_VAL_NX90_mtgy_op_x22_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x22_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x22': */
#define MSK_USED_BITS_NX90_mtgy_op_x22 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x23 */
/* => MWMM operand X register 23 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x23  0x00001C5C
#define Adr_NX90_mtgy_mtgy_op_x23 0xFF083C5C
#define Adr_NX90_mtgy_op_x23      0xFF083C5C
#define DFLT_VAL_NX90_mtgy_op_x23 0x00000000

#define MSK_NX90_mtgy_op_x23_val         0xffffffff
#define SRT_NX90_mtgy_op_x23_val         0
#define DFLT_VAL_NX90_mtgy_op_x23_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x23_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x23': */
#define MSK_USED_BITS_NX90_mtgy_op_x23 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x24 */
/* => MWMM operand X register 24 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x24  0x00001C60
#define Adr_NX90_mtgy_mtgy_op_x24 0xFF083C60
#define Adr_NX90_mtgy_op_x24      0xFF083C60
#define DFLT_VAL_NX90_mtgy_op_x24 0x00000000

#define MSK_NX90_mtgy_op_x24_val         0xffffffff
#define SRT_NX90_mtgy_op_x24_val         0
#define DFLT_VAL_NX90_mtgy_op_x24_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x24_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x24': */
#define MSK_USED_BITS_NX90_mtgy_op_x24 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x25 */
/* => MWMM operand X register 25 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x25  0x00001C64
#define Adr_NX90_mtgy_mtgy_op_x25 0xFF083C64
#define Adr_NX90_mtgy_op_x25      0xFF083C64
#define DFLT_VAL_NX90_mtgy_op_x25 0x00000000

#define MSK_NX90_mtgy_op_x25_val         0xffffffff
#define SRT_NX90_mtgy_op_x25_val         0
#define DFLT_VAL_NX90_mtgy_op_x25_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x25_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x25': */
#define MSK_USED_BITS_NX90_mtgy_op_x25 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x26 */
/* => MWMM operand X register 26 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x26  0x00001C68
#define Adr_NX90_mtgy_mtgy_op_x26 0xFF083C68
#define Adr_NX90_mtgy_op_x26      0xFF083C68
#define DFLT_VAL_NX90_mtgy_op_x26 0x00000000

#define MSK_NX90_mtgy_op_x26_val         0xffffffff
#define SRT_NX90_mtgy_op_x26_val         0
#define DFLT_VAL_NX90_mtgy_op_x26_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x26_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x26': */
#define MSK_USED_BITS_NX90_mtgy_op_x26 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x27 */
/* => MWMM operand X register 27 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x27  0x00001C6C
#define Adr_NX90_mtgy_mtgy_op_x27 0xFF083C6C
#define Adr_NX90_mtgy_op_x27      0xFF083C6C
#define DFLT_VAL_NX90_mtgy_op_x27 0x00000000

#define MSK_NX90_mtgy_op_x27_val         0xffffffff
#define SRT_NX90_mtgy_op_x27_val         0
#define DFLT_VAL_NX90_mtgy_op_x27_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x27_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x27': */
#define MSK_USED_BITS_NX90_mtgy_op_x27 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x28 */
/* => MWMM operand X register 28 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x28  0x00001C70
#define Adr_NX90_mtgy_mtgy_op_x28 0xFF083C70
#define Adr_NX90_mtgy_op_x28      0xFF083C70
#define DFLT_VAL_NX90_mtgy_op_x28 0x00000000

#define MSK_NX90_mtgy_op_x28_val         0xffffffff
#define SRT_NX90_mtgy_op_x28_val         0
#define DFLT_VAL_NX90_mtgy_op_x28_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x28_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x28': */
#define MSK_USED_BITS_NX90_mtgy_op_x28 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x29 */
/* => MWMM operand X register 29 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x29  0x00001C74
#define Adr_NX90_mtgy_mtgy_op_x29 0xFF083C74
#define Adr_NX90_mtgy_op_x29      0xFF083C74
#define DFLT_VAL_NX90_mtgy_op_x29 0x00000000

#define MSK_NX90_mtgy_op_x29_val         0xffffffff
#define SRT_NX90_mtgy_op_x29_val         0
#define DFLT_VAL_NX90_mtgy_op_x29_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x29_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x29': */
#define MSK_USED_BITS_NX90_mtgy_op_x29 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x30 */
/* => MWMM operand X register 30 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x30  0x00001C78
#define Adr_NX90_mtgy_mtgy_op_x30 0xFF083C78
#define Adr_NX90_mtgy_op_x30      0xFF083C78
#define DFLT_VAL_NX90_mtgy_op_x30 0x00000000

#define MSK_NX90_mtgy_op_x30_val         0xffffffff
#define SRT_NX90_mtgy_op_x30_val         0
#define DFLT_VAL_NX90_mtgy_op_x30_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x30_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x30': */
#define MSK_USED_BITS_NX90_mtgy_op_x30 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x31 */
/* => MWMM operand X register 31 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x31  0x00001C7C
#define Adr_NX90_mtgy_mtgy_op_x31 0xFF083C7C
#define Adr_NX90_mtgy_op_x31      0xFF083C7C
#define DFLT_VAL_NX90_mtgy_op_x31 0x00000000

#define MSK_NX90_mtgy_op_x31_val         0xffffffff
#define SRT_NX90_mtgy_op_x31_val         0
#define DFLT_VAL_NX90_mtgy_op_x31_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x31_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x31': */
#define MSK_USED_BITS_NX90_mtgy_op_x31 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x32 */
/* => MWMM operand X register 32 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x32  0x00001C80
#define Adr_NX90_mtgy_mtgy_op_x32 0xFF083C80
#define Adr_NX90_mtgy_op_x32      0xFF083C80
#define DFLT_VAL_NX90_mtgy_op_x32 0x00000000

#define MSK_NX90_mtgy_op_x32_val         0xffffffff
#define SRT_NX90_mtgy_op_x32_val         0
#define DFLT_VAL_NX90_mtgy_op_x32_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x32_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x32': */
#define MSK_USED_BITS_NX90_mtgy_op_x32 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x33 */
/* => MWMM operand X register 33 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x33  0x00001C84
#define Adr_NX90_mtgy_mtgy_op_x33 0xFF083C84
#define Adr_NX90_mtgy_op_x33      0xFF083C84
#define DFLT_VAL_NX90_mtgy_op_x33 0x00000000

#define MSK_NX90_mtgy_op_x33_val         0xffffffff
#define SRT_NX90_mtgy_op_x33_val         0
#define DFLT_VAL_NX90_mtgy_op_x33_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x33_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x33': */
#define MSK_USED_BITS_NX90_mtgy_op_x33 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x34 */
/* => MWMM operand X register 34 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x34  0x00001C88
#define Adr_NX90_mtgy_mtgy_op_x34 0xFF083C88
#define Adr_NX90_mtgy_op_x34      0xFF083C88
#define DFLT_VAL_NX90_mtgy_op_x34 0x00000000

#define MSK_NX90_mtgy_op_x34_val         0xffffffff
#define SRT_NX90_mtgy_op_x34_val         0
#define DFLT_VAL_NX90_mtgy_op_x34_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x34_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x34': */
#define MSK_USED_BITS_NX90_mtgy_op_x34 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x35 */
/* => MWMM operand X register 35 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x35  0x00001C8C
#define Adr_NX90_mtgy_mtgy_op_x35 0xFF083C8C
#define Adr_NX90_mtgy_op_x35      0xFF083C8C
#define DFLT_VAL_NX90_mtgy_op_x35 0x00000000

#define MSK_NX90_mtgy_op_x35_val         0xffffffff
#define SRT_NX90_mtgy_op_x35_val         0
#define DFLT_VAL_NX90_mtgy_op_x35_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x35_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x35': */
#define MSK_USED_BITS_NX90_mtgy_op_x35 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x36 */
/* => MWMM operand X register 36 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x36  0x00001C90
#define Adr_NX90_mtgy_mtgy_op_x36 0xFF083C90
#define Adr_NX90_mtgy_op_x36      0xFF083C90
#define DFLT_VAL_NX90_mtgy_op_x36 0x00000000

#define MSK_NX90_mtgy_op_x36_val         0xffffffff
#define SRT_NX90_mtgy_op_x36_val         0
#define DFLT_VAL_NX90_mtgy_op_x36_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x36_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x36': */
#define MSK_USED_BITS_NX90_mtgy_op_x36 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x37 */
/* => MWMM operand X register 37 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x37  0x00001C94
#define Adr_NX90_mtgy_mtgy_op_x37 0xFF083C94
#define Adr_NX90_mtgy_op_x37      0xFF083C94
#define DFLT_VAL_NX90_mtgy_op_x37 0x00000000

#define MSK_NX90_mtgy_op_x37_val         0xffffffff
#define SRT_NX90_mtgy_op_x37_val         0
#define DFLT_VAL_NX90_mtgy_op_x37_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x37_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x37': */
#define MSK_USED_BITS_NX90_mtgy_op_x37 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x38 */
/* => MWMM operand X register 38 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x38  0x00001C98
#define Adr_NX90_mtgy_mtgy_op_x38 0xFF083C98
#define Adr_NX90_mtgy_op_x38      0xFF083C98
#define DFLT_VAL_NX90_mtgy_op_x38 0x00000000

#define MSK_NX90_mtgy_op_x38_val         0xffffffff
#define SRT_NX90_mtgy_op_x38_val         0
#define DFLT_VAL_NX90_mtgy_op_x38_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x38_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x38': */
#define MSK_USED_BITS_NX90_mtgy_op_x38 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x39 */
/* => MWMM operand X register 39 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x39  0x00001C9C
#define Adr_NX90_mtgy_mtgy_op_x39 0xFF083C9C
#define Adr_NX90_mtgy_op_x39      0xFF083C9C
#define DFLT_VAL_NX90_mtgy_op_x39 0x00000000

#define MSK_NX90_mtgy_op_x39_val         0xffffffff
#define SRT_NX90_mtgy_op_x39_val         0
#define DFLT_VAL_NX90_mtgy_op_x39_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x39_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x39': */
#define MSK_USED_BITS_NX90_mtgy_op_x39 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x40 */
/* => MWMM operand X register 40 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x40  0x00001CA0
#define Adr_NX90_mtgy_mtgy_op_x40 0xFF083CA0
#define Adr_NX90_mtgy_op_x40      0xFF083CA0
#define DFLT_VAL_NX90_mtgy_op_x40 0x00000000

#define MSK_NX90_mtgy_op_x40_val         0xffffffff
#define SRT_NX90_mtgy_op_x40_val         0
#define DFLT_VAL_NX90_mtgy_op_x40_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x40_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x40': */
#define MSK_USED_BITS_NX90_mtgy_op_x40 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x41 */
/* => MWMM operand X register 41 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x41  0x00001CA4
#define Adr_NX90_mtgy_mtgy_op_x41 0xFF083CA4
#define Adr_NX90_mtgy_op_x41      0xFF083CA4
#define DFLT_VAL_NX90_mtgy_op_x41 0x00000000

#define MSK_NX90_mtgy_op_x41_val         0xffffffff
#define SRT_NX90_mtgy_op_x41_val         0
#define DFLT_VAL_NX90_mtgy_op_x41_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x41_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x41': */
#define MSK_USED_BITS_NX90_mtgy_op_x41 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x42 */
/* => MWMM operand X register 42 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x42  0x00001CA8
#define Adr_NX90_mtgy_mtgy_op_x42 0xFF083CA8
#define Adr_NX90_mtgy_op_x42      0xFF083CA8
#define DFLT_VAL_NX90_mtgy_op_x42 0x00000000

#define MSK_NX90_mtgy_op_x42_val         0xffffffff
#define SRT_NX90_mtgy_op_x42_val         0
#define DFLT_VAL_NX90_mtgy_op_x42_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x42_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x42': */
#define MSK_USED_BITS_NX90_mtgy_op_x42 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x43 */
/* => MWMM operand X register 43 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x43  0x00001CAC
#define Adr_NX90_mtgy_mtgy_op_x43 0xFF083CAC
#define Adr_NX90_mtgy_op_x43      0xFF083CAC
#define DFLT_VAL_NX90_mtgy_op_x43 0x00000000

#define MSK_NX90_mtgy_op_x43_val         0xffffffff
#define SRT_NX90_mtgy_op_x43_val         0
#define DFLT_VAL_NX90_mtgy_op_x43_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x43_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x43': */
#define MSK_USED_BITS_NX90_mtgy_op_x43 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x44 */
/* => MWMM operand X register 44 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x44  0x00001CB0
#define Adr_NX90_mtgy_mtgy_op_x44 0xFF083CB0
#define Adr_NX90_mtgy_op_x44      0xFF083CB0
#define DFLT_VAL_NX90_mtgy_op_x44 0x00000000

#define MSK_NX90_mtgy_op_x44_val         0xffffffff
#define SRT_NX90_mtgy_op_x44_val         0
#define DFLT_VAL_NX90_mtgy_op_x44_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x44_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x44': */
#define MSK_USED_BITS_NX90_mtgy_op_x44 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x45 */
/* => MWMM operand X register 45 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x45  0x00001CB4
#define Adr_NX90_mtgy_mtgy_op_x45 0xFF083CB4
#define Adr_NX90_mtgy_op_x45      0xFF083CB4
#define DFLT_VAL_NX90_mtgy_op_x45 0x00000000

#define MSK_NX90_mtgy_op_x45_val         0xffffffff
#define SRT_NX90_mtgy_op_x45_val         0
#define DFLT_VAL_NX90_mtgy_op_x45_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x45_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x45': */
#define MSK_USED_BITS_NX90_mtgy_op_x45 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x46 */
/* => MWMM operand X register 46 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x46  0x00001CB8
#define Adr_NX90_mtgy_mtgy_op_x46 0xFF083CB8
#define Adr_NX90_mtgy_op_x46      0xFF083CB8
#define DFLT_VAL_NX90_mtgy_op_x46 0x00000000

#define MSK_NX90_mtgy_op_x46_val         0xffffffff
#define SRT_NX90_mtgy_op_x46_val         0
#define DFLT_VAL_NX90_mtgy_op_x46_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x46_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x46': */
#define MSK_USED_BITS_NX90_mtgy_op_x46 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x47 */
/* => MWMM operand X register 47 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x47  0x00001CBC
#define Adr_NX90_mtgy_mtgy_op_x47 0xFF083CBC
#define Adr_NX90_mtgy_op_x47      0xFF083CBC
#define DFLT_VAL_NX90_mtgy_op_x47 0x00000000

#define MSK_NX90_mtgy_op_x47_val         0xffffffff
#define SRT_NX90_mtgy_op_x47_val         0
#define DFLT_VAL_NX90_mtgy_op_x47_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x47_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x47': */
#define MSK_USED_BITS_NX90_mtgy_op_x47 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x48 */
/* => MWMM operand X register 48 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x48  0x00001CC0
#define Adr_NX90_mtgy_mtgy_op_x48 0xFF083CC0
#define Adr_NX90_mtgy_op_x48      0xFF083CC0
#define DFLT_VAL_NX90_mtgy_op_x48 0x00000000

#define MSK_NX90_mtgy_op_x48_val         0xffffffff
#define SRT_NX90_mtgy_op_x48_val         0
#define DFLT_VAL_NX90_mtgy_op_x48_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x48_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x48': */
#define MSK_USED_BITS_NX90_mtgy_op_x48 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x49 */
/* => MWMM operand X register 49 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x49  0x00001CC4
#define Adr_NX90_mtgy_mtgy_op_x49 0xFF083CC4
#define Adr_NX90_mtgy_op_x49      0xFF083CC4
#define DFLT_VAL_NX90_mtgy_op_x49 0x00000000

#define MSK_NX90_mtgy_op_x49_val         0xffffffff
#define SRT_NX90_mtgy_op_x49_val         0
#define DFLT_VAL_NX90_mtgy_op_x49_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x49_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x49': */
#define MSK_USED_BITS_NX90_mtgy_op_x49 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x50 */
/* => MWMM operand X register 50 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x50  0x00001CC8
#define Adr_NX90_mtgy_mtgy_op_x50 0xFF083CC8
#define Adr_NX90_mtgy_op_x50      0xFF083CC8
#define DFLT_VAL_NX90_mtgy_op_x50 0x00000000

#define MSK_NX90_mtgy_op_x50_val         0xffffffff
#define SRT_NX90_mtgy_op_x50_val         0
#define DFLT_VAL_NX90_mtgy_op_x50_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x50_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x50': */
#define MSK_USED_BITS_NX90_mtgy_op_x50 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x51 */
/* => MWMM operand X register 51 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x51  0x00001CCC
#define Adr_NX90_mtgy_mtgy_op_x51 0xFF083CCC
#define Adr_NX90_mtgy_op_x51      0xFF083CCC
#define DFLT_VAL_NX90_mtgy_op_x51 0x00000000

#define MSK_NX90_mtgy_op_x51_val         0xffffffff
#define SRT_NX90_mtgy_op_x51_val         0
#define DFLT_VAL_NX90_mtgy_op_x51_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x51_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x51': */
#define MSK_USED_BITS_NX90_mtgy_op_x51 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x52 */
/* => MWMM operand X register 52 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x52  0x00001CD0
#define Adr_NX90_mtgy_mtgy_op_x52 0xFF083CD0
#define Adr_NX90_mtgy_op_x52      0xFF083CD0
#define DFLT_VAL_NX90_mtgy_op_x52 0x00000000

#define MSK_NX90_mtgy_op_x52_val         0xffffffff
#define SRT_NX90_mtgy_op_x52_val         0
#define DFLT_VAL_NX90_mtgy_op_x52_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x52_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x52': */
#define MSK_USED_BITS_NX90_mtgy_op_x52 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x53 */
/* => MWMM operand X register 53 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x53  0x00001CD4
#define Adr_NX90_mtgy_mtgy_op_x53 0xFF083CD4
#define Adr_NX90_mtgy_op_x53      0xFF083CD4
#define DFLT_VAL_NX90_mtgy_op_x53 0x00000000

#define MSK_NX90_mtgy_op_x53_val         0xffffffff
#define SRT_NX90_mtgy_op_x53_val         0
#define DFLT_VAL_NX90_mtgy_op_x53_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x53_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x53': */
#define MSK_USED_BITS_NX90_mtgy_op_x53 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x54 */
/* => MWMM operand X register 54 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x54  0x00001CD8
#define Adr_NX90_mtgy_mtgy_op_x54 0xFF083CD8
#define Adr_NX90_mtgy_op_x54      0xFF083CD8
#define DFLT_VAL_NX90_mtgy_op_x54 0x00000000

#define MSK_NX90_mtgy_op_x54_val         0xffffffff
#define SRT_NX90_mtgy_op_x54_val         0
#define DFLT_VAL_NX90_mtgy_op_x54_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x54_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x54': */
#define MSK_USED_BITS_NX90_mtgy_op_x54 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x55 */
/* => MWMM operand X register 55 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x55  0x00001CDC
#define Adr_NX90_mtgy_mtgy_op_x55 0xFF083CDC
#define Adr_NX90_mtgy_op_x55      0xFF083CDC
#define DFLT_VAL_NX90_mtgy_op_x55 0x00000000

#define MSK_NX90_mtgy_op_x55_val         0xffffffff
#define SRT_NX90_mtgy_op_x55_val         0
#define DFLT_VAL_NX90_mtgy_op_x55_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x55_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x55': */
#define MSK_USED_BITS_NX90_mtgy_op_x55 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x56 */
/* => MWMM operand X register 56 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x56  0x00001CE0
#define Adr_NX90_mtgy_mtgy_op_x56 0xFF083CE0
#define Adr_NX90_mtgy_op_x56      0xFF083CE0
#define DFLT_VAL_NX90_mtgy_op_x56 0x00000000

#define MSK_NX90_mtgy_op_x56_val         0xffffffff
#define SRT_NX90_mtgy_op_x56_val         0
#define DFLT_VAL_NX90_mtgy_op_x56_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x56_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x56': */
#define MSK_USED_BITS_NX90_mtgy_op_x56 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x57 */
/* => MWMM operand X register 57 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x57  0x00001CE4
#define Adr_NX90_mtgy_mtgy_op_x57 0xFF083CE4
#define Adr_NX90_mtgy_op_x57      0xFF083CE4
#define DFLT_VAL_NX90_mtgy_op_x57 0x00000000

#define MSK_NX90_mtgy_op_x57_val         0xffffffff
#define SRT_NX90_mtgy_op_x57_val         0
#define DFLT_VAL_NX90_mtgy_op_x57_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x57_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x57': */
#define MSK_USED_BITS_NX90_mtgy_op_x57 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x58 */
/* => MWMM operand X register 58 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x58  0x00001CE8
#define Adr_NX90_mtgy_mtgy_op_x58 0xFF083CE8
#define Adr_NX90_mtgy_op_x58      0xFF083CE8
#define DFLT_VAL_NX90_mtgy_op_x58 0x00000000

#define MSK_NX90_mtgy_op_x58_val         0xffffffff
#define SRT_NX90_mtgy_op_x58_val         0
#define DFLT_VAL_NX90_mtgy_op_x58_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x58_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x58': */
#define MSK_USED_BITS_NX90_mtgy_op_x58 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x59 */
/* => MWMM operand X register 59 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x59  0x00001CEC
#define Adr_NX90_mtgy_mtgy_op_x59 0xFF083CEC
#define Adr_NX90_mtgy_op_x59      0xFF083CEC
#define DFLT_VAL_NX90_mtgy_op_x59 0x00000000

#define MSK_NX90_mtgy_op_x59_val         0xffffffff
#define SRT_NX90_mtgy_op_x59_val         0
#define DFLT_VAL_NX90_mtgy_op_x59_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x59_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x59': */
#define MSK_USED_BITS_NX90_mtgy_op_x59 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x60 */
/* => MWMM operand X register 60 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x60  0x00001CF0
#define Adr_NX90_mtgy_mtgy_op_x60 0xFF083CF0
#define Adr_NX90_mtgy_op_x60      0xFF083CF0
#define DFLT_VAL_NX90_mtgy_op_x60 0x00000000

#define MSK_NX90_mtgy_op_x60_val         0xffffffff
#define SRT_NX90_mtgy_op_x60_val         0
#define DFLT_VAL_NX90_mtgy_op_x60_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x60_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x60': */
#define MSK_USED_BITS_NX90_mtgy_op_x60 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x61 */
/* => MWMM operand X register 61 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x61  0x00001CF4
#define Adr_NX90_mtgy_mtgy_op_x61 0xFF083CF4
#define Adr_NX90_mtgy_op_x61      0xFF083CF4
#define DFLT_VAL_NX90_mtgy_op_x61 0x00000000

#define MSK_NX90_mtgy_op_x61_val         0xffffffff
#define SRT_NX90_mtgy_op_x61_val         0
#define DFLT_VAL_NX90_mtgy_op_x61_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x61_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x61': */
#define MSK_USED_BITS_NX90_mtgy_op_x61 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x62 */
/* => MWMM operand X register 62 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x62  0x00001CF8
#define Adr_NX90_mtgy_mtgy_op_x62 0xFF083CF8
#define Adr_NX90_mtgy_op_x62      0xFF083CF8
#define DFLT_VAL_NX90_mtgy_op_x62 0x00000000

#define MSK_NX90_mtgy_op_x62_val         0xffffffff
#define SRT_NX90_mtgy_op_x62_val         0
#define DFLT_VAL_NX90_mtgy_op_x62_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x62_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x62': */
#define MSK_USED_BITS_NX90_mtgy_op_x62 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x63 */
/* => MWMM operand X register 63 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x63  0x00001CFC
#define Adr_NX90_mtgy_mtgy_op_x63 0xFF083CFC
#define Adr_NX90_mtgy_op_x63      0xFF083CFC
#define DFLT_VAL_NX90_mtgy_op_x63 0x00000000

#define MSK_NX90_mtgy_op_x63_val         0xffffffff
#define SRT_NX90_mtgy_op_x63_val         0
#define DFLT_VAL_NX90_mtgy_op_x63_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x63_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x63': */
#define MSK_USED_BITS_NX90_mtgy_op_x63 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x64 */
/* => MWMM operand X register 64 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x64  0x00001D00
#define Adr_NX90_mtgy_mtgy_op_x64 0xFF083D00
#define Adr_NX90_mtgy_op_x64      0xFF083D00
#define DFLT_VAL_NX90_mtgy_op_x64 0x00000000

#define MSK_NX90_mtgy_op_x64_val         0xffffffff
#define SRT_NX90_mtgy_op_x64_val         0
#define DFLT_VAL_NX90_mtgy_op_x64_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x64_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x64': */
#define MSK_USED_BITS_NX90_mtgy_op_x64 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x65 */
/* => MWMM operand X register 65 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x65  0x00001D04
#define Adr_NX90_mtgy_mtgy_op_x65 0xFF083D04
#define Adr_NX90_mtgy_op_x65      0xFF083D04
#define DFLT_VAL_NX90_mtgy_op_x65 0x00000000

#define MSK_NX90_mtgy_op_x65_val         0xffffffff
#define SRT_NX90_mtgy_op_x65_val         0
#define DFLT_VAL_NX90_mtgy_op_x65_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x65_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x65': */
#define MSK_USED_BITS_NX90_mtgy_op_x65 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x66 */
/* => MWMM operand X register 66 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x66  0x00001D08
#define Adr_NX90_mtgy_mtgy_op_x66 0xFF083D08
#define Adr_NX90_mtgy_op_x66      0xFF083D08
#define DFLT_VAL_NX90_mtgy_op_x66 0x00000000

#define MSK_NX90_mtgy_op_x66_val         0xffffffff
#define SRT_NX90_mtgy_op_x66_val         0
#define DFLT_VAL_NX90_mtgy_op_x66_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x66_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x66': */
#define MSK_USED_BITS_NX90_mtgy_op_x66 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x67 */
/* => MWMM operand X register 67 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x67  0x00001D0C
#define Adr_NX90_mtgy_mtgy_op_x67 0xFF083D0C
#define Adr_NX90_mtgy_op_x67      0xFF083D0C
#define DFLT_VAL_NX90_mtgy_op_x67 0x00000000

#define MSK_NX90_mtgy_op_x67_val         0xffffffff
#define SRT_NX90_mtgy_op_x67_val         0
#define DFLT_VAL_NX90_mtgy_op_x67_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x67_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x67': */
#define MSK_USED_BITS_NX90_mtgy_op_x67 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x68 */
/* => MWMM operand X register 68 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x68  0x00001D10
#define Adr_NX90_mtgy_mtgy_op_x68 0xFF083D10
#define Adr_NX90_mtgy_op_x68      0xFF083D10
#define DFLT_VAL_NX90_mtgy_op_x68 0x00000000

#define MSK_NX90_mtgy_op_x68_val         0xffffffff
#define SRT_NX90_mtgy_op_x68_val         0
#define DFLT_VAL_NX90_mtgy_op_x68_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x68_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x68': */
#define MSK_USED_BITS_NX90_mtgy_op_x68 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x69 */
/* => MWMM operand X register 69 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x69  0x00001D14
#define Adr_NX90_mtgy_mtgy_op_x69 0xFF083D14
#define Adr_NX90_mtgy_op_x69      0xFF083D14
#define DFLT_VAL_NX90_mtgy_op_x69 0x00000000

#define MSK_NX90_mtgy_op_x69_val         0xffffffff
#define SRT_NX90_mtgy_op_x69_val         0
#define DFLT_VAL_NX90_mtgy_op_x69_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x69_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x69': */
#define MSK_USED_BITS_NX90_mtgy_op_x69 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x70 */
/* => MWMM operand X register 70 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x70  0x00001D18
#define Adr_NX90_mtgy_mtgy_op_x70 0xFF083D18
#define Adr_NX90_mtgy_op_x70      0xFF083D18
#define DFLT_VAL_NX90_mtgy_op_x70 0x00000000

#define MSK_NX90_mtgy_op_x70_val         0xffffffff
#define SRT_NX90_mtgy_op_x70_val         0
#define DFLT_VAL_NX90_mtgy_op_x70_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x70_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x70': */
#define MSK_USED_BITS_NX90_mtgy_op_x70 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x71 */
/* => MWMM operand X register 71 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x71  0x00001D1C
#define Adr_NX90_mtgy_mtgy_op_x71 0xFF083D1C
#define Adr_NX90_mtgy_op_x71      0xFF083D1C
#define DFLT_VAL_NX90_mtgy_op_x71 0x00000000

#define MSK_NX90_mtgy_op_x71_val         0xffffffff
#define SRT_NX90_mtgy_op_x71_val         0
#define DFLT_VAL_NX90_mtgy_op_x71_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x71_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x71': */
#define MSK_USED_BITS_NX90_mtgy_op_x71 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x72 */
/* => MWMM operand X register 72 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x72  0x00001D20
#define Adr_NX90_mtgy_mtgy_op_x72 0xFF083D20
#define Adr_NX90_mtgy_op_x72      0xFF083D20
#define DFLT_VAL_NX90_mtgy_op_x72 0x00000000

#define MSK_NX90_mtgy_op_x72_val         0xffffffff
#define SRT_NX90_mtgy_op_x72_val         0
#define DFLT_VAL_NX90_mtgy_op_x72_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x72_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x72': */
#define MSK_USED_BITS_NX90_mtgy_op_x72 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x73 */
/* => MWMM operand X register 73 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x73  0x00001D24
#define Adr_NX90_mtgy_mtgy_op_x73 0xFF083D24
#define Adr_NX90_mtgy_op_x73      0xFF083D24
#define DFLT_VAL_NX90_mtgy_op_x73 0x00000000

#define MSK_NX90_mtgy_op_x73_val         0xffffffff
#define SRT_NX90_mtgy_op_x73_val         0
#define DFLT_VAL_NX90_mtgy_op_x73_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x73_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x73': */
#define MSK_USED_BITS_NX90_mtgy_op_x73 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x74 */
/* => MWMM operand X register 74 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x74  0x00001D28
#define Adr_NX90_mtgy_mtgy_op_x74 0xFF083D28
#define Adr_NX90_mtgy_op_x74      0xFF083D28
#define DFLT_VAL_NX90_mtgy_op_x74 0x00000000

#define MSK_NX90_mtgy_op_x74_val         0xffffffff
#define SRT_NX90_mtgy_op_x74_val         0
#define DFLT_VAL_NX90_mtgy_op_x74_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x74_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x74': */
#define MSK_USED_BITS_NX90_mtgy_op_x74 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x75 */
/* => MWMM operand X register 75 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x75  0x00001D2C
#define Adr_NX90_mtgy_mtgy_op_x75 0xFF083D2C
#define Adr_NX90_mtgy_op_x75      0xFF083D2C
#define DFLT_VAL_NX90_mtgy_op_x75 0x00000000

#define MSK_NX90_mtgy_op_x75_val         0xffffffff
#define SRT_NX90_mtgy_op_x75_val         0
#define DFLT_VAL_NX90_mtgy_op_x75_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x75_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x75': */
#define MSK_USED_BITS_NX90_mtgy_op_x75 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x76 */
/* => MWMM operand X register 76 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x76  0x00001D30
#define Adr_NX90_mtgy_mtgy_op_x76 0xFF083D30
#define Adr_NX90_mtgy_op_x76      0xFF083D30
#define DFLT_VAL_NX90_mtgy_op_x76 0x00000000

#define MSK_NX90_mtgy_op_x76_val         0xffffffff
#define SRT_NX90_mtgy_op_x76_val         0
#define DFLT_VAL_NX90_mtgy_op_x76_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x76_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x76': */
#define MSK_USED_BITS_NX90_mtgy_op_x76 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x77 */
/* => MWMM operand X register 77 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x77  0x00001D34
#define Adr_NX90_mtgy_mtgy_op_x77 0xFF083D34
#define Adr_NX90_mtgy_op_x77      0xFF083D34
#define DFLT_VAL_NX90_mtgy_op_x77 0x00000000

#define MSK_NX90_mtgy_op_x77_val         0xffffffff
#define SRT_NX90_mtgy_op_x77_val         0
#define DFLT_VAL_NX90_mtgy_op_x77_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x77_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x77': */
#define MSK_USED_BITS_NX90_mtgy_op_x77 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x78 */
/* => MWMM operand X register 78 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x78  0x00001D38
#define Adr_NX90_mtgy_mtgy_op_x78 0xFF083D38
#define Adr_NX90_mtgy_op_x78      0xFF083D38
#define DFLT_VAL_NX90_mtgy_op_x78 0x00000000

#define MSK_NX90_mtgy_op_x78_val         0xffffffff
#define SRT_NX90_mtgy_op_x78_val         0
#define DFLT_VAL_NX90_mtgy_op_x78_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x78_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x78': */
#define MSK_USED_BITS_NX90_mtgy_op_x78 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x79 */
/* => MWMM operand X register 79 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x79  0x00001D3C
#define Adr_NX90_mtgy_mtgy_op_x79 0xFF083D3C
#define Adr_NX90_mtgy_op_x79      0xFF083D3C
#define DFLT_VAL_NX90_mtgy_op_x79 0x00000000

#define MSK_NX90_mtgy_op_x79_val         0xffffffff
#define SRT_NX90_mtgy_op_x79_val         0
#define DFLT_VAL_NX90_mtgy_op_x79_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x79_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x79': */
#define MSK_USED_BITS_NX90_mtgy_op_x79 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x80 */
/* => MWMM operand X register 80 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x80  0x00001D40
#define Adr_NX90_mtgy_mtgy_op_x80 0xFF083D40
#define Adr_NX90_mtgy_op_x80      0xFF083D40
#define DFLT_VAL_NX90_mtgy_op_x80 0x00000000

#define MSK_NX90_mtgy_op_x80_val         0xffffffff
#define SRT_NX90_mtgy_op_x80_val         0
#define DFLT_VAL_NX90_mtgy_op_x80_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x80_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x80': */
#define MSK_USED_BITS_NX90_mtgy_op_x80 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x81 */
/* => MWMM operand X register 81 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x81  0x00001D44
#define Adr_NX90_mtgy_mtgy_op_x81 0xFF083D44
#define Adr_NX90_mtgy_op_x81      0xFF083D44
#define DFLT_VAL_NX90_mtgy_op_x81 0x00000000

#define MSK_NX90_mtgy_op_x81_val         0xffffffff
#define SRT_NX90_mtgy_op_x81_val         0
#define DFLT_VAL_NX90_mtgy_op_x81_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x81_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x81': */
#define MSK_USED_BITS_NX90_mtgy_op_x81 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x82 */
/* => MWMM operand X register 82 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x82  0x00001D48
#define Adr_NX90_mtgy_mtgy_op_x82 0xFF083D48
#define Adr_NX90_mtgy_op_x82      0xFF083D48
#define DFLT_VAL_NX90_mtgy_op_x82 0x00000000

#define MSK_NX90_mtgy_op_x82_val         0xffffffff
#define SRT_NX90_mtgy_op_x82_val         0
#define DFLT_VAL_NX90_mtgy_op_x82_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x82_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x82': */
#define MSK_USED_BITS_NX90_mtgy_op_x82 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x83 */
/* => MWMM operand X register 83 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x83  0x00001D4C
#define Adr_NX90_mtgy_mtgy_op_x83 0xFF083D4C
#define Adr_NX90_mtgy_op_x83      0xFF083D4C
#define DFLT_VAL_NX90_mtgy_op_x83 0x00000000

#define MSK_NX90_mtgy_op_x83_val         0xffffffff
#define SRT_NX90_mtgy_op_x83_val         0
#define DFLT_VAL_NX90_mtgy_op_x83_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x83_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x83': */
#define MSK_USED_BITS_NX90_mtgy_op_x83 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x84 */
/* => MWMM operand X register 84 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x84  0x00001D50
#define Adr_NX90_mtgy_mtgy_op_x84 0xFF083D50
#define Adr_NX90_mtgy_op_x84      0xFF083D50
#define DFLT_VAL_NX90_mtgy_op_x84 0x00000000

#define MSK_NX90_mtgy_op_x84_val         0xffffffff
#define SRT_NX90_mtgy_op_x84_val         0
#define DFLT_VAL_NX90_mtgy_op_x84_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x84_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x84': */
#define MSK_USED_BITS_NX90_mtgy_op_x84 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x85 */
/* => MWMM operand X register 85 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x85  0x00001D54
#define Adr_NX90_mtgy_mtgy_op_x85 0xFF083D54
#define Adr_NX90_mtgy_op_x85      0xFF083D54
#define DFLT_VAL_NX90_mtgy_op_x85 0x00000000

#define MSK_NX90_mtgy_op_x85_val         0xffffffff
#define SRT_NX90_mtgy_op_x85_val         0
#define DFLT_VAL_NX90_mtgy_op_x85_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x85_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x85': */
#define MSK_USED_BITS_NX90_mtgy_op_x85 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x86 */
/* => MWMM operand X register 86 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x86  0x00001D58
#define Adr_NX90_mtgy_mtgy_op_x86 0xFF083D58
#define Adr_NX90_mtgy_op_x86      0xFF083D58
#define DFLT_VAL_NX90_mtgy_op_x86 0x00000000

#define MSK_NX90_mtgy_op_x86_val         0xffffffff
#define SRT_NX90_mtgy_op_x86_val         0
#define DFLT_VAL_NX90_mtgy_op_x86_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x86_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x86': */
#define MSK_USED_BITS_NX90_mtgy_op_x86 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x87 */
/* => MWMM operand X register 87 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x87  0x00001D5C
#define Adr_NX90_mtgy_mtgy_op_x87 0xFF083D5C
#define Adr_NX90_mtgy_op_x87      0xFF083D5C
#define DFLT_VAL_NX90_mtgy_op_x87 0x00000000

#define MSK_NX90_mtgy_op_x87_val         0xffffffff
#define SRT_NX90_mtgy_op_x87_val         0
#define DFLT_VAL_NX90_mtgy_op_x87_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x87_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x87': */
#define MSK_USED_BITS_NX90_mtgy_op_x87 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x88 */
/* => MWMM operand X register 88 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x88  0x00001D60
#define Adr_NX90_mtgy_mtgy_op_x88 0xFF083D60
#define Adr_NX90_mtgy_op_x88      0xFF083D60
#define DFLT_VAL_NX90_mtgy_op_x88 0x00000000

#define MSK_NX90_mtgy_op_x88_val         0xffffffff
#define SRT_NX90_mtgy_op_x88_val         0
#define DFLT_VAL_NX90_mtgy_op_x88_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x88_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x88': */
#define MSK_USED_BITS_NX90_mtgy_op_x88 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x89 */
/* => MWMM operand X register 89 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x89  0x00001D64
#define Adr_NX90_mtgy_mtgy_op_x89 0xFF083D64
#define Adr_NX90_mtgy_op_x89      0xFF083D64
#define DFLT_VAL_NX90_mtgy_op_x89 0x00000000

#define MSK_NX90_mtgy_op_x89_val         0xffffffff
#define SRT_NX90_mtgy_op_x89_val         0
#define DFLT_VAL_NX90_mtgy_op_x89_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x89_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x89': */
#define MSK_USED_BITS_NX90_mtgy_op_x89 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x90 */
/* => MWMM operand X register 90 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x90  0x00001D68
#define Adr_NX90_mtgy_mtgy_op_x90 0xFF083D68
#define Adr_NX90_mtgy_op_x90      0xFF083D68
#define DFLT_VAL_NX90_mtgy_op_x90 0x00000000

#define MSK_NX90_mtgy_op_x90_val         0xffffffff
#define SRT_NX90_mtgy_op_x90_val         0
#define DFLT_VAL_NX90_mtgy_op_x90_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x90_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x90': */
#define MSK_USED_BITS_NX90_mtgy_op_x90 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x91 */
/* => MWMM operand X register 91 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x91  0x00001D6C
#define Adr_NX90_mtgy_mtgy_op_x91 0xFF083D6C
#define Adr_NX90_mtgy_op_x91      0xFF083D6C
#define DFLT_VAL_NX90_mtgy_op_x91 0x00000000

#define MSK_NX90_mtgy_op_x91_val         0xffffffff
#define SRT_NX90_mtgy_op_x91_val         0
#define DFLT_VAL_NX90_mtgy_op_x91_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x91_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x91': */
#define MSK_USED_BITS_NX90_mtgy_op_x91 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x92 */
/* => MWMM operand X register 92 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x92  0x00001D70
#define Adr_NX90_mtgy_mtgy_op_x92 0xFF083D70
#define Adr_NX90_mtgy_op_x92      0xFF083D70
#define DFLT_VAL_NX90_mtgy_op_x92 0x00000000

#define MSK_NX90_mtgy_op_x92_val         0xffffffff
#define SRT_NX90_mtgy_op_x92_val         0
#define DFLT_VAL_NX90_mtgy_op_x92_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x92_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x92': */
#define MSK_USED_BITS_NX90_mtgy_op_x92 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x93 */
/* => MWMM operand X register 93 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x93  0x00001D74
#define Adr_NX90_mtgy_mtgy_op_x93 0xFF083D74
#define Adr_NX90_mtgy_op_x93      0xFF083D74
#define DFLT_VAL_NX90_mtgy_op_x93 0x00000000

#define MSK_NX90_mtgy_op_x93_val         0xffffffff
#define SRT_NX90_mtgy_op_x93_val         0
#define DFLT_VAL_NX90_mtgy_op_x93_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x93_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x93': */
#define MSK_USED_BITS_NX90_mtgy_op_x93 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x94 */
/* => MWMM operand X register 94 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x94  0x00001D78
#define Adr_NX90_mtgy_mtgy_op_x94 0xFF083D78
#define Adr_NX90_mtgy_op_x94      0xFF083D78
#define DFLT_VAL_NX90_mtgy_op_x94 0x00000000

#define MSK_NX90_mtgy_op_x94_val         0xffffffff
#define SRT_NX90_mtgy_op_x94_val         0
#define DFLT_VAL_NX90_mtgy_op_x94_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x94_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x94': */
#define MSK_USED_BITS_NX90_mtgy_op_x94 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x95 */
/* => MWMM operand X register 95 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x95  0x00001D7C
#define Adr_NX90_mtgy_mtgy_op_x95 0xFF083D7C
#define Adr_NX90_mtgy_op_x95      0xFF083D7C
#define DFLT_VAL_NX90_mtgy_op_x95 0x00000000

#define MSK_NX90_mtgy_op_x95_val         0xffffffff
#define SRT_NX90_mtgy_op_x95_val         0
#define DFLT_VAL_NX90_mtgy_op_x95_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x95_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x95': */
#define MSK_USED_BITS_NX90_mtgy_op_x95 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x96 */
/* => MWMM operand X register 96 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x96  0x00001D80
#define Adr_NX90_mtgy_mtgy_op_x96 0xFF083D80
#define Adr_NX90_mtgy_op_x96      0xFF083D80
#define DFLT_VAL_NX90_mtgy_op_x96 0x00000000

#define MSK_NX90_mtgy_op_x96_val         0xffffffff
#define SRT_NX90_mtgy_op_x96_val         0
#define DFLT_VAL_NX90_mtgy_op_x96_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x96_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x96': */
#define MSK_USED_BITS_NX90_mtgy_op_x96 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x97 */
/* => MWMM operand X register 97 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x97  0x00001D84
#define Adr_NX90_mtgy_mtgy_op_x97 0xFF083D84
#define Adr_NX90_mtgy_op_x97      0xFF083D84
#define DFLT_VAL_NX90_mtgy_op_x97 0x00000000

#define MSK_NX90_mtgy_op_x97_val         0xffffffff
#define SRT_NX90_mtgy_op_x97_val         0
#define DFLT_VAL_NX90_mtgy_op_x97_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x97_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x97': */
#define MSK_USED_BITS_NX90_mtgy_op_x97 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x98 */
/* => MWMM operand X register 98 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x98  0x00001D88
#define Adr_NX90_mtgy_mtgy_op_x98 0xFF083D88
#define Adr_NX90_mtgy_op_x98      0xFF083D88
#define DFLT_VAL_NX90_mtgy_op_x98 0x00000000

#define MSK_NX90_mtgy_op_x98_val         0xffffffff
#define SRT_NX90_mtgy_op_x98_val         0
#define DFLT_VAL_NX90_mtgy_op_x98_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x98_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x98': */
#define MSK_USED_BITS_NX90_mtgy_op_x98 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x99 */
/* => MWMM operand X register 99 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x99  0x00001D8C
#define Adr_NX90_mtgy_mtgy_op_x99 0xFF083D8C
#define Adr_NX90_mtgy_op_x99      0xFF083D8C
#define DFLT_VAL_NX90_mtgy_op_x99 0x00000000

#define MSK_NX90_mtgy_op_x99_val         0xffffffff
#define SRT_NX90_mtgy_op_x99_val         0
#define DFLT_VAL_NX90_mtgy_op_x99_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x99_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x99': */
#define MSK_USED_BITS_NX90_mtgy_op_x99 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x100 */
/* => MWMM operand X register 100 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x100  0x00001D90
#define Adr_NX90_mtgy_mtgy_op_x100 0xFF083D90
#define Adr_NX90_mtgy_op_x100      0xFF083D90
#define DFLT_VAL_NX90_mtgy_op_x100 0x00000000

#define MSK_NX90_mtgy_op_x100_val         0xffffffff
#define SRT_NX90_mtgy_op_x100_val         0
#define DFLT_VAL_NX90_mtgy_op_x100_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x100_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x100': */
#define MSK_USED_BITS_NX90_mtgy_op_x100 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x101 */
/* => MWMM operand X register 101 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x101  0x00001D94
#define Adr_NX90_mtgy_mtgy_op_x101 0xFF083D94
#define Adr_NX90_mtgy_op_x101      0xFF083D94
#define DFLT_VAL_NX90_mtgy_op_x101 0x00000000

#define MSK_NX90_mtgy_op_x101_val         0xffffffff
#define SRT_NX90_mtgy_op_x101_val         0
#define DFLT_VAL_NX90_mtgy_op_x101_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x101_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x101': */
#define MSK_USED_BITS_NX90_mtgy_op_x101 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x102 */
/* => MWMM operand X register 102 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x102  0x00001D98
#define Adr_NX90_mtgy_mtgy_op_x102 0xFF083D98
#define Adr_NX90_mtgy_op_x102      0xFF083D98
#define DFLT_VAL_NX90_mtgy_op_x102 0x00000000

#define MSK_NX90_mtgy_op_x102_val         0xffffffff
#define SRT_NX90_mtgy_op_x102_val         0
#define DFLT_VAL_NX90_mtgy_op_x102_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x102_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x102': */
#define MSK_USED_BITS_NX90_mtgy_op_x102 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x103 */
/* => MWMM operand X register 103 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x103  0x00001D9C
#define Adr_NX90_mtgy_mtgy_op_x103 0xFF083D9C
#define Adr_NX90_mtgy_op_x103      0xFF083D9C
#define DFLT_VAL_NX90_mtgy_op_x103 0x00000000

#define MSK_NX90_mtgy_op_x103_val         0xffffffff
#define SRT_NX90_mtgy_op_x103_val         0
#define DFLT_VAL_NX90_mtgy_op_x103_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x103_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x103': */
#define MSK_USED_BITS_NX90_mtgy_op_x103 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x104 */
/* => MWMM operand X register 104 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x104  0x00001DA0
#define Adr_NX90_mtgy_mtgy_op_x104 0xFF083DA0
#define Adr_NX90_mtgy_op_x104      0xFF083DA0
#define DFLT_VAL_NX90_mtgy_op_x104 0x00000000

#define MSK_NX90_mtgy_op_x104_val         0xffffffff
#define SRT_NX90_mtgy_op_x104_val         0
#define DFLT_VAL_NX90_mtgy_op_x104_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x104_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x104': */
#define MSK_USED_BITS_NX90_mtgy_op_x104 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x105 */
/* => MWMM operand X register 105 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x105  0x00001DA4
#define Adr_NX90_mtgy_mtgy_op_x105 0xFF083DA4
#define Adr_NX90_mtgy_op_x105      0xFF083DA4
#define DFLT_VAL_NX90_mtgy_op_x105 0x00000000

#define MSK_NX90_mtgy_op_x105_val         0xffffffff
#define SRT_NX90_mtgy_op_x105_val         0
#define DFLT_VAL_NX90_mtgy_op_x105_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x105_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x105': */
#define MSK_USED_BITS_NX90_mtgy_op_x105 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x106 */
/* => MWMM operand X register 106 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x106  0x00001DA8
#define Adr_NX90_mtgy_mtgy_op_x106 0xFF083DA8
#define Adr_NX90_mtgy_op_x106      0xFF083DA8
#define DFLT_VAL_NX90_mtgy_op_x106 0x00000000

#define MSK_NX90_mtgy_op_x106_val         0xffffffff
#define SRT_NX90_mtgy_op_x106_val         0
#define DFLT_VAL_NX90_mtgy_op_x106_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x106_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x106': */
#define MSK_USED_BITS_NX90_mtgy_op_x106 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x107 */
/* => MWMM operand X register 107 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x107  0x00001DAC
#define Adr_NX90_mtgy_mtgy_op_x107 0xFF083DAC
#define Adr_NX90_mtgy_op_x107      0xFF083DAC
#define DFLT_VAL_NX90_mtgy_op_x107 0x00000000

#define MSK_NX90_mtgy_op_x107_val         0xffffffff
#define SRT_NX90_mtgy_op_x107_val         0
#define DFLT_VAL_NX90_mtgy_op_x107_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x107_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x107': */
#define MSK_USED_BITS_NX90_mtgy_op_x107 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x108 */
/* => MWMM operand X register 108 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x108  0x00001DB0
#define Adr_NX90_mtgy_mtgy_op_x108 0xFF083DB0
#define Adr_NX90_mtgy_op_x108      0xFF083DB0
#define DFLT_VAL_NX90_mtgy_op_x108 0x00000000

#define MSK_NX90_mtgy_op_x108_val         0xffffffff
#define SRT_NX90_mtgy_op_x108_val         0
#define DFLT_VAL_NX90_mtgy_op_x108_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x108_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x108': */
#define MSK_USED_BITS_NX90_mtgy_op_x108 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x109 */
/* => MWMM operand X register 109 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x109  0x00001DB4
#define Adr_NX90_mtgy_mtgy_op_x109 0xFF083DB4
#define Adr_NX90_mtgy_op_x109      0xFF083DB4
#define DFLT_VAL_NX90_mtgy_op_x109 0x00000000

#define MSK_NX90_mtgy_op_x109_val         0xffffffff
#define SRT_NX90_mtgy_op_x109_val         0
#define DFLT_VAL_NX90_mtgy_op_x109_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x109_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x109': */
#define MSK_USED_BITS_NX90_mtgy_op_x109 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x110 */
/* => MWMM operand X register 110 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x110  0x00001DB8
#define Adr_NX90_mtgy_mtgy_op_x110 0xFF083DB8
#define Adr_NX90_mtgy_op_x110      0xFF083DB8
#define DFLT_VAL_NX90_mtgy_op_x110 0x00000000

#define MSK_NX90_mtgy_op_x110_val         0xffffffff
#define SRT_NX90_mtgy_op_x110_val         0
#define DFLT_VAL_NX90_mtgy_op_x110_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x110_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x110': */
#define MSK_USED_BITS_NX90_mtgy_op_x110 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x111 */
/* => MWMM operand X register 111 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x111  0x00001DBC
#define Adr_NX90_mtgy_mtgy_op_x111 0xFF083DBC
#define Adr_NX90_mtgy_op_x111      0xFF083DBC
#define DFLT_VAL_NX90_mtgy_op_x111 0x00000000

#define MSK_NX90_mtgy_op_x111_val         0xffffffff
#define SRT_NX90_mtgy_op_x111_val         0
#define DFLT_VAL_NX90_mtgy_op_x111_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x111_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x111': */
#define MSK_USED_BITS_NX90_mtgy_op_x111 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x112 */
/* => MWMM operand X register 112 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x112  0x00001DC0
#define Adr_NX90_mtgy_mtgy_op_x112 0xFF083DC0
#define Adr_NX90_mtgy_op_x112      0xFF083DC0
#define DFLT_VAL_NX90_mtgy_op_x112 0x00000000

#define MSK_NX90_mtgy_op_x112_val         0xffffffff
#define SRT_NX90_mtgy_op_x112_val         0
#define DFLT_VAL_NX90_mtgy_op_x112_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x112_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x112': */
#define MSK_USED_BITS_NX90_mtgy_op_x112 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x113 */
/* => MWMM operand X register 113 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x113  0x00001DC4
#define Adr_NX90_mtgy_mtgy_op_x113 0xFF083DC4
#define Adr_NX90_mtgy_op_x113      0xFF083DC4
#define DFLT_VAL_NX90_mtgy_op_x113 0x00000000

#define MSK_NX90_mtgy_op_x113_val         0xffffffff
#define SRT_NX90_mtgy_op_x113_val         0
#define DFLT_VAL_NX90_mtgy_op_x113_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x113_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x113': */
#define MSK_USED_BITS_NX90_mtgy_op_x113 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x114 */
/* => MWMM operand X register 114 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x114  0x00001DC8
#define Adr_NX90_mtgy_mtgy_op_x114 0xFF083DC8
#define Adr_NX90_mtgy_op_x114      0xFF083DC8
#define DFLT_VAL_NX90_mtgy_op_x114 0x00000000

#define MSK_NX90_mtgy_op_x114_val         0xffffffff
#define SRT_NX90_mtgy_op_x114_val         0
#define DFLT_VAL_NX90_mtgy_op_x114_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x114_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x114': */
#define MSK_USED_BITS_NX90_mtgy_op_x114 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x115 */
/* => MWMM operand X register 115 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x115  0x00001DCC
#define Adr_NX90_mtgy_mtgy_op_x115 0xFF083DCC
#define Adr_NX90_mtgy_op_x115      0xFF083DCC
#define DFLT_VAL_NX90_mtgy_op_x115 0x00000000

#define MSK_NX90_mtgy_op_x115_val         0xffffffff
#define SRT_NX90_mtgy_op_x115_val         0
#define DFLT_VAL_NX90_mtgy_op_x115_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x115_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x115': */
#define MSK_USED_BITS_NX90_mtgy_op_x115 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x116 */
/* => MWMM operand X register 116 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x116  0x00001DD0
#define Adr_NX90_mtgy_mtgy_op_x116 0xFF083DD0
#define Adr_NX90_mtgy_op_x116      0xFF083DD0
#define DFLT_VAL_NX90_mtgy_op_x116 0x00000000

#define MSK_NX90_mtgy_op_x116_val         0xffffffff
#define SRT_NX90_mtgy_op_x116_val         0
#define DFLT_VAL_NX90_mtgy_op_x116_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x116_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x116': */
#define MSK_USED_BITS_NX90_mtgy_op_x116 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x117 */
/* => MWMM operand X register 117 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x117  0x00001DD4
#define Adr_NX90_mtgy_mtgy_op_x117 0xFF083DD4
#define Adr_NX90_mtgy_op_x117      0xFF083DD4
#define DFLT_VAL_NX90_mtgy_op_x117 0x00000000

#define MSK_NX90_mtgy_op_x117_val         0xffffffff
#define SRT_NX90_mtgy_op_x117_val         0
#define DFLT_VAL_NX90_mtgy_op_x117_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x117_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x117': */
#define MSK_USED_BITS_NX90_mtgy_op_x117 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x118 */
/* => MWMM operand X register 118 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x118  0x00001DD8
#define Adr_NX90_mtgy_mtgy_op_x118 0xFF083DD8
#define Adr_NX90_mtgy_op_x118      0xFF083DD8
#define DFLT_VAL_NX90_mtgy_op_x118 0x00000000

#define MSK_NX90_mtgy_op_x118_val         0xffffffff
#define SRT_NX90_mtgy_op_x118_val         0
#define DFLT_VAL_NX90_mtgy_op_x118_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x118_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x118': */
#define MSK_USED_BITS_NX90_mtgy_op_x118 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x119 */
/* => MWMM operand X register 119 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x119  0x00001DDC
#define Adr_NX90_mtgy_mtgy_op_x119 0xFF083DDC
#define Adr_NX90_mtgy_op_x119      0xFF083DDC
#define DFLT_VAL_NX90_mtgy_op_x119 0x00000000

#define MSK_NX90_mtgy_op_x119_val         0xffffffff
#define SRT_NX90_mtgy_op_x119_val         0
#define DFLT_VAL_NX90_mtgy_op_x119_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x119_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x119': */
#define MSK_USED_BITS_NX90_mtgy_op_x119 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x120 */
/* => MWMM operand X register 120 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x120  0x00001DE0
#define Adr_NX90_mtgy_mtgy_op_x120 0xFF083DE0
#define Adr_NX90_mtgy_op_x120      0xFF083DE0
#define DFLT_VAL_NX90_mtgy_op_x120 0x00000000

#define MSK_NX90_mtgy_op_x120_val         0xffffffff
#define SRT_NX90_mtgy_op_x120_val         0
#define DFLT_VAL_NX90_mtgy_op_x120_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x120_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x120': */
#define MSK_USED_BITS_NX90_mtgy_op_x120 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x121 */
/* => MWMM operand X register 121 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x121  0x00001DE4
#define Adr_NX90_mtgy_mtgy_op_x121 0xFF083DE4
#define Adr_NX90_mtgy_op_x121      0xFF083DE4
#define DFLT_VAL_NX90_mtgy_op_x121 0x00000000

#define MSK_NX90_mtgy_op_x121_val         0xffffffff
#define SRT_NX90_mtgy_op_x121_val         0
#define DFLT_VAL_NX90_mtgy_op_x121_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x121_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x121': */
#define MSK_USED_BITS_NX90_mtgy_op_x121 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x122 */
/* => MWMM operand X register 122 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x122  0x00001DE8
#define Adr_NX90_mtgy_mtgy_op_x122 0xFF083DE8
#define Adr_NX90_mtgy_op_x122      0xFF083DE8
#define DFLT_VAL_NX90_mtgy_op_x122 0x00000000

#define MSK_NX90_mtgy_op_x122_val         0xffffffff
#define SRT_NX90_mtgy_op_x122_val         0
#define DFLT_VAL_NX90_mtgy_op_x122_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x122_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x122': */
#define MSK_USED_BITS_NX90_mtgy_op_x122 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x123 */
/* => MWMM operand X register 123 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x123  0x00001DEC
#define Adr_NX90_mtgy_mtgy_op_x123 0xFF083DEC
#define Adr_NX90_mtgy_op_x123      0xFF083DEC
#define DFLT_VAL_NX90_mtgy_op_x123 0x00000000

#define MSK_NX90_mtgy_op_x123_val         0xffffffff
#define SRT_NX90_mtgy_op_x123_val         0
#define DFLT_VAL_NX90_mtgy_op_x123_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x123_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x123': */
#define MSK_USED_BITS_NX90_mtgy_op_x123 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x124 */
/* => MWMM operand X register 124 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x124  0x00001DF0
#define Adr_NX90_mtgy_mtgy_op_x124 0xFF083DF0
#define Adr_NX90_mtgy_op_x124      0xFF083DF0
#define DFLT_VAL_NX90_mtgy_op_x124 0x00000000

#define MSK_NX90_mtgy_op_x124_val         0xffffffff
#define SRT_NX90_mtgy_op_x124_val         0
#define DFLT_VAL_NX90_mtgy_op_x124_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x124_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x124': */
#define MSK_USED_BITS_NX90_mtgy_op_x124 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x125 */
/* => MWMM operand X register 125 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x125  0x00001DF4
#define Adr_NX90_mtgy_mtgy_op_x125 0xFF083DF4
#define Adr_NX90_mtgy_op_x125      0xFF083DF4
#define DFLT_VAL_NX90_mtgy_op_x125 0x00000000

#define MSK_NX90_mtgy_op_x125_val         0xffffffff
#define SRT_NX90_mtgy_op_x125_val         0
#define DFLT_VAL_NX90_mtgy_op_x125_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x125_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x125': */
#define MSK_USED_BITS_NX90_mtgy_op_x125 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x126 */
/* => MWMM operand X register 126 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x126  0x00001DF8
#define Adr_NX90_mtgy_mtgy_op_x126 0xFF083DF8
#define Adr_NX90_mtgy_op_x126      0xFF083DF8
#define DFLT_VAL_NX90_mtgy_op_x126 0x00000000

#define MSK_NX90_mtgy_op_x126_val         0xffffffff
#define SRT_NX90_mtgy_op_x126_val         0
#define DFLT_VAL_NX90_mtgy_op_x126_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x126_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x126': */
#define MSK_USED_BITS_NX90_mtgy_op_x126 0xffffffff

/* --------------------------------------------------------------------- */
/* Register mtgy_op_x127 */
/* => MWMM operand X register 127 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mtgy_op_x127  0x00001DFC
#define Adr_NX90_mtgy_mtgy_op_x127 0xFF083DFC
#define Adr_NX90_mtgy_op_x127      0xFF083DFC
#define DFLT_VAL_NX90_mtgy_op_x127 0x00000000

#define MSK_NX90_mtgy_op_x127_val         0xffffffff
#define SRT_NX90_mtgy_op_x127_val         0
#define DFLT_VAL_NX90_mtgy_op_x127_val    0x00000000
#define DFLT_BF_VAL_NX90_mtgy_op_x127_val 0x00000000

/* all used bits of 'NX90_mtgy_op_x127': */
#define MSK_USED_BITS_NX90_mtgy_op_x127 0xffffffff


/* ===================================================================== */

/* Area of intlogic_shd */

/* ===================================================================== */

#define Addr_NX90_intlogic_shd 0xFF400000

/* ===================================================================== */

/* Area of nfifo */

/* ===================================================================== */

#define Addr_NX90_nfifo 0xFF400000

/* --------------------------------------------------------------------- */
/* Register nfifo_config */
/* => NFIFO config register */
/*    'base_config' is a pointer to start of NFIFO configuration area in memory. */
/*    The configuration area must be setup by software, before using a FIFO. */
/*    Each FIFO-configuration entry consists of 3 DW and contains the following: */
/*    {       | */
/*    mem-DW0: base(31:2),mas(1:0) */
/*    mem-DW1: watm(28:16),bottom(12:0) */
/*    mem-DW2: undr(31),emw(30),empty(29),write(28:16),ovfl(15),fmw(14),full(13),fill(12:0) } */
/*    This allows FIFOs of up to 8k entries each. */
/*    The first DWords mem-DW0 and mem-DW1 are only read by NFIFO controller. */
/*    To reset a FIFO, reinit the configuration entries mem-DW0..2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_config   0x00000000
#define Adr_NX90_nfifo_nfifo_config 0xFF400000
#define Adr_NX90_nfifo_config       0xFF400000
#define DFLT_VAL_NX90_nfifo_config  0x00000000

#define MSK_NX90_nfifo_config_base_config         0xfffffffc
#define SRT_NX90_nfifo_config_base_config         2
#define DFLT_VAL_NX90_nfifo_config_base_config    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_config_base_config 0x00000000

/* all used bits of 'NX90_nfifo_config': */
#define MSK_USED_BITS_NX90_nfifo_config 0xfffffffc

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_raw   0x0000000C
#define Adr_NX90_nfifo_nfifo_irq_raw 0xFF40000C
#define Adr_NX90_nfifo_irq_raw       0xFF40000C
#define DFLT_VAL_NX90_nfifo_irq_raw  0x00000000

#define MSK_NX90_nfifo_irq_raw_ahbl_error          0x00000001
#define SRT_NX90_nfifo_irq_raw_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_raw_ahbl_error     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_ahbl_error  0x00000000
#define MSK_NX90_nfifo_irq_raw_read                0x00000002
#define SRT_NX90_nfifo_irq_raw_read                1
#define DFLT_VAL_NX90_nfifo_irq_raw_read           0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_read        0x00000000
#define MSK_NX90_nfifo_irq_raw_write               0x00000004
#define SRT_NX90_nfifo_irq_raw_write               2
#define DFLT_VAL_NX90_nfifo_irq_raw_write          0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_write       0x00000000
#define MSK_NX90_nfifo_irq_raw_fifo_active         0x00000008
#define SRT_NX90_nfifo_irq_raw_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_raw_fifo_active    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_fifo_active 0x00000000
#define MSK_NX90_nfifo_irq_raw_observe0            0x00000010
#define SRT_NX90_nfifo_irq_raw_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_raw_observe0       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe0    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe1            0x00000020
#define SRT_NX90_nfifo_irq_raw_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_raw_observe1       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe1    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe2            0x00000040
#define SRT_NX90_nfifo_irq_raw_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_raw_observe2       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe2    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe3            0x00000080
#define SRT_NX90_nfifo_irq_raw_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_raw_observe3       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe3    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe4            0x00000100
#define SRT_NX90_nfifo_irq_raw_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_raw_observe4       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe4    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe5            0x00000200
#define SRT_NX90_nfifo_irq_raw_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_raw_observe5       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe5    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe6            0x00000400
#define SRT_NX90_nfifo_irq_raw_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_raw_observe6       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe6    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe7            0x00000800
#define SRT_NX90_nfifo_irq_raw_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_raw_observe7       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe7    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe8            0x00001000
#define SRT_NX90_nfifo_irq_raw_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_raw_observe8       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe8    0x00000000
#define MSK_NX90_nfifo_irq_raw_observe9            0x00002000
#define SRT_NX90_nfifo_irq_raw_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_raw_observe9       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_raw_observe9    0x00000000

/* all used bits of 'NX90_nfifo_irq_raw': */
#define MSK_USED_BITS_NX90_nfifo_irq_raw 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_masked */
/* => Masked IRQ of ARM_APP: */
/*    Shows status of masked IRQs as connected to application ARM Cortex M4. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_masked   0x00000010
#define Adr_NX90_nfifo_nfifo_irq_arm_app_masked 0xFF400010
#define Adr_NX90_nfifo_irq_arm_app_masked       0xFF400010

#define MSK_NX90_nfifo_irq_arm_app_masked_ahbl_error  0x00000001
#define SRT_NX90_nfifo_irq_arm_app_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_arm_app_masked_read        0x00000002
#define SRT_NX90_nfifo_irq_arm_app_masked_read        1
#define MSK_NX90_nfifo_irq_arm_app_masked_write       0x00000004
#define SRT_NX90_nfifo_irq_arm_app_masked_write       2
#define MSK_NX90_nfifo_irq_arm_app_masked_fifo_active 0x00000008
#define SRT_NX90_nfifo_irq_arm_app_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_arm_app_masked_observe0    0x00000010
#define SRT_NX90_nfifo_irq_arm_app_masked_observe0    4
#define MSK_NX90_nfifo_irq_arm_app_masked_observe1    0x00000020
#define SRT_NX90_nfifo_irq_arm_app_masked_observe1    5
#define MSK_NX90_nfifo_irq_arm_app_masked_observe2    0x00000040
#define SRT_NX90_nfifo_irq_arm_app_masked_observe2    6
#define MSK_NX90_nfifo_irq_arm_app_masked_observe3    0x00000080
#define SRT_NX90_nfifo_irq_arm_app_masked_observe3    7
#define MSK_NX90_nfifo_irq_arm_app_masked_observe4    0x00000100
#define SRT_NX90_nfifo_irq_arm_app_masked_observe4    8
#define MSK_NX90_nfifo_irq_arm_app_masked_observe5    0x00000200
#define SRT_NX90_nfifo_irq_arm_app_masked_observe5    9
#define MSK_NX90_nfifo_irq_arm_app_masked_observe6    0x00000400
#define SRT_NX90_nfifo_irq_arm_app_masked_observe6    10
#define MSK_NX90_nfifo_irq_arm_app_masked_observe7    0x00000800
#define SRT_NX90_nfifo_irq_arm_app_masked_observe7    11
#define MSK_NX90_nfifo_irq_arm_app_masked_observe8    0x00001000
#define SRT_NX90_nfifo_irq_arm_app_masked_observe8    12
#define MSK_NX90_nfifo_irq_arm_app_masked_observe9    0x00002000
#define SRT_NX90_nfifo_irq_arm_app_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_arm_app_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_masked 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_msk_set */
/* => ARM_APP Cortex M4 IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources to the ARM_APP processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_msk_set   0x00000014
#define Adr_NX90_nfifo_nfifo_irq_arm_app_msk_set 0xFF400014
#define Adr_NX90_nfifo_irq_arm_app_msk_set       0xFF400014
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set  0x00000000

#define MSK_NX90_nfifo_irq_arm_app_msk_set_ahbl_error          0x00000001
#define SRT_NX90_nfifo_irq_arm_app_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_ahbl_error     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_ahbl_error  0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_read                0x00000002
#define SRT_NX90_nfifo_irq_arm_app_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_read           0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_read        0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_write               0x00000004
#define SRT_NX90_nfifo_irq_arm_app_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_write          0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_write       0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_fifo_active         0x00000008
#define SRT_NX90_nfifo_irq_arm_app_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_fifo_active    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_fifo_active 0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe0            0x00000010
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe0       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe0    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe1            0x00000020
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe1       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe1    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe2            0x00000040
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe2       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe2    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe3            0x00000080
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe3       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe3    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe4            0x00000100
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe4       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe4    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe5            0x00000200
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe5       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe5    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe6            0x00000400
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe6       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe6    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe7            0x00000800
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe7       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe7    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe8            0x00001000
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe8       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe8    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_set_observe9            0x00002000
#define SRT_NX90_nfifo_irq_arm_app_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_set_observe9       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_set_observe9    0x00000000

/* all used bits of 'NX90_nfifo_irq_arm_app_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_msk_set 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_arm_app_msk_reset */
/* => ARM_APP Cortex M4 IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_arm_app_msk_reset   0x00000018
#define Adr_NX90_nfifo_nfifo_irq_arm_app_msk_reset 0xFF400018
#define Adr_NX90_nfifo_irq_arm_app_msk_reset       0xFF400018
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset  0x00000000

#define MSK_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error          0x00000001
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_ahbl_error  0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_read                0x00000002
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_read           0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_read        0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_write               0x00000004
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_write          0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_write       0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_fifo_active         0x00000008
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_fifo_active    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_fifo_active 0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe0            0x00000010
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe0       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe0    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe1            0x00000020
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe1       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe1    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe2            0x00000040
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe2       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe2    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe3            0x00000080
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe3       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe3    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe4            0x00000100
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe4       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe4    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe5            0x00000200
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe5       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe5    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe6            0x00000400
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe6       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe6    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe7            0x00000800
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe7       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe7    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe8            0x00001000
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe8       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe8    0x00000000
#define MSK_NX90_nfifo_irq_arm_app_msk_reset_observe9            0x00002000
#define SRT_NX90_nfifo_irq_arm_app_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe9       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_arm_app_msk_reset_observe9    0x00000000

/* all used bits of 'NX90_nfifo_irq_arm_app_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_arm_app_msk_reset 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_masked */
/* => Masked IRQ of xPIC_APP: */
/*    Shows status of masked IRQs as connected to xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_masked   0x00000028
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_masked 0xFF400028
#define Adr_NX90_nfifo_irq_xpic_app_masked       0xFF400028

#define MSK_NX90_nfifo_irq_xpic_app_masked_ahbl_error  0x00000001
#define SRT_NX90_nfifo_irq_xpic_app_masked_ahbl_error  0
#define MSK_NX90_nfifo_irq_xpic_app_masked_read        0x00000002
#define SRT_NX90_nfifo_irq_xpic_app_masked_read        1
#define MSK_NX90_nfifo_irq_xpic_app_masked_write       0x00000004
#define SRT_NX90_nfifo_irq_xpic_app_masked_write       2
#define MSK_NX90_nfifo_irq_xpic_app_masked_fifo_active 0x00000008
#define SRT_NX90_nfifo_irq_xpic_app_masked_fifo_active 3
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe0    0x00000010
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe0    4
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe1    0x00000020
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe1    5
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe2    0x00000040
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe2    6
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe3    0x00000080
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe3    7
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe4    0x00000100
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe4    8
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe5    0x00000200
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe5    9
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe6    0x00000400
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe6    10
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe7    0x00000800
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe7    11
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe8    0x00001000
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe8    12
#define MSK_NX90_nfifo_irq_xpic_app_masked_observe9    0x00002000
#define SRT_NX90_nfifo_irq_xpic_app_masked_observe9    13

/* all used bits of 'NX90_nfifo_irq_xpic_app_masked': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_masked 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_msk_set */
/* => xPIC_APP IRQ mask set: */
/*    The xPIC_APP IRQ mask enables interrupt requests for corresponding interrupt sources to the xPIC_APP processor. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_nfifo_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_msk_set   0x0000002C
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_msk_set 0xFF40002C
#define Adr_NX90_nfifo_irq_xpic_app_msk_set       0xFF40002C
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set  0x00000000

#define MSK_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error          0x00000001
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_ahbl_error  0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_read                0x00000002
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_read           0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_read        0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_write               0x00000004
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_write          0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_write       0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_fifo_active         0x00000008
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_fifo_active    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_fifo_active 0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe0            0x00000010
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe0       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe0    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe1            0x00000020
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe1       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe1    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe2            0x00000040
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe2       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe2    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe3            0x00000080
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe3       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe3    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe4            0x00000100
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe4       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe4    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe5            0x00000200
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe5       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe5    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe6            0x00000400
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe6       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe6    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe7            0x00000800
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe7       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe7    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe8            0x00001000
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe8       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe8    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_set_observe9            0x00002000
#define SRT_NX90_nfifo_irq_xpic_app_msk_set_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe9       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_set_observe9    0x00000000

/* all used bits of 'NX90_nfifo_irq_xpic_app_msk_set': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_msk_set 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_xpic_app_msk_reset */
/* => xPIC_APP IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_xpic_app_msk_reset   0x00000030
#define Adr_NX90_nfifo_nfifo_irq_xpic_app_msk_reset 0xFF400030
#define Adr_NX90_nfifo_irq_xpic_app_msk_reset       0xFF400030
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset  0x00000000

#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error          0x00000001
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error          0
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_ahbl_error  0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_read                0x00000002
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_read                1
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_read           0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_read        0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_write               0x00000004
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_write               2
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_write          0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_write       0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active         0x00000008
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active         3
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_fifo_active 0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe0            0x00000010
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe0            4
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe0       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe0    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe1            0x00000020
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe1            5
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe1       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe1    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe2            0x00000040
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe2            6
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe2       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe2    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe3            0x00000080
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe3            7
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe3       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe3    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe4            0x00000100
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe4            8
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe4       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe4    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe5            0x00000200
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe5            9
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe5       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe5    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe6            0x00000400
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe6            10
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe6       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe6    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe7            0x00000800
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe7            11
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe7       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe7    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe8            0x00001000
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe8            12
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe8       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe8    0x00000000
#define MSK_NX90_nfifo_irq_xpic_app_msk_reset_observe9            0x00002000
#define SRT_NX90_nfifo_irq_xpic_app_msk_reset_observe9            13
#define DFLT_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe9       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_xpic_app_msk_reset_observe9    0x00000000

/* all used bits of 'NX90_nfifo_irq_xpic_app_msk_reset': */
#define MSK_USED_BITS_NX90_nfifo_irq_xpic_app_msk_reset 0x00003fff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe0 */
/* => FIFO OBSERVE0: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe0   0x00000058
#define Adr_NX90_nfifo_nfifo_irq_observe0 0xFF400058
#define Adr_NX90_nfifo_irq_observe0       0xFF400058
#define DFLT_VAL_NX90_nfifo_irq_observe0  0x00000000

#define MSK_NX90_nfifo_irq_observe0_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe0_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe0_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe0_read           0x00008000
#define SRT_NX90_nfifo_irq_observe0_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe0_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_read   0x00000000
#define MSK_NX90_nfifo_irq_observe0_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe0_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe0_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe0_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe0_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe0_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe0_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe0_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe0_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe0_write          0x00080000
#define SRT_NX90_nfifo_irq_observe0_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe0_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_write  0x00000000
#define MSK_NX90_nfifo_irq_observe0_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe0_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe0_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe0_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe0_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe0_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe0_full           0x00400000
#define SRT_NX90_nfifo_irq_observe0_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe0_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe0_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe0': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe0 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe1 */
/* => FIFO OBSERVE1: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe1   0x0000005C
#define Adr_NX90_nfifo_nfifo_irq_observe1 0xFF40005C
#define Adr_NX90_nfifo_irq_observe1       0xFF40005C
#define DFLT_VAL_NX90_nfifo_irq_observe1  0x00000000

#define MSK_NX90_nfifo_irq_observe1_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe1_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe1_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe1_read           0x00008000
#define SRT_NX90_nfifo_irq_observe1_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe1_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_read   0x00000000
#define MSK_NX90_nfifo_irq_observe1_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe1_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe1_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe1_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe1_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe1_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe1_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe1_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe1_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe1_write          0x00080000
#define SRT_NX90_nfifo_irq_observe1_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe1_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_write  0x00000000
#define MSK_NX90_nfifo_irq_observe1_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe1_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe1_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe1_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe1_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe1_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe1_full           0x00400000
#define SRT_NX90_nfifo_irq_observe1_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe1_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe1_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe1': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe1 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe2 */
/* => FIFO OBSERVE2: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe2   0x00000060
#define Adr_NX90_nfifo_nfifo_irq_observe2 0xFF400060
#define Adr_NX90_nfifo_irq_observe2       0xFF400060
#define DFLT_VAL_NX90_nfifo_irq_observe2  0x00000000

#define MSK_NX90_nfifo_irq_observe2_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe2_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe2_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe2_read           0x00008000
#define SRT_NX90_nfifo_irq_observe2_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe2_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_read   0x00000000
#define MSK_NX90_nfifo_irq_observe2_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe2_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe2_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe2_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe2_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe2_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe2_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe2_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe2_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe2_write          0x00080000
#define SRT_NX90_nfifo_irq_observe2_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe2_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_write  0x00000000
#define MSK_NX90_nfifo_irq_observe2_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe2_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe2_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe2_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe2_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe2_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe2_full           0x00400000
#define SRT_NX90_nfifo_irq_observe2_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe2_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe2_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe2': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe2 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe3 */
/* => FIFO OBSERVE3: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe3   0x00000064
#define Adr_NX90_nfifo_nfifo_irq_observe3 0xFF400064
#define Adr_NX90_nfifo_irq_observe3       0xFF400064
#define DFLT_VAL_NX90_nfifo_irq_observe3  0x00000000

#define MSK_NX90_nfifo_irq_observe3_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe3_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe3_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe3_read           0x00008000
#define SRT_NX90_nfifo_irq_observe3_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe3_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_read   0x00000000
#define MSK_NX90_nfifo_irq_observe3_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe3_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe3_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe3_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe3_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe3_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe3_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe3_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe3_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe3_write          0x00080000
#define SRT_NX90_nfifo_irq_observe3_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe3_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_write  0x00000000
#define MSK_NX90_nfifo_irq_observe3_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe3_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe3_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe3_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe3_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe3_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe3_full           0x00400000
#define SRT_NX90_nfifo_irq_observe3_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe3_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe3_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe3': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe3 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe4 */
/* => FIFO OBSERVE4: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe4   0x00000068
#define Adr_NX90_nfifo_nfifo_irq_observe4 0xFF400068
#define Adr_NX90_nfifo_irq_observe4       0xFF400068
#define DFLT_VAL_NX90_nfifo_irq_observe4  0x00000000

#define MSK_NX90_nfifo_irq_observe4_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe4_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe4_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe4_read           0x00008000
#define SRT_NX90_nfifo_irq_observe4_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe4_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_read   0x00000000
#define MSK_NX90_nfifo_irq_observe4_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe4_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe4_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe4_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe4_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe4_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe4_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe4_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe4_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe4_write          0x00080000
#define SRT_NX90_nfifo_irq_observe4_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe4_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_write  0x00000000
#define MSK_NX90_nfifo_irq_observe4_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe4_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe4_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe4_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe4_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe4_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe4_full           0x00400000
#define SRT_NX90_nfifo_irq_observe4_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe4_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe4_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe4': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe4 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe5 */
/* => FIFO OBSERVE5: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe5   0x0000006C
#define Adr_NX90_nfifo_nfifo_irq_observe5 0xFF40006C
#define Adr_NX90_nfifo_irq_observe5       0xFF40006C
#define DFLT_VAL_NX90_nfifo_irq_observe5  0x00000000

#define MSK_NX90_nfifo_irq_observe5_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe5_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe5_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe5_read           0x00008000
#define SRT_NX90_nfifo_irq_observe5_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe5_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_read   0x00000000
#define MSK_NX90_nfifo_irq_observe5_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe5_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe5_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe5_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe5_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe5_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe5_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe5_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe5_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe5_write          0x00080000
#define SRT_NX90_nfifo_irq_observe5_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe5_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_write  0x00000000
#define MSK_NX90_nfifo_irq_observe5_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe5_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe5_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe5_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe5_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe5_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe5_full           0x00400000
#define SRT_NX90_nfifo_irq_observe5_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe5_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe5_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe5': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe5 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe6 */
/* => FIFO OBSERVE6: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe6   0x00000070
#define Adr_NX90_nfifo_nfifo_irq_observe6 0xFF400070
#define Adr_NX90_nfifo_irq_observe6       0xFF400070
#define DFLT_VAL_NX90_nfifo_irq_observe6  0x00000000

#define MSK_NX90_nfifo_irq_observe6_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe6_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe6_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe6_read           0x00008000
#define SRT_NX90_nfifo_irq_observe6_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe6_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_read   0x00000000
#define MSK_NX90_nfifo_irq_observe6_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe6_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe6_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe6_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe6_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe6_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe6_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe6_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe6_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe6_write          0x00080000
#define SRT_NX90_nfifo_irq_observe6_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe6_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_write  0x00000000
#define MSK_NX90_nfifo_irq_observe6_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe6_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe6_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe6_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe6_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe6_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe6_full           0x00400000
#define SRT_NX90_nfifo_irq_observe6_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe6_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe6_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe6': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe6 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe7 */
/* => FIFO OBSERVE7: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe7   0x00000074
#define Adr_NX90_nfifo_nfifo_irq_observe7 0xFF400074
#define Adr_NX90_nfifo_irq_observe7       0xFF400074
#define DFLT_VAL_NX90_nfifo_irq_observe7  0x00000000

#define MSK_NX90_nfifo_irq_observe7_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe7_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe7_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe7_read           0x00008000
#define SRT_NX90_nfifo_irq_observe7_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe7_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_read   0x00000000
#define MSK_NX90_nfifo_irq_observe7_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe7_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe7_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe7_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe7_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe7_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe7_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe7_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe7_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe7_write          0x00080000
#define SRT_NX90_nfifo_irq_observe7_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe7_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_write  0x00000000
#define MSK_NX90_nfifo_irq_observe7_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe7_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe7_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe7_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe7_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe7_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe7_full           0x00400000
#define SRT_NX90_nfifo_irq_observe7_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe7_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe7_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe7': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe7 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe8 */
/* => FIFO OBSERVE8: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe8   0x00000078
#define Adr_NX90_nfifo_nfifo_irq_observe8 0xFF400078
#define Adr_NX90_nfifo_irq_observe8       0xFF400078
#define DFLT_VAL_NX90_nfifo_irq_observe8  0x00000000

#define MSK_NX90_nfifo_irq_observe8_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe8_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe8_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe8_read           0x00008000
#define SRT_NX90_nfifo_irq_observe8_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe8_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_read   0x00000000
#define MSK_NX90_nfifo_irq_observe8_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe8_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe8_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe8_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe8_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe8_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe8_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe8_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe8_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe8_write          0x00080000
#define SRT_NX90_nfifo_irq_observe8_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe8_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_write  0x00000000
#define MSK_NX90_nfifo_irq_observe8_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe8_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe8_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe8_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe8_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe8_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe8_full           0x00400000
#define SRT_NX90_nfifo_irq_observe8_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe8_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe8_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe8': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe8 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_irq_observe9 */
/* => FIFO OBSERVE9: */
/*    This register configures the observation unit that allows to observe one FIFO for special events */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_irq_observe9   0x0000007C
#define Adr_NX90_nfifo_nfifo_irq_observe9 0xFF40007C
#define Adr_NX90_nfifo_irq_observe9       0xFF40007C
#define DFLT_VAL_NX90_nfifo_irq_observe9  0x00000000

#define MSK_NX90_nfifo_irq_observe9_fifonr         0x000003ff
#define SRT_NX90_nfifo_irq_observe9_fifonr         0
#define DFLT_VAL_NX90_nfifo_irq_observe9_fifonr    0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_fifonr 0x00000000
#define MSK_NX90_nfifo_irq_observe9_read           0x00008000
#define SRT_NX90_nfifo_irq_observe9_read           15
#define DFLT_VAL_NX90_nfifo_irq_observe9_read      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_read   0x00000000
#define MSK_NX90_nfifo_irq_observe9_undr           0x00010000
#define SRT_NX90_nfifo_irq_observe9_undr           16
#define DFLT_VAL_NX90_nfifo_irq_observe9_undr      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_undr   0x00000000
#define MSK_NX90_nfifo_irq_observe9_emw            0x00020000
#define SRT_NX90_nfifo_irq_observe9_emw            17
#define DFLT_VAL_NX90_nfifo_irq_observe9_emw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_emw    0x00000000
#define MSK_NX90_nfifo_irq_observe9_empty          0x00040000
#define SRT_NX90_nfifo_irq_observe9_empty          18
#define DFLT_VAL_NX90_nfifo_irq_observe9_empty     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_empty  0x00000000
#define MSK_NX90_nfifo_irq_observe9_write          0x00080000
#define SRT_NX90_nfifo_irq_observe9_write          19
#define DFLT_VAL_NX90_nfifo_irq_observe9_write     0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_write  0x00000000
#define MSK_NX90_nfifo_irq_observe9_ovfl           0x00100000
#define SRT_NX90_nfifo_irq_observe9_ovfl           20
#define DFLT_VAL_NX90_nfifo_irq_observe9_ovfl      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_ovfl   0x00000000
#define MSK_NX90_nfifo_irq_observe9_fmw            0x00200000
#define SRT_NX90_nfifo_irq_observe9_fmw            21
#define DFLT_VAL_NX90_nfifo_irq_observe9_fmw       0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_fmw    0x00000000
#define MSK_NX90_nfifo_irq_observe9_full           0x00400000
#define SRT_NX90_nfifo_irq_observe9_full           22
#define DFLT_VAL_NX90_nfifo_irq_observe9_full      0x00000000
#define DFLT_BF_VAL_NX90_nfifo_irq_observe9_full   0x00000000

/* all used bits of 'NX90_nfifo_irq_observe9': */
#define MSK_USED_BITS_NX90_nfifo_irq_observe9 0x007f83ff

/* --------------------------------------------------------------------- */
/* Register nfifo_fifo_start */
/* => Start of NFIFO FIFO access addresses: */
/*    The following DW-addresses are associated with FIFOs: */
/*    Read accesses to an address in this area are reading from the appropriate FIFO, */
/*    write accesses to an address in this area are writing to the appropriate FIFO. */
/*    The number of FIFOs is limited by this address area to 991. */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_fifo_start   0x00000080
#define Adr_NX90_nfifo_nfifo_fifo_start 0xFF400080
#define Adr_NX90_nfifo_fifo_start       0xFF400080

/* --------------------------------------------------------------------- */
/* Register nfifo_fifo_end */
/* => End of NFIFO FIFO access addresses */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_nfifo_fifo_end   0x00000FFC
#define Adr_NX90_nfifo_nfifo_fifo_end 0xFF400FFC
#define Adr_NX90_nfifo_fifo_end       0xFF400FFC


/* ===================================================================== */

/* Area of pad_ctrl */

/* ===================================================================== */

#define Addr_NX90_pad_ctrl 0xFF401000

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_rdy_n */
/* => Pad configuration register of port RDY_N (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    Programable pad functions are: */
/*       ds:   Driving strength: 0: low driving strength (default), 1: high driving strength. */
/*       pe:   Pull enable: 0: No resistor is applied, 1: resistor is enabled. */
/*             The pull-direction (up or down) is determined by the pad-type. */
/*       ie:   Input enable: 0: Digital pad input function disabled, 1: input is enabled. */
/*    Note: */
/*       Not all functions are available for all pads, it depends on the pad type. */
/*       Functions not found as programmable bit in the register of a pad are not supported by the pad. */
/*    Note: */
/*       During a power cycle (power up or when a power watch detects an invalid supply), all IOs are */
/*       undriven (output enable is off). Additionally the following states are forced to the IOs (POC-states): */
/*       pe:   0   Attention: the internal push/pull resistors are not applied during a power cycle. */
/*       ds:   1   (no impact as outputs are disabled) */
/*       ie:   0   (no impact as core is in reset) */
/*       After all power watches have detected a stable power state, the netX enters the reset state. At that moment */
/*       the default values of the PAD_CTRL registers will be applied to the IOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_rdy_n      0x00000000
#define Adr_NX90_pad_ctrl_pad_ctrl_rdy_n 0xFF401000
#define Adr_NX90_pad_ctrl_rdy_n          0xFF401000
#define DFLT_VAL_NX90_pad_ctrl_rdy_n     0x00000050

#define MSK_NX90_pad_ctrl_rdy_n_ds         0x00000001
#define SRT_NX90_pad_ctrl_rdy_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_ds 0x00000000
#define MSK_NX90_pad_ctrl_rdy_n_pe         0x00000010
#define SRT_NX90_pad_ctrl_rdy_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_pe 0x00000001
#define MSK_NX90_pad_ctrl_rdy_n_ie         0x00000040
#define SRT_NX90_pad_ctrl_rdy_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_rdy_n_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_rdy_n_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_rdy_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_rdy_n 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_run_n */
/* => Pad configuration register of port RUN_N (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_run_n      0x00000004
#define Adr_NX90_pad_ctrl_pad_ctrl_run_n 0xFF401004
#define Adr_NX90_pad_ctrl_run_n          0xFF401004
#define DFLT_VAL_NX90_pad_ctrl_run_n     0x00000050

#define MSK_NX90_pad_ctrl_run_n_ds         0x00000001
#define SRT_NX90_pad_ctrl_run_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_run_n_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_ds 0x00000000
#define MSK_NX90_pad_ctrl_run_n_pe         0x00000010
#define SRT_NX90_pad_ctrl_run_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_run_n_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_pe 0x00000001
#define MSK_NX90_pad_ctrl_run_n_ie         0x00000040
#define SRT_NX90_pad_ctrl_run_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_run_n_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_run_n_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_run_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_run_n 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled0 */
/* => Pad configuration register of port MLED0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o_sc) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled0      0x00000008
#define Adr_NX90_pad_ctrl_pad_ctrl_mled0 0xFF401008
#define Adr_NX90_pad_ctrl_mled0          0xFF401008
#define DFLT_VAL_NX90_pad_ctrl_mled0     0x00000000

#define MSK_NX90_pad_ctrl_mled0_ds         0x00000001
#define SRT_NX90_pad_ctrl_mled0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled0_ds 0x00000000
#define MSK_NX90_pad_ctrl_mled0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mled0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled0_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled0_pe 0x00000000

/* all used bits of 'NX90_pad_ctrl_mled0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled0 0x00000011

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled1 */
/* => Pad configuration register of port MLED1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o_sc) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled1      0x0000000C
#define Adr_NX90_pad_ctrl_pad_ctrl_mled1 0xFF40100C
#define Adr_NX90_pad_ctrl_mled1          0xFF40100C
#define DFLT_VAL_NX90_pad_ctrl_mled1     0x00000000

#define MSK_NX90_pad_ctrl_mled1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mled1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mled1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mled1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled1_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled1_pe 0x00000000

/* all used bits of 'NX90_pad_ctrl_mled1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled1 0x00000011

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled2 */
/* => Pad configuration register of port MLED2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled2      0x00000010
#define Adr_NX90_pad_ctrl_pad_ctrl_mled2 0xFF401010
#define Adr_NX90_pad_ctrl_mled2          0xFF401010
#define DFLT_VAL_NX90_pad_ctrl_mled2     0x00000000

#define MSK_NX90_pad_ctrl_mled2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mled2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mled2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mled2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled2_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled2_pe 0x00000000

/* all used bits of 'NX90_pad_ctrl_mled2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled2 0x00000011

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mled3 */
/* => Pad configuration register of port MLED3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mled3      0x00000014
#define Adr_NX90_pad_ctrl_pad_ctrl_mled3 0xFF401014
#define Adr_NX90_pad_ctrl_mled3          0xFF401014
#define DFLT_VAL_NX90_pad_ctrl_mled3     0x00000000

#define MSK_NX90_pad_ctrl_mled3_ds         0x00000001
#define SRT_NX90_pad_ctrl_mled3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mled3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled3_ds 0x00000000
#define MSK_NX90_pad_ctrl_mled3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mled3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mled3_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mled3_pe 0x00000000

/* all used bits of 'NX90_pad_ctrl_mled3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mled3 0x00000011

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io0 */
/* => Pad configuration register of port COM_IO0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io0      0x00000018
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io0 0xFF401018
#define Adr_NX90_pad_ctrl_com_io0          0xFF401018
#define DFLT_VAL_NX90_pad_ctrl_com_io0     0x00000010

#define MSK_NX90_pad_ctrl_com_io0_ds         0x00000001
#define SRT_NX90_pad_ctrl_com_io0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_ds 0x00000000
#define MSK_NX90_pad_ctrl_com_io0_pe         0x00000010
#define SRT_NX90_pad_ctrl_com_io0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_pe 0x00000001
#define MSK_NX90_pad_ctrl_com_io0_ie         0x00000040
#define SRT_NX90_pad_ctrl_com_io0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io0_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io0_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_com_io0': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io1 */
/* => Pad configuration register of port COM_IO1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io1      0x0000001C
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io1 0xFF40101C
#define Adr_NX90_pad_ctrl_com_io1          0xFF40101C
#define DFLT_VAL_NX90_pad_ctrl_com_io1     0x00000010

#define MSK_NX90_pad_ctrl_com_io1_ds         0x00000001
#define SRT_NX90_pad_ctrl_com_io1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_ds 0x00000000
#define MSK_NX90_pad_ctrl_com_io1_pe         0x00000010
#define SRT_NX90_pad_ctrl_com_io1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_pe 0x00000001
#define MSK_NX90_pad_ctrl_com_io1_ie         0x00000040
#define SRT_NX90_pad_ctrl_com_io1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io1_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io1_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_com_io1': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io2 */
/* => Pad configuration register of port COM_IO2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io2      0x00000020
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io2 0xFF401020
#define Adr_NX90_pad_ctrl_com_io2          0xFF401020
#define DFLT_VAL_NX90_pad_ctrl_com_io2     0x00000010

#define MSK_NX90_pad_ctrl_com_io2_ds         0x00000001
#define SRT_NX90_pad_ctrl_com_io2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_ds 0x00000000
#define MSK_NX90_pad_ctrl_com_io2_pe         0x00000010
#define SRT_NX90_pad_ctrl_com_io2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_pe 0x00000001
#define MSK_NX90_pad_ctrl_com_io2_ie         0x00000040
#define SRT_NX90_pad_ctrl_com_io2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io2_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io2_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_com_io2': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_com_io3 */
/* => Pad configuration register of port COM_IO3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_com_io3      0x00000024
#define Adr_NX90_pad_ctrl_pad_ctrl_com_io3 0xFF401024
#define Adr_NX90_pad_ctrl_com_io3          0xFF401024
#define DFLT_VAL_NX90_pad_ctrl_com_io3     0x00000010

#define MSK_NX90_pad_ctrl_com_io3_ds         0x00000001
#define SRT_NX90_pad_ctrl_com_io3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_com_io3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_ds 0x00000000
#define MSK_NX90_pad_ctrl_com_io3_pe         0x00000010
#define SRT_NX90_pad_ctrl_com_io3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_com_io3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_pe 0x00000001
#define MSK_NX90_pad_ctrl_com_io3_ie         0x00000040
#define SRT_NX90_pad_ctrl_com_io3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_com_io3_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_com_io3_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_com_io3': */
#define MSK_USED_BITS_NX90_pad_ctrl_com_io3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_uart_rxd */
/* => Pad configuration register of port UART_RXD (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_uart_rxd      0x00000028
#define Adr_NX90_pad_ctrl_pad_ctrl_uart_rxd 0xFF401028
#define Adr_NX90_pad_ctrl_uart_rxd          0xFF401028
#define DFLT_VAL_NX90_pad_ctrl_uart_rxd     0x00000050

#define MSK_NX90_pad_ctrl_uart_rxd_pe         0x00000010
#define SRT_NX90_pad_ctrl_uart_rxd_pe         4
#define DFLT_VAL_NX90_pad_ctrl_uart_rxd_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_uart_rxd_pe 0x00000001
#define MSK_NX90_pad_ctrl_uart_rxd_ie         0x00000040
#define SRT_NX90_pad_ctrl_uart_rxd_ie         6
#define DFLT_VAL_NX90_pad_ctrl_uart_rxd_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_uart_rxd_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_uart_rxd': */
#define MSK_USED_BITS_NX90_pad_ctrl_uart_rxd 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_uart_txd */
/* => Pad configuration register of port UART_TXD (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408CDG_33(o) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_uart_txd      0x0000002C
#define Adr_NX90_pad_ctrl_pad_ctrl_uart_txd 0xFF40102C
#define Adr_NX90_pad_ctrl_uart_txd          0xFF40102C
#define DFLT_VAL_NX90_pad_ctrl_uart_txd     0x00000010

#define MSK_NX90_pad_ctrl_uart_txd_ds         0x00000001
#define SRT_NX90_pad_ctrl_uart_txd_ds         0
#define DFLT_VAL_NX90_pad_ctrl_uart_txd_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_uart_txd_ds 0x00000000
#define MSK_NX90_pad_ctrl_uart_txd_pe         0x00000010
#define SRT_NX90_pad_ctrl_uart_txd_pe         4
#define DFLT_VAL_NX90_pad_ctrl_uart_txd_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_uart_txd_pe 0x00000001

/* all used bits of 'NX90_pad_ctrl_uart_txd': */
#define MSK_USED_BITS_NX90_pad_ctrl_uart_txd 0x00000011

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxclk */
/* => Pad configuration register of port MII0_RXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxclk      0x00000030
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxclk 0xFF401030
#define Adr_NX90_pad_ctrl_mii0_rxclk          0xFF401030
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxclk_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_rxclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_rxclk_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxclk_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxclk_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxclk_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxclk 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd0 */
/* => Pad configuration register of port MII0_RXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd0      0x00000034
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd0 0xFF401034
#define Adr_NX90_pad_ctrl_mii0_rxd0          0xFF401034
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxd0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd0_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxd0_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd0_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd0_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd0 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd1 */
/* => Pad configuration register of port MII0_RXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd1      0x00000038
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd1 0xFF401038
#define Adr_NX90_pad_ctrl_mii0_rxd1          0xFF401038
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxd1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_rxd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_rxd1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxd1_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd1_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd1_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd2 */
/* => Pad configuration register of port MII0_RXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd2      0x0000003C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd2 0xFF40103C
#define Adr_NX90_pad_ctrl_mii0_rxd2          0xFF40103C
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxd2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_rxd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_rxd2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxd2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxd3 */
/* => Pad configuration register of port MII0_RXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxd3      0x00000040
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxd3 0xFF401040
#define Adr_NX90_pad_ctrl_mii0_rxd3          0xFF401040
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxd3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd3_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxd3_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxd3_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxd3_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxd3 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxdv */
/* => Pad configuration register of port MII0_RXDV (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxdv      0x00000044
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxdv 0xFF401044
#define Adr_NX90_pad_ctrl_mii0_rxdv          0xFF401044
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxdv_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxdv_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxdv_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxdv_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxdv_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxdv_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxdv_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxdv': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxdv 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_rxer */
/* => Pad configuration register of port MII0_RXER (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_rxer      0x00000048
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_rxer 0xFF401048
#define Adr_NX90_pad_ctrl_mii0_rxer          0xFF401048
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer     0x00000050

#define MSK_NX90_pad_ctrl_mii0_rxer_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_rxer_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxer_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_rxer_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_rxer_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_rxer_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_rxer_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_rxer': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_rxer 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txclk */
/* => Pad configuration register of port MII0_TXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txclk      0x0000004C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txclk 0xFF40104C
#define Adr_NX90_pad_ctrl_mii0_txclk          0xFF40104C
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk     0x00000050

#define MSK_NX90_pad_ctrl_mii0_txclk_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txclk_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txclk_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txclk_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txclk_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_txclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txclk 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd0 */
/* => Pad configuration register of port MII0_TXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd0      0x00000050
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd0 0xFF401050
#define Adr_NX90_pad_ctrl_mii0_txd0          0xFF401050
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0     0x00000010

#define MSK_NX90_pad_ctrl_mii0_txd0_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txd0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txd0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txd0_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd0_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd0_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii0_txd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd1 */
/* => Pad configuration register of port MII0_TXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd1      0x00000054
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd1 0xFF401054
#define Adr_NX90_pad_ctrl_mii0_txd1          0xFF401054
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1     0x00000010

#define MSK_NX90_pad_ctrl_mii0_txd1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txd1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txd1_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd1_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd1_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii0_txd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd2 */
/* => Pad configuration register of port MII0_TXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd2      0x00000058
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd2 0xFF401058
#define Adr_NX90_pad_ctrl_mii0_txd2          0xFF401058
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2     0x00000010

#define MSK_NX90_pad_ctrl_mii0_txd2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txd2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txd2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd2_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd2_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii0_txd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txd3 */
/* => Pad configuration register of port MII0_TXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txd3      0x0000005C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txd3 0xFF40105C
#define Adr_NX90_pad_ctrl_mii0_txd3          0xFF40105C
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3     0x00000010

#define MSK_NX90_pad_ctrl_mii0_txd3_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txd3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txd3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txd3_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txd3_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txd3_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii0_txd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txd3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txen */
/* => Pad configuration register of port MII0_TXEN (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txen      0x00000060
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txen 0xFF401060
#define Adr_NX90_pad_ctrl_mii0_txen          0xFF401060
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen     0x00000050

#define MSK_NX90_pad_ctrl_mii0_txen_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txen_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txen_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_txen': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txen 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_col */
/* => Pad configuration register of port MII0_COL (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_col      0x00000064
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_col 0xFF401064
#define Adr_NX90_pad_ctrl_mii0_col          0xFF401064
#define DFLT_VAL_NX90_pad_ctrl_mii0_col     0x00000050

#define MSK_NX90_pad_ctrl_mii0_col_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_col_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_col_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_col_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_col_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_col_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_col': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_col 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_crs */
/* => Pad configuration register of port MII0_CRS (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_crs      0x00000068
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_crs 0xFF401068
#define Adr_NX90_pad_ctrl_mii0_crs          0xFF401068
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs     0x00000050

#define MSK_NX90_pad_ctrl_mii0_crs_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_crs_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_crs_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_crs_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_crs_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_crs_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_crs': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_crs 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy0_led_link_in */
/* => Pad configuration register of port PHY0_LED_LINK_IN (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy0_led_link_in      0x0000006C
#define Adr_NX90_pad_ctrl_pad_ctrl_phy0_led_link_in 0xFF40106C
#define Adr_NX90_pad_ctrl_phy0_led_link_in          0xFF40106C
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in     0x00000050

#define MSK_NX90_pad_ctrl_phy0_led_link_in_ds         0x00000001
#define SRT_NX90_pad_ctrl_phy0_led_link_in_ds         0
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_ds 0x00000000
#define MSK_NX90_pad_ctrl_phy0_led_link_in_pe         0x00000010
#define SRT_NX90_pad_ctrl_phy0_led_link_in_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_pe 0x00000001
#define MSK_NX90_pad_ctrl_phy0_led_link_in_ie         0x00000040
#define SRT_NX90_pad_ctrl_phy0_led_link_in_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_phy0_led_link_in': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy0_led_link_in 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxclk */
/* => Pad configuration register of port MII1_RXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxclk      0x00000070
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxclk 0xFF401070
#define Adr_NX90_pad_ctrl_mii1_rxclk          0xFF401070
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk     0x00000050

#define MSK_NX90_pad_ctrl_mii1_rxclk_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_rxclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxclk_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_rxclk_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxclk_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxclk_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_rxclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxclk 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd0 */
/* => Pad configuration register of port MII1_RXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i_double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd0      0x00000074
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd0 0xFF401074
#define Adr_NX90_pad_ctrl_mii1_rxd0          0xFF401074
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0     0x00000000

#define MSK_NX90_pad_ctrl_mii1_rxd0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd0_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd0_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd0_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd0_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_rxd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd0 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd1 */
/* => Pad configuration register of port MII1_RXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd1      0x00000078
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd1 0xFF401078
#define Adr_NX90_pad_ctrl_mii1_rxd1          0xFF401078
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1     0x00000000

#define MSK_NX90_pad_ctrl_mii1_rxd1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_rxd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd1_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd1_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd1_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_rxd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd2 */
/* => Pad configuration register of port MII1_RXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd2      0x0000007C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd2 0xFF40107C
#define Adr_NX90_pad_ctrl_mii1_rxd2          0xFF40107C
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2     0x00000000

#define MSK_NX90_pad_ctrl_mii1_rxd2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_rxd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd2_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd2_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_rxd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxd3 */
/* => Pad configuration register of port MII1_RXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i_double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxd3      0x00000080
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxd3 0xFF401080
#define Adr_NX90_pad_ctrl_mii1_rxd3          0xFF401080
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3     0x00000000

#define MSK_NX90_pad_ctrl_mii1_rxd3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd3_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxd3_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxd3_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxd3_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_rxd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxd3 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxdv */
/* => Pad configuration register of port MII1_RXDV (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxdv      0x00000084
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxdv 0xFF401084
#define Adr_NX90_pad_ctrl_mii1_rxdv          0xFF401084
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv     0x00000050

#define MSK_NX90_pad_ctrl_mii1_rxdv_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxdv_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxdv_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_rxdv_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxdv_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxdv_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxdv_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_rxdv': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxdv 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxer */
/* => Pad configuration register of port MII1_RXER (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxer      0x00000088
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxer 0xFF401088
#define Adr_NX90_pad_ctrl_mii1_rxer          0xFF401088
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer     0x00000050

#define MSK_NX90_pad_ctrl_mii1_rxer_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_rxer_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_rxer_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxer_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_rxer_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxer_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_rxer': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxer 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txclk */
/* => Pad configuration register of port MII1_TXCLK (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txclk      0x0000008C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txclk 0xFF40108C
#define Adr_NX90_pad_ctrl_mii1_txclk          0xFF40108C
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk     0x00000010

#define MSK_NX90_pad_ctrl_mii1_txclk_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txclk_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_txclk_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txclk_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txclk_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txclk 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd0 */
/* => Pad configuration register of port MII1_TXD0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd0      0x00000090
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd0 0xFF401090
#define Adr_NX90_pad_ctrl_mii1_txd0          0xFF401090
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0     0x00000000

#define MSK_NX90_pad_ctrl_mii1_txd0_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txd0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txd0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd0_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txd0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd0_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd0_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txd0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd1 */
/* => Pad configuration register of port MII1_TXD1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd1      0x00000094
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd1 0xFF401094
#define Adr_NX90_pad_ctrl_mii1_txd1          0xFF401094
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1     0x00000000

#define MSK_NX90_pad_ctrl_mii1_txd1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txd1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txd1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd1_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txd1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd1_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd1_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txd1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd2 */
/* => Pad configuration register of port MII1_TXD2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd2      0x00000098
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd2 0xFF401098
#define Adr_NX90_pad_ctrl_mii1_txd2          0xFF401098
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2     0x00000000

#define MSK_NX90_pad_ctrl_mii1_txd2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txd2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txd2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txd2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd2_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd2_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txd2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txd3 */
/* => Pad configuration register of port MII1_TXD3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33(double_bond) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txd3      0x0000009C
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txd3 0xFF40109C
#define Adr_NX90_pad_ctrl_mii1_txd3          0xFF40109C
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3     0x00000000

#define MSK_NX90_pad_ctrl_mii1_txd3_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txd3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txd3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_pe    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_pe 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txd3_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txd3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txd3_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txd3_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txd3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txd3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_txen */
/* => Pad configuration register of port MII1_TXEN (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_txen      0x000000A0
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_txen 0xFF4010A0
#define Adr_NX90_pad_ctrl_mii1_txen          0xFF4010A0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen     0x00000010

#define MSK_NX90_pad_ctrl_mii1_txen_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_txen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_txen_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_txen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_txen_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_txen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_txen_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_txen_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii1_txen': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_txen 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_col */
/* => Pad configuration register of port MII1_COL (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_col      0x000000A4
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_col 0xFF4010A4
#define Adr_NX90_pad_ctrl_mii1_col          0xFF4010A4
#define DFLT_VAL_NX90_pad_ctrl_mii1_col     0x00000050

#define MSK_NX90_pad_ctrl_mii1_col_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_col_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_col_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_col_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_col_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_col_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_col': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_col 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_crs */
/* => Pad configuration register of port MII1_CRS (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_crs      0x000000A8
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_crs 0xFF4010A8
#define Adr_NX90_pad_ctrl_mii1_crs          0xFF4010A8
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs     0x00000050

#define MSK_NX90_pad_ctrl_mii1_crs_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_crs_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_crs_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_crs_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_crs_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_crs_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_crs': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_crs 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy1_led_link_in */
/* => Pad configuration register of port PHY1_LED_LINK_IN (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy1_led_link_in      0x000000AC
#define Adr_NX90_pad_ctrl_pad_ctrl_phy1_led_link_in 0xFF4010AC
#define Adr_NX90_pad_ctrl_phy1_led_link_in          0xFF4010AC
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in     0x00000050

#define MSK_NX90_pad_ctrl_phy1_led_link_in_ds         0x00000001
#define SRT_NX90_pad_ctrl_phy1_led_link_in_ds         0
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_ds 0x00000000
#define MSK_NX90_pad_ctrl_phy1_led_link_in_pe         0x00000010
#define SRT_NX90_pad_ctrl_phy1_led_link_in_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_pe 0x00000001
#define MSK_NX90_pad_ctrl_phy1_led_link_in_ie         0x00000040
#define SRT_NX90_pad_ctrl_phy1_led_link_in_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_phy1_led_link_in': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy1_led_link_in 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii_mdc */
/* => Pad configuration register of port MII_MDC (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii_mdc      0x000000B0
#define Adr_NX90_pad_ctrl_pad_ctrl_mii_mdc 0xFF4010B0
#define Adr_NX90_pad_ctrl_mii_mdc          0xFF4010B0
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc     0x00000010

#define MSK_NX90_pad_ctrl_mii_mdc_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii_mdc_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii_mdc_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii_mdc_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii_mdc_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii_mdc_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii_mdc_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdc_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii_mdc': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii_mdc 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii_mdio */
/* => Pad configuration register of port MII_MDIO (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii_mdio      0x000000B4
#define Adr_NX90_pad_ctrl_pad_ctrl_mii_mdio 0xFF4010B4
#define Adr_NX90_pad_ctrl_mii_mdio          0xFF4010B4
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio     0x00000010

#define MSK_NX90_pad_ctrl_mii_mdio_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii_mdio_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii_mdio_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii_mdio_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii_mdio_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii_mdio_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii_mdio_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii_mdio_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mii_mdio': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii_mdio 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_rst_out_n */
/* => Pad configuration register of port RST_OUT_N (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_rst_out_n      0x000000B8
#define Adr_NX90_pad_ctrl_pad_ctrl_rst_out_n 0xFF4010B8
#define Adr_NX90_pad_ctrl_rst_out_n          0xFF4010B8
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n     0x00000050

#define MSK_NX90_pad_ctrl_rst_out_n_ds         0x00000001
#define SRT_NX90_pad_ctrl_rst_out_n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_ds 0x00000000
#define MSK_NX90_pad_ctrl_rst_out_n_pe         0x00000010
#define SRT_NX90_pad_ctrl_rst_out_n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_pe 0x00000001
#define MSK_NX90_pad_ctrl_rst_out_n_ie         0x00000040
#define SRT_NX90_pad_ctrl_rst_out_n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_rst_out_n_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_rst_out_n_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_rst_out_n': */
#define MSK_USED_BITS_NX90_pad_ctrl_rst_out_n 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_clk25out */
/* => Pad configuration register of port CLK25OUT (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_clk25out      0x000000BC
#define Adr_NX90_pad_ctrl_pad_ctrl_clk25out 0xFF4010BC
#define Adr_NX90_pad_ctrl_clk25out          0xFF4010BC
#define DFLT_VAL_NX90_pad_ctrl_clk25out     0x00000050

#define MSK_NX90_pad_ctrl_clk25out_ds         0x00000001
#define SRT_NX90_pad_ctrl_clk25out_ds         0
#define DFLT_VAL_NX90_pad_ctrl_clk25out_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_clk25out_ds 0x00000000
#define MSK_NX90_pad_ctrl_clk25out_pe         0x00000010
#define SRT_NX90_pad_ctrl_clk25out_pe         4
#define DFLT_VAL_NX90_pad_ctrl_clk25out_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_clk25out_pe 0x00000001
#define MSK_NX90_pad_ctrl_clk25out_ie         0x00000040
#define SRT_NX90_pad_ctrl_clk25out_ie         6
#define DFLT_VAL_NX90_pad_ctrl_clk25out_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_clk25out_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_clk25out': */
#define MSK_USED_BITS_NX90_pad_ctrl_clk25out 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_txen_bga2 */
/* => Pad configuration register of port MII0_TXEN_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_txen_bga2      0x000000C0
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_txen_bga2 0xFF4010C0
#define Adr_NX90_pad_ctrl_mii0_txen_bga2          0xFF4010C0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii0_txen_bga2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_txen_bga2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_bga2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_bga2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_txen_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_txen_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_txen_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_txen_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_txen_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_txen_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_txen_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_txen_bga2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_col_bga2 */
/* => Pad configuration register of port MII0_COL_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_col_bga2      0x000000C4
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_col_bga2 0xFF4010C4
#define Adr_NX90_pad_ctrl_mii0_col_bga2          0xFF4010C4
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii0_col_bga2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii0_col_bga2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_bga2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_bga2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii0_col_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_col_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_col_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_col_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_col_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_col_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_col_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_col_bga2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii0_crs_bga2 */
/* => Pad configuration register of port MII0_CRS_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii0_crs_bga2      0x000000C8
#define Adr_NX90_pad_ctrl_pad_ctrl_mii0_crs_bga2 0xFF4010C8
#define Adr_NX90_pad_ctrl_mii0_crs_bga2          0xFF4010C8
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii0_crs_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii0_crs_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii0_crs_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii0_crs_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii0_crs_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii0_crs_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii0_crs_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii0_crs_bga2 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy0_led_link_in_bga2 */
/* => Pad configuration register of port PHY0_LED_LINK_IN_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy0_led_link_in_bga2      0x000000CC
#define Adr_NX90_pad_ctrl_pad_ctrl_phy0_led_link_in_bga2 0xFF4010CC
#define Adr_NX90_pad_ctrl_phy0_led_link_in_bga2          0xFF4010CC
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_bga2     0x00000050

#define MSK_NX90_pad_ctrl_phy0_led_link_in_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_phy0_led_link_in_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_phy0_led_link_in_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_phy0_led_link_in_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy0_led_link_in_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_phy0_led_link_in_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_phy0_led_link_in_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy0_led_link_in_bga2 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_rxer_bga2 */
/* => Pad configuration register of port MII1_RXER_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_rxer_bga2      0x000000D0
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_rxer_bga2 0xFF4010D0
#define Adr_NX90_pad_ctrl_mii1_rxer_bga2          0xFF4010D0
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii1_rxer_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_rxer_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_rxer_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_rxer_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_rxer_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_rxer_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_rxer_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_rxer_bga2 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_col_bga2 */
/* => Pad configuration register of port MII1_COL_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_col_bga2      0x000000D4
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_col_bga2 0xFF4010D4
#define Adr_NX90_pad_ctrl_mii1_col_bga2          0xFF4010D4
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii1_col_bga2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mii1_col_bga2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_bga2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_bga2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mii1_col_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_col_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_col_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_col_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_col_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_col_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_col_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_col_bga2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mii1_crs_bga2 */
/* => Pad configuration register of port MII1_CRS_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mii1_crs_bga2      0x000000D8
#define Adr_NX90_pad_ctrl_pad_ctrl_mii1_crs_bga2 0xFF4010D8
#define Adr_NX90_pad_ctrl_mii1_crs_bga2          0xFF4010D8
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_bga2     0x00000050

#define MSK_NX90_pad_ctrl_mii1_crs_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mii1_crs_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mii1_crs_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mii1_crs_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mii1_crs_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_mii1_crs_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_mii1_crs_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mii1_crs_bga2 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_phy1_led_link_in_bga2 */
/* => Pad configuration register of port PHY1_LED_LINK_IN_BGA2 (asic_ctrl_access_key protected). */
/*    Pad type: PDDW0204SCDG_33(i) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_phy1_led_link_in_bga2      0x000000DC
#define Adr_NX90_pad_ctrl_pad_ctrl_phy1_led_link_in_bga2 0xFF4010DC
#define Adr_NX90_pad_ctrl_phy1_led_link_in_bga2          0xFF4010DC
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_bga2     0x00000050

#define MSK_NX90_pad_ctrl_phy1_led_link_in_bga2_pe         0x00000010
#define SRT_NX90_pad_ctrl_phy1_led_link_in_bga2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_bga2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_bga2_pe 0x00000001
#define MSK_NX90_pad_ctrl_phy1_led_link_in_bga2_ie         0x00000040
#define SRT_NX90_pad_ctrl_phy1_led_link_in_bga2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_phy1_led_link_in_bga2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_phy1_led_link_in_bga2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_phy1_led_link_in_bga2': */
#define MSK_USED_BITS_NX90_pad_ctrl_phy1_led_link_in_bga2 0x00000050

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio0 */
/* => Pad configuration register of port MMIO0 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio0      0x000000E0
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio0 0xFF4010E0
#define Adr_NX90_pad_ctrl_mmio0          0xFF4010E0
#define DFLT_VAL_NX90_pad_ctrl_mmio0     0x00000010

#define MSK_NX90_pad_ctrl_mmio0_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio0_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio0_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio0_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio0_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio0': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio1 */
/* => Pad configuration register of port MMIO1 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc2) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio1      0x000000E4
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio1 0xFF4010E4
#define Adr_NX90_pad_ctrl_mmio1          0xFF4010E4
#define DFLT_VAL_NX90_pad_ctrl_mmio1     0x00000010

#define MSK_NX90_pad_ctrl_mmio1_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio1_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio1_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio1_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio1_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio1': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio2 */
/* => Pad configuration register of port MMIO2 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio2      0x000000E8
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio2 0xFF4010E8
#define Adr_NX90_pad_ctrl_mmio2          0xFF4010E8
#define DFLT_VAL_NX90_pad_ctrl_mmio2     0x00000010

#define MSK_NX90_pad_ctrl_mmio2_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio2_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio2_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio2_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio2_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio2': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio3 */
/* => Pad configuration register of port MMIO3 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_SW_33(adc3) */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio3      0x000000EC
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio3 0xFF4010EC
#define Adr_NX90_pad_ctrl_mmio3          0xFF4010EC
#define DFLT_VAL_NX90_pad_ctrl_mmio3     0x00000010

#define MSK_NX90_pad_ctrl_mmio3_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio3_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio3_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio3_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio3_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio3': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio4 */
/* => Pad configuration register of port MMIO4 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio4      0x000000F0
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio4 0xFF4010F0
#define Adr_NX90_pad_ctrl_mmio4          0xFF4010F0
#define DFLT_VAL_NX90_pad_ctrl_mmio4     0x00000010

#define MSK_NX90_pad_ctrl_mmio4_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio4_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio4_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio4_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio4_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio4_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio4_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio4': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio4 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio5 */
/* => Pad configuration register of port MMIO5 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio5      0x000000F4
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio5 0xFF4010F4
#define Adr_NX90_pad_ctrl_mmio5          0xFF4010F4
#define DFLT_VAL_NX90_pad_ctrl_mmio5     0x00000010

#define MSK_NX90_pad_ctrl_mmio5_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio5_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio5_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio5_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio5_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio5_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio5_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio5': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio5 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio6 */
/* => Pad configuration register of port MMIO6 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio6      0x000000F8
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio6 0xFF4010F8
#define Adr_NX90_pad_ctrl_mmio6          0xFF4010F8
#define DFLT_VAL_NX90_pad_ctrl_mmio6     0x00000010

#define MSK_NX90_pad_ctrl_mmio6_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio6_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio6_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio6_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio6_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio6_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio6_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio6': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio6 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_mmio7 */
/* => Pad configuration register of port MMIO7 (asic_ctrl_access_key protected). */
/*    Pad type: PRDW0408SCDG_ANA_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_mmio7      0x000000FC
#define Adr_NX90_pad_ctrl_pad_ctrl_mmio7 0xFF4010FC
#define Adr_NX90_pad_ctrl_mmio7          0xFF4010FC
#define DFLT_VAL_NX90_pad_ctrl_mmio7     0x00000010

#define MSK_NX90_pad_ctrl_mmio7_ds         0x00000001
#define SRT_NX90_pad_ctrl_mmio7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_mmio7_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_ds 0x00000000
#define MSK_NX90_pad_ctrl_mmio7_pe         0x00000010
#define SRT_NX90_pad_ctrl_mmio7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_mmio7_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_pe 0x00000001
#define MSK_NX90_pad_ctrl_mmio7_ie         0x00000040
#define SRT_NX90_pad_ctrl_mmio7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_mmio7_ie    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_mmio7_ie 0x00000000

/* all used bits of 'NX90_pad_ctrl_mmio7': */
#define MSK_USED_BITS_NX90_pad_ctrl_mmio7 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_clk */
/* => Pad configuration register of port SQI_CLK (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_clk      0x00000100
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_clk 0xFF401100
#define Adr_NX90_pad_ctrl_sqi_clk          0xFF401100
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk     0x00000050

#define MSK_NX90_pad_ctrl_sqi_clk_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_clk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_clk_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_clk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_clk_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_clk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_clk_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_clk_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_clk': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_clk 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_cs0n */
/* => Pad configuration register of port SQI_CS0N (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_cs0n      0x00000104
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_cs0n 0xFF401104
#define Adr_NX90_pad_ctrl_sqi_cs0n          0xFF401104
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n     0x00000050

#define MSK_NX90_pad_ctrl_sqi_cs0n_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_cs0n_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_cs0n_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_cs0n_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_cs0n_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_cs0n_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_cs0n_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_cs0n_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_cs0n': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_cs0n 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_mosi */
/* => Pad configuration register of port SQI_MOSI (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_mosi      0x00000108
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_mosi 0xFF401108
#define Adr_NX90_pad_ctrl_sqi_mosi          0xFF401108
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi     0x00000050

#define MSK_NX90_pad_ctrl_sqi_mosi_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_mosi_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_mosi_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_mosi_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_mosi_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_mosi_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_mosi_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_mosi_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_mosi': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_mosi 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_miso */
/* => Pad configuration register of port SQI_MISO (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_miso      0x0000010C
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_miso 0xFF40110C
#define Adr_NX90_pad_ctrl_sqi_miso          0xFF40110C
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso     0x00000050

#define MSK_NX90_pad_ctrl_sqi_miso_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_miso_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_miso_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_miso_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_miso_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_miso_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_miso_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_miso_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_miso': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_miso 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_sio2 */
/* => Pad configuration register of port SQI_SIO2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_sio2      0x00000110
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_sio2 0xFF401110
#define Adr_NX90_pad_ctrl_sqi_sio2          0xFF401110
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2     0x00000050

#define MSK_NX90_pad_ctrl_sqi_sio2_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_sio2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_sio2_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_sio2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_sio2_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_sio2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_sio2': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_sio2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_sqi_sio3 */
/* => Pad configuration register of port SQI_SIO3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_sqi_sio3      0x00000114
#define Adr_NX90_pad_ctrl_pad_ctrl_sqi_sio3 0xFF401114
#define Adr_NX90_pad_ctrl_sqi_sio3          0xFF401114
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3     0x00000050

#define MSK_NX90_pad_ctrl_sqi_sio3_ds         0x00000001
#define SRT_NX90_pad_ctrl_sqi_sio3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_ds 0x00000000
#define MSK_NX90_pad_ctrl_sqi_sio3_pe         0x00000010
#define SRT_NX90_pad_ctrl_sqi_sio3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_pe 0x00000001
#define MSK_NX90_pad_ctrl_sqi_sio3_ie         0x00000040
#define SRT_NX90_pad_ctrl_sqi_sio3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_sqi_sio3_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_sqi_sio3_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_sqi_sio3': */
#define MSK_USED_BITS_NX90_pad_ctrl_sqi_sio3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a0 */
/* => Pad configuration register of port HIF_A0 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a0      0x00000118
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a0 0xFF401118
#define Adr_NX90_pad_ctrl_hif_a0          0xFF401118
#define DFLT_VAL_NX90_pad_ctrl_hif_a0     0x00000050

#define MSK_NX90_pad_ctrl_hif_a0_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a0_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a0_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a0_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a0_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a0': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a1 */
/* => Pad configuration register of port HIF_A1 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a1      0x0000011C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a1 0xFF40111C
#define Adr_NX90_pad_ctrl_hif_a1          0xFF40111C
#define DFLT_VAL_NX90_pad_ctrl_hif_a1     0x00000050

#define MSK_NX90_pad_ctrl_hif_a1_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a1_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a1_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a1_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a1_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a1': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a2 */
/* => Pad configuration register of port HIF_A2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a2      0x00000120
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a2 0xFF401120
#define Adr_NX90_pad_ctrl_hif_a2          0xFF401120
#define DFLT_VAL_NX90_pad_ctrl_hif_a2     0x00000050

#define MSK_NX90_pad_ctrl_hif_a2_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a2_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a2_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a2': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a3 */
/* => Pad configuration register of port HIF_A3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a3      0x00000124
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a3 0xFF401124
#define Adr_NX90_pad_ctrl_hif_a3          0xFF401124
#define DFLT_VAL_NX90_pad_ctrl_hif_a3     0x00000050

#define MSK_NX90_pad_ctrl_hif_a3_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a3_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a3_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a3_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a3_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a3': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a4 */
/* => Pad configuration register of port HIF_A4 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a4      0x00000128
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a4 0xFF401128
#define Adr_NX90_pad_ctrl_hif_a4          0xFF401128
#define DFLT_VAL_NX90_pad_ctrl_hif_a4     0x00000050

#define MSK_NX90_pad_ctrl_hif_a4_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a4_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a4_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a4_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a4_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a4': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a4 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a5 */
/* => Pad configuration register of port HIF_A5 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a5      0x0000012C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a5 0xFF40112C
#define Adr_NX90_pad_ctrl_hif_a5          0xFF40112C
#define DFLT_VAL_NX90_pad_ctrl_hif_a5     0x00000050

#define MSK_NX90_pad_ctrl_hif_a5_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a5_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a5_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a5_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a5_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a5': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a5 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a6 */
/* => Pad configuration register of port HIF_A6 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a6      0x00000130
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a6 0xFF401130
#define Adr_NX90_pad_ctrl_hif_a6          0xFF401130
#define DFLT_VAL_NX90_pad_ctrl_hif_a6     0x00000050

#define MSK_NX90_pad_ctrl_hif_a6_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a6_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a6_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a6_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a6_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a6': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a6 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a7 */
/* => Pad configuration register of port HIF_A7 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a7      0x00000134
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a7 0xFF401134
#define Adr_NX90_pad_ctrl_hif_a7          0xFF401134
#define DFLT_VAL_NX90_pad_ctrl_hif_a7     0x00000050

#define MSK_NX90_pad_ctrl_hif_a7_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a7_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a7_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a7_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a7_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a7': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a7 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a8 */
/* => Pad configuration register of port HIF_A8 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a8      0x00000138
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a8 0xFF401138
#define Adr_NX90_pad_ctrl_hif_a8          0xFF401138
#define DFLT_VAL_NX90_pad_ctrl_hif_a8     0x00000050

#define MSK_NX90_pad_ctrl_hif_a8_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a8_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a8_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a8_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a8_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a8_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a8_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a8_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a8': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a8 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a9 */
/* => Pad configuration register of port HIF_A9 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a9      0x0000013C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a9 0xFF40113C
#define Adr_NX90_pad_ctrl_hif_a9          0xFF40113C
#define DFLT_VAL_NX90_pad_ctrl_hif_a9     0x00000050

#define MSK_NX90_pad_ctrl_hif_a9_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a9_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a9_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a9_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a9_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a9_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a9_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a9_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a9': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a9 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a10 */
/* => Pad configuration register of port HIF_A10 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a10      0x00000140
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a10 0xFF401140
#define Adr_NX90_pad_ctrl_hif_a10          0xFF401140
#define DFLT_VAL_NX90_pad_ctrl_hif_a10     0x00000050

#define MSK_NX90_pad_ctrl_hif_a10_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a10_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a10_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a10_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a10_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a10_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a10_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a10_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a10': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a10 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a11 */
/* => Pad configuration register of port HIF_A11 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a11      0x00000144
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a11 0xFF401144
#define Adr_NX90_pad_ctrl_hif_a11          0xFF401144
#define DFLT_VAL_NX90_pad_ctrl_hif_a11     0x00000050

#define MSK_NX90_pad_ctrl_hif_a11_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a11_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a11_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a11_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a11_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a11_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a11_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a11_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a11': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a11 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a12 */
/* => Pad configuration register of port HIF_A12 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a12      0x00000148
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a12 0xFF401148
#define Adr_NX90_pad_ctrl_hif_a12          0xFF401148
#define DFLT_VAL_NX90_pad_ctrl_hif_a12     0x00000050

#define MSK_NX90_pad_ctrl_hif_a12_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a12_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a12_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a12_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a12_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a12_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a12_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a12_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a12': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a12 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a13 */
/* => Pad configuration register of port HIF_A13 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a13      0x0000014C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a13 0xFF40114C
#define Adr_NX90_pad_ctrl_hif_a13          0xFF40114C
#define DFLT_VAL_NX90_pad_ctrl_hif_a13     0x00000050

#define MSK_NX90_pad_ctrl_hif_a13_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a13_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a13_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a13_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a13_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a13_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a13_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a13_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a13': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a13 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a14 */
/* => Pad configuration register of port HIF_A14 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a14      0x00000150
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a14 0xFF401150
#define Adr_NX90_pad_ctrl_hif_a14          0xFF401150
#define DFLT_VAL_NX90_pad_ctrl_hif_a14     0x00000050

#define MSK_NX90_pad_ctrl_hif_a14_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a14_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a14_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a14_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a14_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a14_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a14_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a14_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a14': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a14 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a15 */
/* => Pad configuration register of port HIF_A15 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a15      0x00000154
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a15 0xFF401154
#define Adr_NX90_pad_ctrl_hif_a15          0xFF401154
#define DFLT_VAL_NX90_pad_ctrl_hif_a15     0x00000050

#define MSK_NX90_pad_ctrl_hif_a15_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a15_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a15_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a15_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a15_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a15_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a15_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a15_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a15': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a15 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a16 */
/* => Pad configuration register of port HIF_A16 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a16      0x00000158
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a16 0xFF401158
#define Adr_NX90_pad_ctrl_hif_a16          0xFF401158
#define DFLT_VAL_NX90_pad_ctrl_hif_a16     0x00000050

#define MSK_NX90_pad_ctrl_hif_a16_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a16_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a16_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a16_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a16_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a16_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a16_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a16_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a16': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a16 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_a17 */
/* => Pad configuration register of port HIF_A17 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_a17      0x0000015C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_a17 0xFF40115C
#define Adr_NX90_pad_ctrl_hif_a17          0xFF40115C
#define DFLT_VAL_NX90_pad_ctrl_hif_a17     0x00000050

#define MSK_NX90_pad_ctrl_hif_a17_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_a17_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_a17_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_a17_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_a17_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_a17_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_a17_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_a17_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_a17': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_a17 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d0 */
/* => Pad configuration register of port HIF_D0 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d0      0x00000160
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d0 0xFF401160
#define Adr_NX90_pad_ctrl_hif_d0          0xFF401160
#define DFLT_VAL_NX90_pad_ctrl_hif_d0     0x00000050

#define MSK_NX90_pad_ctrl_hif_d0_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d0_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d0_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d0_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d0_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d0_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d0_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d0_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d0': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d0 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d1 */
/* => Pad configuration register of port HIF_D1 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d1      0x00000164
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d1 0xFF401164
#define Adr_NX90_pad_ctrl_hif_d1          0xFF401164
#define DFLT_VAL_NX90_pad_ctrl_hif_d1     0x00000050

#define MSK_NX90_pad_ctrl_hif_d1_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d1_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d1_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d1_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d1_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d1_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d1_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d1_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d1': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d1 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d2 */
/* => Pad configuration register of port HIF_D2 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d2      0x00000168
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d2 0xFF401168
#define Adr_NX90_pad_ctrl_hif_d2          0xFF401168
#define DFLT_VAL_NX90_pad_ctrl_hif_d2     0x00000050

#define MSK_NX90_pad_ctrl_hif_d2_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d2_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d2_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d2_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d2_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d2_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d2_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d2_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d2': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d2 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d3 */
/* => Pad configuration register of port HIF_D3 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d3      0x0000016C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d3 0xFF40116C
#define Adr_NX90_pad_ctrl_hif_d3          0xFF40116C
#define DFLT_VAL_NX90_pad_ctrl_hif_d3     0x00000050

#define MSK_NX90_pad_ctrl_hif_d3_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d3_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d3_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d3_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d3_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d3_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d3_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d3_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d3': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d3 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d4 */
/* => Pad configuration register of port HIF_D4 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d4      0x00000170
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d4 0xFF401170
#define Adr_NX90_pad_ctrl_hif_d4          0xFF401170
#define DFLT_VAL_NX90_pad_ctrl_hif_d4     0x00000050

#define MSK_NX90_pad_ctrl_hif_d4_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d4_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d4_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d4_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d4_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d4_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d4_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d4_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d4': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d4 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d5 */
/* => Pad configuration register of port HIF_D5 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d5      0x00000174
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d5 0xFF401174
#define Adr_NX90_pad_ctrl_hif_d5          0xFF401174
#define DFLT_VAL_NX90_pad_ctrl_hif_d5     0x00000050

#define MSK_NX90_pad_ctrl_hif_d5_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d5_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d5_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d5_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d5_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d5_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d5_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d5_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d5': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d5 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d6 */
/* => Pad configuration register of port HIF_D6 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d6      0x00000178
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d6 0xFF401178
#define Adr_NX90_pad_ctrl_hif_d6          0xFF401178
#define DFLT_VAL_NX90_pad_ctrl_hif_d6     0x00000050

#define MSK_NX90_pad_ctrl_hif_d6_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d6_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d6_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d6_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d6_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d6_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d6_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d6_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d6': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d6 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d7 */
/* => Pad configuration register of port HIF_D7 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d7      0x0000017C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d7 0xFF40117C
#define Adr_NX90_pad_ctrl_hif_d7          0xFF40117C
#define DFLT_VAL_NX90_pad_ctrl_hif_d7     0x00000050

#define MSK_NX90_pad_ctrl_hif_d7_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d7_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d7_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d7_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d7_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d7_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d7_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d7_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d7': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d7 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d8 */
/* => Pad configuration register of port HIF_D8 (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d8      0x00000180
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d8 0xFF401180
#define Adr_NX90_pad_ctrl_hif_d8          0xFF401180
#define DFLT_VAL_NX90_pad_ctrl_hif_d8     0x00000050

#define MSK_NX90_pad_ctrl_hif_d8_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d8_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d8_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d8_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d8_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d8_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d8_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d8_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d8': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d8 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d9 */
/* => Pad configuration register of port HIF_D9 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d9      0x00000184
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d9 0xFF401184
#define Adr_NX90_pad_ctrl_hif_d9          0xFF401184
#define DFLT_VAL_NX90_pad_ctrl_hif_d9     0x00000050

#define MSK_NX90_pad_ctrl_hif_d9_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d9_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d9_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d9_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d9_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d9_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d9_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d9_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d9': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d9 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d10 */
/* => Pad configuration register of port HIF_D10 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d10      0x00000188
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d10 0xFF401188
#define Adr_NX90_pad_ctrl_hif_d10          0xFF401188
#define DFLT_VAL_NX90_pad_ctrl_hif_d10     0x00000050

#define MSK_NX90_pad_ctrl_hif_d10_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d10_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d10_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d10_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d10_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d10_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d10_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d10_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d10': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d10 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d11 */
/* => Pad configuration register of port HIF_D11 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d11      0x0000018C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d11 0xFF40118C
#define Adr_NX90_pad_ctrl_hif_d11          0xFF40118C
#define DFLT_VAL_NX90_pad_ctrl_hif_d11     0x00000050

#define MSK_NX90_pad_ctrl_hif_d11_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d11_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d11_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d11_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d11_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d11_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d11_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d11_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d11': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d11 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d12 */
/* => Pad configuration register of port HIF_D12 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d12      0x00000190
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d12 0xFF401190
#define Adr_NX90_pad_ctrl_hif_d12          0xFF401190
#define DFLT_VAL_NX90_pad_ctrl_hif_d12     0x00000050

#define MSK_NX90_pad_ctrl_hif_d12_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d12_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d12_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d12_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d12_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d12_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d12_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d12_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d12': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d12 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d13 */
/* => Pad configuration register of port HIF_D13 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d13      0x00000194
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d13 0xFF401194
#define Adr_NX90_pad_ctrl_hif_d13          0xFF401194
#define DFLT_VAL_NX90_pad_ctrl_hif_d13     0x00000050

#define MSK_NX90_pad_ctrl_hif_d13_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d13_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d13_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d13_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d13_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d13_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d13_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d13_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d13': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d13 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d14 */
/* => Pad configuration register of port HIF_D14 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d14      0x00000198
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d14 0xFF401198
#define Adr_NX90_pad_ctrl_hif_d14          0xFF401198
#define DFLT_VAL_NX90_pad_ctrl_hif_d14     0x00000050

#define MSK_NX90_pad_ctrl_hif_d14_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d14_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d14_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d14_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d14_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d14_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d14_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d14_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d14': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d14 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_d15 */
/* => Pad configuration register of port HIF_D15 (asic_ctrl_access_key protected). */
/*    Pad type: PRUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_d15      0x0000019C
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_d15 0xFF40119C
#define Adr_NX90_pad_ctrl_hif_d15          0xFF40119C
#define DFLT_VAL_NX90_pad_ctrl_hif_d15     0x00000050

#define MSK_NX90_pad_ctrl_hif_d15_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_d15_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_d15_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_d15_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_d15_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_d15_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_d15_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_d15_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_d15': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_d15 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_bhen */
/* => Pad configuration register of port HIF_BHEN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_bhen      0x000001A0
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_bhen 0xFF4011A0
#define Adr_NX90_pad_ctrl_hif_bhen          0xFF4011A0
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen     0x00000050

#define MSK_NX90_pad_ctrl_hif_bhen_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_bhen_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_bhen_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_bhen_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_bhen_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_bhen_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_bhen_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_bhen_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_bhen': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_bhen 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_csn */
/* => Pad configuration register of port HIF_CSN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_csn      0x000001A4
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_csn 0xFF4011A4
#define Adr_NX90_pad_ctrl_hif_csn          0xFF4011A4
#define DFLT_VAL_NX90_pad_ctrl_hif_csn     0x00000050

#define MSK_NX90_pad_ctrl_hif_csn_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_csn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_csn_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_csn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_csn_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_csn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_csn_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_csn_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_csn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_csn 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_rdn */
/* => Pad configuration register of port HIF_RDN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_rdn      0x000001A8
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_rdn 0xFF4011A8
#define Adr_NX90_pad_ctrl_hif_rdn          0xFF4011A8
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn     0x00000050

#define MSK_NX90_pad_ctrl_hif_rdn_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_rdn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_rdn_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_rdn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_rdn_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_rdn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_rdn_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdn_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_rdn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_rdn 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_wrn */
/* => Pad configuration register of port HIF_WRN (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_wrn      0x000001AC
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_wrn 0xFF4011AC
#define Adr_NX90_pad_ctrl_hif_wrn          0xFF4011AC
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn     0x00000050

#define MSK_NX90_pad_ctrl_hif_wrn_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_wrn_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_wrn_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_wrn_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_wrn_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_wrn_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_wrn_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_wrn_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_wrn': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_wrn 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_rdy */
/* => Pad configuration register of port HIF_RDY (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_rdy      0x000001B0
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_rdy 0xFF4011B0
#define Adr_NX90_pad_ctrl_hif_rdy          0xFF4011B0
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy     0x00000050

#define MSK_NX90_pad_ctrl_hif_rdy_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_rdy_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_rdy_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_rdy_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_rdy_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_rdy_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_rdy_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_rdy_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_rdy': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_rdy 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_dirq */
/* => Pad configuration register of port HIF_DIRQ (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_dirq      0x000001B4
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_dirq 0xFF4011B4
#define Adr_NX90_pad_ctrl_hif_dirq          0xFF4011B4
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq     0x00000050

#define MSK_NX90_pad_ctrl_hif_dirq_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_dirq_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_dirq_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_dirq_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_dirq_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_dirq_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_dirq_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_dirq_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_dirq': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_dirq 0x00000051

/* --------------------------------------------------------------------- */
/* Register pad_ctrl_hif_sdclk */
/* => Pad configuration register of port HIF_SDCLK (asic_ctrl_access_key protected). */
/*    Pad type: PDUW0408SCDG_33 */
/*    For details refer to description of register pad_ctrl_rdy_n. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pad_ctrl_hif_sdclk      0x000001B8
#define Adr_NX90_pad_ctrl_pad_ctrl_hif_sdclk 0xFF4011B8
#define Adr_NX90_pad_ctrl_hif_sdclk          0xFF4011B8
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk     0x00000050

#define MSK_NX90_pad_ctrl_hif_sdclk_ds         0x00000001
#define SRT_NX90_pad_ctrl_hif_sdclk_ds         0
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_ds    0x00000000
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_ds 0x00000000
#define MSK_NX90_pad_ctrl_hif_sdclk_pe         0x00000010
#define SRT_NX90_pad_ctrl_hif_sdclk_pe         4
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_pe    0x00000010
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_pe 0x00000001
#define MSK_NX90_pad_ctrl_hif_sdclk_ie         0x00000040
#define SRT_NX90_pad_ctrl_hif_sdclk_ie         6
#define DFLT_VAL_NX90_pad_ctrl_hif_sdclk_ie    0x00000040
#define DFLT_BF_VAL_NX90_pad_ctrl_hif_sdclk_ie 0x00000001

/* all used bits of 'NX90_pad_ctrl_hif_sdclk': */
#define MSK_USED_BITS_NX90_pad_ctrl_hif_sdclk 0x00000051


/* ===================================================================== */

/* Area of asic_ctrl */

/* ===================================================================== */

#define Addr_NX90_asic_ctrl 0xFF401200

/* --------------------------------------------------------------------- */
/* Register io_config0 */
/* => IO Config0 Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config0       0x00000000
#define Adr_NX90_asic_ctrl_io_config0 0xFF401200
#define Adr_NX90_io_config0           0xFF401200

#define MSK_NX90_io_config0_val 0xffffffff
#define SRT_NX90_io_config0_val 0

/* all used bits of 'NX90_io_config0': */
#define MSK_USED_BITS_NX90_io_config0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config0_mask */
/* => IO Config0 Mask Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config0_mask       0x00000004
#define Adr_NX90_asic_ctrl_io_config0_mask 0xFF401204
#define Adr_NX90_io_config0_mask           0xFF401204

#define MSK_NX90_io_config0_mask_val 0xffffffff
#define SRT_NX90_io_config0_mask_val 0

/* all used bits of 'NX90_io_config0_mask': */
#define MSK_USED_BITS_NX90_io_config0_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config1 */
/* => IO Config1 Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config1       0x00000008
#define Adr_NX90_asic_ctrl_io_config1 0xFF401208
#define Adr_NX90_io_config1           0xFF401208

#define MSK_NX90_io_config1_val 0xffffffff
#define SRT_NX90_io_config1_val 0

/* all used bits of 'NX90_io_config1': */
#define MSK_USED_BITS_NX90_io_config1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config1_mask */
/* => IO Config1 Mask Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config1_mask       0x0000000C
#define Adr_NX90_asic_ctrl_io_config1_mask 0xFF40120C
#define Adr_NX90_io_config1_mask           0xFF40120C

#define MSK_NX90_io_config1_mask_val 0xffffffff
#define SRT_NX90_io_config1_mask_val 0

/* all used bits of 'NX90_io_config1_mask': */
#define MSK_USED_BITS_NX90_io_config1_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config2 */
/* => IO Config2 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config2_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config2       0x00000010
#define Adr_NX90_asic_ctrl_io_config2 0xFF401210
#define Adr_NX90_io_config2           0xFF401210
#define DFLT_VAL_NX90_io_config2      0x00000000

#define MSK_NX90_io_config2_sel_gpio8                           0x00000001
#define SRT_NX90_io_config2_sel_gpio8                           0
#define DFLT_VAL_NX90_io_config2_sel_gpio8                      0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio8                   0x00000000
#define MSK_NX90_io_config2_sel_gpio9                           0x00000002
#define SRT_NX90_io_config2_sel_gpio9                           1
#define DFLT_VAL_NX90_io_config2_sel_gpio9                      0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio9                   0x00000000
#define MSK_NX90_io_config2_sel_gpio10                          0x00000004
#define SRT_NX90_io_config2_sel_gpio10                          2
#define DFLT_VAL_NX90_io_config2_sel_gpio10                     0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio10                  0x00000000
#define MSK_NX90_io_config2_sel_gpio11                          0x00000008
#define SRT_NX90_io_config2_sel_gpio11                          3
#define DFLT_VAL_NX90_io_config2_sel_gpio11                     0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio11                  0x00000000
#define MSK_NX90_io_config2_sel_xc_trigger0_hif_sirq            0x00000010
#define SRT_NX90_io_config2_sel_xc_trigger0_hif_sirq            4
#define DFLT_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq       0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq    0x00000000
#define MSK_NX90_io_config2_sel_phy_devel                       0x00000020
#define SRT_NX90_io_config2_sel_phy_devel                       5
#define DFLT_VAL_NX90_io_config2_sel_phy_devel                  0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_phy_devel               0x00000000
#define MSK_NX90_io_config2_sel_ephy0                           0x00000040
#define SRT_NX90_io_config2_sel_ephy0                           6
#define DFLT_VAL_NX90_io_config2_sel_ephy0                      0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy0                   0x00000000
#define MSK_NX90_io_config2_sel_ephy1                           0x00000080
#define SRT_NX90_io_config2_sel_ephy1                           7
#define DFLT_VAL_NX90_io_config2_sel_ephy1                      0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy1                   0x00000000
#define MSK_NX90_io_config2_sel_ephy_mdio                       0x00000100
#define SRT_NX90_io_config2_sel_ephy_mdio                       8
#define DFLT_VAL_NX90_io_config2_sel_ephy_mdio                  0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy_mdio               0x00000000
#define MSK_NX90_io_config2_sel_fo0                             0x00000200
#define SRT_NX90_io_config2_sel_fo0                             9
#define DFLT_VAL_NX90_io_config2_sel_fo0                        0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_fo0                     0x00000000
#define MSK_NX90_io_config2_sel_fo1                             0x00000400
#define SRT_NX90_io_config2_sel_fo1                             10
#define DFLT_VAL_NX90_io_config2_sel_fo1                        0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_fo1                     0x00000000
#define MSK_NX90_io_config2_sel_i2c0_com                        0x00000800
#define SRT_NX90_io_config2_sel_i2c0_com                        11
#define DFLT_VAL_NX90_io_config2_sel_i2c0_com                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c0_com                0x00000000
#define MSK_NX90_io_config2_sel_i2c1_com                        0x00001000
#define SRT_NX90_io_config2_sel_i2c1_com                        12
#define DFLT_VAL_NX90_io_config2_sel_i2c1_com                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c1_com                0x00000000
#define MSK_NX90_io_config2_sel_uart_rctsn                      0x00002000
#define SRT_NX90_io_config2_sel_uart_rctsn                      13
#define DFLT_VAL_NX90_io_config2_sel_uart_rctsn                 0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_uart_rctsn              0x00000000
#define MSK_NX90_io_config2_clk25out_oe                         0x00004000
#define SRT_NX90_io_config2_clk25out_oe                         14
#define DFLT_VAL_NX90_io_config2_clk25out_oe                    0x00000000
#define DFLT_BF_VAL_NX90_io_config2_clk25out_oe                 0x00000000
#define MSK_NX90_io_config2_dcdc_enable_n                       0x00008000
#define SRT_NX90_io_config2_dcdc_enable_n                       15
#define DFLT_VAL_NX90_io_config2_dcdc_enable_n                  0x00000000
#define DFLT_BF_VAL_NX90_io_config2_dcdc_enable_n               0x00000000
#define MSK_NX90_io_config2_sel_gpio8_wm                        0x00010000
#define SRT_NX90_io_config2_sel_gpio8_wm                        16
#define DFLT_VAL_NX90_io_config2_sel_gpio8_wm                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio8_wm                0x00000000
#define MSK_NX90_io_config2_sel_gpio9_wm                        0x00020000
#define SRT_NX90_io_config2_sel_gpio9_wm                        17
#define DFLT_VAL_NX90_io_config2_sel_gpio9_wm                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio9_wm                0x00000000
#define MSK_NX90_io_config2_sel_gpio10_wm                       0x00040000
#define SRT_NX90_io_config2_sel_gpio10_wm                       18
#define DFLT_VAL_NX90_io_config2_sel_gpio10_wm                  0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio10_wm               0x00000000
#define MSK_NX90_io_config2_sel_gpio11_wm                       0x00080000
#define SRT_NX90_io_config2_sel_gpio11_wm                       19
#define DFLT_VAL_NX90_io_config2_sel_gpio11_wm                  0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_gpio11_wm               0x00000000
#define MSK_NX90_io_config2_sel_xc_trigger0_hif_sirq_wm         0x00100000
#define SRT_NX90_io_config2_sel_xc_trigger0_hif_sirq_wm         20
#define DFLT_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_xc_trigger0_hif_sirq_wm 0x00000000
#define MSK_NX90_io_config2_sel_phy_devel_wm                    0x00200000
#define SRT_NX90_io_config2_sel_phy_devel_wm                    21
#define DFLT_VAL_NX90_io_config2_sel_phy_devel_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_phy_devel_wm            0x00000000
#define MSK_NX90_io_config2_sel_ephy0_wm                        0x00400000
#define SRT_NX90_io_config2_sel_ephy0_wm                        22
#define DFLT_VAL_NX90_io_config2_sel_ephy0_wm                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy0_wm                0x00000000
#define MSK_NX90_io_config2_sel_ephy1_wm                        0x00800000
#define SRT_NX90_io_config2_sel_ephy1_wm                        23
#define DFLT_VAL_NX90_io_config2_sel_ephy1_wm                   0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy1_wm                0x00000000
#define MSK_NX90_io_config2_sel_ephy_mdio_wm                    0x01000000
#define SRT_NX90_io_config2_sel_ephy_mdio_wm                    24
#define DFLT_VAL_NX90_io_config2_sel_ephy_mdio_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_ephy_mdio_wm            0x00000000
#define MSK_NX90_io_config2_sel_fo0_wm                          0x02000000
#define SRT_NX90_io_config2_sel_fo0_wm                          25
#define DFLT_VAL_NX90_io_config2_sel_fo0_wm                     0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_fo0_wm                  0x00000000
#define MSK_NX90_io_config2_sel_fo1_wm                          0x04000000
#define SRT_NX90_io_config2_sel_fo1_wm                          26
#define DFLT_VAL_NX90_io_config2_sel_fo1_wm                     0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_fo1_wm                  0x00000000
#define MSK_NX90_io_config2_sel_i2c0_com_wm                     0x08000000
#define SRT_NX90_io_config2_sel_i2c0_com_wm                     27
#define DFLT_VAL_NX90_io_config2_sel_i2c0_com_wm                0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c0_com_wm             0x00000000
#define MSK_NX90_io_config2_sel_i2c1_com_wm                     0x10000000
#define SRT_NX90_io_config2_sel_i2c1_com_wm                     28
#define DFLT_VAL_NX90_io_config2_sel_i2c1_com_wm                0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_i2c1_com_wm             0x00000000
#define MSK_NX90_io_config2_sel_uart_rctsn_wm                   0x20000000
#define SRT_NX90_io_config2_sel_uart_rctsn_wm                   29
#define DFLT_VAL_NX90_io_config2_sel_uart_rctsn_wm              0x00000000
#define DFLT_BF_VAL_NX90_io_config2_sel_uart_rctsn_wm           0x00000000
#define MSK_NX90_io_config2_clk25out_oe_wm                      0x40000000
#define SRT_NX90_io_config2_clk25out_oe_wm                      30
#define DFLT_VAL_NX90_io_config2_clk25out_oe_wm                 0x00000000
#define DFLT_BF_VAL_NX90_io_config2_clk25out_oe_wm              0x00000000
#define MSK_NX90_io_config2_dcdc_enable_n_wm                    0x80000000
#define SRT_NX90_io_config2_dcdc_enable_n_wm                    31
#define DFLT_VAL_NX90_io_config2_dcdc_enable_n_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config2_dcdc_enable_n_wm            0x00000000

/* all used bits of 'NX90_io_config2': */
#define MSK_USED_BITS_NX90_io_config2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config2_mask */
/* => IO Config2 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config2 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config2_mask       0x00000014
#define Adr_NX90_asic_ctrl_io_config2_mask 0xFF401214
#define Adr_NX90_io_config2_mask           0xFF401214
#define DFLT_VAL_NX90_io_config2_mask      0x0000ffff

#define MSK_NX90_io_config2_mask_sel_gpio8                        0x00000001
#define SRT_NX90_io_config2_mask_sel_gpio8                        0
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio8                   0x00000001
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio8                0x00000001
#define MSK_NX90_io_config2_mask_sel_gpio9                        0x00000002
#define SRT_NX90_io_config2_mask_sel_gpio9                        1
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio9                   0x00000002
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio9                0x00000001
#define MSK_NX90_io_config2_mask_sel_gpio10                       0x00000004
#define SRT_NX90_io_config2_mask_sel_gpio10                       2
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio10                  0x00000004
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio10               0x00000001
#define MSK_NX90_io_config2_mask_sel_gpio11                       0x00000008
#define SRT_NX90_io_config2_mask_sel_gpio11                       3
#define DFLT_VAL_NX90_io_config2_mask_sel_gpio11                  0x00000008
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_gpio11               0x00000001
#define MSK_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq         0x00000010
#define SRT_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq         4
#define DFLT_VAL_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq    0x00000010
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_xc_trigger0_hif_sirq 0x00000001
#define MSK_NX90_io_config2_mask_sel_phy_devel                    0x00000020
#define SRT_NX90_io_config2_mask_sel_phy_devel                    5
#define DFLT_VAL_NX90_io_config2_mask_sel_phy_devel               0x00000020
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_phy_devel            0x00000001
#define MSK_NX90_io_config2_mask_sel_ephy0                        0x00000040
#define SRT_NX90_io_config2_mask_sel_ephy0                        6
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy0                   0x00000040
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy0                0x00000001
#define MSK_NX90_io_config2_mask_sel_ephy1                        0x00000080
#define SRT_NX90_io_config2_mask_sel_ephy1                        7
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy1                   0x00000080
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy1                0x00000001
#define MSK_NX90_io_config2_mask_sel_ephy_mdio                    0x00000100
#define SRT_NX90_io_config2_mask_sel_ephy_mdio                    8
#define DFLT_VAL_NX90_io_config2_mask_sel_ephy_mdio               0x00000100
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_ephy_mdio            0x00000001
#define MSK_NX90_io_config2_mask_sel_fo0                          0x00000200
#define SRT_NX90_io_config2_mask_sel_fo0                          9
#define DFLT_VAL_NX90_io_config2_mask_sel_fo0                     0x00000200
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_fo0                  0x00000001
#define MSK_NX90_io_config2_mask_sel_fo1                          0x00000400
#define SRT_NX90_io_config2_mask_sel_fo1                          10
#define DFLT_VAL_NX90_io_config2_mask_sel_fo1                     0x00000400
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_fo1                  0x00000001
#define MSK_NX90_io_config2_mask_sel_i2c0_com                     0x00000800
#define SRT_NX90_io_config2_mask_sel_i2c0_com                     11
#define DFLT_VAL_NX90_io_config2_mask_sel_i2c0_com                0x00000800
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_i2c0_com             0x00000001
#define MSK_NX90_io_config2_mask_sel_i2c1_com                     0x00001000
#define SRT_NX90_io_config2_mask_sel_i2c1_com                     12
#define DFLT_VAL_NX90_io_config2_mask_sel_i2c1_com                0x00001000
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_i2c1_com             0x00000001
#define MSK_NX90_io_config2_mask_sel_uart_rctsn                   0x00002000
#define SRT_NX90_io_config2_mask_sel_uart_rctsn                   13
#define DFLT_VAL_NX90_io_config2_mask_sel_uart_rctsn              0x00002000
#define DFLT_BF_VAL_NX90_io_config2_mask_sel_uart_rctsn           0x00000001
#define MSK_NX90_io_config2_mask_clk25out_oe                      0x00004000
#define SRT_NX90_io_config2_mask_clk25out_oe                      14
#define DFLT_VAL_NX90_io_config2_mask_clk25out_oe                 0x00004000
#define DFLT_BF_VAL_NX90_io_config2_mask_clk25out_oe              0x00000001
#define MSK_NX90_io_config2_mask_dcdc_enable_n                    0x00008000
#define SRT_NX90_io_config2_mask_dcdc_enable_n                    15
#define DFLT_VAL_NX90_io_config2_mask_dcdc_enable_n               0x00008000
#define DFLT_BF_VAL_NX90_io_config2_mask_dcdc_enable_n            0x00000001

/* all used bits of 'NX90_io_config2_mask': */
#define MSK_USED_BITS_NX90_io_config2_mask 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register io_config3 */
/* => IO Config3 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config3_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config3       0x00000018
#define Adr_NX90_asic_ctrl_io_config3 0xFF401218
#define Adr_NX90_io_config3           0xFF401218
#define DFLT_VAL_NX90_io_config3      0x00000000

#define MSK_NX90_io_config3_sel_gpio0                   0x00000001
#define SRT_NX90_io_config3_sel_gpio0                   0
#define DFLT_VAL_NX90_io_config3_sel_gpio0              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio0           0x00000000
#define MSK_NX90_io_config3_sel_gpio1                   0x00000002
#define SRT_NX90_io_config3_sel_gpio1                   1
#define DFLT_VAL_NX90_io_config3_sel_gpio1              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio1           0x00000000
#define MSK_NX90_io_config3_sel_gpio2                   0x00000004
#define SRT_NX90_io_config3_sel_gpio2                   2
#define DFLT_VAL_NX90_io_config3_sel_gpio2              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio2           0x00000000
#define MSK_NX90_io_config3_sel_gpio3                   0x00000008
#define SRT_NX90_io_config3_sel_gpio3                   3
#define DFLT_VAL_NX90_io_config3_sel_gpio3              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio3           0x00000000
#define MSK_NX90_io_config3_sel_gpio4                   0x00000010
#define SRT_NX90_io_config3_sel_gpio4                   4
#define DFLT_VAL_NX90_io_config3_sel_gpio4              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio4           0x00000000
#define MSK_NX90_io_config3_sel_gpio5                   0x00000020
#define SRT_NX90_io_config3_sel_gpio5                   5
#define DFLT_VAL_NX90_io_config3_sel_gpio5              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio5           0x00000000
#define MSK_NX90_io_config3_sel_gpio6                   0x00000040
#define SRT_NX90_io_config3_sel_gpio6                   6
#define DFLT_VAL_NX90_io_config3_sel_gpio6              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio6           0x00000000
#define MSK_NX90_io_config3_sel_gpio7                   0x00000080
#define SRT_NX90_io_config3_sel_gpio7                   7
#define DFLT_VAL_NX90_io_config3_sel_gpio7              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio7           0x00000000
#define MSK_NX90_io_config3_sel_endat0                  0x00000100
#define SRT_NX90_io_config3_sel_endat0                  8
#define DFLT_VAL_NX90_io_config3_sel_endat0             0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0          0x00000000
#define MSK_NX90_io_config3_sel_endat0_devel            0x00000200
#define SRT_NX90_io_config3_sel_endat0_devel            9
#define DFLT_VAL_NX90_io_config3_sel_endat0_devel       0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0_devel    0x00000000
#define MSK_NX90_io_config3_sel_endat1                  0x00000400
#define SRT_NX90_io_config3_sel_endat1                  10
#define DFLT_VAL_NX90_io_config3_sel_endat1             0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1          0x00000000
#define MSK_NX90_io_config3_sel_endat1_devel            0x00000800
#define SRT_NX90_io_config3_sel_endat1_devel            11
#define DFLT_VAL_NX90_io_config3_sel_endat1_devel       0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1_devel    0x00000000
#define MSK_NX90_io_config3_sel_biss0                   0x00001000
#define SRT_NX90_io_config3_sel_biss0                   12
#define DFLT_VAL_NX90_io_config3_sel_biss0              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0           0x00000000
#define MSK_NX90_io_config3_sel_biss0_mo                0x00002000
#define SRT_NX90_io_config3_sel_biss0_mo                13
#define DFLT_VAL_NX90_io_config3_sel_biss0_mo           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0_mo        0x00000000
#define MSK_NX90_io_config3_sel_biss1                   0x00004000
#define SRT_NX90_io_config3_sel_biss1                   14
#define DFLT_VAL_NX90_io_config3_sel_biss1              0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1           0x00000000
#define MSK_NX90_io_config3_sel_biss1_mo                0x00008000
#define SRT_NX90_io_config3_sel_biss1_mo                15
#define DFLT_VAL_NX90_io_config3_sel_biss1_mo           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1_mo        0x00000000
#define MSK_NX90_io_config3_sel_gpio0_wm                0x00010000
#define SRT_NX90_io_config3_sel_gpio0_wm                16
#define DFLT_VAL_NX90_io_config3_sel_gpio0_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio0_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio1_wm                0x00020000
#define SRT_NX90_io_config3_sel_gpio1_wm                17
#define DFLT_VAL_NX90_io_config3_sel_gpio1_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio1_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio2_wm                0x00040000
#define SRT_NX90_io_config3_sel_gpio2_wm                18
#define DFLT_VAL_NX90_io_config3_sel_gpio2_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio2_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio3_wm                0x00080000
#define SRT_NX90_io_config3_sel_gpio3_wm                19
#define DFLT_VAL_NX90_io_config3_sel_gpio3_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio3_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio4_wm                0x00100000
#define SRT_NX90_io_config3_sel_gpio4_wm                20
#define DFLT_VAL_NX90_io_config3_sel_gpio4_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio4_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio5_wm                0x00200000
#define SRT_NX90_io_config3_sel_gpio5_wm                21
#define DFLT_VAL_NX90_io_config3_sel_gpio5_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio5_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio6_wm                0x00400000
#define SRT_NX90_io_config3_sel_gpio6_wm                22
#define DFLT_VAL_NX90_io_config3_sel_gpio6_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio6_wm        0x00000000
#define MSK_NX90_io_config3_sel_gpio7_wm                0x00800000
#define SRT_NX90_io_config3_sel_gpio7_wm                23
#define DFLT_VAL_NX90_io_config3_sel_gpio7_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_gpio7_wm        0x00000000
#define MSK_NX90_io_config3_sel_endat0_wm               0x01000000
#define SRT_NX90_io_config3_sel_endat0_wm               24
#define DFLT_VAL_NX90_io_config3_sel_endat0_wm          0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0_wm       0x00000000
#define MSK_NX90_io_config3_sel_endat0_devel_wm         0x02000000
#define SRT_NX90_io_config3_sel_endat0_devel_wm         25
#define DFLT_VAL_NX90_io_config3_sel_endat0_devel_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat0_devel_wm 0x00000000
#define MSK_NX90_io_config3_sel_endat1_wm               0x04000000
#define SRT_NX90_io_config3_sel_endat1_wm               26
#define DFLT_VAL_NX90_io_config3_sel_endat1_wm          0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1_wm       0x00000000
#define MSK_NX90_io_config3_sel_endat1_devel_wm         0x08000000
#define SRT_NX90_io_config3_sel_endat1_devel_wm         27
#define DFLT_VAL_NX90_io_config3_sel_endat1_devel_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_endat1_devel_wm 0x00000000
#define MSK_NX90_io_config3_sel_biss0_wm                0x10000000
#define SRT_NX90_io_config3_sel_biss0_wm                28
#define DFLT_VAL_NX90_io_config3_sel_biss0_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0_wm        0x00000000
#define MSK_NX90_io_config3_sel_biss0_mo_wm             0x20000000
#define SRT_NX90_io_config3_sel_biss0_mo_wm             29
#define DFLT_VAL_NX90_io_config3_sel_biss0_mo_wm        0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss0_mo_wm     0x00000000
#define MSK_NX90_io_config3_sel_biss1_wm                0x40000000
#define SRT_NX90_io_config3_sel_biss1_wm                30
#define DFLT_VAL_NX90_io_config3_sel_biss1_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1_wm        0x00000000
#define MSK_NX90_io_config3_sel_biss1_mo_wm             0x80000000
#define SRT_NX90_io_config3_sel_biss1_mo_wm             31
#define DFLT_VAL_NX90_io_config3_sel_biss1_mo_wm        0x00000000
#define DFLT_BF_VAL_NX90_io_config3_sel_biss1_mo_wm     0x00000000

/* all used bits of 'NX90_io_config3': */
#define MSK_USED_BITS_NX90_io_config3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config3_mask */
/* => IO Config3 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config3 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config3_mask       0x0000001C
#define Adr_NX90_asic_ctrl_io_config3_mask 0xFF40121C
#define Adr_NX90_io_config3_mask           0xFF40121C
#define DFLT_VAL_NX90_io_config3_mask      0x0000ffff

#define MSK_NX90_io_config3_mask_sel_gpio0                0x00000001
#define SRT_NX90_io_config3_mask_sel_gpio0                0
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio0           0x00000001
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio0        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio1                0x00000002
#define SRT_NX90_io_config3_mask_sel_gpio1                1
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio1           0x00000002
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio1        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio2                0x00000004
#define SRT_NX90_io_config3_mask_sel_gpio2                2
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio2           0x00000004
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio2        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio3                0x00000008
#define SRT_NX90_io_config3_mask_sel_gpio3                3
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio3           0x00000008
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio3        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio4                0x00000010
#define SRT_NX90_io_config3_mask_sel_gpio4                4
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio4           0x00000010
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio4        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio5                0x00000020
#define SRT_NX90_io_config3_mask_sel_gpio5                5
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio5           0x00000020
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio5        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio6                0x00000040
#define SRT_NX90_io_config3_mask_sel_gpio6                6
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio6           0x00000040
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio6        0x00000001
#define MSK_NX90_io_config3_mask_sel_gpio7                0x00000080
#define SRT_NX90_io_config3_mask_sel_gpio7                7
#define DFLT_VAL_NX90_io_config3_mask_sel_gpio7           0x00000080
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_gpio7        0x00000001
#define MSK_NX90_io_config3_mask_sel_endat0               0x00000100
#define SRT_NX90_io_config3_mask_sel_endat0               8
#define DFLT_VAL_NX90_io_config3_mask_sel_endat0          0x00000100
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat0       0x00000001
#define MSK_NX90_io_config3_mask_sel_endat0_devel         0x00000200
#define SRT_NX90_io_config3_mask_sel_endat0_devel         9
#define DFLT_VAL_NX90_io_config3_mask_sel_endat0_devel    0x00000200
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat0_devel 0x00000001
#define MSK_NX90_io_config3_mask_sel_endat1               0x00000400
#define SRT_NX90_io_config3_mask_sel_endat1               10
#define DFLT_VAL_NX90_io_config3_mask_sel_endat1          0x00000400
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat1       0x00000001
#define MSK_NX90_io_config3_mask_sel_endat1_devel         0x00000800
#define SRT_NX90_io_config3_mask_sel_endat1_devel         11
#define DFLT_VAL_NX90_io_config3_mask_sel_endat1_devel    0x00000800
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_endat1_devel 0x00000001
#define MSK_NX90_io_config3_mask_sel_biss0                0x00001000
#define SRT_NX90_io_config3_mask_sel_biss0                12
#define DFLT_VAL_NX90_io_config3_mask_sel_biss0           0x00001000
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss0        0x00000001
#define MSK_NX90_io_config3_mask_sel_biss0_mo             0x00002000
#define SRT_NX90_io_config3_mask_sel_biss0_mo             13
#define DFLT_VAL_NX90_io_config3_mask_sel_biss0_mo        0x00002000
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss0_mo     0x00000001
#define MSK_NX90_io_config3_mask_sel_biss1                0x00004000
#define SRT_NX90_io_config3_mask_sel_biss1                14
#define DFLT_VAL_NX90_io_config3_mask_sel_biss1           0x00004000
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss1        0x00000001
#define MSK_NX90_io_config3_mask_sel_biss1_mo             0x00008000
#define SRT_NX90_io_config3_mask_sel_biss1_mo             15
#define DFLT_VAL_NX90_io_config3_mask_sel_biss1_mo        0x00008000
#define DFLT_BF_VAL_NX90_io_config3_mask_sel_biss1_mo     0x00000001

/* all used bits of 'NX90_io_config3_mask': */
#define MSK_USED_BITS_NX90_io_config3_mask 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register io_config4 */
/* => IO Config4 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config4_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config4       0x00000020
#define Adr_NX90_asic_ctrl_io_config4 0xFF401220
#define Adr_NX90_io_config4           0xFF401220
#define DFLT_VAL_NX90_io_config4      0x00000000

#define MSK_NX90_io_config4_sel_i2c_app                        0x00000001
#define SRT_NX90_io_config4_sel_i2c_app                        0
#define DFLT_VAL_NX90_io_config4_sel_i2c_app                   0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_i2c_app                0x00000000
#define MSK_NX90_io_config4_sel_uart_app                       0x00000002
#define SRT_NX90_io_config4_sel_uart_app                       1
#define DFLT_VAL_NX90_io_config4_sel_uart_app                  0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app               0x00000000
#define MSK_NX90_io_config4_sel_uart_app_rctsn                 0x00000004
#define SRT_NX90_io_config4_sel_uart_app_rctsn                 2
#define DFLT_VAL_NX90_io_config4_sel_uart_app_rctsn            0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app_rctsn         0x00000000
#define MSK_NX90_io_config4_sel_uart_xpic_app                  0x00000008
#define SRT_NX90_io_config4_sel_uart_xpic_app                  3
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app             0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app          0x00000000
#define MSK_NX90_io_config4_sel_uart_xpic_app_rctsn            0x00000010
#define SRT_NX90_io_config4_sel_uart_xpic_app_rctsn            4
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn       0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn    0x00000000
#define MSK_NX90_io_config4_sel_spi0_app                       0x00000020
#define SRT_NX90_io_config4_sel_spi0_app                       5
#define DFLT_VAL_NX90_io_config4_sel_spi0_app                  0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app               0x00000000
#define MSK_NX90_io_config4_sel_spi0_app_cs1                   0x00000040
#define SRT_NX90_io_config4_sel_spi0_app_cs1                   6
#define DFLT_VAL_NX90_io_config4_sel_spi0_app_cs1              0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app_cs1           0x00000000
#define MSK_NX90_io_config4_sel_spi2_app                       0x00000080
#define SRT_NX90_io_config4_sel_spi2_app                       7
#define DFLT_VAL_NX90_io_config4_sel_spi2_app                  0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app               0x00000000
#define MSK_NX90_io_config4_sel_spi2_app_cs1                   0x00000100
#define SRT_NX90_io_config4_sel_spi2_app_cs1                   8
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs1              0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs1           0x00000000
#define MSK_NX90_io_config4_sel_spi2_app_cs2                   0x00000200
#define SRT_NX90_io_config4_sel_spi2_app_cs2                   9
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs2              0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs2           0x00000000
#define MSK_NX90_io_config4_sel_can0_app                       0x00000400
#define SRT_NX90_io_config4_sel_can0_app                       10
#define DFLT_VAL_NX90_io_config4_sel_can0_app                  0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_can0_app               0x00000000
#define MSK_NX90_io_config4_sel_can1_app                       0x00000800
#define SRT_NX90_io_config4_sel_can1_app                       11
#define DFLT_VAL_NX90_io_config4_sel_can1_app                  0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_can1_app               0x00000000
#define MSK_NX90_io_config4_sel_i2c_app_wm                     0x00010000
#define SRT_NX90_io_config4_sel_i2c_app_wm                     16
#define DFLT_VAL_NX90_io_config4_sel_i2c_app_wm                0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_i2c_app_wm             0x00000000
#define MSK_NX90_io_config4_sel_uart_app_wm                    0x00020000
#define SRT_NX90_io_config4_sel_uart_app_wm                    17
#define DFLT_VAL_NX90_io_config4_sel_uart_app_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app_wm            0x00000000
#define MSK_NX90_io_config4_sel_uart_app_rctsn_wm              0x00040000
#define SRT_NX90_io_config4_sel_uart_app_rctsn_wm              18
#define DFLT_VAL_NX90_io_config4_sel_uart_app_rctsn_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_app_rctsn_wm      0x00000000
#define MSK_NX90_io_config4_sel_uart_xpic_app_wm               0x00080000
#define SRT_NX90_io_config4_sel_uart_xpic_app_wm               19
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app_wm          0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app_wm       0x00000000
#define MSK_NX90_io_config4_sel_uart_xpic_app_rctsn_wm         0x00100000
#define SRT_NX90_io_config4_sel_uart_xpic_app_rctsn_wm         20
#define DFLT_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_uart_xpic_app_rctsn_wm 0x00000000
#define MSK_NX90_io_config4_sel_spi0_app_wm                    0x00200000
#define SRT_NX90_io_config4_sel_spi0_app_wm                    21
#define DFLT_VAL_NX90_io_config4_sel_spi0_app_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app_wm            0x00000000
#define MSK_NX90_io_config4_sel_spi0_app_cs1_wm                0x00400000
#define SRT_NX90_io_config4_sel_spi0_app_cs1_wm                22
#define DFLT_VAL_NX90_io_config4_sel_spi0_app_cs1_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi0_app_cs1_wm        0x00000000
#define MSK_NX90_io_config4_sel_spi2_app_wm                    0x00800000
#define SRT_NX90_io_config4_sel_spi2_app_wm                    23
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_wm            0x00000000
#define MSK_NX90_io_config4_sel_spi2_app_cs1_wm                0x01000000
#define SRT_NX90_io_config4_sel_spi2_app_cs1_wm                24
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs1_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs1_wm        0x00000000
#define MSK_NX90_io_config4_sel_spi2_app_cs2_wm                0x02000000
#define SRT_NX90_io_config4_sel_spi2_app_cs2_wm                25
#define DFLT_VAL_NX90_io_config4_sel_spi2_app_cs2_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_spi2_app_cs2_wm        0x00000000
#define MSK_NX90_io_config4_sel_can0_app_wm                    0x04000000
#define SRT_NX90_io_config4_sel_can0_app_wm                    26
#define DFLT_VAL_NX90_io_config4_sel_can0_app_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_can0_app_wm            0x00000000
#define MSK_NX90_io_config4_sel_can1_app_wm                    0x08000000
#define SRT_NX90_io_config4_sel_can1_app_wm                    27
#define DFLT_VAL_NX90_io_config4_sel_can1_app_wm               0x00000000
#define DFLT_BF_VAL_NX90_io_config4_sel_can1_app_wm            0x00000000

/* all used bits of 'NX90_io_config4': */
#define MSK_USED_BITS_NX90_io_config4 0x0fff0fff

/* --------------------------------------------------------------------- */
/* Register io_config4_mask */
/* => IO Config4 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config4 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config4_mask       0x00000024
#define Adr_NX90_asic_ctrl_io_config4_mask 0xFF401224
#define Adr_NX90_io_config4_mask           0xFF401224
#define DFLT_VAL_NX90_io_config4_mask      0x00000fff

#define MSK_NX90_io_config4_mask_sel_i2c_app                     0x00000001
#define SRT_NX90_io_config4_mask_sel_i2c_app                     0
#define DFLT_VAL_NX90_io_config4_mask_sel_i2c_app                0x00000001
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_i2c_app             0x00000001
#define MSK_NX90_io_config4_mask_sel_uart_app                    0x00000002
#define SRT_NX90_io_config4_mask_sel_uart_app                    1
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_app               0x00000002
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_app            0x00000001
#define MSK_NX90_io_config4_mask_sel_uart_app_rctsn              0x00000004
#define SRT_NX90_io_config4_mask_sel_uart_app_rctsn              2
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_app_rctsn         0x00000004
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_app_rctsn      0x00000001
#define MSK_NX90_io_config4_mask_sel_uart_xpic_app               0x00000008
#define SRT_NX90_io_config4_mask_sel_uart_xpic_app               3
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_xpic_app          0x00000008
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_xpic_app       0x00000001
#define MSK_NX90_io_config4_mask_sel_uart_xpic_app_rctsn         0x00000010
#define SRT_NX90_io_config4_mask_sel_uart_xpic_app_rctsn         4
#define DFLT_VAL_NX90_io_config4_mask_sel_uart_xpic_app_rctsn    0x00000010
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_uart_xpic_app_rctsn 0x00000001
#define MSK_NX90_io_config4_mask_sel_spi0_app                    0x00000020
#define SRT_NX90_io_config4_mask_sel_spi0_app                    5
#define DFLT_VAL_NX90_io_config4_mask_sel_spi0_app               0x00000020
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi0_app            0x00000001
#define MSK_NX90_io_config4_mask_sel_spi0_app_cs1                0x00000040
#define SRT_NX90_io_config4_mask_sel_spi0_app_cs1                6
#define DFLT_VAL_NX90_io_config4_mask_sel_spi0_app_cs1           0x00000040
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi0_app_cs1        0x00000001
#define MSK_NX90_io_config4_mask_sel_spi2_app                    0x00000080
#define SRT_NX90_io_config4_mask_sel_spi2_app                    7
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app               0x00000080
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app            0x00000001
#define MSK_NX90_io_config4_mask_sel_spi2_app_cs1                0x00000100
#define SRT_NX90_io_config4_mask_sel_spi2_app_cs1                8
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app_cs1           0x00000100
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app_cs1        0x00000001
#define MSK_NX90_io_config4_mask_sel_spi2_app_cs2                0x00000200
#define SRT_NX90_io_config4_mask_sel_spi2_app_cs2                9
#define DFLT_VAL_NX90_io_config4_mask_sel_spi2_app_cs2           0x00000200
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_spi2_app_cs2        0x00000001
#define MSK_NX90_io_config4_mask_sel_can0_app                    0x00000400
#define SRT_NX90_io_config4_mask_sel_can0_app                    10
#define DFLT_VAL_NX90_io_config4_mask_sel_can0_app               0x00000400
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_can0_app            0x00000001
#define MSK_NX90_io_config4_mask_sel_can1_app                    0x00000800
#define SRT_NX90_io_config4_mask_sel_can1_app                    11
#define DFLT_VAL_NX90_io_config4_mask_sel_can1_app               0x00000800
#define DFLT_BF_VAL_NX90_io_config4_mask_sel_can1_app            0x00000001

/* all used bits of 'NX90_io_config4_mask': */
#define MSK_USED_BITS_NX90_io_config4_mask 0x00000fff

/* --------------------------------------------------------------------- */
/* Register io_config5 */
/* => IO Config5 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config5_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config5       0x00000028
#define Adr_NX90_asic_ctrl_io_config5 0xFF401228
#define Adr_NX90_io_config5           0xFF401228
#define DFLT_VAL_NX90_io_config5      0x00000000

#define MSK_NX90_io_config5_sel_mpwm                  0x0000003f
#define SRT_NX90_io_config5_sel_mpwm                  0
#define DFLT_VAL_NX90_io_config5_sel_mpwm             0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mpwm          0x00000000
#define MSK_NX90_io_config5_sel_mpwm_brake            0x00000040
#define SRT_NX90_io_config5_sel_mpwm_brake            6
#define DFLT_VAL_NX90_io_config5_sel_mpwm_brake       0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mpwm_brake    0x00000000
#define MSK_NX90_io_config5_sel_mled4                 0x00000100
#define SRT_NX90_io_config5_sel_mled4                 8
#define DFLT_VAL_NX90_io_config5_sel_mled4            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled4         0x00000000
#define MSK_NX90_io_config5_sel_mled5                 0x00000200
#define SRT_NX90_io_config5_sel_mled5                 9
#define DFLT_VAL_NX90_io_config5_sel_mled5            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled5         0x00000000
#define MSK_NX90_io_config5_sel_mled6                 0x00000400
#define SRT_NX90_io_config5_sel_mled6                 10
#define DFLT_VAL_NX90_io_config5_sel_mled6            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled6         0x00000000
#define MSK_NX90_io_config5_sel_mled7                 0x00000800
#define SRT_NX90_io_config5_sel_mled7                 11
#define DFLT_VAL_NX90_io_config5_sel_mled7            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled7         0x00000000
#define MSK_NX90_io_config5_sel_mled8                 0x00001000
#define SRT_NX90_io_config5_sel_mled8                 12
#define DFLT_VAL_NX90_io_config5_sel_mled8            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled8         0x00000000
#define MSK_NX90_io_config5_sel_mled9                 0x00002000
#define SRT_NX90_io_config5_sel_mled9                 13
#define DFLT_VAL_NX90_io_config5_sel_mled9            0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled9         0x00000000
#define MSK_NX90_io_config5_sel_mled10                0x00004000
#define SRT_NX90_io_config5_sel_mled10                14
#define DFLT_VAL_NX90_io_config5_sel_mled10           0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled10        0x00000000
#define MSK_NX90_io_config5_sel_mled11                0x00008000
#define SRT_NX90_io_config5_sel_mled11                15
#define DFLT_VAL_NX90_io_config5_sel_mled11           0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled11        0x00000000
#define MSK_NX90_io_config5_sel_mpwm_wm               0x003f0000
#define SRT_NX90_io_config5_sel_mpwm_wm               16
#define DFLT_VAL_NX90_io_config5_sel_mpwm_wm          0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mpwm_wm       0x00000000
#define MSK_NX90_io_config5_sel_mpwm_brake_wm         0x00400000
#define SRT_NX90_io_config5_sel_mpwm_brake_wm         22
#define DFLT_VAL_NX90_io_config5_sel_mpwm_brake_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mpwm_brake_wm 0x00000000
#define MSK_NX90_io_config5_sel_mled4_wm              0x01000000
#define SRT_NX90_io_config5_sel_mled4_wm              24
#define DFLT_VAL_NX90_io_config5_sel_mled4_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled4_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled5_wm              0x02000000
#define SRT_NX90_io_config5_sel_mled5_wm              25
#define DFLT_VAL_NX90_io_config5_sel_mled5_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled5_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled6_wm              0x04000000
#define SRT_NX90_io_config5_sel_mled6_wm              26
#define DFLT_VAL_NX90_io_config5_sel_mled6_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled6_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled7_wm              0x08000000
#define SRT_NX90_io_config5_sel_mled7_wm              27
#define DFLT_VAL_NX90_io_config5_sel_mled7_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled7_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled8_wm              0x10000000
#define SRT_NX90_io_config5_sel_mled8_wm              28
#define DFLT_VAL_NX90_io_config5_sel_mled8_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled8_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled9_wm              0x20000000
#define SRT_NX90_io_config5_sel_mled9_wm              29
#define DFLT_VAL_NX90_io_config5_sel_mled9_wm         0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled9_wm      0x00000000
#define MSK_NX90_io_config5_sel_mled10_wm             0x40000000
#define SRT_NX90_io_config5_sel_mled10_wm             30
#define DFLT_VAL_NX90_io_config5_sel_mled10_wm        0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled10_wm     0x00000000
#define MSK_NX90_io_config5_sel_mled11_wm             0x80000000
#define SRT_NX90_io_config5_sel_mled11_wm             31
#define DFLT_VAL_NX90_io_config5_sel_mled11_wm        0x00000000
#define DFLT_BF_VAL_NX90_io_config5_sel_mled11_wm     0x00000000

/* all used bits of 'NX90_io_config5': */
#define MSK_USED_BITS_NX90_io_config5 0xff7fff7f

/* --------------------------------------------------------------------- */
/* Register io_config5_mask */
/* => IO Config5 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config5 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config5_mask       0x0000002C
#define Adr_NX90_asic_ctrl_io_config5_mask 0xFF40122C
#define Adr_NX90_io_config5_mask           0xFF40122C
#define DFLT_VAL_NX90_io_config5_mask      0x0000ff7f

#define MSK_NX90_io_config5_mask_sel_mpwm               0x0000003f
#define SRT_NX90_io_config5_mask_sel_mpwm               0
#define DFLT_VAL_NX90_io_config5_mask_sel_mpwm          0x0000003f
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mpwm       0x0000003f
#define MSK_NX90_io_config5_mask_sel_mpwm_brake         0x00000040
#define SRT_NX90_io_config5_mask_sel_mpwm_brake         6
#define DFLT_VAL_NX90_io_config5_mask_sel_mpwm_brake    0x00000040
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mpwm_brake 0x00000001
#define MSK_NX90_io_config5_mask_sel_mled4              0x00000100
#define SRT_NX90_io_config5_mask_sel_mled4              8
#define DFLT_VAL_NX90_io_config5_mask_sel_mled4         0x00000100
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled4      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled5              0x00000200
#define SRT_NX90_io_config5_mask_sel_mled5              9
#define DFLT_VAL_NX90_io_config5_mask_sel_mled5         0x00000200
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled5      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled6              0x00000400
#define SRT_NX90_io_config5_mask_sel_mled6              10
#define DFLT_VAL_NX90_io_config5_mask_sel_mled6         0x00000400
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled6      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled7              0x00000800
#define SRT_NX90_io_config5_mask_sel_mled7              11
#define DFLT_VAL_NX90_io_config5_mask_sel_mled7         0x00000800
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled7      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled8              0x00001000
#define SRT_NX90_io_config5_mask_sel_mled8              12
#define DFLT_VAL_NX90_io_config5_mask_sel_mled8         0x00001000
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled8      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled9              0x00002000
#define SRT_NX90_io_config5_mask_sel_mled9              13
#define DFLT_VAL_NX90_io_config5_mask_sel_mled9         0x00002000
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled9      0x00000001
#define MSK_NX90_io_config5_mask_sel_mled10             0x00004000
#define SRT_NX90_io_config5_mask_sel_mled10             14
#define DFLT_VAL_NX90_io_config5_mask_sel_mled10        0x00004000
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled10     0x00000001
#define MSK_NX90_io_config5_mask_sel_mled11             0x00008000
#define SRT_NX90_io_config5_mask_sel_mled11             15
#define DFLT_VAL_NX90_io_config5_mask_sel_mled11        0x00008000
#define DFLT_BF_VAL_NX90_io_config5_mask_sel_mled11     0x00000001

/* all used bits of 'NX90_io_config5_mask': */
#define MSK_USED_BITS_NX90_io_config5_mask 0x0000ff7f

/* --------------------------------------------------------------------- */
/* Register io_config6 */
/* => IO Config6 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config6_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config6       0x00000030
#define Adr_NX90_asic_ctrl_io_config6 0xFF401230
#define Adr_NX90_io_config6           0xFF401230
#define DFLT_VAL_NX90_io_config6      0x00000000

#define MSK_NX90_io_config6_sel_io_link0                   0x00000001
#define SRT_NX90_io_config6_sel_io_link0                   0
#define DFLT_VAL_NX90_io_config6_sel_io_link0              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link0           0x00000000
#define MSK_NX90_io_config6_sel_io_link1                   0x00000002
#define SRT_NX90_io_config6_sel_io_link1                   1
#define DFLT_VAL_NX90_io_config6_sel_io_link1              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link1           0x00000000
#define MSK_NX90_io_config6_sel_io_link2                   0x00000004
#define SRT_NX90_io_config6_sel_io_link2                   2
#define DFLT_VAL_NX90_io_config6_sel_io_link2              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link2           0x00000000
#define MSK_NX90_io_config6_sel_io_link3                   0x00000008
#define SRT_NX90_io_config6_sel_io_link3                   3
#define DFLT_VAL_NX90_io_config6_sel_io_link3              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link3           0x00000000
#define MSK_NX90_io_config6_sel_io_link4                   0x00000010
#define SRT_NX90_io_config6_sel_io_link4                   4
#define DFLT_VAL_NX90_io_config6_sel_io_link4              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link4           0x00000000
#define MSK_NX90_io_config6_sel_io_link5                   0x00000020
#define SRT_NX90_io_config6_sel_io_link5                   5
#define DFLT_VAL_NX90_io_config6_sel_io_link5              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link5           0x00000000
#define MSK_NX90_io_config6_sel_io_link6                   0x00000040
#define SRT_NX90_io_config6_sel_io_link6                   6
#define DFLT_VAL_NX90_io_config6_sel_io_link6              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link6           0x00000000
#define MSK_NX90_io_config6_sel_io_link7                   0x00000080
#define SRT_NX90_io_config6_sel_io_link7                   7
#define DFLT_VAL_NX90_io_config6_sel_io_link7              0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link7           0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup0            0x00000100
#define SRT_NX90_io_config6_sel_io_link_wakeup0            8
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup0       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup0    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup1            0x00000200
#define SRT_NX90_io_config6_sel_io_link_wakeup1            9
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup1       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup1    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup2            0x00000400
#define SRT_NX90_io_config6_sel_io_link_wakeup2            10
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup2       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup2    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup3            0x00000800
#define SRT_NX90_io_config6_sel_io_link_wakeup3            11
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup3       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup3    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup4            0x00001000
#define SRT_NX90_io_config6_sel_io_link_wakeup4            12
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup4       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup4    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup5            0x00002000
#define SRT_NX90_io_config6_sel_io_link_wakeup5            13
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup5       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup5    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup6            0x00004000
#define SRT_NX90_io_config6_sel_io_link_wakeup6            14
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup6       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup6    0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup7            0x00008000
#define SRT_NX90_io_config6_sel_io_link_wakeup7            15
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup7       0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup7    0x00000000
#define MSK_NX90_io_config6_sel_io_link0_wm                0x00010000
#define SRT_NX90_io_config6_sel_io_link0_wm                16
#define DFLT_VAL_NX90_io_config6_sel_io_link0_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link0_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link1_wm                0x00020000
#define SRT_NX90_io_config6_sel_io_link1_wm                17
#define DFLT_VAL_NX90_io_config6_sel_io_link1_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link1_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link2_wm                0x00040000
#define SRT_NX90_io_config6_sel_io_link2_wm                18
#define DFLT_VAL_NX90_io_config6_sel_io_link2_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link2_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link3_wm                0x00080000
#define SRT_NX90_io_config6_sel_io_link3_wm                19
#define DFLT_VAL_NX90_io_config6_sel_io_link3_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link3_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link4_wm                0x00100000
#define SRT_NX90_io_config6_sel_io_link4_wm                20
#define DFLT_VAL_NX90_io_config6_sel_io_link4_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link4_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link5_wm                0x00200000
#define SRT_NX90_io_config6_sel_io_link5_wm                21
#define DFLT_VAL_NX90_io_config6_sel_io_link5_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link5_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link6_wm                0x00400000
#define SRT_NX90_io_config6_sel_io_link6_wm                22
#define DFLT_VAL_NX90_io_config6_sel_io_link6_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link6_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link7_wm                0x00800000
#define SRT_NX90_io_config6_sel_io_link7_wm                23
#define DFLT_VAL_NX90_io_config6_sel_io_link7_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link7_wm        0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup0_wm         0x01000000
#define SRT_NX90_io_config6_sel_io_link_wakeup0_wm         24
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup0_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup0_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup1_wm         0x02000000
#define SRT_NX90_io_config6_sel_io_link_wakeup1_wm         25
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup1_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup1_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup2_wm         0x04000000
#define SRT_NX90_io_config6_sel_io_link_wakeup2_wm         26
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup2_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup2_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup3_wm         0x08000000
#define SRT_NX90_io_config6_sel_io_link_wakeup3_wm         27
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup3_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup3_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup4_wm         0x10000000
#define SRT_NX90_io_config6_sel_io_link_wakeup4_wm         28
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup4_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup4_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup5_wm         0x20000000
#define SRT_NX90_io_config6_sel_io_link_wakeup5_wm         29
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup5_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup5_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup6_wm         0x40000000
#define SRT_NX90_io_config6_sel_io_link_wakeup6_wm         30
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup6_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup6_wm 0x00000000
#define MSK_NX90_io_config6_sel_io_link_wakeup7_wm         0x80000000
#define SRT_NX90_io_config6_sel_io_link_wakeup7_wm         31
#define DFLT_VAL_NX90_io_config6_sel_io_link_wakeup7_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config6_sel_io_link_wakeup7_wm 0x00000000

/* all used bits of 'NX90_io_config6': */
#define MSK_USED_BITS_NX90_io_config6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config6_mask */
/* => IO Config6 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config6 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config6_mask       0x00000034
#define Adr_NX90_asic_ctrl_io_config6_mask 0xFF401234
#define Adr_NX90_io_config6_mask           0xFF401234
#define DFLT_VAL_NX90_io_config6_mask      0x0000ffff

#define MSK_NX90_io_config6_mask_sel_io_link0                0x00000001
#define SRT_NX90_io_config6_mask_sel_io_link0                0
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link0           0x00000001
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link0        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link1                0x00000002
#define SRT_NX90_io_config6_mask_sel_io_link1                1
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link1           0x00000002
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link1        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link2                0x00000004
#define SRT_NX90_io_config6_mask_sel_io_link2                2
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link2           0x00000004
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link2        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link3                0x00000008
#define SRT_NX90_io_config6_mask_sel_io_link3                3
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link3           0x00000008
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link3        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link4                0x00000010
#define SRT_NX90_io_config6_mask_sel_io_link4                4
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link4           0x00000010
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link4        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link5                0x00000020
#define SRT_NX90_io_config6_mask_sel_io_link5                5
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link5           0x00000020
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link5        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link6                0x00000040
#define SRT_NX90_io_config6_mask_sel_io_link6                6
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link6           0x00000040
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link6        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link7                0x00000080
#define SRT_NX90_io_config6_mask_sel_io_link7                7
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link7           0x00000080
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link7        0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup0         0x00000100
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup0         8
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup0    0x00000100
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup0 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup1         0x00000200
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup1         9
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup1    0x00000200
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup1 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup2         0x00000400
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup2         10
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup2    0x00000400
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup2 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup3         0x00000800
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup3         11
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup3    0x00000800
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup3 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup4         0x00001000
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup4         12
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup4    0x00001000
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup4 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup5         0x00002000
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup5         13
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup5    0x00002000
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup5 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup6         0x00004000
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup6         14
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup6    0x00004000
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup6 0x00000001
#define MSK_NX90_io_config6_mask_sel_io_link_wakeup7         0x00008000
#define SRT_NX90_io_config6_mask_sel_io_link_wakeup7         15
#define DFLT_VAL_NX90_io_config6_mask_sel_io_link_wakeup7    0x00008000
#define DFLT_BF_VAL_NX90_io_config6_mask_sel_io_link_wakeup7 0x00000001

/* all used bits of 'NX90_io_config6_mask': */
#define MSK_USED_BITS_NX90_io_config6_mask 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register io_config7 */
/* => IO Config7 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config7_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config7       0x00000038
#define Adr_NX90_asic_ctrl_io_config7 0xFF401238
#define Adr_NX90_io_config7           0xFF401238
#define DFLT_VAL_NX90_io_config7      0x00000000

#define MSK_NX90_io_config7_sel_eth_cfg                     0x0000001f
#define SRT_NX90_io_config7_sel_eth_cfg                     0
#define DFLT_VAL_NX90_io_config7_sel_eth_cfg                0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_cfg             0x00000000
#define MSK_NX90_io_config7_sel_eth_mdio                    0x00000060
#define SRT_NX90_io_config7_sel_eth_mdio                    5
#define DFLT_VAL_NX90_io_config7_sel_eth_mdio               0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_mdio            0x00000000
#define MSK_NX90_io_config7_sel_sqi_cs1                     0x00000080
#define SRT_NX90_io_config7_sel_sqi_cs1                     7
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs1                0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs1             0x00000000
#define MSK_NX90_io_config7_sel_sqi_cs2                     0x00000100
#define SRT_NX90_io_config7_sel_sqi_cs2                     8
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs2                0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs2             0x00000000
#define MSK_NX90_io_config7_sel_io_link0b                   0x00000200
#define SRT_NX90_io_config7_sel_io_link0b                   9
#define DFLT_VAL_NX90_io_config7_sel_io_link0b              0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link0b           0x00000000
#define MSK_NX90_io_config7_sel_io_link1b                   0x00000400
#define SRT_NX90_io_config7_sel_io_link1b                   10
#define DFLT_VAL_NX90_io_config7_sel_io_link1b              0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link1b           0x00000000
#define MSK_NX90_io_config7_sel_io_link_wakeup0b            0x00000800
#define SRT_NX90_io_config7_sel_io_link_wakeup0b            11
#define DFLT_VAL_NX90_io_config7_sel_io_link_wakeup0b       0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link_wakeup0b    0x00000000
#define MSK_NX90_io_config7_sel_io_link_wakeup1b            0x00001000
#define SRT_NX90_io_config7_sel_io_link_wakeup1b            12
#define DFLT_VAL_NX90_io_config7_sel_io_link_wakeup1b       0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link_wakeup1b    0x00000000
#define MSK_NX90_io_config7_sel_eth_cfg_wm                  0x001f0000
#define SRT_NX90_io_config7_sel_eth_cfg_wm                  16
#define DFLT_VAL_NX90_io_config7_sel_eth_cfg_wm             0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_cfg_wm          0x00000000
#define MSK_NX90_io_config7_sel_eth_mdio_wm                 0x00600000
#define SRT_NX90_io_config7_sel_eth_mdio_wm                 21
#define DFLT_VAL_NX90_io_config7_sel_eth_mdio_wm            0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_eth_mdio_wm         0x00000000
#define MSK_NX90_io_config7_sel_sqi_cs1_wm                  0x00800000
#define SRT_NX90_io_config7_sel_sqi_cs1_wm                  23
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs1_wm             0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs1_wm          0x00000000
#define MSK_NX90_io_config7_sel_sqi_cs2_wm                  0x01000000
#define SRT_NX90_io_config7_sel_sqi_cs2_wm                  24
#define DFLT_VAL_NX90_io_config7_sel_sqi_cs2_wm             0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_sqi_cs2_wm          0x00000000
#define MSK_NX90_io_config7_sel_io_link0b_wm                0x02000000
#define SRT_NX90_io_config7_sel_io_link0b_wm                25
#define DFLT_VAL_NX90_io_config7_sel_io_link0b_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link0b_wm        0x00000000
#define MSK_NX90_io_config7_sel_io_link1b_wm                0x04000000
#define SRT_NX90_io_config7_sel_io_link1b_wm                26
#define DFLT_VAL_NX90_io_config7_sel_io_link1b_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link1b_wm        0x00000000
#define MSK_NX90_io_config7_sel_io_link_wakeup0b_wm         0x08000000
#define SRT_NX90_io_config7_sel_io_link_wakeup0b_wm         27
#define DFLT_VAL_NX90_io_config7_sel_io_link_wakeup0b_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link_wakeup0b_wm 0x00000000
#define MSK_NX90_io_config7_sel_io_link_wakeup1b_wm         0x10000000
#define SRT_NX90_io_config7_sel_io_link_wakeup1b_wm         28
#define DFLT_VAL_NX90_io_config7_sel_io_link_wakeup1b_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config7_sel_io_link_wakeup1b_wm 0x00000000

/* all used bits of 'NX90_io_config7': */
#define MSK_USED_BITS_NX90_io_config7 0x1fff1fff

/* --------------------------------------------------------------------- */
/* Register io_config7_mask */
/* => IO Config7 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config7 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config7_mask       0x0000003C
#define Adr_NX90_asic_ctrl_io_config7_mask 0xFF40123C
#define Adr_NX90_io_config7_mask           0xFF40123C
#define DFLT_VAL_NX90_io_config7_mask      0x00001fff

#define MSK_NX90_io_config7_mask_sel_eth_cfg                  0x0000001f
#define SRT_NX90_io_config7_mask_sel_eth_cfg                  0
#define DFLT_VAL_NX90_io_config7_mask_sel_eth_cfg             0x0000001f
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_eth_cfg          0x0000001f
#define MSK_NX90_io_config7_mask_sel_eth_mdio                 0x00000060
#define SRT_NX90_io_config7_mask_sel_eth_mdio                 5
#define DFLT_VAL_NX90_io_config7_mask_sel_eth_mdio            0x00000060
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_eth_mdio         0x00000003
#define MSK_NX90_io_config7_mask_sel_sqi_cs1                  0x00000080
#define SRT_NX90_io_config7_mask_sel_sqi_cs1                  7
#define DFLT_VAL_NX90_io_config7_mask_sel_sqi_cs1             0x00000080
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_sqi_cs1          0x00000001
#define MSK_NX90_io_config7_mask_sel_sqi_cs2                  0x00000100
#define SRT_NX90_io_config7_mask_sel_sqi_cs2                  8
#define DFLT_VAL_NX90_io_config7_mask_sel_sqi_cs2             0x00000100
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_sqi_cs2          0x00000001
#define MSK_NX90_io_config7_mask_sel_io_link0b                0x00000200
#define SRT_NX90_io_config7_mask_sel_io_link0b                9
#define DFLT_VAL_NX90_io_config7_mask_sel_io_link0b           0x00000200
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_io_link0b        0x00000001
#define MSK_NX90_io_config7_mask_sel_io_link1b                0x00000400
#define SRT_NX90_io_config7_mask_sel_io_link1b                10
#define DFLT_VAL_NX90_io_config7_mask_sel_io_link1b           0x00000400
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_io_link1b        0x00000001
#define MSK_NX90_io_config7_mask_sel_io_link_wakeup0b         0x00000800
#define SRT_NX90_io_config7_mask_sel_io_link_wakeup0b         11
#define DFLT_VAL_NX90_io_config7_mask_sel_io_link_wakeup0b    0x00000800
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_io_link_wakeup0b 0x00000001
#define MSK_NX90_io_config7_mask_sel_io_link_wakeup1b         0x00001000
#define SRT_NX90_io_config7_mask_sel_io_link_wakeup1b         12
#define DFLT_VAL_NX90_io_config7_mask_sel_io_link_wakeup1b    0x00001000
#define DFLT_BF_VAL_NX90_io_config7_mask_sel_io_link_wakeup1b 0x00000001

/* all used bits of 'NX90_io_config7_mask': */
#define MSK_USED_BITS_NX90_io_config7_mask 0x00001fff

/* --------------------------------------------------------------------- */
/* Register io_config8 */
/* => IO Config8 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config8_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config8       0x00000040
#define Adr_NX90_asic_ctrl_io_config8 0xFF401240
#define Adr_NX90_io_config8           0xFF401240
#define DFLT_VAL_NX90_io_config8      0x00000000

#define MSK_NX90_io_config8_sel_arm_trace_cfg            0x00000003
#define SRT_NX90_io_config8_sel_arm_trace_cfg            0
#define DFLT_VAL_NX90_io_config8_sel_arm_trace_cfg       0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_arm_trace_cfg    0x00000000
#define MSK_NX90_io_config8_sel_extphy                   0x00000004
#define SRT_NX90_io_config8_sel_extphy                   2
#define DFLT_VAL_NX90_io_config8_sel_extphy              0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_extphy           0x00000000
#define MSK_NX90_io_config8_sel_bga2                     0x00000008
#define SRT_NX90_io_config8_sel_bga2                     3
#define DFLT_VAL_NX90_io_config8_sel_bga2                0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_bga2             0x00000000
#define MSK_NX90_io_config8_sel_arm_trace_cfg_wm         0x00030000
#define SRT_NX90_io_config8_sel_arm_trace_cfg_wm         16
#define DFLT_VAL_NX90_io_config8_sel_arm_trace_cfg_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_arm_trace_cfg_wm 0x00000000
#define MSK_NX90_io_config8_sel_extphy_wm                0x00040000
#define SRT_NX90_io_config8_sel_extphy_wm                18
#define DFLT_VAL_NX90_io_config8_sel_extphy_wm           0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_extphy_wm        0x00000000
#define MSK_NX90_io_config8_sel_bga2_wm                  0x00080000
#define SRT_NX90_io_config8_sel_bga2_wm                  19
#define DFLT_VAL_NX90_io_config8_sel_bga2_wm             0x00000000
#define DFLT_BF_VAL_NX90_io_config8_sel_bga2_wm          0x00000000

/* all used bits of 'NX90_io_config8': */
#define MSK_USED_BITS_NX90_io_config8 0x000f000f

/* --------------------------------------------------------------------- */
/* Register io_config8_mask */
/* => IO Config8 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config8 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config8_mask       0x00000044
#define Adr_NX90_asic_ctrl_io_config8_mask 0xFF401244
#define Adr_NX90_io_config8_mask           0xFF401244
#define DFLT_VAL_NX90_io_config8_mask      0x0000000f

#define MSK_NX90_io_config8_mask_sel_arm_trace_cfg         0x00000003
#define SRT_NX90_io_config8_mask_sel_arm_trace_cfg         0
#define DFLT_VAL_NX90_io_config8_mask_sel_arm_trace_cfg    0x00000003
#define DFLT_BF_VAL_NX90_io_config8_mask_sel_arm_trace_cfg 0x00000003
#define MSK_NX90_io_config8_mask_sel_extphy                0x00000004
#define SRT_NX90_io_config8_mask_sel_extphy                2
#define DFLT_VAL_NX90_io_config8_mask_sel_extphy           0x00000004
#define DFLT_BF_VAL_NX90_io_config8_mask_sel_extphy        0x00000001
#define MSK_NX90_io_config8_mask_sel_bga2                  0x00000008
#define SRT_NX90_io_config8_mask_sel_bga2                  3
#define DFLT_VAL_NX90_io_config8_mask_sel_bga2             0x00000008
#define DFLT_BF_VAL_NX90_io_config8_mask_sel_bga2          0x00000001

/* all used bits of 'NX90_io_config8_mask': */
#define MSK_USED_BITS_NX90_io_config8_mask 0x0000000f

/* --------------------------------------------------------------------- */
/* Register io_config9 */
/* => IO Config9 Register: */
/*    Selects of output pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    Changes will only have an effect if the corresponding bits in the io_config9_mask-register are set. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config9       0x00000048
#define Adr_NX90_asic_ctrl_io_config9 0xFF401248
#define Adr_NX90_io_config9           0xFF401248
#define DFLT_VAL_NX90_io_config9      0x00000000

#define MSK_NX90_io_config9_sel_pio_app            0x0000ffff
#define SRT_NX90_io_config9_sel_pio_app            0
#define DFLT_VAL_NX90_io_config9_sel_pio_app       0x00000000
#define DFLT_BF_VAL_NX90_io_config9_sel_pio_app    0x00000000
#define MSK_NX90_io_config9_sel_pio_app_wm         0xffff0000
#define SRT_NX90_io_config9_sel_pio_app_wm         16
#define DFLT_VAL_NX90_io_config9_sel_pio_app_wm    0x00000000
#define DFLT_BF_VAL_NX90_io_config9_sel_pio_app_wm 0x00000000

/* all used bits of 'NX90_io_config9': */
#define MSK_USED_BITS_NX90_io_config9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config9_mask */
/* => IO Config9 Mask Register: */
/*    This register can be used to lock the special IO configurations for restricted netX devices. \ */
/*    Bits of the io_config9 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config9_mask       0x0000004C
#define Adr_NX90_asic_ctrl_io_config9_mask 0xFF40124C
#define Adr_NX90_io_config9_mask           0xFF40124C
#define DFLT_VAL_NX90_io_config9_mask      0x0000ffff

#define MSK_NX90_io_config9_mask_sel_pio_app         0x0000ffff
#define SRT_NX90_io_config9_mask_sel_pio_app         0
#define DFLT_VAL_NX90_io_config9_mask_sel_pio_app    0x0000ffff
#define DFLT_BF_VAL_NX90_io_config9_mask_sel_pio_app 0x0000ffff

/* all used bits of 'NX90_io_config9_mask': */
#define MSK_USED_BITS_NX90_io_config9_mask 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register io_config10 */
/* => IO Config10 Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config10       0x00000050
#define Adr_NX90_asic_ctrl_io_config10 0xFF401250
#define Adr_NX90_io_config10           0xFF401250

#define MSK_NX90_io_config10_val 0xffffffff
#define SRT_NX90_io_config10_val 0

/* all used bits of 'NX90_io_config10': */
#define MSK_USED_BITS_NX90_io_config10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config10_mask */
/* => IO Config10 Mask Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config10_mask       0x00000054
#define Adr_NX90_asic_ctrl_io_config10_mask 0xFF401254
#define Adr_NX90_io_config10_mask           0xFF401254

#define MSK_NX90_io_config10_mask_val 0xffffffff
#define SRT_NX90_io_config10_mask_val 0

/* all used bits of 'NX90_io_config10_mask': */
#define MSK_USED_BITS_NX90_io_config10_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config11 */
/* => IO Config11 Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config11       0x00000058
#define Adr_NX90_asic_ctrl_io_config11 0xFF401258
#define Adr_NX90_io_config11           0xFF401258

#define MSK_NX90_io_config11_val 0xffffffff
#define SRT_NX90_io_config11_val 0

/* all used bits of 'NX90_io_config11': */
#define MSK_USED_BITS_NX90_io_config11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register io_config11_mask */
/* => IO Config11 Mask Register: */
/*    reserved for COM side */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_config11_mask       0x0000005C
#define Adr_NX90_asic_ctrl_io_config11_mask 0xFF40125C
#define Adr_NX90_io_config11_mask           0xFF40125C

#define MSK_NX90_io_config11_mask_val 0xffffffff
#define SRT_NX90_io_config11_mask_val 0

/* all used bits of 'NX90_io_config11_mask': */
#define MSK_USED_BITS_NX90_io_config11_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register clock_enable0 */
/* => Global Clock Enable Register: */
/*    Use this registers to disable modules completely for power saving purposes. */
/*    Changes will only have an effect if the corresponding bits in the clock_enable_mask-register are set. */
/*    Note: For low power consumption at power on, all switchable clocks are disabled after reset and must be enabled before module usage. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable0       0x00000068
#define Adr_NX90_asic_ctrl_clock_enable0 0xFF401268
#define Adr_NX90_clock_enable0           0xFF401268
#define DFLT_VAL_NX90_clock_enable0      0x00000000

#define MSK_NX90_clock_enable0_rpec0              0x00000001
#define SRT_NX90_clock_enable0_rpec0              0
#define DFLT_VAL_NX90_clock_enable0_rpec0         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_rpec0      0x00000000
#define MSK_NX90_clock_enable0_rpec1              0x00000002
#define SRT_NX90_clock_enable0_rpec1              1
#define DFLT_VAL_NX90_clock_enable0_rpec1         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_rpec1      0x00000000
#define MSK_NX90_clock_enable0_tpec0              0x00000004
#define SRT_NX90_clock_enable0_tpec0              2
#define DFLT_VAL_NX90_clock_enable0_tpec0         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_tpec0      0x00000000
#define MSK_NX90_clock_enable0_tpec1              0x00000008
#define SRT_NX90_clock_enable0_tpec1              3
#define DFLT_VAL_NX90_clock_enable0_tpec1         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_tpec1      0x00000000
#define MSK_NX90_clock_enable0_xmac0              0x00000010
#define SRT_NX90_clock_enable0_xmac0              4
#define DFLT_VAL_NX90_clock_enable0_xmac0         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xmac0      0x00000000
#define MSK_NX90_clock_enable0_xmac1              0x00000020
#define SRT_NX90_clock_enable0_xmac1              5
#define DFLT_VAL_NX90_clock_enable0_xmac1         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xmac1      0x00000000
#define MSK_NX90_clock_enable0_fb0                0x00000040
#define SRT_NX90_clock_enable0_fb0                6
#define DFLT_VAL_NX90_clock_enable0_fb0           0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_fb0        0x00000000
#define MSK_NX90_clock_enable0_fb1                0x00000080
#define SRT_NX90_clock_enable0_fb1                7
#define DFLT_VAL_NX90_clock_enable0_fb1           0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_fb1        0x00000000
#define MSK_NX90_clock_enable0_xc_misc            0x00000100
#define SRT_NX90_clock_enable0_xc_misc            8
#define DFLT_VAL_NX90_clock_enable0_xc_misc       0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xc_misc    0x00000000
#define MSK_NX90_clock_enable0_xpic0              0x00000200
#define SRT_NX90_clock_enable0_xpic0              9
#define DFLT_VAL_NX90_clock_enable0_xpic0         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xpic0      0x00000000
#define MSK_NX90_clock_enable0_dma_com            0x00000400
#define SRT_NX90_clock_enable0_dma_com            10
#define DFLT_VAL_NX90_clock_enable0_dma_com       0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_dma_com    0x00000000
#define MSK_NX90_clock_enable0_arm_app            0x00000800
#define SRT_NX90_clock_enable0_arm_app            11
#define DFLT_VAL_NX90_clock_enable0_arm_app       0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_arm_app    0x00000000
#define MSK_NX90_clock_enable0_dpm                0x00002000
#define SRT_NX90_clock_enable0_dpm                13
#define DFLT_VAL_NX90_clock_enable0_dpm           0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_dpm        0x00000000
#define MSK_NX90_clock_enable0_rpec0_wm           0x00010000
#define SRT_NX90_clock_enable0_rpec0_wm           16
#define DFLT_VAL_NX90_clock_enable0_rpec0_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_rpec0_wm   0x00000000
#define MSK_NX90_clock_enable0_rpec1_wm           0x00020000
#define SRT_NX90_clock_enable0_rpec1_wm           17
#define DFLT_VAL_NX90_clock_enable0_rpec1_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_rpec1_wm   0x00000000
#define MSK_NX90_clock_enable0_tpec0_wm           0x00040000
#define SRT_NX90_clock_enable0_tpec0_wm           18
#define DFLT_VAL_NX90_clock_enable0_tpec0_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_tpec0_wm   0x00000000
#define MSK_NX90_clock_enable0_tpec1_wm           0x00080000
#define SRT_NX90_clock_enable0_tpec1_wm           19
#define DFLT_VAL_NX90_clock_enable0_tpec1_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_tpec1_wm   0x00000000
#define MSK_NX90_clock_enable0_xmac0_wm           0x00100000
#define SRT_NX90_clock_enable0_xmac0_wm           20
#define DFLT_VAL_NX90_clock_enable0_xmac0_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xmac0_wm   0x00000000
#define MSK_NX90_clock_enable0_xmac1_wm           0x00200000
#define SRT_NX90_clock_enable0_xmac1_wm           21
#define DFLT_VAL_NX90_clock_enable0_xmac1_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xmac1_wm   0x00000000
#define MSK_NX90_clock_enable0_fb0_wm             0x00400000
#define SRT_NX90_clock_enable0_fb0_wm             22
#define DFLT_VAL_NX90_clock_enable0_fb0_wm        0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_fb0_wm     0x00000000
#define MSK_NX90_clock_enable0_fb1_wm             0x00800000
#define SRT_NX90_clock_enable0_fb1_wm             23
#define DFLT_VAL_NX90_clock_enable0_fb1_wm        0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_fb1_wm     0x00000000
#define MSK_NX90_clock_enable0_xc_misc_wm         0x01000000
#define SRT_NX90_clock_enable0_xc_misc_wm         24
#define DFLT_VAL_NX90_clock_enable0_xc_misc_wm    0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xc_misc_wm 0x00000000
#define MSK_NX90_clock_enable0_xpic0_wm           0x02000000
#define SRT_NX90_clock_enable0_xpic0_wm           25
#define DFLT_VAL_NX90_clock_enable0_xpic0_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_xpic0_wm   0x00000000
#define MSK_NX90_clock_enable0_dma_com_wm         0x04000000
#define SRT_NX90_clock_enable0_dma_com_wm         26
#define DFLT_VAL_NX90_clock_enable0_dma_com_wm    0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_dma_com_wm 0x00000000
#define MSK_NX90_clock_enable0_arm_app_wm         0x08000000
#define SRT_NX90_clock_enable0_arm_app_wm         27
#define DFLT_VAL_NX90_clock_enable0_arm_app_wm    0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_arm_app_wm 0x00000000
#define MSK_NX90_clock_enable0_dpm_wm             0x20000000
#define SRT_NX90_clock_enable0_dpm_wm             29
#define DFLT_VAL_NX90_clock_enable0_dpm_wm        0x00000000
#define DFLT_BF_VAL_NX90_clock_enable0_dpm_wm     0x00000000

/* all used bits of 'NX90_clock_enable0': */
#define MSK_USED_BITS_NX90_clock_enable0 0x2fff2fff

/* --------------------------------------------------------------------- */
/* Register clock_enable0_mask */
/* => Global Clock Enable Mask Register: */
/*    This register can be used to lock the clock_enable0 register. \ */
/*    Bits of the clock_enable0 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable0_mask       0x0000006C
#define Adr_NX90_asic_ctrl_clock_enable0_mask 0xFF40126C
#define Adr_NX90_clock_enable0_mask           0xFF40126C
#define DFLT_VAL_NX90_clock_enable0_mask      0x00002fff

#define MSK_NX90_clock_enable0_mask_rpec0           0x00000001
#define SRT_NX90_clock_enable0_mask_rpec0           0
#define DFLT_VAL_NX90_clock_enable0_mask_rpec0      0x00000001
#define DFLT_BF_VAL_NX90_clock_enable0_mask_rpec0   0x00000001
#define MSK_NX90_clock_enable0_mask_rpec1           0x00000002
#define SRT_NX90_clock_enable0_mask_rpec1           1
#define DFLT_VAL_NX90_clock_enable0_mask_rpec1      0x00000002
#define DFLT_BF_VAL_NX90_clock_enable0_mask_rpec1   0x00000001
#define MSK_NX90_clock_enable0_mask_tpec0           0x00000004
#define SRT_NX90_clock_enable0_mask_tpec0           2
#define DFLT_VAL_NX90_clock_enable0_mask_tpec0      0x00000004
#define DFLT_BF_VAL_NX90_clock_enable0_mask_tpec0   0x00000001
#define MSK_NX90_clock_enable0_mask_tpec1           0x00000008
#define SRT_NX90_clock_enable0_mask_tpec1           3
#define DFLT_VAL_NX90_clock_enable0_mask_tpec1      0x00000008
#define DFLT_BF_VAL_NX90_clock_enable0_mask_tpec1   0x00000001
#define MSK_NX90_clock_enable0_mask_xmac0           0x00000010
#define SRT_NX90_clock_enable0_mask_xmac0           4
#define DFLT_VAL_NX90_clock_enable0_mask_xmac0      0x00000010
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xmac0   0x00000001
#define MSK_NX90_clock_enable0_mask_xmac1           0x00000020
#define SRT_NX90_clock_enable0_mask_xmac1           5
#define DFLT_VAL_NX90_clock_enable0_mask_xmac1      0x00000020
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xmac1   0x00000001
#define MSK_NX90_clock_enable0_mask_fb0             0x00000040
#define SRT_NX90_clock_enable0_mask_fb0             6
#define DFLT_VAL_NX90_clock_enable0_mask_fb0        0x00000040
#define DFLT_BF_VAL_NX90_clock_enable0_mask_fb0     0x00000001
#define MSK_NX90_clock_enable0_mask_fb1             0x00000080
#define SRT_NX90_clock_enable0_mask_fb1             7
#define DFLT_VAL_NX90_clock_enable0_mask_fb1        0x00000080
#define DFLT_BF_VAL_NX90_clock_enable0_mask_fb1     0x00000001
#define MSK_NX90_clock_enable0_mask_xc_misc         0x00000100
#define SRT_NX90_clock_enable0_mask_xc_misc         8
#define DFLT_VAL_NX90_clock_enable0_mask_xc_misc    0x00000100
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xc_misc 0x00000001
#define MSK_NX90_clock_enable0_mask_xpic0           0x00000200
#define SRT_NX90_clock_enable0_mask_xpic0           9
#define DFLT_VAL_NX90_clock_enable0_mask_xpic0      0x00000200
#define DFLT_BF_VAL_NX90_clock_enable0_mask_xpic0   0x00000001
#define MSK_NX90_clock_enable0_mask_dma_com         0x00000400
#define SRT_NX90_clock_enable0_mask_dma_com         10
#define DFLT_VAL_NX90_clock_enable0_mask_dma_com    0x00000400
#define DFLT_BF_VAL_NX90_clock_enable0_mask_dma_com 0x00000001
#define MSK_NX90_clock_enable0_mask_arm_app         0x00000800
#define SRT_NX90_clock_enable0_mask_arm_app         11
#define DFLT_VAL_NX90_clock_enable0_mask_arm_app    0x00000800
#define DFLT_BF_VAL_NX90_clock_enable0_mask_arm_app 0x00000001
#define MSK_NX90_clock_enable0_mask_dpm             0x00002000
#define SRT_NX90_clock_enable0_mask_dpm             13
#define DFLT_VAL_NX90_clock_enable0_mask_dpm        0x00002000
#define DFLT_BF_VAL_NX90_clock_enable0_mask_dpm     0x00000001

/* all used bits of 'NX90_clock_enable0_mask': */
#define MSK_USED_BITS_NX90_clock_enable0_mask 0x00002fff

/* --------------------------------------------------------------------- */
/* Register clock_enable1 */
/* => Global Clock Enable Register: */
/*    Use this registers to disable modules completely for power saving purposes. */
/*    Changes will only have an effect if the corresponding bits in the clock_enable_mask-register are set. */
/*    Note: For low power consumption at power on, all switchable clocks are disabled after reset and must be enabled before module usage. */
/*     */
/*    This register is a write mask register, i.e. lower 16 bits are only writeable, if corresponding upper bits are set. */
/*    This register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable1       0x00000070
#define Adr_NX90_asic_ctrl_clock_enable1 0xFF401270
#define Adr_NX90_clock_enable1           0xFF401270
#define DFLT_VAL_NX90_clock_enable1      0x00000000

#define MSK_NX90_clock_enable1_xpic1              0x00000001
#define SRT_NX90_clock_enable1_xpic1              0
#define DFLT_VAL_NX90_clock_enable1_xpic1         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_xpic1      0x00000000
#define MSK_NX90_clock_enable1_dma_app            0x00000002
#define SRT_NX90_clock_enable1_dma_app            1
#define DFLT_VAL_NX90_clock_enable1_dma_app       0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_dma_app    0x00000000
#define MSK_NX90_clock_enable1_crypt              0x00000004
#define SRT_NX90_clock_enable1_crypt              2
#define DFLT_VAL_NX90_clock_enable1_crypt         0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_crypt      0x00000000
#define MSK_NX90_clock_enable1_ipc                0x00000008
#define SRT_NX90_clock_enable1_ipc                3
#define DFLT_VAL_NX90_clock_enable1_ipc           0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_ipc        0x00000000
#define MSK_NX90_clock_enable1_xpic1_wm           0x00010000
#define SRT_NX90_clock_enable1_xpic1_wm           16
#define DFLT_VAL_NX90_clock_enable1_xpic1_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_xpic1_wm   0x00000000
#define MSK_NX90_clock_enable1_dma_app_wm         0x00020000
#define SRT_NX90_clock_enable1_dma_app_wm         17
#define DFLT_VAL_NX90_clock_enable1_dma_app_wm    0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_dma_app_wm 0x00000000
#define MSK_NX90_clock_enable1_crypt_wm           0x00040000
#define SRT_NX90_clock_enable1_crypt_wm           18
#define DFLT_VAL_NX90_clock_enable1_crypt_wm      0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_crypt_wm   0x00000000
#define MSK_NX90_clock_enable1_ipc_wm             0x00080000
#define SRT_NX90_clock_enable1_ipc_wm             19
#define DFLT_VAL_NX90_clock_enable1_ipc_wm        0x00000000
#define DFLT_BF_VAL_NX90_clock_enable1_ipc_wm     0x00000000

/* all used bits of 'NX90_clock_enable1': */
#define MSK_USED_BITS_NX90_clock_enable1 0x000f000f

/* --------------------------------------------------------------------- */
/* Register clock_enable1_mask */
/* => Global Clock Enable Mask Register: */
/*    This register can be used to lock the clock_enable1 register. \ */
/*    Bits of the clock_enable1 register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_clock_enable1_mask       0x00000074
#define Adr_NX90_asic_ctrl_clock_enable1_mask 0xFF401274
#define Adr_NX90_clock_enable1_mask           0xFF401274
#define DFLT_VAL_NX90_clock_enable1_mask      0x0000000f

#define MSK_NX90_clock_enable1_mask_xpic1           0x00000001
#define SRT_NX90_clock_enable1_mask_xpic1           0
#define DFLT_VAL_NX90_clock_enable1_mask_xpic1      0x00000001
#define DFLT_BF_VAL_NX90_clock_enable1_mask_xpic1   0x00000001
#define MSK_NX90_clock_enable1_mask_dma_app         0x00000002
#define SRT_NX90_clock_enable1_mask_dma_app         1
#define DFLT_VAL_NX90_clock_enable1_mask_dma_app    0x00000002
#define DFLT_BF_VAL_NX90_clock_enable1_mask_dma_app 0x00000001
#define MSK_NX90_clock_enable1_mask_crypt           0x00000004
#define SRT_NX90_clock_enable1_mask_crypt           2
#define DFLT_VAL_NX90_clock_enable1_mask_crypt      0x00000004
#define DFLT_BF_VAL_NX90_clock_enable1_mask_crypt   0x00000001
#define MSK_NX90_clock_enable1_mask_ipc             0x00000008
#define SRT_NX90_clock_enable1_mask_ipc             3
#define DFLT_VAL_NX90_clock_enable1_mask_ipc        0x00000008
#define DFLT_BF_VAL_NX90_clock_enable1_mask_ipc     0x00000001

/* all used bits of 'NX90_clock_enable1_mask': */
#define MSK_USED_BITS_NX90_clock_enable1_mask 0x0000000f

/* --------------------------------------------------------------------- */
/* Register systime_eth_system_ctrl */
/* => Select systime for the ethernet system */
/*    Changes will only have an effect if the corresponding bits in the systime_eth_system_ctrl_mask-register are set. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_eth_system_ctrl       0x00000078
#define Adr_NX90_asic_ctrl_systime_eth_system_ctrl 0xFF401278
#define Adr_NX90_systime_eth_system_ctrl           0xFF401278
#define DFLT_VAL_NX90_systime_eth_system_ctrl      0x00000000

#define MSK_NX90_systime_eth_system_ctrl_eth_system         0x00000003
#define SRT_NX90_systime_eth_system_ctrl_eth_system         0
#define DFLT_VAL_NX90_systime_eth_system_ctrl_eth_system    0x00000000
#define DFLT_BF_VAL_NX90_systime_eth_system_ctrl_eth_system 0x00000000

/* all used bits of 'NX90_systime_eth_system_ctrl': */
#define MSK_USED_BITS_NX90_systime_eth_system_ctrl 0x00000003

/* --------------------------------------------------------------------- */
/* Register systime_eth_system_ctrl_mask */
/* => Select systime for the ethernet system (mask register) */
/*    This register can be used to lock the systime_eth_system_ctrl register. \ */
/*    Bits of the systime_eth_system_ctrl register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_eth_system_ctrl_mask       0x0000007C
#define Adr_NX90_asic_ctrl_systime_eth_system_ctrl_mask 0xFF40127C
#define Adr_NX90_systime_eth_system_ctrl_mask           0xFF40127C
#define DFLT_VAL_NX90_systime_eth_system_ctrl_mask      0x00000003

#define MSK_NX90_systime_eth_system_ctrl_mask_eth_system         0x00000003
#define SRT_NX90_systime_eth_system_ctrl_mask_eth_system         0
#define DFLT_VAL_NX90_systime_eth_system_ctrl_mask_eth_system    0x00000003
#define DFLT_BF_VAL_NX90_systime_eth_system_ctrl_mask_eth_system 0x00000003

/* all used bits of 'NX90_systime_eth_system_ctrl_mask': */
#define MSK_USED_BITS_NX90_systime_eth_system_ctrl_mask 0x00000003

/* --------------------------------------------------------------------- */
/* Register systime_gpio_com_ctrl_mask */
/* => Select systime for GPIO_COM (mask register) */
/*    This register can be used to lock the systime_gpio_com_ctrl register. \ */
/*    Bits of the systime_gpio_com_ctrl register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_gpio_com_ctrl_mask       0x00000084
#define Adr_NX90_asic_ctrl_systime_gpio_com_ctrl_mask 0xFF401284
#define Adr_NX90_systime_gpio_com_ctrl_mask           0xFF401284
#define DFLT_VAL_NX90_systime_gpio_com_ctrl_mask      0x00000003

#define MSK_NX90_systime_gpio_com_ctrl_mask_gpio_com         0x00000003
#define SRT_NX90_systime_gpio_com_ctrl_mask_gpio_com         0
#define DFLT_VAL_NX90_systime_gpio_com_ctrl_mask_gpio_com    0x00000003
#define DFLT_BF_VAL_NX90_systime_gpio_com_ctrl_mask_gpio_com 0x00000003

/* all used bits of 'NX90_systime_gpio_com_ctrl_mask': */
#define MSK_USED_BITS_NX90_systime_gpio_com_ctrl_mask 0x00000003

/* --------------------------------------------------------------------- */
/* Register systime_gpio_app_ctrl */
/* => Select systime for GPIO_APP */
/*    Changes will only have an effect if the corresponding bits in the systime_gpio_app_ctrl_mask-register are set. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_gpio_app_ctrl       0x00000088
#define Adr_NX90_asic_ctrl_systime_gpio_app_ctrl 0xFF401288
#define Adr_NX90_systime_gpio_app_ctrl           0xFF401288
#define DFLT_VAL_NX90_systime_gpio_app_ctrl      0x00000000

#define MSK_NX90_systime_gpio_app_ctrl_gpio_app         0x00000003
#define SRT_NX90_systime_gpio_app_ctrl_gpio_app         0
#define DFLT_VAL_NX90_systime_gpio_app_ctrl_gpio_app    0x00000000
#define DFLT_BF_VAL_NX90_systime_gpio_app_ctrl_gpio_app 0x00000000

/* all used bits of 'NX90_systime_gpio_app_ctrl': */
#define MSK_USED_BITS_NX90_systime_gpio_app_ctrl 0x00000003

/* --------------------------------------------------------------------- */
/* Register systime_gpio_app_ctrl_mask */
/* => Select systime for GPIO_APP (mask register) */
/*    This register can be used to lock the systime_gpio_app_ctrl register. \ */
/*    Bits of the systime_gpio_app_ctrl register can only be modified if the corresponding mask bits in this register are set. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_gpio_app_ctrl_mask       0x0000008C
#define Adr_NX90_asic_ctrl_systime_gpio_app_ctrl_mask 0xFF40128C
#define Adr_NX90_systime_gpio_app_ctrl_mask           0xFF40128C
#define DFLT_VAL_NX90_systime_gpio_app_ctrl_mask      0x00000003

#define MSK_NX90_systime_gpio_app_ctrl_mask_gpio_app         0x00000003
#define SRT_NX90_systime_gpio_app_ctrl_mask_gpio_app         0
#define DFLT_VAL_NX90_systime_gpio_app_ctrl_mask_gpio_app    0x00000003
#define DFLT_BF_VAL_NX90_systime_gpio_app_ctrl_mask_gpio_app 0x00000003

/* all used bits of 'NX90_systime_gpio_app_ctrl_mask': */
#define MSK_USED_BITS_NX90_systime_gpio_app_ctrl_mask 0x00000003

/* --------------------------------------------------------------------- */
/* Register ahbl_master_ready */
/* => All AHBL master ready signals. */
/*    Before stop, reset or clockdisable of any master, check that this bit of the appropriate master is 1. */
/*    If it is 0, a current access of this master to the system is not finished. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ahbl_master_ready       0x00000090
#define Adr_NX90_asic_ctrl_ahbl_master_ready 0xFF401290
#define Adr_NX90_ahbl_master_ready           0xFF401290

#define MSK_NX90_ahbl_master_ready_val 0x000fffff
#define SRT_NX90_ahbl_master_ready_val 0

/* all used bits of 'NX90_ahbl_master_ready': */
#define MSK_USED_BITS_NX90_ahbl_master_ready 0x000fffff

/* --------------------------------------------------------------------- */
/* Register system_status */
/* => netX System Status Register. */
/*    This register provides information of special netX system events, e.g: System related interrupt activity, Abort activity. */
/*    Abort or IRQ status flag can be cleared by writing a '1' to the appropriate bits. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_system_status       0x00000094
#define Adr_NX90_asic_ctrl_system_status 0xFF401294
#define Adr_NX90_system_status           0xFF401294

#define MSK_NX90_system_status_extbus_to_irq_status 0x00000002
#define SRT_NX90_system_status_extbus_to_irq_status 1
#define MSK_NX90_system_status_testmode             0x00000100
#define SRT_NX90_system_status_testmode             8
#define MSK_NX90_system_status_pw_bod_ok            0x00000200
#define SRT_NX90_system_status_pw_bod_ok            9
#define MSK_NX90_system_status_pll_bypass           0x00000400
#define SRT_NX90_system_status_pll_bypass           10
#define MSK_NX90_system_status_quick_count          0x00000800
#define SRT_NX90_system_status_quick_count          11
#define MSK_NX90_system_status_xtal_ok              0x00001000
#define SRT_NX90_system_status_xtal_ok              12

/* all used bits of 'NX90_system_status': */
#define MSK_USED_BITS_NX90_system_status 0x00001f02

/* --------------------------------------------------------------------- */
/* Register netx_version */
/* => netX Revision Register: */
/*    This register contains information about netX hardware and bootloader revision. */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_id_regs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_version       0x00000098
#define Adr_NX90_asic_ctrl_netx_version 0xFF401298
#define Adr_NX90_netx_version           0xFF401298
#define DFLT_VAL_NX90_netx_version      0x0000000d

#define MSK_NX90_netx_version_netx_version         0xffffffff
#define SRT_NX90_netx_version_netx_version         0
#define DFLT_VAL_NX90_netx_version_netx_version    0x0000000d
#define DFLT_BF_VAL_NX90_netx_version_netx_version 0x0000000d

/* all used bits of 'NX90_netx_version': */
#define MSK_USED_BITS_NX90_netx_version 0xffffffff

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_netx_unique_id0 */
/* => netX unique ID register 0 */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_id_regs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_netx_unique_id0       0x0000009C
#define Adr_NX90_asic_ctrl_asic_ctrl_netx_unique_id0 0xFF40129C
#define Adr_NX90_asic_ctrl_netx_unique_id0           0xFF40129C
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id0      0x00000000

#define MSK_NX90_asic_ctrl_netx_unique_id0_id         0xffffffff
#define SRT_NX90_asic_ctrl_netx_unique_id0_id         0
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id0_id    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_netx_unique_id0_id 0x00000000

/* all used bits of 'NX90_asic_ctrl_netx_unique_id0': */
#define MSK_USED_BITS_NX90_asic_ctrl_netx_unique_id0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_netx_unique_id1 */
/* => netX unique ID register 1 */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_id_regs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_netx_unique_id1       0x000000A0
#define Adr_NX90_asic_ctrl_asic_ctrl_netx_unique_id1 0xFF4012A0
#define Adr_NX90_asic_ctrl_netx_unique_id1           0xFF4012A0
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id1      0x00000000

#define MSK_NX90_asic_ctrl_netx_unique_id1_id         0xffffffff
#define SRT_NX90_asic_ctrl_netx_unique_id1_id         0
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id1_id    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_netx_unique_id1_id 0x00000000

/* all used bits of 'NX90_asic_ctrl_netx_unique_id1': */
#define MSK_USED_BITS_NX90_asic_ctrl_netx_unique_id1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_netx_unique_id2 */
/* => netX unique ID register 2 */
/*    This register is lockable by asic_ctrl_com.netx_lock-lock_id_regs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_netx_unique_id2       0x000000A4
#define Adr_NX90_asic_ctrl_asic_ctrl_netx_unique_id2 0xFF4012A4
#define Adr_NX90_asic_ctrl_netx_unique_id2           0xFF4012A4
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id2      0x00000000

#define MSK_NX90_asic_ctrl_netx_unique_id2_id         0x00000001
#define SRT_NX90_asic_ctrl_netx_unique_id2_id         0
#define DFLT_VAL_NX90_asic_ctrl_netx_unique_id2_id    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_netx_unique_id2_id 0x00000000

/* all used bits of 'NX90_asic_ctrl_netx_unique_id2': */
#define MSK_USED_BITS_NX90_asic_ctrl_netx_unique_id2 0x00000001

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk2rc_length_min */
/* => RC-OSC clock period min */
/*    The minimum RC-OSC clock period in cycles of system clock (10ns). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_clk2rc_length_min       0x000000A8
#define Adr_NX90_asic_ctrl_asic_ctrl_clk2rc_length_min 0xFF4012A8
#define Adr_NX90_asic_ctrl_clk2rc_length_min           0xFF4012A8
#define DFLT_VAL_NX90_asic_ctrl_clk2rc_length_min      0x000003ff

#define MSK_NX90_asic_ctrl_clk2rc_length_min_len         0x000003ff
#define SRT_NX90_asic_ctrl_clk2rc_length_min_len         0
#define DFLT_VAL_NX90_asic_ctrl_clk2rc_length_min_len    0x000003ff
#define DFLT_BF_VAL_NX90_asic_ctrl_clk2rc_length_min_len 0x000003ff

/* all used bits of 'NX90_asic_ctrl_clk2rc_length_min': */
#define MSK_USED_BITS_NX90_asic_ctrl_clk2rc_length_min 0x000003ff

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_clk2rc_length_max */
/* => RC-OSC clock period max */
/*    The maximum RC-OSC clock period in cycles of system clock (10ns). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_clk2rc_length_max       0x000000AC
#define Adr_NX90_asic_ctrl_asic_ctrl_clk2rc_length_max 0xFF4012AC
#define Adr_NX90_asic_ctrl_clk2rc_length_max           0xFF4012AC
#define DFLT_VAL_NX90_asic_ctrl_clk2rc_length_max      0x00000000

#define MSK_NX90_asic_ctrl_clk2rc_length_max_len         0x000003ff
#define SRT_NX90_asic_ctrl_clk2rc_length_max_len         0
#define DFLT_VAL_NX90_asic_ctrl_clk2rc_length_max_len    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_clk2rc_length_max_len 0x00000000

/* all used bits of 'NX90_asic_ctrl_clk2rc_length_max': */
#define MSK_USED_BITS_NX90_asic_ctrl_clk2rc_length_max 0x000003ff

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_raw */
/* => ASIC_CTRL raw IRQ: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_raw       0x000000B0
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_raw 0xFF4012B0
#define Adr_NX90_asic_ctrl_irq_raw           0xFF4012B0
#define DFLT_VAL_NX90_asic_ctrl_irq_raw      0x00000000

#define MSK_NX90_asic_ctrl_irq_raw_bod_fail          0x00000001
#define SRT_NX90_asic_ctrl_irq_raw_bod_fail          0
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_bod_fail     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_bod_fail  0x00000000
#define MSK_NX90_asic_ctrl_irq_raw_pll_noclk         0x00000002
#define SRT_NX90_asic_ctrl_irq_raw_pll_noclk         1
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_pll_noclk    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_pll_noclk 0x00000000
#define MSK_NX90_asic_ctrl_irq_raw_pll_slow          0x00000004
#define SRT_NX90_asic_ctrl_irq_raw_pll_slow          2
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_pll_slow     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_pll_slow  0x00000000
#define MSK_NX90_asic_ctrl_irq_raw_pll_fast          0x00000008
#define SRT_NX90_asic_ctrl_irq_raw_pll_fast          3
#define DFLT_VAL_NX90_asic_ctrl_irq_raw_pll_fast     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_raw_pll_fast  0x00000000

/* all used bits of 'NX90_asic_ctrl_irq_raw': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_raw 0x0000000f

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_masked */
/* => ASIC_CTRL masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_masked       0x000000B4
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_masked 0xFF4012B4
#define Adr_NX90_asic_ctrl_irq_masked           0xFF4012B4

#define MSK_NX90_asic_ctrl_irq_masked_bod_fail  0x00000001
#define SRT_NX90_asic_ctrl_irq_masked_bod_fail  0
#define MSK_NX90_asic_ctrl_irq_masked_pll_noclk 0x00000002
#define SRT_NX90_asic_ctrl_irq_masked_pll_noclk 1
#define MSK_NX90_asic_ctrl_irq_masked_pll_slow  0x00000004
#define SRT_NX90_asic_ctrl_irq_masked_pll_slow  2
#define MSK_NX90_asic_ctrl_irq_masked_pll_fast  0x00000008
#define SRT_NX90_asic_ctrl_irq_masked_pll_fast  3

/* all used bits of 'NX90_asic_ctrl_irq_masked': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_masked 0x0000000f

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_set */
/* => ASIC_CTRL IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. */
/*    As its bits might be changed by different software tasks, */
/*    the IRQ maskq register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to bod_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_mask_set       0x000000B8
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_mask_set 0xFF4012B8
#define Adr_NX90_asic_ctrl_irq_mask_set           0xFF4012B8
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set      0x00000000

#define MSK_NX90_asic_ctrl_irq_mask_set_bod_fail          0x00000001
#define SRT_NX90_asic_ctrl_irq_mask_set_bod_fail          0
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_bod_fail     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_bod_fail  0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_set_pll_noclk         0x00000002
#define SRT_NX90_asic_ctrl_irq_mask_set_pll_noclk         1
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_pll_noclk    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_pll_noclk 0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_set_pll_slow          0x00000004
#define SRT_NX90_asic_ctrl_irq_mask_set_pll_slow          2
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_pll_slow     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_pll_slow  0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_set_pll_fast          0x00000008
#define SRT_NX90_asic_ctrl_irq_mask_set_pll_fast          3
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_set_pll_fast     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_set_pll_fast  0x00000000

/* all used bits of 'NX90_asic_ctrl_irq_mask_set': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_mask_set 0x0000000f

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_irq_mask_reset */
/* => ASIC_CTRL IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_irq_mask_reset       0x000000BC
#define Adr_NX90_asic_ctrl_asic_ctrl_irq_mask_reset 0xFF4012BC
#define Adr_NX90_asic_ctrl_irq_mask_reset           0xFF4012BC
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset      0x00000000

#define MSK_NX90_asic_ctrl_irq_mask_reset_bod_fail          0x00000001
#define SRT_NX90_asic_ctrl_irq_mask_reset_bod_fail          0
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_bod_fail     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_bod_fail  0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_reset_pll_noclk         0x00000002
#define SRT_NX90_asic_ctrl_irq_mask_reset_pll_noclk         1
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_pll_noclk    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_pll_noclk 0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_reset_pll_slow          0x00000004
#define SRT_NX90_asic_ctrl_irq_mask_reset_pll_slow          2
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_pll_slow     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_pll_slow  0x00000000
#define MSK_NX90_asic_ctrl_irq_mask_reset_pll_fast          0x00000008
#define SRT_NX90_asic_ctrl_irq_mask_reset_pll_fast          3
#define DFLT_VAL_NX90_asic_ctrl_irq_mask_reset_pll_fast     0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_irq_mask_reset_pll_fast  0x00000000

/* all used bits of 'NX90_asic_ctrl_irq_mask_reset': */
#define MSK_USED_BITS_NX90_asic_ctrl_irq_mask_reset 0x0000000f

/* --------------------------------------------------------------------- */
/* Register asic_ctrl_access_key */
/* => ASIC Control Locking access-key Register: */
/*    Writing to any register in the asic_ctrl and other protected address areas (e.g. mmio_ctrl) is only possible after */
/*    setting the correct key here to avoid unintended changes e.g. by crashed software. */
/*    ---- */
/*    Changing a control register in the asic_ctrl or in another protected address area is only possible with the following sequence: */
/*    1.: Read out the locking access-key from this register. */
/*    2.: Write back this locking access-key to this register. */
/*    3.: Write desired value to the control register. */
/*    ---- */
/*    The locking access-key will become invalid after each access to any register in the asic_ctrl or any other protected */
/*    address area (e.g. mmio_ctrl). The access-key has to be read out and set again for subsequent accesses. */
/*     */
/*    Note: */
/*       Since netX51/52 there are separated instances of access-key-protection logic: netX90 has separate access-keys for the \ */
/*    following CPUs: ARM_COM, ARM_APP, XPIC_COM, XPIC_APP, DEBUG_MASTER. All other masters (currently none) use the shared key. */
/*       This allows running access-key read-write sequences of these masters without any synchronisation or locking between them. */
/*       To allow access to a protected register for other masters (currently none) one shared instance of the \ */
/*    access-key-protection logic is implemented. This instance is shared by all other masters. When more \ */
/*    than one of these masters should use it, locking must be done in software to avoid interruption of a sequence \ */
/*    of one master by another master. */
/*    Note: netX90 MPW had only four separate keys: ARM_COM, ARM_APP, DEBUG_MASTER and one shared key (XPIC_COM, XPIC_APP). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_asic_ctrl_access_key       0x000000C0
#define Adr_NX90_asic_ctrl_asic_ctrl_access_key 0xFF4012C0
#define Adr_NX90_asic_ctrl_access_key           0xFF4012C0
#define DFLT_VAL_NX90_asic_ctrl_access_key      0x00000000

#define MSK_NX90_asic_ctrl_access_key_access_key         0x0000ffff
#define SRT_NX90_asic_ctrl_access_key_access_key         0
#define DFLT_VAL_NX90_asic_ctrl_access_key_access_key    0x00000000
#define DFLT_BF_VAL_NX90_asic_ctrl_access_key_access_key 0x00000000

/* all used bits of 'NX90_asic_ctrl_access_key': */
#define MSK_USED_BITS_NX90_asic_ctrl_access_key 0x0000ffff


/* ===================================================================== */

/* Area of mmio_ctrl */

/* ===================================================================== */

#define Addr_NX90_mmio_ctrl 0xFF401300

/* --------------------------------------------------------------------- */
/* Register mmio0_cfg */
/* => Multiplexmatrix Configuration Register for MMIO0 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    ------------------------------- */
/*    mmio*_sel - coding: */
/*     */
/*    {     |                        |                           | border=1 */
/*    Coding netX internal function \ signal type                 functional group */
/*           (core connection) */
/*    0x00   xc_sample0               input,                      Trigger/Latch Unit */
/*    0x01   xc_sample1               input,                      Trigger/Latch Unit */
/*    0x02   xc_trigger0              tristatable output,         Trigger/Latch Unit */
/*    0x03   xc_trigger1              tristatable output,         Trigger/Latch Unit */
/*    0x04   can0_app_rx              input,                      CAN of app side ARM */
/*    0x05   can0_app_tx              always driven output,       CAN of app side ARM */
/*    0x06   can1_app_rx              input,                      CAN of app side ARM */
/*    0x07   can1_app_tx              always driven output,       CAN of app side ARM */
/*    0x08   i2c_xpic_app_scl         bidirectional,              I2C of app side xPIC */
/*    0x09   i2c_xpic_app_sda         bidirectional,              I2C of app side xPIC */
/*    0x0a   i2c_app_scl              bidirectional,              I2C of app side ARM */
/*    0x0b   i2c_app_sda              bidirectional,              I2C of app side ARM */
/*    0x0c   spi_xpic_app_clk         bidirectional,              SPI of app side xPIC */
/*    0x0d   spi_xpic_app_cs0n        bidirectional,              SPI of app side xPIC */
/*    0x0e   spi_xpic_app_cs1n        bidirectional,              SPI of app side xPIC */
/*    0x0f   spi_xpic_app_cs2n        bidirectional,              SPI of app side xPIC */
/*    0x10   spi_xpic_app_miso        bidirectional,              SPI of app side xPIC */
/*    0x11   spi_xpic_app_mosi        bidirectional,              SPI of app side xPIC */
/*    0x12   spi1_app_clk             bidirectional,              SPI of app side ARM */
/*    0x13   spi1_app_cs0n            bidirectional,              SPI of app side ARM */
/*    0x14   spi1_app_cs1n            bidirectional,              SPI of app side ARM */
/*    0x15   spi1_app_cs2n            bidirectional,              SPI of app side ARM */
/*    0x16   spi1_app_miso            bidirectional,              SPI of app side ARM */
/*    0x17   spi1_app_mosi            bidirectional,              SPI of app side ARM */
/*    0x18   uart_xpic_app_rxd        input,                      UART of app side xPIC */
/*    0x19   uart_xpic_app_txd        tristatable output,         UART of app side xPIC */
/*    0x1a   uart_xpic_app_rtsn       tristatable output,         UART of app side xPIC */
/*    0x1b   uart_xpic_app_ctsn       input,                      UART of app side xPIC */
/*    0x1c   uart_app_rxd             input,                      UART of app side ARM */
/*    0x1d   uart_app_txd             tristatable output,         UART of app side ARM */
/*    0x1e   uart_app_rtsn            tristatable output,         UART of app side ARM */
/*    0x1f   uart_app_ctsn            input,                      UART of app side ARM */
/*    0x20   gpio0                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x21   gpio1                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x22   gpio2                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x23   gpio3                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x24   gpio4                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x25   gpio5                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x26   gpio6                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x27   gpio7                    bidirectional,              GPIO (Timer/PWM/Blink etc) */
/*    0x28   wdg_act                  always driven output,       System Watchdog */
/*    0x29   en_in                    input,                      HIF pio input sampling enable */
/*    0x2a   eth_mdc                  always driven output,       MDIO */
/*    0x2b   eth_mdio                 bidirectional,              MDIO */
/*     */
/*    0x3f   PIO mode                 use MMIO PIO line registers PIO function} */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio0_cfg       0x00000000
#define Adr_NX90_mmio_ctrl_mmio0_cfg 0xFF401300
#define Adr_NX90_mmio0_cfg           0xFF401300
#define DFLT_VAL_NX90_mmio0_cfg      0x0000003f

#define MSK_NX90_mmio0_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio0_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio0_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio0_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio0_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio0_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio0_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio0_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio0_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio0_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio0_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio0_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio0_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio0_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio0_cfg_pio_out              0x00020000
#define SRT_NX90_mmio0_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio0_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio0_cfg_pio_out      0x00000000
#define MSK_NX90_mmio0_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio0_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio0_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio0_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio0_cfg': */
#define MSK_USED_BITS_NX90_mmio0_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio1_cfg */
/* => Multiplexmatrix Configuration Register for MMIO1 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio1_cfg       0x00000004
#define Adr_NX90_mmio_ctrl_mmio1_cfg 0xFF401304
#define Adr_NX90_mmio1_cfg           0xFF401304
#define DFLT_VAL_NX90_mmio1_cfg      0x0000003f

#define MSK_NX90_mmio1_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio1_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio1_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio1_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio1_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio1_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio1_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio1_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio1_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio1_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio1_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio1_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio1_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio1_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio1_cfg_pio_out              0x00020000
#define SRT_NX90_mmio1_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio1_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio1_cfg_pio_out      0x00000000
#define MSK_NX90_mmio1_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio1_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio1_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio1_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio1_cfg': */
#define MSK_USED_BITS_NX90_mmio1_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio2_cfg */
/* => Multiplexmatrix Configuration Register for MMIO2 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio2_cfg       0x00000008
#define Adr_NX90_mmio_ctrl_mmio2_cfg 0xFF401308
#define Adr_NX90_mmio2_cfg           0xFF401308
#define DFLT_VAL_NX90_mmio2_cfg      0x0000003f

#define MSK_NX90_mmio2_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio2_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio2_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio2_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio2_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio2_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio2_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio2_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio2_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio2_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio2_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio2_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio2_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio2_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio2_cfg_pio_out              0x00020000
#define SRT_NX90_mmio2_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio2_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio2_cfg_pio_out      0x00000000
#define MSK_NX90_mmio2_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio2_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio2_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio2_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio2_cfg': */
#define MSK_USED_BITS_NX90_mmio2_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio3_cfg */
/* => Multiplexmatrix Configuration Register for MMIO3 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio3_cfg       0x0000000C
#define Adr_NX90_mmio_ctrl_mmio3_cfg 0xFF40130C
#define Adr_NX90_mmio3_cfg           0xFF40130C
#define DFLT_VAL_NX90_mmio3_cfg      0x0000003f

#define MSK_NX90_mmio3_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio3_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio3_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio3_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio3_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio3_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio3_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio3_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio3_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio3_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio3_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio3_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio3_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio3_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio3_cfg_pio_out              0x00020000
#define SRT_NX90_mmio3_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio3_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio3_cfg_pio_out      0x00000000
#define MSK_NX90_mmio3_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio3_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio3_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio3_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio3_cfg': */
#define MSK_USED_BITS_NX90_mmio3_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio4_cfg */
/* => Multiplexmatrix Configuration Register for MMIO4 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio4_cfg       0x00000010
#define Adr_NX90_mmio_ctrl_mmio4_cfg 0xFF401310
#define Adr_NX90_mmio4_cfg           0xFF401310
#define DFLT_VAL_NX90_mmio4_cfg      0x0000003f

#define MSK_NX90_mmio4_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio4_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio4_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio4_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio4_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio4_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio4_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio4_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio4_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio4_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio4_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio4_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio4_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio4_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio4_cfg_pio_out              0x00020000
#define SRT_NX90_mmio4_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio4_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio4_cfg_pio_out      0x00000000
#define MSK_NX90_mmio4_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio4_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio4_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio4_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio4_cfg': */
#define MSK_USED_BITS_NX90_mmio4_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio5_cfg */
/* => Multiplexmatrix Configuration Register for MMIO5 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio5_cfg       0x00000014
#define Adr_NX90_mmio_ctrl_mmio5_cfg 0xFF401314
#define Adr_NX90_mmio5_cfg           0xFF401314
#define DFLT_VAL_NX90_mmio5_cfg      0x0000003f

#define MSK_NX90_mmio5_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio5_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio5_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio5_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio5_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio5_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio5_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio5_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio5_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio5_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio5_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio5_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio5_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio5_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio5_cfg_pio_out              0x00020000
#define SRT_NX90_mmio5_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio5_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio5_cfg_pio_out      0x00000000
#define MSK_NX90_mmio5_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio5_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio5_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio5_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio5_cfg': */
#define MSK_USED_BITS_NX90_mmio5_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio6_cfg */
/* => Multiplexmatrix Configuration Register for MMIO6 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio6_cfg       0x00000018
#define Adr_NX90_mmio_ctrl_mmio6_cfg 0xFF401318
#define Adr_NX90_mmio6_cfg           0xFF401318
#define DFLT_VAL_NX90_mmio6_cfg      0x0000003f

#define MSK_NX90_mmio6_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio6_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio6_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio6_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio6_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio6_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio6_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio6_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio6_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio6_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio6_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio6_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio6_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio6_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio6_cfg_pio_out              0x00020000
#define SRT_NX90_mmio6_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio6_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio6_cfg_pio_out      0x00000000
#define MSK_NX90_mmio6_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio6_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio6_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio6_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio6_cfg': */
#define MSK_USED_BITS_NX90_mmio6_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio7_cfg */
/* => Multiplexmatrix Configuration Register for MMIO7 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio7_cfg       0x0000001C
#define Adr_NX90_mmio_ctrl_mmio7_cfg 0xFF40131C
#define Adr_NX90_mmio7_cfg           0xFF40131C
#define DFLT_VAL_NX90_mmio7_cfg      0x0000003f

#define MSK_NX90_mmio7_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio7_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio7_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio7_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio7_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio7_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio7_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio7_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio7_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio7_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio7_cfg_pio_oe               0x00010000
#define SRT_NX90_mmio7_cfg_pio_oe               16
#define DFLT_VAL_NX90_mmio7_cfg_pio_oe          0x00000000
#define DFLT_BF_VAL_NX90_mmio7_cfg_pio_oe       0x00000000
#define MSK_NX90_mmio7_cfg_pio_out              0x00020000
#define SRT_NX90_mmio7_cfg_pio_out              17
#define DFLT_VAL_NX90_mmio7_cfg_pio_out         0x00000000
#define DFLT_BF_VAL_NX90_mmio7_cfg_pio_out      0x00000000
#define MSK_NX90_mmio7_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio7_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio7_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio7_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio7_cfg': */
#define MSK_USED_BITS_NX90_mmio7_cfg 0x0007063f

/* --------------------------------------------------------------------- */
/* Register mmio8_cfg */
/* => Multiplexmatrix Configuration Register for MMIO8 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio8 signal is a multiplex option of HIF_D8 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio8_cfg       0x00000020
#define Adr_NX90_mmio_ctrl_mmio8_cfg 0xFF401320
#define Adr_NX90_mmio8_cfg           0xFF401320
#define DFLT_VAL_NX90_mmio8_cfg      0x0000003f

#define MSK_NX90_mmio8_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio8_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio8_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio8_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio8_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio8_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio8_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio8_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio8_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio8_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio8_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio8_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio8_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio8_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio8_cfg': */
#define MSK_USED_BITS_NX90_mmio8_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio9_cfg */
/* => Multiplexmatrix Configuration Register for MMIO9 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio9 signal is a multiplex option of HIF_D9 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio9_cfg       0x00000024
#define Adr_NX90_mmio_ctrl_mmio9_cfg 0xFF401324
#define Adr_NX90_mmio9_cfg           0xFF401324
#define DFLT_VAL_NX90_mmio9_cfg      0x0000003f

#define MSK_NX90_mmio9_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio9_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio9_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio9_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio9_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio9_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio9_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio9_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio9_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio9_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio9_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio9_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio9_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio9_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio9_cfg': */
#define MSK_USED_BITS_NX90_mmio9_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio10_cfg */
/* => Multiplexmatrix Configuration Register for MMIO10 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio10 signal is a multiplex option of HIF_D10 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio10_cfg       0x00000028
#define Adr_NX90_mmio_ctrl_mmio10_cfg 0xFF401328
#define Adr_NX90_mmio10_cfg           0xFF401328
#define DFLT_VAL_NX90_mmio10_cfg      0x0000003f

#define MSK_NX90_mmio10_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio10_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio10_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio10_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio10_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio10_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio10_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio10_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio10_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio10_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio10_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio10_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio10_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio10_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio10_cfg': */
#define MSK_USED_BITS_NX90_mmio10_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio11_cfg */
/* => Multiplexmatrix Configuration Register for MMIO11 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio11 signal is a multiplex option of HIF_D11 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio11_cfg       0x0000002C
#define Adr_NX90_mmio_ctrl_mmio11_cfg 0xFF40132C
#define Adr_NX90_mmio11_cfg           0xFF40132C
#define DFLT_VAL_NX90_mmio11_cfg      0x0000003f

#define MSK_NX90_mmio11_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio11_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio11_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio11_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio11_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio11_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio11_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio11_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio11_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio11_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio11_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio11_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio11_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio11_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio11_cfg': */
#define MSK_USED_BITS_NX90_mmio11_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio12_cfg */
/* => Multiplexmatrix Configuration Register for MMIO12 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio12 signal is a multiplex option of HIF_D12 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio12_cfg       0x00000030
#define Adr_NX90_mmio_ctrl_mmio12_cfg 0xFF401330
#define Adr_NX90_mmio12_cfg           0xFF401330
#define DFLT_VAL_NX90_mmio12_cfg      0x0000003f

#define MSK_NX90_mmio12_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio12_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio12_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio12_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio12_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio12_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio12_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio12_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio12_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio12_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio12_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio12_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio12_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio12_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio12_cfg': */
#define MSK_USED_BITS_NX90_mmio12_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio13_cfg */
/* => Multiplexmatrix Configuration Register for MMIO13 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio13 signal is a multiplex option of HIF_D13 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio13_cfg       0x00000034
#define Adr_NX90_mmio_ctrl_mmio13_cfg 0xFF401334
#define Adr_NX90_mmio13_cfg           0xFF401334
#define DFLT_VAL_NX90_mmio13_cfg      0x0000003f

#define MSK_NX90_mmio13_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio13_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio13_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio13_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio13_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio13_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio13_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio13_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio13_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio13_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio13_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio13_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio13_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio13_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio13_cfg': */
#define MSK_USED_BITS_NX90_mmio13_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio14_cfg */
/* => Multiplexmatrix Configuration Register for MMIO14 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio14 signal is a multiplex option of HIF_D14 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio14_cfg       0x00000038
#define Adr_NX90_mmio_ctrl_mmio14_cfg 0xFF401338
#define Adr_NX90_mmio14_cfg           0xFF401338
#define DFLT_VAL_NX90_mmio14_cfg      0x0000003f

#define MSK_NX90_mmio14_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio14_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio14_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio14_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio14_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio14_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio14_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio14_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio14_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio14_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio14_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio14_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio14_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio14_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio14_cfg': */
#define MSK_USED_BITS_NX90_mmio14_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio15_cfg */
/* => Multiplexmatrix Configuration Register for MMIO15 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio15 signal is a multiplex option of HIF_D15 and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio15_cfg       0x0000003C
#define Adr_NX90_mmio_ctrl_mmio15_cfg 0xFF40133C
#define Adr_NX90_mmio15_cfg           0xFF40133C
#define DFLT_VAL_NX90_mmio15_cfg      0x0000003f

#define MSK_NX90_mmio15_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio15_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio15_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio15_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio15_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio15_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio15_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio15_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio15_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio15_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio15_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio15_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio15_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio15_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio15_cfg': */
#define MSK_USED_BITS_NX90_mmio15_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio16_cfg */
/* => Multiplexmatrix Configuration Register for MMIO16 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio16 signal is a multiplex option of HIF_RDN and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio16_cfg       0x00000040
#define Adr_NX90_mmio_ctrl_mmio16_cfg 0xFF401340
#define Adr_NX90_mmio16_cfg           0xFF401340
#define DFLT_VAL_NX90_mmio16_cfg      0x0000003f

#define MSK_NX90_mmio16_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio16_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio16_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio16_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio16_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio16_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio16_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio16_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio16_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio16_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio16_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio16_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio16_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio16_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio16_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio16_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio16_cfg': */
#define MSK_USED_BITS_NX90_mmio16_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio17_cfg */
/* => Multiplexmatrix Configuration Register for MMIO17 */
/*    ------------------------------- */
/*    Some bits of this register is protected by the netX access-key mechanism; changing this register is only possible by the following sequence: */
/*    1.: read out access-key from asic_ctrl_access_key register */
/*    2.: write back access-key to asic_ctrl_access_key register */
/*    3.: write desired value to this register */
/*    ------------------------------- */
/*    Core-inputs not mapped to any MMIO will be assigned to 0. */
/*    If one core-connection is mapped to more than one MMIO, the core-input-state will be these ored MMIO-states. */
/*    For signal selection codings (mmio*_sel) look at header of register adr_mmio0. */
/*    Note: */
/*       mmio17 signal is a multiplex option of HIF_DIRQ and has no PIO function. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio17_cfg       0x00000044
#define Adr_NX90_mmio_ctrl_mmio17_cfg 0xFF401344
#define Adr_NX90_mmio17_cfg           0xFF401344
#define DFLT_VAL_NX90_mmio17_cfg      0x0000003f

#define MSK_NX90_mmio17_cfg_mmio_sel             0x0000003f
#define SRT_NX90_mmio17_cfg_mmio_sel             0
#define DFLT_VAL_NX90_mmio17_cfg_mmio_sel        0x0000003f
#define DFLT_BF_VAL_NX90_mmio17_cfg_mmio_sel     0x0000003f
#define MSK_NX90_mmio17_cfg_mmio_out_inv         0x00000200
#define SRT_NX90_mmio17_cfg_mmio_out_inv         9
#define DFLT_VAL_NX90_mmio17_cfg_mmio_out_inv    0x00000000
#define DFLT_BF_VAL_NX90_mmio17_cfg_mmio_out_inv 0x00000000
#define MSK_NX90_mmio17_cfg_mmio_in_inv          0x00000400
#define SRT_NX90_mmio17_cfg_mmio_in_inv          10
#define DFLT_VAL_NX90_mmio17_cfg_mmio_in_inv     0x00000000
#define DFLT_BF_VAL_NX90_mmio17_cfg_mmio_in_inv  0x00000000
#define MSK_NX90_mmio17_cfg_status_in_ro         0x00040000
#define SRT_NX90_mmio17_cfg_status_in_ro         18
#define DFLT_VAL_NX90_mmio17_cfg_status_in_ro    0x00000000
#define DFLT_BF_VAL_NX90_mmio17_cfg_status_in_ro 0x00000000

/* all used bits of 'NX90_mmio17_cfg': */
#define MSK_USED_BITS_NX90_mmio17_cfg 0x0004063f

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_cfg0 */
/* => MMIO PIO line output level register of MMIO 0 to 17. */
/*    Changing bits here will change 'pio_out' bit of related mmio*_cfg register. Changes there will change related bit inside this register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_cfg0       0x00000048
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_cfg0 0xFF401348
#define Adr_NX90_mmio_pio_out_line_cfg0           0xFF401348
#define DFLT_VAL_NX90_mmio_pio_out_line_cfg0      0x00000000

#define MSK_NX90_mmio_pio_out_line_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_out_line_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_out_line_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_set_cfg0 */
/* => MMIO PIO line output level set register of MMIO 0 to 17. */
/*    This register is for setting single MMIO PIOs to high level with a single access. In contrast to using the 'mmio_pio_out_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will activate the 'pio_out' bit of related 'mmio*_cfg' register and also activate */
/*    the related bits in the 'mmio_pio_out_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_out_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_set_cfg0       0x0000004C
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_set_cfg0 0xFF40134C
#define Adr_NX90_mmio_pio_out_line_set_cfg0           0xFF40134C
#define DFLT_VAL_NX90_mmio_pio_out_line_set_cfg0      0x00000000

#define MSK_NX90_mmio_pio_out_line_set_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_out_line_set_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_set_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_set_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_out_line_set_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_set_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_pio_out_line_reset_cfg0 */
/* => MMIO PIO line output level reset register of MMIO 0 to 17. */
/*    This register is for deactivating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_out_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will clear the 'pio_out' bit of related 'mmio*_cfg' register and also clear */
/*    the related bits in the 'mmio_pio_out_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_out_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_out_line_reset_cfg0       0x00000050
#define Adr_NX90_mmio_ctrl_mmio_pio_out_line_reset_cfg0 0xFF401350
#define Adr_NX90_mmio_pio_out_line_reset_cfg0           0xFF401350
#define DFLT_VAL_NX90_mmio_pio_out_line_reset_cfg0      0x00000000

#define MSK_NX90_mmio_pio_out_line_reset_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_out_line_reset_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_out_line_reset_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_out_line_reset_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_out_line_reset_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_out_line_reset_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_cfg0 */
/* => MMIO PIO line output enable register of MMIO 0 to 17. */
/*    Changing bits here will change 'pio_oe' bit of related mmio*_cfg register. Changes there will change related bit inside this register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_cfg0       0x00000054
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_cfg0 0xFF401354
#define Adr_NX90_mmio_pio_oe_line_cfg0           0xFF401354
#define DFLT_VAL_NX90_mmio_pio_oe_line_cfg0      0x00000000

#define MSK_NX90_mmio_pio_oe_line_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_oe_line_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_oe_line_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_set_cfg0 */
/* => MMIO PIO line output enable set register of MMIO 0 to 17. */
/*    This register is for activating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_oe_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will activate the 'pio_oe' bit of related 'mmio*_cfg' register and also activate */
/*    the related bits in the 'mmio_pio_oe_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_oe_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_set_cfg0       0x00000058
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_set_cfg0 0xFF401358
#define Adr_NX90_mmio_pio_oe_line_set_cfg0           0xFF401358
#define DFLT_VAL_NX90_mmio_pio_oe_line_set_cfg0      0x00000000

#define MSK_NX90_mmio_pio_oe_line_set_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_oe_line_set_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_set_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_set_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_oe_line_set_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_set_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_pio_oe_line_reset_cfg0 */
/* => MMIO PIO line output enable reset register of MMIO 0 to 17. */
/*    This register is for deactivating single MMIO PIOs with a single access. In contrast to using the 'mmio_pio_oe_line_cfg0' register */
/*    no read-modify-write sequence (which could be interrupted) is required. */
/*    Writing '1's here will clear the 'pio_oe' bit of related 'mmio*_cfg' register and also clear */
/*    the related bits in the 'mmio_pio_oe_line_cfg0' register. */
/*    For read this register returns the same value as the 'mmio_pio_oe_line_cfg0' register. */
/*    Note: This register is not protected by netX access-key algorithm. */
/*    Note */
/*       MMIO8 has no PIO function. The value of bit 8 of (assotiated with MMIO8) will be ignored. */
/*       MMIO9 has no PIO function. The value of bit 9 of (assotiated with MMIO9) will be ignored. */
/*       MMIO10 has no PIO function. The value of bit 10 of (assotiated with MMIO10) will be ignored. */
/*       MMIO11 has no PIO function. The value of bit 11 of (assotiated with MMIO11) will be ignored. */
/*       MMIO12 has no PIO function. The value of bit 12 of (assotiated with MMIO12) will be ignored. */
/*       MMIO13 has no PIO function. The value of bit 13 of (assotiated with MMIO13) will be ignored. */
/*       MMIO14 has no PIO function. The value of bit 14 of (assotiated with MMIO14) will be ignored. */
/*       MMIO15 has no PIO function. The value of bit 15 of (assotiated with MMIO15) will be ignored. */
/*       MMIO16 has no PIO function. The value of bit 16 of (assotiated with MMIO16) will be ignored. */
/*       MMIO17 has no PIO function. The value of bit 17 of (assotiated with MMIO17) will be ignored. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_pio_oe_line_reset_cfg0       0x0000005C
#define Adr_NX90_mmio_ctrl_mmio_pio_oe_line_reset_cfg0 0xFF40135C
#define Adr_NX90_mmio_pio_oe_line_reset_cfg0           0xFF40135C
#define DFLT_VAL_NX90_mmio_pio_oe_line_reset_cfg0      0x00000000

#define MSK_NX90_mmio_pio_oe_line_reset_cfg0_line         0x0003ffff
#define SRT_NX90_mmio_pio_oe_line_reset_cfg0_line         0
#define DFLT_VAL_NX90_mmio_pio_oe_line_reset_cfg0_line    0x00000000
#define DFLT_BF_VAL_NX90_mmio_pio_oe_line_reset_cfg0_line 0x00000000

/* all used bits of 'NX90_mmio_pio_oe_line_reset_cfg0': */
#define MSK_USED_BITS_NX90_mmio_pio_oe_line_reset_cfg0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_in_line_status0 */
/* => MMIO input line register of MMIO 0 to 17. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_in_line_status0       0x00000060
#define Adr_NX90_mmio_ctrl_mmio_in_line_status0 0xFF401360
#define Adr_NX90_mmio_in_line_status0           0xFF401360

#define MSK_NX90_mmio_in_line_status0_line 0x0003ffff
#define SRT_NX90_mmio_in_line_status0_line 0

/* all used bits of 'NX90_mmio_in_line_status0': */
#define MSK_USED_BITS_NX90_mmio_in_line_status0 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register mmio_is_pio_status0 */
/* => MMIO mode line register of MMIO 0 to 17. */
/*    Note: PIO Mode can be enabled or disabled in mmio_cfg registers. */
/*    Note */
/*       MMIO8 is not a standard-function MMIO and has no PIO function. When bit 8 is set, MMIO8-function will be active on HIF_D8. */
/*       MMIO9 is not a standard-function MMIO and has no PIO function. When bit 9 is set, MMIO9-function will be active on HIF_D9. */
/*       MMIO10 is not a standard-function MMIO and has no PIO function. When bit 10 is set, MMIO10-function will be active on HIF_D10. */
/*       MMIO11 is not a standard-function MMIO and has no PIO function. When bit 11 is set, MMIO11-function will be active on HIF_D11. */
/*       MMIO12 is not a standard-function MMIO and has no PIO function. When bit 12 is set, MMIO12-function will be active on HIF_D12. */
/*       MMIO13 is not a standard-function MMIO and has no PIO function. When bit 13 is set, MMIO13-function will be active on HIF_D13. */
/*       MMIO14 is not a standard-function MMIO and has no PIO function. When bit 14 is set, MMIO14-function will be active on HIF_D14. */
/*       MMIO15 is not a standard-function MMIO and has no PIO function. When bit 15 is set, MMIO15-function will be active on HIF_D15. */
/*       MMIO16 is not a standard-function MMIO and has no PIO function. When bit 16 is set, MMIO16-function will be active on HIF_RDN. */
/*       MMIO17 is not a standard-function MMIO and has no PIO function. When bit 17 is set, MMIO17-function will be active on HIF_DIRQ. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mmio_is_pio_status0       0x00000064
#define Adr_NX90_mmio_ctrl_mmio_is_pio_status0 0xFF401364
#define Adr_NX90_mmio_is_pio_status0           0xFF401364

#define MSK_NX90_mmio_is_pio_status0_line 0x0003ffff
#define SRT_NX90_mmio_is_pio_status0_line 0

/* all used bits of 'NX90_mmio_is_pio_status0': */
#define MSK_USED_BITS_NX90_mmio_is_pio_status0 0x0003ffff


/* ===================================================================== */

/* AREA iflash_cfg */
/* Area of iflash_cfg2 */

/* ===================================================================== */

#define Addr_NX90_iflash_cfg2 0xFF401400

/* --------------------------------------------------------------------- */
/* Register buffer_read_ahead_instructions */
/* => read ahead on instruction channel of flash controller */
/*    max read ahead = buffer lines - 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buffer_read_ahead_instructions         0x00000000
#define Adr_NX90_iflash_cfg2_buffer_read_ahead_instructions 0xFF401400
#define Adr_NX90_buffer_read_ahead_instructions             0xFF401400
#define DFLT_VAL_NX90_buffer_read_ahead_instructions        0x00000000

#define MSK_NX90_buffer_read_ahead_instructions_val         0xffffffff
#define SRT_NX90_buffer_read_ahead_instructions_val         0
#define DFLT_VAL_NX90_buffer_read_ahead_instructions_val    0x00000000
#define DFLT_BF_VAL_NX90_buffer_read_ahead_instructions_val 0x00000000

/* all used bits of 'NX90_buffer_read_ahead_instructions': */
#define MSK_USED_BITS_NX90_buffer_read_ahead_instructions 0xffffffff

/* --------------------------------------------------------------------- */
/* Register buffer_read_ahead_data */
/* => read ahead on data channel of flash controller */
/*    max read ahead = buffer lines - 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_buffer_read_ahead_data         0x00000004
#define Adr_NX90_iflash_cfg2_buffer_read_ahead_data 0xFF401404
#define Adr_NX90_buffer_read_ahead_data             0xFF401404
#define DFLT_VAL_NX90_buffer_read_ahead_data        0x00000000

#define MSK_NX90_buffer_read_ahead_data_val         0xffffffff
#define SRT_NX90_buffer_read_ahead_data_val         0
#define DFLT_VAL_NX90_buffer_read_ahead_data_val    0x00000000
#define DFLT_BF_VAL_NX90_buffer_read_ahead_data_val 0x00000000

/* all used bits of 'NX90_buffer_read_ahead_data': */
#define MSK_USED_BITS_NX90_buffer_read_ahead_data 0xffffffff

/* --------------------------------------------------------------------- */
/* Register iflash_signals_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_signals_cfg         0x00000008
#define Adr_NX90_iflash_cfg2_iflash_signals_cfg 0xFF401408
#define Adr_NX90_iflash_signals_cfg             0xFF401408
#define DFLT_VAL_NX90_iflash_signals_cfg        0x00000000

#define MSK_NX90_iflash_signals_cfg_xe            0x00000001
#define SRT_NX90_iflash_signals_cfg_xe            0
#define DFLT_VAL_NX90_iflash_signals_cfg_xe       0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_xe    0x00000000
#define MSK_NX90_iflash_signals_cfg_ye            0x00000002
#define SRT_NX90_iflash_signals_cfg_ye            1
#define DFLT_VAL_NX90_iflash_signals_cfg_ye       0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_ye    0x00000000
#define MSK_NX90_iflash_signals_cfg_erase         0x00000004
#define SRT_NX90_iflash_signals_cfg_erase         2
#define DFLT_VAL_NX90_iflash_signals_cfg_erase    0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_erase 0x00000000
#define MSK_NX90_iflash_signals_cfg_mas1          0x00000008
#define SRT_NX90_iflash_signals_cfg_mas1          3
#define DFLT_VAL_NX90_iflash_signals_cfg_mas1     0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_mas1  0x00000000
#define MSK_NX90_iflash_signals_cfg_nvstr         0x00000010
#define SRT_NX90_iflash_signals_cfg_nvstr         4
#define DFLT_VAL_NX90_iflash_signals_cfg_nvstr    0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_nvstr 0x00000000
#define MSK_NX90_iflash_signals_cfg_prog          0x00000020
#define SRT_NX90_iflash_signals_cfg_prog          5
#define DFLT_VAL_NX90_iflash_signals_cfg_prog     0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_prog  0x00000000
#define MSK_NX90_iflash_signals_cfg_se            0x00000040
#define SRT_NX90_iflash_signals_cfg_se            6
#define DFLT_VAL_NX90_iflash_signals_cfg_se       0x00000000
#define DFLT_BF_VAL_NX90_iflash_signals_cfg_se    0x00000000

/* all used bits of 'NX90_iflash_signals_cfg': */
#define MSK_USED_BITS_NX90_iflash_signals_cfg 0x0000007f

/* --------------------------------------------------------------------- */
/* Register iflash_mode_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_mode_cfg         0x0000000C
#define Adr_NX90_iflash_cfg2_iflash_mode_cfg 0xFF40140C
#define Adr_NX90_iflash_mode_cfg             0xFF40140C
#define DFLT_VAL_NX90_iflash_mode_cfg        0x00000000

#define MSK_NX90_iflash_mode_cfg_iflash_mode         0x00000007
#define SRT_NX90_iflash_mode_cfg_iflash_mode         0
#define DFLT_VAL_NX90_iflash_mode_cfg_iflash_mode    0x00000000
#define DFLT_BF_VAL_NX90_iflash_mode_cfg_iflash_mode 0x00000000

/* all used bits of 'NX90_iflash_mode_cfg': */
#define MSK_USED_BITS_NX90_iflash_mode_cfg 0x00000007

/* --------------------------------------------------------------------- */
/* Register iflash_access */
/* => read only for the ready bit, write 1 to start access */
/*    flash action depends on iflash_mode_cfg */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_access         0x00000010
#define Adr_NX90_iflash_cfg2_iflash_access 0xFF401410
#define Adr_NX90_iflash_access             0xFF401410

#define MSK_NX90_iflash_access_run 0x00000001
#define SRT_NX90_iflash_access_run 0

/* all used bits of 'NX90_iflash_access': */
#define MSK_USED_BITS_NX90_iflash_access 0x00000001

/* --------------------------------------------------------------------- */
/* Register iflash_yadr */
/* => Y address of flash controller */
/*    not all bits are used see: implementation size of flash */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_yadr         0x00000014
#define Adr_NX90_iflash_cfg2_iflash_yadr 0xFF401414
#define Adr_NX90_iflash_yadr             0xFF401414
#define DFLT_VAL_NX90_iflash_yadr        0x00000000

#define MSK_NX90_iflash_yadr_val         0x0000001f
#define SRT_NX90_iflash_yadr_val         0
#define DFLT_VAL_NX90_iflash_yadr_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_yadr_val 0x00000000

/* all used bits of 'NX90_iflash_yadr': */
#define MSK_USED_BITS_NX90_iflash_yadr 0x0000001f

/* --------------------------------------------------------------------- */
/* Register iflash_xadr */
/* => X address of flash controller */
/*    not all bits are used see: implementation size of flash */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_xadr         0x00000018
#define Adr_NX90_iflash_cfg2_iflash_xadr 0xFF401418
#define Adr_NX90_iflash_xadr             0xFF401418
#define DFLT_VAL_NX90_iflash_xadr        0x00000000

#define MSK_NX90_iflash_xadr_val         0x000003ff
#define SRT_NX90_iflash_xadr_val         0
#define DFLT_VAL_NX90_iflash_xadr_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_xadr_val 0x00000000

/* all used bits of 'NX90_iflash_xadr': */
#define MSK_USED_BITS_NX90_iflash_xadr 0x000003ff

/* --------------------------------------------------------------------- */
/* Register iflash_din0 */
/* => data[31:0] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din0         0x0000001C
#define Adr_NX90_iflash_cfg2_iflash_din0 0xFF40141C
#define Adr_NX90_iflash_din0             0xFF40141C
#define DFLT_VAL_NX90_iflash_din0        0x00000000

#define MSK_NX90_iflash_din0_val         0xffffffff
#define SRT_NX90_iflash_din0_val         0
#define DFLT_VAL_NX90_iflash_din0_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_din0_val 0x00000000

/* all used bits of 'NX90_iflash_din0': */
#define MSK_USED_BITS_NX90_iflash_din0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register iflash_din1 */
/* => data[63:32] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din1         0x00000020
#define Adr_NX90_iflash_cfg2_iflash_din1 0xFF401420
#define Adr_NX90_iflash_din1             0xFF401420
#define DFLT_VAL_NX90_iflash_din1        0x00000000

#define MSK_NX90_iflash_din1_val         0xffffffff
#define SRT_NX90_iflash_din1_val         0
#define DFLT_VAL_NX90_iflash_din1_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_din1_val 0x00000000

/* all used bits of 'NX90_iflash_din1': */
#define MSK_USED_BITS_NX90_iflash_din1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register iflash_din2 */
/* => data[95:64] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din2         0x00000024
#define Adr_NX90_iflash_cfg2_iflash_din2 0xFF401424
#define Adr_NX90_iflash_din2             0xFF401424
#define DFLT_VAL_NX90_iflash_din2        0x00000000

#define MSK_NX90_iflash_din2_val         0xffffffff
#define SRT_NX90_iflash_din2_val         0
#define DFLT_VAL_NX90_iflash_din2_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_din2_val 0x00000000

/* all used bits of 'NX90_iflash_din2': */
#define MSK_USED_BITS_NX90_iflash_din2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register iflash_din3 */
/* => data[127:96] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din3         0x00000028
#define Adr_NX90_iflash_cfg2_iflash_din3 0xFF401428
#define Adr_NX90_iflash_din3             0xFF401428
#define DFLT_VAL_NX90_iflash_din3        0x00000000

#define MSK_NX90_iflash_din3_val         0xffffffff
#define SRT_NX90_iflash_din3_val         0
#define DFLT_VAL_NX90_iflash_din3_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_din3_val 0x00000000

/* all used bits of 'NX90_iflash_din3': */
#define MSK_USED_BITS_NX90_iflash_din3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register iflash_din4 */
/* => in manual mode for din */
/*    data[143:128] of din flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din4         0x0000002C
#define Adr_NX90_iflash_cfg2_iflash_din4 0xFF40142C
#define Adr_NX90_iflash_din4             0xFF40142C
#define DFLT_VAL_NX90_iflash_din4        0x00000000

#define MSK_NX90_iflash_din4_val         0x0000ffff
#define SRT_NX90_iflash_din4_val         0
#define DFLT_VAL_NX90_iflash_din4_val    0x00000000
#define DFLT_BF_VAL_NX90_iflash_din4_val 0x00000000

/* all used bits of 'NX90_iflash_din4': */
#define MSK_USED_BITS_NX90_iflash_din4 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register iflash_reset */
/* => reset flash controller */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_reset         0x00000030
#define Adr_NX90_iflash_cfg2_iflash_reset 0xFF401430
#define Adr_NX90_iflash_reset             0xFF401430
#define DFLT_VAL_NX90_iflash_reset        0x00000000

#define MSK_NX90_iflash_reset_reset         0x00000001
#define SRT_NX90_iflash_reset_reset         0
#define DFLT_VAL_NX90_iflash_reset_reset    0x00000000
#define DFLT_BF_VAL_NX90_iflash_reset_reset 0x00000000

/* all used bits of 'NX90_iflash_reset': */
#define MSK_USED_BITS_NX90_iflash_reset 0x00000001

/* --------------------------------------------------------------------- */
/* Register iflash_red_cfg0 */
/* => enable redundancy page XADR[9:3] */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_red_cfg0         0x00000034
#define Adr_NX90_iflash_cfg2_iflash_red_cfg0 0xFF401434
#define Adr_NX90_iflash_red_cfg0             0xFF401434
#define DFLT_VAL_NX90_iflash_red_cfg0        0x00000001

#define MSK_NX90_iflash_red_cfg0_n_enb         0x00000001
#define SRT_NX90_iflash_red_cfg0_n_enb         0
#define DFLT_VAL_NX90_iflash_red_cfg0_n_enb    0x00000001
#define DFLT_BF_VAL_NX90_iflash_red_cfg0_n_enb 0x00000001
#define MSK_NX90_iflash_red_cfg0_adr0          0x000000fe
#define SRT_NX90_iflash_red_cfg0_adr0          1
#define DFLT_VAL_NX90_iflash_red_cfg0_adr0     0x00000000
#define DFLT_BF_VAL_NX90_iflash_red_cfg0_adr0  0x00000000

/* all used bits of 'NX90_iflash_red_cfg0': */
#define MSK_USED_BITS_NX90_iflash_red_cfg0 0x000000ff

/* --------------------------------------------------------------------- */
/* Register iflash_red_cfg1 */
/* => enable redundancy page XADR[9:3] */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_red_cfg1         0x00000038
#define Adr_NX90_iflash_cfg2_iflash_red_cfg1 0xFF401438
#define Adr_NX90_iflash_red_cfg1             0xFF401438
#define DFLT_VAL_NX90_iflash_red_cfg1        0x00000001

#define MSK_NX90_iflash_red_cfg1_n_enb         0x00000001
#define SRT_NX90_iflash_red_cfg1_n_enb         0
#define DFLT_VAL_NX90_iflash_red_cfg1_n_enb    0x00000001
#define DFLT_BF_VAL_NX90_iflash_red_cfg1_n_enb 0x00000001
#define MSK_NX90_iflash_red_cfg1_adr1          0x000000fe
#define SRT_NX90_iflash_red_cfg1_adr1          1
#define DFLT_VAL_NX90_iflash_red_cfg1_adr1     0x00000000
#define DFLT_BF_VAL_NX90_iflash_red_cfg1_adr1  0x00000000

/* all used bits of 'NX90_iflash_red_cfg1': */
#define MSK_USED_BITS_NX90_iflash_red_cfg1 0x000000ff

/* --------------------------------------------------------------------- */
/* Register iflash_ifren_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_ifren_cfg         0x0000003C
#define Adr_NX90_iflash_cfg2_iflash_ifren_cfg 0xFF40143C
#define Adr_NX90_iflash_ifren_cfg             0xFF40143C
#define DFLT_VAL_NX90_iflash_ifren_cfg        0x00000000

#define MSK_NX90_iflash_ifren_cfg_ifren          0x00000001
#define SRT_NX90_iflash_ifren_cfg_ifren          0
#define DFLT_VAL_NX90_iflash_ifren_cfg_ifren     0x00000000
#define DFLT_BF_VAL_NX90_iflash_ifren_cfg_ifren  0x00000000
#define MSK_NX90_iflash_ifren_cfg_ifren1         0x00000002
#define SRT_NX90_iflash_ifren_cfg_ifren1         1
#define DFLT_VAL_NX90_iflash_ifren_cfg_ifren1    0x00000000
#define DFLT_BF_VAL_NX90_iflash_ifren_cfg_ifren1 0x00000000

/* all used bits of 'NX90_iflash_ifren_cfg': */
#define MSK_USED_BITS_NX90_iflash_ifren_cfg 0x00000003

/* --------------------------------------------------------------------- */
/* Register iflash_din4_ecc */
/* => in manual mode for ecc calculation of din3..0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_din4_ecc         0x00000040
#define Adr_NX90_iflash_cfg2_iflash_din4_ecc 0xFF401440
#define Adr_NX90_iflash_din4_ecc             0xFF401440

#define MSK_NX90_iflash_din4_ecc_val 0x0000ffff
#define SRT_NX90_iflash_din4_ecc_val 0

/* all used bits of 'NX90_iflash_din4_ecc': */
#define MSK_USED_BITS_NX90_iflash_din4_ecc 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register iflash_special_cfg */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_special_cfg         0x00000044
#define Adr_NX90_iflash_cfg2_iflash_special_cfg 0xFF401444
#define Adr_NX90_iflash_special_cfg             0xFF401444
#define DFLT_VAL_NX90_iflash_special_cfg        0x00000001

#define MSK_NX90_iflash_special_cfg_tmr         0x00000001
#define SRT_NX90_iflash_special_cfg_tmr         0
#define DFLT_VAL_NX90_iflash_special_cfg_tmr    0x00000001
#define DFLT_BF_VAL_NX90_iflash_special_cfg_tmr 0x00000001
#define MSK_NX90_iflash_special_cfg_slm         0x00000002
#define SRT_NX90_iflash_special_cfg_slm         1
#define DFLT_VAL_NX90_iflash_special_cfg_slm    0x00000000
#define DFLT_BF_VAL_NX90_iflash_special_cfg_slm 0x00000000

/* all used bits of 'NX90_iflash_special_cfg': */
#define MSK_USED_BITS_NX90_iflash_special_cfg 0x00000003

/* --------------------------------------------------------------------- */
/* Register iflash_protection_info */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_iflash_protection_info         0x00000048
#define Adr_NX90_iflash_cfg2_iflash_protection_info 0xFF401448
#define Adr_NX90_iflash_protection_info             0xFF401448
#define DFLT_VAL_NX90_iflash_protection_info        0x00000000

#define MSK_NX90_iflash_protection_info_read_0_dw         0x00000001
#define SRT_NX90_iflash_protection_info_read_0_dw         0
#define DFLT_VAL_NX90_iflash_protection_info_read_0_dw    0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_0_dw 0x00000000
#define MSK_NX90_iflash_protection_info_read_0_up         0x00000002
#define SRT_NX90_iflash_protection_info_read_0_up         1
#define DFLT_VAL_NX90_iflash_protection_info_read_0_up    0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_0_up 0x00000000
#define MSK_NX90_iflash_protection_info_read_1_dw         0x00000004
#define SRT_NX90_iflash_protection_info_read_1_dw         2
#define DFLT_VAL_NX90_iflash_protection_info_read_1_dw    0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_1_dw 0x00000000
#define MSK_NX90_iflash_protection_info_read_1_up         0x00000008
#define SRT_NX90_iflash_protection_info_read_1_up         3
#define DFLT_VAL_NX90_iflash_protection_info_read_1_up    0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_read_1_up 0x00000000
#define MSK_NX90_iflash_protection_info_write_0           0x00000010
#define SRT_NX90_iflash_protection_info_write_0           4
#define DFLT_VAL_NX90_iflash_protection_info_write_0      0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_write_0   0x00000000
#define MSK_NX90_iflash_protection_info_write_1           0x00000020
#define SRT_NX90_iflash_protection_info_write_1           5
#define DFLT_VAL_NX90_iflash_protection_info_write_1      0x00000000
#define DFLT_BF_VAL_NX90_iflash_protection_info_write_1   0x00000000

/* all used bits of 'NX90_iflash_protection_info': */
#define MSK_USED_BITS_NX90_iflash_protection_info 0x0000003f


/* ===================================================================== */

/* Area of hif_io_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_io_ctrl 0xFF401480

/* --------------------------------------------------------------------- */
/* Register hif_io_cfg */
/* => IO Config Register: */
/*    Selects of HIF pin multiplexing. */
/*    See Excel pinning sheet for details. */
/*    This configuration must be set up according to external netX connection before any access to external logic. */
/*    This register is protected by the netX access key mechanism; changing this register is only possible by the following sequence: */
/*     */
/*    1.: read out access key from ACCESS_KEY register (ASIC_CTRL address area) */
/*    2.: write back access key to ACCESS_KEY register (ASIC_CTRL address area) */
/*    3.: write desired value to this register (ASIC_CTRL address area) */
/*     */
/*    Attention: Be very careful programming this register. False settings may cause permanent damage on netX or devices connected */
/*               to HIF-IOs. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_io_cfg         0x00000000
#define Adr_NX90_hif_io_ctrl_hif_io_cfg 0xFF401480
#define Adr_NX90_hif_io_cfg             0xFF401480
#define DFLT_VAL_NX90_hif_io_cfg        0x01000060

#define MSK_NX90_hif_io_cfg_sel_hif_dpm                    0x00000001
#define SRT_NX90_hif_io_cfg_sel_hif_dpm                    0
#define DFLT_VAL_NX90_hif_io_cfg_sel_hif_dpm               0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_hif_dpm            0x00000000
#define MSK_NX90_hif_io_cfg_sel_dpm_serial                 0x00000002
#define SRT_NX90_hif_io_cfg_sel_dpm_serial                 1
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial            0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial         0x00000000
#define MSK_NX90_hif_io_cfg_sel_dpm_serial_sph             0x00000004
#define SRT_NX90_hif_io_cfg_sel_dpm_serial_sph             2
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial_sph        0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial_sph     0x00000000
#define MSK_NX90_hif_io_cfg_sel_dpm_serial_spo             0x00000008
#define SRT_NX90_hif_io_cfg_sel_dpm_serial_spo             3
#define DFLT_VAL_NX90_hif_io_cfg_sel_dpm_serial_spo        0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_dpm_serial_spo     0x00000000
#define MSK_NX90_hif_io_cfg_en_sdpm1                       0x00000010
#define SRT_NX90_hif_io_cfg_en_sdpm1                       4
#define DFLT_VAL_NX90_hif_io_cfg_en_sdpm1                  0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_sdpm1               0x00000000
#define MSK_NX90_hif_io_cfg_hif_mi_cfg                     0x00000060
#define SRT_NX90_hif_io_cfg_hif_mi_cfg                     5
#define DFLT_VAL_NX90_hif_io_cfg_hif_mi_cfg                0x00000060
#define DFLT_BF_VAL_NX90_hif_io_cfg_hif_mi_cfg             0x00000003
#define MSK_NX90_hif_io_cfg_en_hif_sdram_mi                0x00000080
#define SRT_NX90_hif_io_cfg_en_hif_sdram_mi                7
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_sdram_mi           0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_sdram_mi        0x00000000
#define MSK_NX90_hif_io_cfg_sel_hif_a_width                0x00000f00
#define SRT_NX90_hif_io_cfg_sel_hif_a_width                8
#define DFLT_VAL_NX90_hif_io_cfg_sel_hif_a_width           0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_sel_hif_a_width        0x00000000
#define MSK_NX90_hif_io_cfg_en_hif_rdy_pio_mi              0x01000000
#define SRT_NX90_hif_io_cfg_en_hif_rdy_pio_mi              24
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_rdy_pio_mi         0x01000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_rdy_pio_mi      0x00000001
#define MSK_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19         0x02000000
#define SRT_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19         25
#define DFLT_VAL_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19    0x00000000
#define DFLT_BF_VAL_NX90_hif_io_cfg_en_hif_wdg_sys_hif_d19 0x00000000

/* all used bits of 'NX90_hif_io_cfg': */
#define MSK_USED_BITS_NX90_hif_io_cfg 0x03000fff

/* --------------------------------------------------------------------- */
/* Register hif_pio_cfg */
/* => HIF PIO Mode configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_cfg         0x00000004
#define Adr_NX90_hif_io_ctrl_hif_pio_cfg 0xFF401484
#define Adr_NX90_hif_pio_cfg             0xFF401484
#define DFLT_VAL_NX90_hif_pio_cfg        0x80000008

#define MSK_NX90_hif_pio_cfg_in_ctrl                  0x00000003
#define SRT_NX90_hif_pio_cfg_in_ctrl                  0
#define DFLT_VAL_NX90_hif_pio_cfg_in_ctrl             0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_in_ctrl          0x00000000
#define MSK_NX90_hif_pio_cfg_filter_en_in             0x00000008
#define SRT_NX90_hif_pio_cfg_filter_en_in             3
#define DFLT_VAL_NX90_hif_pio_cfg_filter_en_in        0x00000008
#define DFLT_BF_VAL_NX90_hif_pio_cfg_filter_en_in     0x00000001
#define MSK_NX90_hif_pio_cfg_irq_hif_d12_cfg          0x00030000
#define SRT_NX90_hif_pio_cfg_irq_hif_d12_cfg          16
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_d12_cfg     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_d12_cfg  0x00000000
#define MSK_NX90_hif_pio_cfg_irq_hif_a16_cfg          0x000c0000
#define SRT_NX90_hif_pio_cfg_irq_hif_a16_cfg          18
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_a16_cfg     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_a16_cfg  0x00000000
#define MSK_NX90_hif_pio_cfg_irq_hif_a17_cfg          0x00300000
#define SRT_NX90_hif_pio_cfg_irq_hif_a17_cfg          20
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_a17_cfg     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_a17_cfg  0x00000000
#define MSK_NX90_hif_pio_cfg_irq_hif_dirq_cfg         0x0c000000
#define SRT_NX90_hif_pio_cfg_irq_hif_dirq_cfg         26
#define DFLT_VAL_NX90_hif_pio_cfg_irq_hif_dirq_cfg    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_irq_hif_dirq_cfg 0x00000000
#define MSK_NX90_hif_pio_cfg_filter_irqs              0x80000000
#define SRT_NX90_hif_pio_cfg_filter_irqs              31
#define DFLT_VAL_NX90_hif_pio_cfg_filter_irqs         0x80000000
#define DFLT_BF_VAL_NX90_hif_pio_cfg_filter_irqs      0x00000001

/* all used bits of 'NX90_hif_pio_cfg': */
#define MSK_USED_BITS_NX90_hif_pio_cfg 0x8c3f000b

/* --------------------------------------------------------------------- */
/* Register hif_pio_out0 */
/* => HIF PIO Output State Configuration Register 0. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit */
/*    is set in hif_pio_oe0 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_out0         0x00000008
#define Adr_NX90_hif_io_ctrl_hif_pio_out0 0xFF401488
#define Adr_NX90_hif_pio_out0             0xFF401488
#define DFLT_VAL_NX90_hif_pio_out0        0x00000000

#define MSK_NX90_hif_pio_out0_hif_d0          0x00000001
#define SRT_NX90_hif_pio_out0_hif_d0          0
#define DFLT_VAL_NX90_hif_pio_out0_hif_d0     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d0  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d1          0x00000002
#define SRT_NX90_hif_pio_out0_hif_d1          1
#define DFLT_VAL_NX90_hif_pio_out0_hif_d1     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d1  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d2          0x00000004
#define SRT_NX90_hif_pio_out0_hif_d2          2
#define DFLT_VAL_NX90_hif_pio_out0_hif_d2     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d2  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d3          0x00000008
#define SRT_NX90_hif_pio_out0_hif_d3          3
#define DFLT_VAL_NX90_hif_pio_out0_hif_d3     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d3  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d4          0x00000010
#define SRT_NX90_hif_pio_out0_hif_d4          4
#define DFLT_VAL_NX90_hif_pio_out0_hif_d4     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d4  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d5          0x00000020
#define SRT_NX90_hif_pio_out0_hif_d5          5
#define DFLT_VAL_NX90_hif_pio_out0_hif_d5     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d5  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d6          0x00000040
#define SRT_NX90_hif_pio_out0_hif_d6          6
#define DFLT_VAL_NX90_hif_pio_out0_hif_d6     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d6  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d7          0x00000080
#define SRT_NX90_hif_pio_out0_hif_d7          7
#define DFLT_VAL_NX90_hif_pio_out0_hif_d7     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d7  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d8          0x00000100
#define SRT_NX90_hif_pio_out0_hif_d8          8
#define DFLT_VAL_NX90_hif_pio_out0_hif_d8     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d8  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d9          0x00000200
#define SRT_NX90_hif_pio_out0_hif_d9          9
#define DFLT_VAL_NX90_hif_pio_out0_hif_d9     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d9  0x00000000
#define MSK_NX90_hif_pio_out0_hif_d10         0x00000400
#define SRT_NX90_hif_pio_out0_hif_d10         10
#define DFLT_VAL_NX90_hif_pio_out0_hif_d10    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d10 0x00000000
#define MSK_NX90_hif_pio_out0_hif_d11         0x00000800
#define SRT_NX90_hif_pio_out0_hif_d11         11
#define DFLT_VAL_NX90_hif_pio_out0_hif_d11    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d11 0x00000000
#define MSK_NX90_hif_pio_out0_hif_d12         0x00001000
#define SRT_NX90_hif_pio_out0_hif_d12         12
#define DFLT_VAL_NX90_hif_pio_out0_hif_d12    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d12 0x00000000
#define MSK_NX90_hif_pio_out0_hif_d13         0x00002000
#define SRT_NX90_hif_pio_out0_hif_d13         13
#define DFLT_VAL_NX90_hif_pio_out0_hif_d13    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d13 0x00000000
#define MSK_NX90_hif_pio_out0_hif_d14         0x00004000
#define SRT_NX90_hif_pio_out0_hif_d14         14
#define DFLT_VAL_NX90_hif_pio_out0_hif_d14    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d14 0x00000000
#define MSK_NX90_hif_pio_out0_hif_d15         0x00008000
#define SRT_NX90_hif_pio_out0_hif_d15         15
#define DFLT_VAL_NX90_hif_pio_out0_hif_d15    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out0_hif_d15 0x00000000

/* all used bits of 'NX90_hif_pio_out0': */
#define MSK_USED_BITS_NX90_hif_pio_out0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_out1 */
/* => HIF PIO Output State Configuration Register 1. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the programmed state if appropriate enable bit */
/*    is set in hif_pio_oe1 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_out1         0x0000000C
#define Adr_NX90_hif_io_ctrl_hif_pio_out1 0xFF40148C
#define Adr_NX90_hif_pio_out1             0xFF40148C
#define DFLT_VAL_NX90_hif_pio_out1        0x00000000

#define MSK_NX90_hif_pio_out1_hif_a0            0x00000001
#define SRT_NX90_hif_pio_out1_hif_a0            0
#define DFLT_VAL_NX90_hif_pio_out1_hif_a0       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a0    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a1            0x00000002
#define SRT_NX90_hif_pio_out1_hif_a1            1
#define DFLT_VAL_NX90_hif_pio_out1_hif_a1       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a1    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a2            0x00000004
#define SRT_NX90_hif_pio_out1_hif_a2            2
#define DFLT_VAL_NX90_hif_pio_out1_hif_a2       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a2    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a3            0x00000008
#define SRT_NX90_hif_pio_out1_hif_a3            3
#define DFLT_VAL_NX90_hif_pio_out1_hif_a3       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a3    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a4            0x00000010
#define SRT_NX90_hif_pio_out1_hif_a4            4
#define DFLT_VAL_NX90_hif_pio_out1_hif_a4       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a4    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a5            0x00000020
#define SRT_NX90_hif_pio_out1_hif_a5            5
#define DFLT_VAL_NX90_hif_pio_out1_hif_a5       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a5    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a6            0x00000040
#define SRT_NX90_hif_pio_out1_hif_a6            6
#define DFLT_VAL_NX90_hif_pio_out1_hif_a6       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a6    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a7            0x00000080
#define SRT_NX90_hif_pio_out1_hif_a7            7
#define DFLT_VAL_NX90_hif_pio_out1_hif_a7       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a7    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a8            0x00000100
#define SRT_NX90_hif_pio_out1_hif_a8            8
#define DFLT_VAL_NX90_hif_pio_out1_hif_a8       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a8    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a9            0x00000200
#define SRT_NX90_hif_pio_out1_hif_a9            9
#define DFLT_VAL_NX90_hif_pio_out1_hif_a9       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a9    0x00000000
#define MSK_NX90_hif_pio_out1_hif_a10           0x00000400
#define SRT_NX90_hif_pio_out1_hif_a10           10
#define DFLT_VAL_NX90_hif_pio_out1_hif_a10      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a10   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a11           0x00000800
#define SRT_NX90_hif_pio_out1_hif_a11           11
#define DFLT_VAL_NX90_hif_pio_out1_hif_a11      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a11   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a12           0x00001000
#define SRT_NX90_hif_pio_out1_hif_a12           12
#define DFLT_VAL_NX90_hif_pio_out1_hif_a12      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a12   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a13           0x00002000
#define SRT_NX90_hif_pio_out1_hif_a13           13
#define DFLT_VAL_NX90_hif_pio_out1_hif_a13      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a13   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a14           0x00004000
#define SRT_NX90_hif_pio_out1_hif_a14           14
#define DFLT_VAL_NX90_hif_pio_out1_hif_a14      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a14   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a15           0x00008000
#define SRT_NX90_hif_pio_out1_hif_a15           15
#define DFLT_VAL_NX90_hif_pio_out1_hif_a15      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a15   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a16           0x00010000
#define SRT_NX90_hif_pio_out1_hif_a16           16
#define DFLT_VAL_NX90_hif_pio_out1_hif_a16      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a16   0x00000000
#define MSK_NX90_hif_pio_out1_hif_a17           0x00020000
#define SRT_NX90_hif_pio_out1_hif_a17           17
#define DFLT_VAL_NX90_hif_pio_out1_hif_a17      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_a17   0x00000000
#define MSK_NX90_hif_pio_out1_hif_bhen          0x02000000
#define SRT_NX90_hif_pio_out1_hif_bhen          25
#define DFLT_VAL_NX90_hif_pio_out1_hif_bhen     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_bhen  0x00000000
#define MSK_NX90_hif_pio_out1_hif_rdn           0x04000000
#define SRT_NX90_hif_pio_out1_hif_rdn           26
#define DFLT_VAL_NX90_hif_pio_out1_hif_rdn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_rdn   0x00000000
#define MSK_NX90_hif_pio_out1_hif_wrn           0x08000000
#define SRT_NX90_hif_pio_out1_hif_wrn           27
#define DFLT_VAL_NX90_hif_pio_out1_hif_wrn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_wrn   0x00000000
#define MSK_NX90_hif_pio_out1_hif_csn           0x10000000
#define SRT_NX90_hif_pio_out1_hif_csn           28
#define DFLT_VAL_NX90_hif_pio_out1_hif_csn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_csn   0x00000000
#define MSK_NX90_hif_pio_out1_hif_rdy           0x20000000
#define SRT_NX90_hif_pio_out1_hif_rdy           29
#define DFLT_VAL_NX90_hif_pio_out1_hif_rdy      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_rdy   0x00000000
#define MSK_NX90_hif_pio_out1_hif_dirq          0x40000000
#define SRT_NX90_hif_pio_out1_hif_dirq          30
#define DFLT_VAL_NX90_hif_pio_out1_hif_dirq     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_dirq  0x00000000
#define MSK_NX90_hif_pio_out1_hif_sdclk         0x80000000
#define SRT_NX90_hif_pio_out1_hif_sdclk         31
#define DFLT_VAL_NX90_hif_pio_out1_hif_sdclk    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_out1_hif_sdclk 0x00000000

/* all used bits of 'NX90_hif_pio_out1': */
#define MSK_USED_BITS_NX90_hif_pio_out1 0xfe03ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_oe0 */
/* => HIF PIO Output Enable Configuration Register 0. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the output state */
/*    programmed in in hif_pio_out0 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_oe0         0x00000010
#define Adr_NX90_hif_io_ctrl_hif_pio_oe0 0xFF401490
#define Adr_NX90_hif_pio_oe0             0xFF401490
#define DFLT_VAL_NX90_hif_pio_oe0        0x00000000

#define MSK_NX90_hif_pio_oe0_hif_d0          0x00000001
#define SRT_NX90_hif_pio_oe0_hif_d0          0
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d0     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d0  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d1          0x00000002
#define SRT_NX90_hif_pio_oe0_hif_d1          1
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d1     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d1  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d2          0x00000004
#define SRT_NX90_hif_pio_oe0_hif_d2          2
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d2     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d2  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d3          0x00000008
#define SRT_NX90_hif_pio_oe0_hif_d3          3
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d3     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d3  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d4          0x00000010
#define SRT_NX90_hif_pio_oe0_hif_d4          4
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d4     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d4  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d5          0x00000020
#define SRT_NX90_hif_pio_oe0_hif_d5          5
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d5     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d5  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d6          0x00000040
#define SRT_NX90_hif_pio_oe0_hif_d6          6
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d6     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d6  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d7          0x00000080
#define SRT_NX90_hif_pio_oe0_hif_d7          7
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d7     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d7  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d8          0x00000100
#define SRT_NX90_hif_pio_oe0_hif_d8          8
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d8     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d8  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d9          0x00000200
#define SRT_NX90_hif_pio_oe0_hif_d9          9
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d9     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d9  0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d10         0x00000400
#define SRT_NX90_hif_pio_oe0_hif_d10         10
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d10    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d10 0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d11         0x00000800
#define SRT_NX90_hif_pio_oe0_hif_d11         11
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d11    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d11 0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d12         0x00001000
#define SRT_NX90_hif_pio_oe0_hif_d12         12
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d12    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d12 0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d13         0x00002000
#define SRT_NX90_hif_pio_oe0_hif_d13         13
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d13    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d13 0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d14         0x00004000
#define SRT_NX90_hif_pio_oe0_hif_d14         14
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d14    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d14 0x00000000
#define MSK_NX90_hif_pio_oe0_hif_d15         0x00008000
#define SRT_NX90_hif_pio_oe0_hif_d15         15
#define DFLT_VAL_NX90_hif_pio_oe0_hif_d15    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe0_hif_d15 0x00000000

/* all used bits of 'NX90_hif_pio_oe0': */
#define MSK_USED_BITS_NX90_hif_pio_oe0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_oe1 */
/* => HIF PIO Output Enable Configuration Register 1. */
/*    All unused HIF signals can be used as PIOs. IOs will be driven to the output state */
/*    programmed in in hif_pio_out1 register. */
/*    PIO mode driving of HIF-IOs used in current HIF/EXT_BUS Memory Interface configuration is not possible. */
/*    ----------------------- */
/*    Note: */
/*       This register can be read or written by 8, 16 or 32 bit access. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_oe1         0x00000014
#define Adr_NX90_hif_io_ctrl_hif_pio_oe1 0xFF401494
#define Adr_NX90_hif_pio_oe1             0xFF401494
#define DFLT_VAL_NX90_hif_pio_oe1        0x00000000

#define MSK_NX90_hif_pio_oe1_hif_a0            0x00000001
#define SRT_NX90_hif_pio_oe1_hif_a0            0
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a0       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a0    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a1            0x00000002
#define SRT_NX90_hif_pio_oe1_hif_a1            1
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a1       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a1    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a2            0x00000004
#define SRT_NX90_hif_pio_oe1_hif_a2            2
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a2       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a2    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a3            0x00000008
#define SRT_NX90_hif_pio_oe1_hif_a3            3
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a3       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a3    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a4            0x00000010
#define SRT_NX90_hif_pio_oe1_hif_a4            4
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a4       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a4    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a5            0x00000020
#define SRT_NX90_hif_pio_oe1_hif_a5            5
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a5       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a5    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a6            0x00000040
#define SRT_NX90_hif_pio_oe1_hif_a6            6
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a6       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a6    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a7            0x00000080
#define SRT_NX90_hif_pio_oe1_hif_a7            7
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a7       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a7    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a8            0x00000100
#define SRT_NX90_hif_pio_oe1_hif_a8            8
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a8       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a8    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a9            0x00000200
#define SRT_NX90_hif_pio_oe1_hif_a9            9
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a9       0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a9    0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a10           0x00000400
#define SRT_NX90_hif_pio_oe1_hif_a10           10
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a10      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a10   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a11           0x00000800
#define SRT_NX90_hif_pio_oe1_hif_a11           11
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a11      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a11   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a12           0x00001000
#define SRT_NX90_hif_pio_oe1_hif_a12           12
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a12      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a12   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a13           0x00002000
#define SRT_NX90_hif_pio_oe1_hif_a13           13
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a13      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a13   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a14           0x00004000
#define SRT_NX90_hif_pio_oe1_hif_a14           14
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a14      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a14   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a15           0x00008000
#define SRT_NX90_hif_pio_oe1_hif_a15           15
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a15      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a15   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a16           0x00010000
#define SRT_NX90_hif_pio_oe1_hif_a16           16
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a16      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a16   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_a17           0x00020000
#define SRT_NX90_hif_pio_oe1_hif_a17           17
#define DFLT_VAL_NX90_hif_pio_oe1_hif_a17      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_a17   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_bhen          0x02000000
#define SRT_NX90_hif_pio_oe1_hif_bhen          25
#define DFLT_VAL_NX90_hif_pio_oe1_hif_bhen     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_bhen  0x00000000
#define MSK_NX90_hif_pio_oe1_hif_rdn           0x04000000
#define SRT_NX90_hif_pio_oe1_hif_rdn           26
#define DFLT_VAL_NX90_hif_pio_oe1_hif_rdn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_rdn   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_wrn           0x08000000
#define SRT_NX90_hif_pio_oe1_hif_wrn           27
#define DFLT_VAL_NX90_hif_pio_oe1_hif_wrn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_wrn   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_csn           0x10000000
#define SRT_NX90_hif_pio_oe1_hif_csn           28
#define DFLT_VAL_NX90_hif_pio_oe1_hif_csn      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_csn   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_rdy           0x20000000
#define SRT_NX90_hif_pio_oe1_hif_rdy           29
#define DFLT_VAL_NX90_hif_pio_oe1_hif_rdy      0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_rdy   0x00000000
#define MSK_NX90_hif_pio_oe1_hif_dirq          0x40000000
#define SRT_NX90_hif_pio_oe1_hif_dirq          30
#define DFLT_VAL_NX90_hif_pio_oe1_hif_dirq     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_dirq  0x00000000
#define MSK_NX90_hif_pio_oe1_hif_sdclk         0x80000000
#define SRT_NX90_hif_pio_oe1_hif_sdclk         31
#define DFLT_VAL_NX90_hif_pio_oe1_hif_sdclk    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_oe1_hif_sdclk 0x00000000

/* all used bits of 'NX90_hif_pio_oe1': */
#define MSK_USED_BITS_NX90_hif_pio_oe1 0xfe03ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_in0 */
/* => HIF PIO Input State Register 0. */
/*    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration. */
/*    HIF IO sampling behaviour can be programmed by 'in_ctrl' bits of 'hif_pio_cfg' register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_in0         0x00000018
#define Adr_NX90_hif_io_ctrl_hif_pio_in0 0xFF401498
#define Adr_NX90_hif_pio_in0             0xFF401498

#define MSK_NX90_hif_pio_in0_hif_d0  0x00000001
#define SRT_NX90_hif_pio_in0_hif_d0  0
#define MSK_NX90_hif_pio_in0_hif_d1  0x00000002
#define SRT_NX90_hif_pio_in0_hif_d1  1
#define MSK_NX90_hif_pio_in0_hif_d2  0x00000004
#define SRT_NX90_hif_pio_in0_hif_d2  2
#define MSK_NX90_hif_pio_in0_hif_d3  0x00000008
#define SRT_NX90_hif_pio_in0_hif_d3  3
#define MSK_NX90_hif_pio_in0_hif_d4  0x00000010
#define SRT_NX90_hif_pio_in0_hif_d4  4
#define MSK_NX90_hif_pio_in0_hif_d5  0x00000020
#define SRT_NX90_hif_pio_in0_hif_d5  5
#define MSK_NX90_hif_pio_in0_hif_d6  0x00000040
#define SRT_NX90_hif_pio_in0_hif_d6  6
#define MSK_NX90_hif_pio_in0_hif_d7  0x00000080
#define SRT_NX90_hif_pio_in0_hif_d7  7
#define MSK_NX90_hif_pio_in0_hif_d8  0x00000100
#define SRT_NX90_hif_pio_in0_hif_d8  8
#define MSK_NX90_hif_pio_in0_hif_d9  0x00000200
#define SRT_NX90_hif_pio_in0_hif_d9  9
#define MSK_NX90_hif_pio_in0_hif_d10 0x00000400
#define SRT_NX90_hif_pio_in0_hif_d10 10
#define MSK_NX90_hif_pio_in0_hif_d11 0x00000800
#define SRT_NX90_hif_pio_in0_hif_d11 11
#define MSK_NX90_hif_pio_in0_hif_d12 0x00001000
#define SRT_NX90_hif_pio_in0_hif_d12 12
#define MSK_NX90_hif_pio_in0_hif_d13 0x00002000
#define SRT_NX90_hif_pio_in0_hif_d13 13
#define MSK_NX90_hif_pio_in0_hif_d14 0x00004000
#define SRT_NX90_hif_pio_in0_hif_d14 14
#define MSK_NX90_hif_pio_in0_hif_d15 0x00008000
#define SRT_NX90_hif_pio_in0_hif_d15 15

/* all used bits of 'NX90_hif_pio_in0': */
#define MSK_USED_BITS_NX90_hif_pio_in0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_in1 */
/* => HIF PIO Input State Register 1. */
/*    IO input states can be read here regardless whether IO is used in current HIF/EXT_BUS Memory Interface configuration. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_in1         0x0000001C
#define Adr_NX90_hif_io_ctrl_hif_pio_in1 0xFF40149C
#define Adr_NX90_hif_pio_in1             0xFF40149C

#define MSK_NX90_hif_pio_in1_hif_a0    0x00000001
#define SRT_NX90_hif_pio_in1_hif_a0    0
#define MSK_NX90_hif_pio_in1_hif_a1    0x00000002
#define SRT_NX90_hif_pio_in1_hif_a1    1
#define MSK_NX90_hif_pio_in1_hif_a2    0x00000004
#define SRT_NX90_hif_pio_in1_hif_a2    2
#define MSK_NX90_hif_pio_in1_hif_a3    0x00000008
#define SRT_NX90_hif_pio_in1_hif_a3    3
#define MSK_NX90_hif_pio_in1_hif_a4    0x00000010
#define SRT_NX90_hif_pio_in1_hif_a4    4
#define MSK_NX90_hif_pio_in1_hif_a5    0x00000020
#define SRT_NX90_hif_pio_in1_hif_a5    5
#define MSK_NX90_hif_pio_in1_hif_a6    0x00000040
#define SRT_NX90_hif_pio_in1_hif_a6    6
#define MSK_NX90_hif_pio_in1_hif_a7    0x00000080
#define SRT_NX90_hif_pio_in1_hif_a7    7
#define MSK_NX90_hif_pio_in1_hif_a8    0x00000100
#define SRT_NX90_hif_pio_in1_hif_a8    8
#define MSK_NX90_hif_pio_in1_hif_a9    0x00000200
#define SRT_NX90_hif_pio_in1_hif_a9    9
#define MSK_NX90_hif_pio_in1_hif_a10   0x00000400
#define SRT_NX90_hif_pio_in1_hif_a10   10
#define MSK_NX90_hif_pio_in1_hif_a11   0x00000800
#define SRT_NX90_hif_pio_in1_hif_a11   11
#define MSK_NX90_hif_pio_in1_hif_a12   0x00001000
#define SRT_NX90_hif_pio_in1_hif_a12   12
#define MSK_NX90_hif_pio_in1_hif_a13   0x00002000
#define SRT_NX90_hif_pio_in1_hif_a13   13
#define MSK_NX90_hif_pio_in1_hif_a14   0x00004000
#define SRT_NX90_hif_pio_in1_hif_a14   14
#define MSK_NX90_hif_pio_in1_hif_a15   0x00008000
#define SRT_NX90_hif_pio_in1_hif_a15   15
#define MSK_NX90_hif_pio_in1_hif_a16   0x00010000
#define SRT_NX90_hif_pio_in1_hif_a16   16
#define MSK_NX90_hif_pio_in1_hif_a17   0x00020000
#define SRT_NX90_hif_pio_in1_hif_a17   17
#define MSK_NX90_hif_pio_in1_hif_bhen  0x02000000
#define SRT_NX90_hif_pio_in1_hif_bhen  25
#define MSK_NX90_hif_pio_in1_hif_rdn   0x04000000
#define SRT_NX90_hif_pio_in1_hif_rdn   26
#define MSK_NX90_hif_pio_in1_hif_wrn   0x08000000
#define SRT_NX90_hif_pio_in1_hif_wrn   27
#define MSK_NX90_hif_pio_in1_hif_csn   0x10000000
#define SRT_NX90_hif_pio_in1_hif_csn   28
#define MSK_NX90_hif_pio_in1_hif_rdy   0x20000000
#define SRT_NX90_hif_pio_in1_hif_rdy   29
#define MSK_NX90_hif_pio_in1_hif_dirq  0x40000000
#define SRT_NX90_hif_pio_in1_hif_dirq  30
#define MSK_NX90_hif_pio_in1_hif_sdclk 0x80000000
#define SRT_NX90_hif_pio_in1_hif_sdclk 31

/* all used bits of 'NX90_hif_pio_in1': */
#define MSK_USED_BITS_NX90_hif_pio_in1 0xfe03ffff

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_raw */
/* => HIF PIO Raw (before masking) IRQ Status Register. */
/*    If bit is set, the according interrupt is asserted. */
/*    Interrupt status can be cleared by writing ones to this register. */
/*    Each IRQ source can be assigned either to xPIC or to ARM (or to both) by the following registers. */
/*    IRQ clearing has lower priority than IRQ set when done simultaneously. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/*    Note: The bits of this register are reordered since netx51/52. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_raw         0x00000024
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_raw 0xFF4014A4
#define Adr_NX90_hif_pio_irq_raw             0xFF4014A4

#define MSK_NX90_hif_pio_irq_raw_irq_hif_d12  0x00000001
#define SRT_NX90_hif_pio_irq_raw_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_raw_irq_hif_a16  0x00000002
#define SRT_NX90_hif_pio_irq_raw_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_raw_irq_hif_a17  0x00000004
#define SRT_NX90_hif_pio_irq_raw_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_raw_irq_hif_dirq 0x00000008
#define SRT_NX90_hif_pio_irq_raw_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_raw': */
#define MSK_USED_BITS_NX90_hif_pio_irq_raw 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_mask_set */
/* => HIF PIO Interrupt Mask Register for netX internal ARM. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal ARM. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_mask_set         0x00000028
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_mask_set 0xFF4014A8
#define Adr_NX90_hif_pio_irq_arm_mask_set             0xFF4014A8
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set        0x00000000

#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12          0x00000001
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_d12  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16          0x00000002
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a16  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17          0x00000004
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_a17  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq         0x00000008
#define SRT_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_set_irq_hif_dirq 0x00000000

/* all used bits of 'NX90_hif_pio_irq_arm_mask_set': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_mask_set 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_mask_reset */
/* => HIF PIO Interrupt Mask Reset Register for netX internal ARM. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal ARM if asserted. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_mask_reset         0x0000002C
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_mask_reset 0xFF4014AC
#define Adr_NX90_hif_pio_irq_arm_mask_reset             0xFF4014AC
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset        0x00000000

#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12          0x00000001
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_d12  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16          0x00000002
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a16  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17          0x00000004
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_a17  0x00000000
#define MSK_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq         0x00000008
#define SRT_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_arm_mask_reset_irq_hif_dirq 0x00000000

/* all used bits of 'NX90_hif_pio_irq_arm_mask_reset': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_mask_reset 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_arm_masked */
/* => HIF PIO Masked Interrupt Status Register for netX internal ARM. */
/*    If bit is set, if the according mask bit is set in hif_pio_irq_arm_mask-register and the according interrupt is asserted. */
/*    IRQ for netX internal ARM signal is asserted if at least one bit is set here. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal ARM signal without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_arm_masked         0x00000030
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_arm_masked 0xFF4014B0
#define Adr_NX90_hif_pio_irq_arm_masked             0xFF4014B0

#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_d12  0x00000001
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_a16  0x00000002
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_a17  0x00000004
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_arm_masked_irq_hif_dirq 0x00000008
#define SRT_NX90_hif_pio_irq_arm_masked_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_arm_masked': */
#define MSK_USED_BITS_NX90_hif_pio_irq_arm_masked 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_mask_set */
/* => HIF PIO Interrupt Mask Register for netX internal xPIC. */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_mask_set         0x00000034
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_mask_set 0xFF4014B4
#define Adr_NX90_hif_pio_irq_xpic_mask_set             0xFF4014B4
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set        0x00000000

#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12          0x00000001
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_d12  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16          0x00000002
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a16  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17          0x00000004
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_a17  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq         0x00000008
#define SRT_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_set_irq_hif_dirq 0x00000000

/* all used bits of 'NX90_hif_pio_irq_xpic_mask_set': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_mask_set 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_mask_reset */
/* => HIF PIO Interrupt Mask Reset Register for netX internal xPIC. */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    If bit is set, the according interrupt will activate the IRQ for netX internal xPIC if asserted. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_mask_reset         0x00000038
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_mask_reset 0xFF4014B8
#define Adr_NX90_hif_pio_irq_xpic_mask_reset             0xFF4014B8
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset        0x00000000

#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12          0x00000001
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12          0
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_d12  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16          0x00000002
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16          1
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a16  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17          0x00000004
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17          2
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17     0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_a17  0x00000000
#define MSK_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq         0x00000008
#define SRT_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq         3
#define DFLT_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq    0x00000000
#define DFLT_BF_VAL_NX90_hif_pio_irq_xpic_mask_reset_irq_hif_dirq 0x00000000

/* all used bits of 'NX90_hif_pio_irq_xpic_mask_reset': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_mask_reset 0x0000000f

/* --------------------------------------------------------------------- */
/* Register hif_pio_irq_xpic_masked */
/* => HIF PIO Masked Interrupt Status Register for netX internal xPIC. */
/*    If bit is set, if the according mask bit is set in hif_pio_irq_xpic_mask-register and the according interrupt is asserted. */
/*    IRQ for netX internal xPIC signal is asserted if at least one bit is set here. */
/*    Interrupt status can be cleared by writing ones to the hif_pio_irq_raw register. */
/*    To release IRQ for netX internal xPIC signal without clearing interrupt in module, reset according mask bit to 0. */
/*    Note: Spikes up to 10ns will be suppressed by HIF PIO IRQ sample stages. */
/*    Note: HIF PIO interrupt function can be configured in the hif_pio_cfg register. */
/*    Note: HIF PIO IRQs are combined with DPM IRQs and Handshake-Cell (HANDSHACKE_CTRL) IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hif_pio_irq_xpic_masked         0x0000003C
#define Adr_NX90_hif_io_ctrl_hif_pio_irq_xpic_masked 0xFF4014BC
#define Adr_NX90_hif_pio_irq_xpic_masked             0xFF4014BC

#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_d12  0x00000001
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_d12  0
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_a16  0x00000002
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_a16  1
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_a17  0x00000004
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_a17  2
#define MSK_NX90_hif_pio_irq_xpic_masked_irq_hif_dirq 0x00000008
#define SRT_NX90_hif_pio_irq_xpic_masked_irq_hif_dirq 3

/* all used bits of 'NX90_hif_pio_irq_xpic_masked': */
#define MSK_USED_BITS_NX90_hif_pio_irq_xpic_masked 0x0000000f


/* ===================================================================== */

/* Area of hifmemctrl */

/* ===================================================================== */

#define Addr_NX90_hifmemctrl 0xFF401500

/* ===================================================================== */

/* AREA ext_asyncmem_ctrl */
/* Area of hif_asyncmem_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_asyncmem_ctrl 0xFF401500

/* --------------------------------------------------------------------- */
/* Register extsram0_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 0 area. */
/*    External addresses always be byte addresses. */
/*    For additional byte-enables/DQM signals view netX pinout documentation. */
/*    For all wait state configuration 1 cycle is 1 netx system clock cycle, i.e. 10ns for netX running on 100MHz at normal operation. */
/*    Note: Pause and data width configuration is compatible to netx500/100 and netx50. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram0_ctrl               0x00000000
#define Adr_NX90_hif_asyncmem_ctrl_extsram0_ctrl 0xFF401500
#define Adr_NX90_extsram0_ctrl                   0xFF401500
#define DFLT_VAL_NX90_extsram0_ctrl              0x0303033f

#define MSK_NX90_extsram0_ctrl_ws                       0x0000003f
#define SRT_NX90_extsram0_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram0_ctrl_ws                  0x0000003f
#define DFLT_BF_VAL_NX90_extsram0_ctrl_ws               0x0000003f
#define MSK_NX90_extsram0_ctrl_p_pre                    0x00000300
#define SRT_NX90_extsram0_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram0_ctrl_p_pre               0x00000300
#define DFLT_BF_VAL_NX90_extsram0_ctrl_p_pre            0x00000003
#define MSK_NX90_extsram0_ctrl_p_post                   0x00030000
#define SRT_NX90_extsram0_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram0_ctrl_p_post              0x00030000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_p_post           0x00000003
#define MSK_NX90_extsram0_ctrl_dwidth                   0x03000000
#define SRT_NX90_extsram0_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram0_ctrl_dwidth              0x03000000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_dwidth           0x00000003
#define MSK_NX90_extsram0_ctrl_no_p_pre_seq_rd          0x10000000
#define SRT_NX90_extsram0_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram0_ctrl_no_p_pre_seq_rd     0x00000000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_no_p_pre_seq_rd  0x00000000
#define MSK_NX90_extsram0_ctrl_no_p_post_seq_rd         0x20000000
#define SRT_NX90_extsram0_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram0_ctrl_no_p_post_seq_rd    0x00000000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_no_p_post_seq_rd 0x00000000
#define MSK_NX90_extsram0_ctrl_static_cs                0x40000000
#define SRT_NX90_extsram0_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram0_ctrl_static_cs           0x00000000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_static_cs        0x00000000
#define MSK_NX90_extsram0_ctrl_ready_en                 0x80000000
#define SRT_NX90_extsram0_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram0_ctrl_ready_en            0x00000000
#define DFLT_BF_VAL_NX90_extsram0_ctrl_ready_en         0x00000000

/* all used bits of 'NX90_extsram0_ctrl': */
#define MSK_USED_BITS_NX90_extsram0_ctrl 0xf303033f

/* --------------------------------------------------------------------- */
/* Register extsram1_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 1 area. */
/*    For detailed register description view extsram0_ctrl register. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram1_ctrl               0x00000004
#define Adr_NX90_hif_asyncmem_ctrl_extsram1_ctrl 0xFF401504
#define Adr_NX90_extsram1_ctrl                   0xFF401504
#define DFLT_VAL_NX90_extsram1_ctrl              0x0303033f

#define MSK_NX90_extsram1_ctrl_ws                       0x0000003f
#define SRT_NX90_extsram1_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram1_ctrl_ws                  0x0000003f
#define DFLT_BF_VAL_NX90_extsram1_ctrl_ws               0x0000003f
#define MSK_NX90_extsram1_ctrl_p_pre                    0x00000300
#define SRT_NX90_extsram1_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram1_ctrl_p_pre               0x00000300
#define DFLT_BF_VAL_NX90_extsram1_ctrl_p_pre            0x00000003
#define MSK_NX90_extsram1_ctrl_p_post                   0x00030000
#define SRT_NX90_extsram1_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram1_ctrl_p_post              0x00030000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_p_post           0x00000003
#define MSK_NX90_extsram1_ctrl_dwidth                   0x03000000
#define SRT_NX90_extsram1_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram1_ctrl_dwidth              0x03000000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_dwidth           0x00000003
#define MSK_NX90_extsram1_ctrl_no_p_pre_seq_rd          0x10000000
#define SRT_NX90_extsram1_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram1_ctrl_no_p_pre_seq_rd     0x00000000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_no_p_pre_seq_rd  0x00000000
#define MSK_NX90_extsram1_ctrl_no_p_post_seq_rd         0x20000000
#define SRT_NX90_extsram1_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram1_ctrl_no_p_post_seq_rd    0x00000000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_no_p_post_seq_rd 0x00000000
#define MSK_NX90_extsram1_ctrl_static_cs                0x40000000
#define SRT_NX90_extsram1_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram1_ctrl_static_cs           0x00000000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_static_cs        0x00000000
#define MSK_NX90_extsram1_ctrl_ready_en                 0x80000000
#define SRT_NX90_extsram1_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram1_ctrl_ready_en            0x00000000
#define DFLT_BF_VAL_NX90_extsram1_ctrl_ready_en         0x00000000

/* all used bits of 'NX90_extsram1_ctrl': */
#define MSK_USED_BITS_NX90_extsram1_ctrl 0xf303033f

/* --------------------------------------------------------------------- */
/* Register extsram2_ctrl */
/* => Control Register for external bus interface and wait-states for chip-select 2 area. */
/*    For detailed register description view extsram0_ctrl register. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram2_ctrl               0x00000008
#define Adr_NX90_hif_asyncmem_ctrl_extsram2_ctrl 0xFF401508
#define Adr_NX90_extsram2_ctrl                   0xFF401508
#define DFLT_VAL_NX90_extsram2_ctrl              0x0303033f

#define MSK_NX90_extsram2_ctrl_ws                       0x0000003f
#define SRT_NX90_extsram2_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram2_ctrl_ws                  0x0000003f
#define DFLT_BF_VAL_NX90_extsram2_ctrl_ws               0x0000003f
#define MSK_NX90_extsram2_ctrl_p_pre                    0x00000300
#define SRT_NX90_extsram2_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram2_ctrl_p_pre               0x00000300
#define DFLT_BF_VAL_NX90_extsram2_ctrl_p_pre            0x00000003
#define MSK_NX90_extsram2_ctrl_p_post                   0x00030000
#define SRT_NX90_extsram2_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram2_ctrl_p_post              0x00030000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_p_post           0x00000003
#define MSK_NX90_extsram2_ctrl_dwidth                   0x03000000
#define SRT_NX90_extsram2_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram2_ctrl_dwidth              0x03000000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_dwidth           0x00000003
#define MSK_NX90_extsram2_ctrl_no_p_pre_seq_rd          0x10000000
#define SRT_NX90_extsram2_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram2_ctrl_no_p_pre_seq_rd     0x00000000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_no_p_pre_seq_rd  0x00000000
#define MSK_NX90_extsram2_ctrl_no_p_post_seq_rd         0x20000000
#define SRT_NX90_extsram2_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram2_ctrl_no_p_post_seq_rd    0x00000000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_no_p_post_seq_rd 0x00000000
#define MSK_NX90_extsram2_ctrl_static_cs                0x40000000
#define SRT_NX90_extsram2_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram2_ctrl_static_cs           0x00000000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_static_cs        0x00000000
#define MSK_NX90_extsram2_ctrl_ready_en                 0x80000000
#define SRT_NX90_extsram2_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram2_ctrl_ready_en            0x00000000
#define DFLT_BF_VAL_NX90_extsram2_ctrl_ready_en         0x00000000

/* all used bits of 'NX90_extsram2_ctrl': */
#define MSK_USED_BITS_NX90_extsram2_ctrl 0xf303033f

/* --------------------------------------------------------------------- */
/* Register extsram3_ctrl */
/* => Control Register for external bus interface and wait-states for ExtMem1 chip-select 3 area. */
/*    For detailed register description view extsram0_ctrl register. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extsram3_ctrl               0x0000000C
#define Adr_NX90_hif_asyncmem_ctrl_extsram3_ctrl 0xFF40150C
#define Adr_NX90_extsram3_ctrl                   0xFF40150C
#define DFLT_VAL_NX90_extsram3_ctrl              0x0303033f

#define MSK_NX90_extsram3_ctrl_ws                       0x0000003f
#define SRT_NX90_extsram3_ctrl_ws                       0
#define DFLT_VAL_NX90_extsram3_ctrl_ws                  0x0000003f
#define DFLT_BF_VAL_NX90_extsram3_ctrl_ws               0x0000003f
#define MSK_NX90_extsram3_ctrl_p_pre                    0x00000300
#define SRT_NX90_extsram3_ctrl_p_pre                    8
#define DFLT_VAL_NX90_extsram3_ctrl_p_pre               0x00000300
#define DFLT_BF_VAL_NX90_extsram3_ctrl_p_pre            0x00000003
#define MSK_NX90_extsram3_ctrl_p_post                   0x00030000
#define SRT_NX90_extsram3_ctrl_p_post                   16
#define DFLT_VAL_NX90_extsram3_ctrl_p_post              0x00030000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_p_post           0x00000003
#define MSK_NX90_extsram3_ctrl_dwidth                   0x03000000
#define SRT_NX90_extsram3_ctrl_dwidth                   24
#define DFLT_VAL_NX90_extsram3_ctrl_dwidth              0x03000000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_dwidth           0x00000003
#define MSK_NX90_extsram3_ctrl_no_p_pre_seq_rd          0x10000000
#define SRT_NX90_extsram3_ctrl_no_p_pre_seq_rd          28
#define DFLT_VAL_NX90_extsram3_ctrl_no_p_pre_seq_rd     0x00000000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_no_p_pre_seq_rd  0x00000000
#define MSK_NX90_extsram3_ctrl_no_p_post_seq_rd         0x20000000
#define SRT_NX90_extsram3_ctrl_no_p_post_seq_rd         29
#define DFLT_VAL_NX90_extsram3_ctrl_no_p_post_seq_rd    0x00000000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_no_p_post_seq_rd 0x00000000
#define MSK_NX90_extsram3_ctrl_static_cs                0x40000000
#define SRT_NX90_extsram3_ctrl_static_cs                30
#define DFLT_VAL_NX90_extsram3_ctrl_static_cs           0x00000000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_static_cs        0x00000000
#define MSK_NX90_extsram3_ctrl_ready_en                 0x80000000
#define SRT_NX90_extsram3_ctrl_ready_en                 31
#define DFLT_VAL_NX90_extsram3_ctrl_ready_en            0x00000000
#define DFLT_BF_VAL_NX90_extsram3_ctrl_ready_en         0x00000000

/* all used bits of 'NX90_extsram3_ctrl': */
#define MSK_USED_BITS_NX90_extsram3_ctrl 0xf303033f

/* --------------------------------------------------------------------- */
/* Register ext_cs0_apm_ctrl */
/* => Asynchronous Page Mode (APM) Control Register for ExtMem0 chip-select area. */
/*    Only ExtMem0 chip-select area supports fast Asynchronous-Page-Mode (APM) Access. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_cs0_apm_ctrl               0x00000010
#define Adr_NX90_hif_asyncmem_ctrl_ext_cs0_apm_ctrl 0xFF401510
#define Adr_NX90_ext_cs0_apm_ctrl                   0xFF401510
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl              0x0000000f

#define MSK_NX90_ext_cs0_apm_ctrl_ws_apm          0x0000000f
#define SRT_NX90_ext_cs0_apm_ctrl_ws_apm          0
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl_ws_apm     0x0000000f
#define DFLT_BF_VAL_NX90_ext_cs0_apm_ctrl_ws_apm  0x0000000f
#define MSK_NX90_ext_cs0_apm_ctrl_apm_cfg         0x00000700
#define SRT_NX90_ext_cs0_apm_ctrl_apm_cfg         8
#define DFLT_VAL_NX90_ext_cs0_apm_ctrl_apm_cfg    0x00000000
#define DFLT_BF_VAL_NX90_ext_cs0_apm_ctrl_apm_cfg 0x00000000

/* all used bits of 'NX90_ext_cs0_apm_ctrl': */
#define MSK_USED_BITS_NX90_ext_cs0_apm_ctrl 0x0000070f

/* --------------------------------------------------------------------- */
/* Register ext_rdy_cfg */
/* => External Memory Ready Control Register. */
/*    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_rdy_cfg               0x00000020
#define Adr_NX90_hif_asyncmem_ctrl_ext_rdy_cfg 0xFF401520
#define Adr_NX90_ext_rdy_cfg                   0xFF401520
#define DFLT_VAL_NX90_ext_rdy_cfg              0x00000001

#define MSK_NX90_ext_rdy_cfg_rdy_act_level         0x00000001
#define SRT_NX90_ext_rdy_cfg_rdy_act_level         0
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_act_level    0x00000001
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_act_level 0x00000001
#define MSK_NX90_ext_rdy_cfg_rdy_filter            0x00000030
#define SRT_NX90_ext_rdy_cfg_rdy_filter            4
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_filter       0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_filter    0x00000000
#define MSK_NX90_ext_rdy_cfg_rdy_to_irq_en         0x00000100
#define SRT_NX90_ext_rdy_cfg_rdy_to_irq_en         8
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_to_irq_en    0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_to_irq_en 0x00000000
#define MSK_NX90_ext_rdy_cfg_rdy_to_dis            0x00000800
#define SRT_NX90_ext_rdy_cfg_rdy_to_dis            11
#define DFLT_VAL_NX90_ext_rdy_cfg_rdy_to_dis       0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_cfg_rdy_to_dis    0x00000000

/* all used bits of 'NX90_ext_rdy_cfg': */
#define MSK_USED_BITS_NX90_ext_rdy_cfg 0x00000931

/* --------------------------------------------------------------------- */
/* Register ext_rdy_status */
/* => External Memory Ready Status Register. */
/*    Note: Timeout is generated if ready usage is enabled by the extsramX_ctrl registers and is not asserted to active state within 10us. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ext_rdy_status               0x00000024
#define Adr_NX90_hif_asyncmem_ctrl_ext_rdy_status 0xFF401524
#define Adr_NX90_ext_rdy_status                   0xFF401524
#define DFLT_VAL_NX90_ext_rdy_status              0x00000000

#define MSK_NX90_ext_rdy_status_rdy_to_err_adr         0x07ffffff
#define SRT_NX90_ext_rdy_status_rdy_to_err_adr         0
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err_adr    0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err_adr 0x00000000
#define MSK_NX90_ext_rdy_status_rdy_to_err_cs          0x30000000
#define SRT_NX90_ext_rdy_status_rdy_to_err_cs          28
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err_cs     0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err_cs  0x00000000
#define MSK_NX90_ext_rdy_status_rdy_to_err             0x80000000
#define SRT_NX90_ext_rdy_status_rdy_to_err             31
#define DFLT_VAL_NX90_ext_rdy_status_rdy_to_err        0x00000000
#define DFLT_BF_VAL_NX90_ext_rdy_status_rdy_to_err     0x00000000

/* all used bits of 'NX90_ext_rdy_status': */
#define MSK_USED_BITS_NX90_ext_rdy_status 0xb7ffffff


/* ===================================================================== */

/* AREA ext_sdram_ctrl */
/* Area of hif_sdram_ctrl */

/* ===================================================================== */

#define Addr_NX90_hif_sdram_ctrl 0xFF401540

/* --------------------------------------------------------------------- */
/* Register sdram_general_ctrl */
/* => Control Register for external SDRAM access. */
/*    For initializing procedure netX SDRAM controller view description of 'ctrl_en' bit inside this register. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_general_ctrl            0x00000000
#define Adr_NX90_hif_sdram_ctrl_sdram_general_ctrl 0xFF401540
#define Adr_NX90_sdram_general_ctrl                0xFF401540
#define DFLT_VAL_NX90_sdram_general_ctrl           0x01000001

#define MSK_NX90_sdram_general_ctrl_banks                  0x00000003
#define SRT_NX90_sdram_general_ctrl_banks                  0
#define DFLT_VAL_NX90_sdram_general_ctrl_banks             0x00000001
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_banks          0x00000001
#define MSK_NX90_sdram_general_ctrl_rows                   0x00000030
#define SRT_NX90_sdram_general_ctrl_rows                   4
#define DFLT_VAL_NX90_sdram_general_ctrl_rows              0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_rows           0x00000000
#define MSK_NX90_sdram_general_ctrl_columns                0x00000700
#define SRT_NX90_sdram_general_ctrl_columns                8
#define DFLT_VAL_NX90_sdram_general_ctrl_columns           0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_columns        0x00000000
#define MSK_NX90_sdram_general_ctrl_dbus16                 0x00010000
#define SRT_NX90_sdram_general_ctrl_dbus16                 16
#define DFLT_VAL_NX90_sdram_general_ctrl_dbus16            0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_dbus16         0x00000000
#define MSK_NX90_sdram_general_ctrl_sdram_pwdn             0x00020000
#define SRT_NX90_sdram_general_ctrl_sdram_pwdn             17
#define DFLT_VAL_NX90_sdram_general_ctrl_sdram_pwdn        0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_sdram_pwdn     0x00000000
#define MSK_NX90_sdram_general_ctrl_extclk_en              0x00040000
#define SRT_NX90_sdram_general_ctrl_extclk_en              18
#define DFLT_VAL_NX90_sdram_general_ctrl_extclk_en         0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_extclk_en      0x00000000
#define MSK_NX90_sdram_general_ctrl_ctrl_en                0x00080000
#define SRT_NX90_sdram_general_ctrl_ctrl_en                19
#define DFLT_VAL_NX90_sdram_general_ctrl_ctrl_en           0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_ctrl_en        0x00000000
#define MSK_NX90_sdram_general_ctrl_refresh_mode           0x03000000
#define SRT_NX90_sdram_general_ctrl_refresh_mode           24
#define DFLT_VAL_NX90_sdram_general_ctrl_refresh_mode      0x01000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_refresh_mode   0x00000001
#define MSK_NX90_sdram_general_ctrl_sdram_ready            0x40000000
#define SRT_NX90_sdram_general_ctrl_sdram_ready            30
#define DFLT_VAL_NX90_sdram_general_ctrl_sdram_ready       0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_sdram_ready    0x00000000
#define MSK_NX90_sdram_general_ctrl_refresh_status         0x80000000
#define SRT_NX90_sdram_general_ctrl_refresh_status         31
#define DFLT_VAL_NX90_sdram_general_ctrl_refresh_status    0x00000000
#define DFLT_BF_VAL_NX90_sdram_general_ctrl_refresh_status 0x00000000

/* all used bits of 'NX90_sdram_general_ctrl': */
#define MSK_USED_BITS_NX90_sdram_general_ctrl 0xc30f0733

/* --------------------------------------------------------------------- */
/* Register sdram_timing_ctrl */
/* => Control Register for external SDRAM access. */
/*    Changes can only be done, if the SDRAM controller is disabled (sdram_general_ctrl.ctrl_en == 0) */
/*    to avoid configuration problems. */
/*    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM controller. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/*    Note: For some registers the reset-value is a reserved value. I.e. these registers must be programmed to another value */
/*          than the reset-value at initialization (e.g. t_WR). The values with the remark "(default)" are the values which should */
/*          be applicable for all SDRAM devices. However it is strongly recommended to set the values best-fitting the connected device */
/*          as the default values typically lead to an immense performance penalty (e.g. t_RAS default is 10). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_timing_ctrl            0x00000004
#define Adr_NX90_hif_sdram_ctrl_sdram_timing_ctrl 0xFF401544
#define Adr_NX90_sdram_timing_ctrl                0xFF401544
#define DFLT_VAL_NX90_sdram_timing_ctrl           0x0301f7f3

#define MSK_NX90_sdram_timing_ctrl_t_RCD                     0x00000003
#define SRT_NX90_sdram_timing_ctrl_t_RCD                     0
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RCD                0x00000003
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RCD             0x00000003
#define MSK_NX90_sdram_timing_ctrl_t_WR                      0x00000030
#define SRT_NX90_sdram_timing_ctrl_t_WR                      4
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_WR                 0x00000030
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_WR              0x00000003
#define MSK_NX90_sdram_timing_ctrl_t_RP                      0x000000c0
#define SRT_NX90_sdram_timing_ctrl_t_RP                      6
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RP                 0x000000c0
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RP              0x00000003
#define MSK_NX90_sdram_timing_ctrl_t_RAS                     0x00000700
#define SRT_NX90_sdram_timing_ctrl_t_RAS                     8
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RAS                0x00000700
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RAS             0x00000007
#define MSK_NX90_sdram_timing_ctrl_t_RFC                     0x0000f000
#define SRT_NX90_sdram_timing_ctrl_t_RFC                     12
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_RFC                0x0000f000
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_RFC             0x0000000f
#define MSK_NX90_sdram_timing_ctrl_t_REFI                    0x00030000
#define SRT_NX90_sdram_timing_ctrl_t_REFI                    16
#define DFLT_VAL_NX90_sdram_timing_ctrl_t_REFI               0x00010000
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_t_REFI            0x00000001
#define MSK_NX90_sdram_timing_ctrl_mem_sdclk_phase           0x00700000
#define SRT_NX90_sdram_timing_ctrl_mem_sdclk_phase           20
#define DFLT_VAL_NX90_sdram_timing_ctrl_mem_sdclk_phase      0x00000000
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_mem_sdclk_phase   0x00000000
#define MSK_NX90_sdram_timing_ctrl_data_sample_phase         0x07000000
#define SRT_NX90_sdram_timing_ctrl_data_sample_phase         24
#define DFLT_VAL_NX90_sdram_timing_ctrl_data_sample_phase    0x03000000
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_data_sample_phase 0x00000003
#define MSK_NX90_sdram_timing_ctrl_bypass_neg_delay          0x10000000
#define SRT_NX90_sdram_timing_ctrl_bypass_neg_delay          28
#define DFLT_VAL_NX90_sdram_timing_ctrl_bypass_neg_delay     0x00000000
#define DFLT_BF_VAL_NX90_sdram_timing_ctrl_bypass_neg_delay  0x00000000

/* all used bits of 'NX90_sdram_timing_ctrl': */
#define MSK_USED_BITS_NX90_sdram_timing_ctrl 0x1773f7f3

/* --------------------------------------------------------------------- */
/* Register sdram_mr */
/* => Mode Register for SDRAM device. */
/*    Changes can only be done, if the SDRAM controller is disabled (sdram_general_ctrl.ctrl_en == 0) */
/*    to avoid configuration problems. */
/*    The SDRAM Mode Registers of the used SDRAM device will be set after enabling the SDRAM controller in the 200us */
/*    SDRAM memory initialisation procedure. It is part of the SDRAM device and programmed by the LOAD MODE REGISTER command. */
/*    For details of SDRAM Mode Register view datasheet of used SDRAM device. */
/*    Please view description of 'ctrl_en' bit inside sdram_general_ctrl register for initializing-procedure of netX SDRAM controller. */
/*    Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sdram_mr            0x00000008
#define Adr_NX90_hif_sdram_ctrl_sdram_mr 0xFF401548
#define Adr_NX90_sdram_mr                0xFF401548
#define DFLT_VAL_NX90_sdram_mr           0x00000033

#define MSK_NX90_sdram_mr_MR         0x00003fff
#define SRT_NX90_sdram_mr_MR         0
#define DFLT_VAL_NX90_sdram_mr_MR    0x00000033
#define DFLT_BF_VAL_NX90_sdram_mr_MR 0x00000033

/* all used bits of 'NX90_sdram_mr': */
#define MSK_USED_BITS_NX90_sdram_mr 0x00003fff


/* ===================================================================== */

/* AREA extmem_priority_ctrl */
/* Area of hifmem_priority_ctrl */

/* ===================================================================== */

#define Addr_NX90_hifmem_priority_ctrl 0xFF401580

/* --------------------------------------------------------------------- */
/* Register extmem_prio_timslot_ctrl */
/* =>  Memory interface master timeslot priority control register. */
/*     Note: */
/*     Any master can access in one timeslot ((ts_accessrate_mX*ts_length_mX)/64) + 1 times (i.e. at */
/*     maximum (ts_accessrate_mX)/64 bandwidth on external memory bus, ts_accessrate_mX is programmed */
/*     by extmem_prio_accesstime_ctrl-register). */
/*     Priority control will watch data accesses on external memory data bus (SDRAM and non SDRAM), */
/*     including pauses on non SDRAM-accesses, not including control commands to SDRAM. */
/*     Any master requesting more accesses will be forced to wait for the remaining timeslot. */
/*    -------------------------------------------------------- */
/*     Programmable timeslots are: */
/*        ts_length =  0 :             64 systen clock cycles (i.e  0.64us at 100MHz) */
/*        ts_length =  1 :            128 systen clock cycles (i.e  1.28us at 100MHz) */
/*        ts_length =  2 :            256 systen clock cycles (i.e  2.56us at 100MHz) */
/*        ts_length =  3 :            512 systen clock cycles (i.e  5.12us at 100MHz) */
/*        ts_length =  4 :           1024 systen clock cycles (i.e 10.24us at 100MHz) */
/*        ts_length =  5 :           2048 systen clock cycles (i.e 20.48us at 100MHz) */
/*        ts_length =  6 :           4096 systen clock cycles (i.e 40.96us at 100MHz) */
/*        ts_length =  7 :           8192 systen clock cycles (i.e 81.92us at 100MHz) */
/*    -------------------------------------------------------- */
/*     For netX90 only SDRAM accesses are regarded for timeslot priority, SRAM/FLASH accesses are not. */
/*     Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extmem_prio_timslot_ctrl                  0x00000000
#define Adr_NX90_hifmem_priority_ctrl_extmem_prio_timslot_ctrl 0xFF401580
#define Adr_NX90_extmem_prio_timslot_ctrl                      0xFF401580
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl                 0x00077777

#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_d         0x00000007
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_d         0
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_d    0x00000007
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_d 0x00000007
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_i         0x00000070
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_i         4
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_i    0x00000070
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_com_i 0x00000007
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_d         0x00000700
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_d         8
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_d    0x00000700
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_d 0x00000007
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_i         0x00007000
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_i         12
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_i    0x00007000
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_arm_app_i 0x00000007
#define MSK_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi         0x00070000
#define SRT_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi         16
#define DFLT_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi    0x00070000
#define DFLT_BF_VAL_NX90_extmem_prio_timslot_ctrl_ts_length_shared_mi 0x00000007

/* all used bits of 'NX90_extmem_prio_timslot_ctrl': */
#define MSK_USED_BITS_NX90_extmem_prio_timslot_ctrl 0x00077777

/* --------------------------------------------------------------------- */
/* Register extmem_prio_accesstime_ctrl */
/* =>  Control Register for master channel accesses per timeslot on external meory interface. */
/*     For detailed priority controlling read note at extmem_prio_timslot_ctrl-register description. */
/*    -------------------------------------------------------- */
/*     For netX90 only SDRAM accesses are regarded for timeslot priority, SRAM/FLASH accesses are not. */
/*     Note: This register can be protected by the register MODULE_FIREWALL_CTRL.firewall_cfg_hifmemctrl. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_extmem_prio_accesstime_ctrl                  0x00000004
#define Adr_NX90_hifmem_priority_ctrl_extmem_prio_accesstime_ctrl 0xFF401584
#define Adr_NX90_extmem_prio_accesstime_ctrl                      0xFF401584
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl                 0x3fffffff

#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_d         0x0000003f
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_d         0
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_d    0x0000003f
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_d 0x0000003f
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_i         0x00000fc0
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_i         6
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_i    0x00000fc0
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_com_i 0x0000003f
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_d         0x0003f000
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_d         12
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_d    0x0003f000
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_d 0x0000003f
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_i         0x00fc0000
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_i         18
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_i    0x00fc0000
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_arm_app_i 0x0000003f
#define MSK_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi         0x3f000000
#define SRT_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi         24
#define DFLT_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi    0x3f000000
#define DFLT_BF_VAL_NX90_extmem_prio_accesstime_ctrl_ts_accessrate_shared_mi 0x0000003f

/* all used bits of 'NX90_extmem_prio_accesstime_ctrl': */
#define MSK_USED_BITS_NX90_extmem_prio_accesstime_ctrl 0x3fffffff


/* ===================================================================== */

/* AREA sqi */
/* Area of sqi, sqi0_app, sqi1_app */

/* ===================================================================== */

#define Addr_NX90_sqi      0xFF401640
#define Addr_NX90_sqi0_app 0xFF801180
#define Addr_NX90_sqi1_app 0xFF8011C0

/* --------------------------------------------------------------------- */
/* Register sqi_cr0 */
/* => SQI control register 0 */
/*    This register is compatible with the netX50 and netX10 SPI module, but some additional settings are possible. The SQI module \ */
/*    provides master function only. Slave settings are omitted. The SQI module does not support the compatible mode for netX100. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_cr0      0x00000000
#define Adr_NX90_sqi_sqi_cr0      0xFF401640
#define Adr_NX90_sqi0_app_sqi_cr0 0xFF801180
#define Adr_NX90_sqi1_app_sqi_cr0 0xFF8011C0
#define DFLT_VAL_NX90_sqi_cr0     0x00080007

#define MSK_NX90_sqi_cr0_datasize           0x0000000f
#define SRT_NX90_sqi_cr0_datasize           0
#define DFLT_VAL_NX90_sqi_cr0_datasize      0x00000007
#define DFLT_BF_VAL_NX90_sqi_cr0_datasize   0x00000007
#define MSK_NX90_sqi_cr0_sck_pol            0x00000040
#define SRT_NX90_sqi_cr0_sck_pol            6
#define DFLT_VAL_NX90_sqi_cr0_sck_pol       0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_pol    0x00000000
#define MSK_NX90_sqi_cr0_sck_phase          0x00000080
#define SRT_NX90_sqi_cr0_sck_phase          7
#define DFLT_VAL_NX90_sqi_cr0_sck_phase     0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_phase  0x00000000
#define MSK_NX90_sqi_cr0_sck_muladd         0x000fff00
#define SRT_NX90_sqi_cr0_sck_muladd         8
#define DFLT_VAL_NX90_sqi_cr0_sck_muladd    0x00080000
#define DFLT_BF_VAL_NX90_sqi_cr0_sck_muladd 0x00000800
#define MSK_NX90_sqi_cr0_sio_cfg            0x00c00000
#define SRT_NX90_sqi_cr0_sio_cfg            22
#define DFLT_VAL_NX90_sqi_cr0_sio_cfg       0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr0_sio_cfg    0x00000000
#define MSK_NX90_sqi_cr0_filter_in          0x08000000
#define SRT_NX90_sqi_cr0_filter_in          27
#define DFLT_VAL_NX90_sqi_cr0_filter_in     0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr0_filter_in  0x00000000

/* all used bits of 'NX90_sqi_cr0': */
#define MSK_USED_BITS_NX90_sqi_cr0 0x08cfffcf

/* --------------------------------------------------------------------- */
/* Register sqi_cr1 */
/* => SQI control register 1 */
/*    This register is compatible with the netX50 and netX10 SPI module, but some additional settings are possible. The SQI module \ */
/*    provides master function only. Slave settings are omitted. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_cr1      0x00000004
#define Adr_NX90_sqi_sqi_cr1      0xFF401644
#define Adr_NX90_sqi0_app_sqi_cr1 0xFF801184
#define Adr_NX90_sqi1_app_sqi_cr1 0xFF8011C4
#define DFLT_VAL_NX90_sqi_cr1     0x08080000

#define MSK_NX90_sqi_cr1_sqi_en                 0x00000002
#define SRT_NX90_sqi_cr1_sqi_en                 1
#define DFLT_VAL_NX90_sqi_cr1_sqi_en            0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_sqi_en         0x00000000
#define MSK_NX90_sqi_cr1_fss                    0x00000700
#define SRT_NX90_sqi_cr1_fss                    8
#define DFLT_VAL_NX90_sqi_cr1_fss               0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_fss            0x00000000
#define MSK_NX90_sqi_cr1_fss_static             0x00000800
#define SRT_NX90_sqi_cr1_fss_static             11
#define DFLT_VAL_NX90_sqi_cr1_fss_static        0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_fss_static     0x00000000
#define MSK_NX90_sqi_cr1_spi_trans_ctrl         0x00001000
#define SRT_NX90_sqi_cr1_spi_trans_ctrl         12
#define DFLT_VAL_NX90_sqi_cr1_spi_trans_ctrl    0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_spi_trans_ctrl 0x00000000
#define MSK_NX90_sqi_cr1_tx_fifo_wm             0x000f0000
#define SRT_NX90_sqi_cr1_tx_fifo_wm             16
#define DFLT_VAL_NX90_sqi_cr1_tx_fifo_wm        0x00080000
#define DFLT_BF_VAL_NX90_sqi_cr1_tx_fifo_wm     0x00000008
#define MSK_NX90_sqi_cr1_tx_fifo_clr            0x00100000
#define SRT_NX90_sqi_cr1_tx_fifo_clr            20
#define DFLT_VAL_NX90_sqi_cr1_tx_fifo_clr       0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_tx_fifo_clr    0x00000000
#define MSK_NX90_sqi_cr1_rx_fifo_wm             0x0f000000
#define SRT_NX90_sqi_cr1_rx_fifo_wm             24
#define DFLT_VAL_NX90_sqi_cr1_rx_fifo_wm        0x08000000
#define DFLT_BF_VAL_NX90_sqi_cr1_rx_fifo_wm     0x00000008
#define MSK_NX90_sqi_cr1_rx_fifo_clr            0x10000000
#define SRT_NX90_sqi_cr1_rx_fifo_clr            28
#define DFLT_VAL_NX90_sqi_cr1_rx_fifo_clr       0x00000000
#define DFLT_BF_VAL_NX90_sqi_cr1_rx_fifo_clr    0x00000000

/* all used bits of 'NX90_sqi_cr1': */
#define MSK_USED_BITS_NX90_sqi_cr1 0x1f1f1f02

/* --------------------------------------------------------------------- */
/* Register sqi_dr */
/* => SQI data register (DR) */
/*    Read access: Received data word is delivered from receive FIFO. */
/*    Write access: Data word to be sent is written to send FIFO. */
/*    Receive and transmit FIFO both have a depth of 16 words (standard SPI mode). The SQI mode combines both FIFOs, i.e. 64 bytes are \ */
/*    available. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_dr      0x00000008
#define Adr_NX90_sqi_sqi_dr      0xFF401648
#define Adr_NX90_sqi0_app_sqi_dr 0xFF801188
#define Adr_NX90_sqi1_app_sqi_dr 0xFF8011C8
#define DFLT_VAL_NX90_sqi_dr     0x00000000

#define MSK_NX90_sqi_dr_data         0xffffffff
#define SRT_NX90_sqi_dr_data         0
#define DFLT_VAL_NX90_sqi_dr_data    0x00000000
#define DFLT_BF_VAL_NX90_sqi_dr_data 0x00000000

/* all used bits of 'NX90_sqi_dr': */
#define MSK_USED_BITS_NX90_sqi_dr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register sqi_sr */
/* => Read-only SQI status register */
/*    Shows the current status of the SQI interface. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_sr      0x0000000C
#define Adr_NX90_sqi_sqi_sr      0xFF40164C
#define Adr_NX90_sqi0_app_sqi_sr 0xFF80118C
#define Adr_NX90_sqi1_app_sqi_sr 0xFF8011CC

#define MSK_NX90_sqi_sr_tx_fifo_empty       0x00000001
#define SRT_NX90_sqi_sr_tx_fifo_empty       0
#define MSK_NX90_sqi_sr_tx_fifo_not_full    0x00000002
#define SRT_NX90_sqi_sr_tx_fifo_not_full    1
#define MSK_NX90_sqi_sr_rx_fifo_not_empty   0x00000004
#define SRT_NX90_sqi_sr_rx_fifo_not_empty   2
#define MSK_NX90_sqi_sr_rx_fifo_full        0x00000008
#define SRT_NX90_sqi_sr_rx_fifo_full        3
#define MSK_NX90_sqi_sr_busy                0x00000010
#define SRT_NX90_sqi_sr_busy                4
#define MSK_NX90_sqi_sr_sqirom_timeout_err  0x00002000
#define SRT_NX90_sqi_sr_sqirom_timeout_err  13
#define MSK_NX90_sqi_sr_sqirom_write_err    0x00004000
#define SRT_NX90_sqi_sr_sqirom_write_err    14
#define MSK_NX90_sqi_sr_sqirom_disabled_err 0x00008000
#define SRT_NX90_sqi_sr_sqirom_disabled_err 15
#define MSK_NX90_sqi_sr_tx_fifo_level       0x001f0000
#define SRT_NX90_sqi_sr_tx_fifo_level       16
#define MSK_NX90_sqi_sr_tx_fifo_err_ovfl    0x00400000
#define SRT_NX90_sqi_sr_tx_fifo_err_ovfl    22
#define MSK_NX90_sqi_sr_tx_fifo_err_undr    0x00800000
#define SRT_NX90_sqi_sr_tx_fifo_err_undr    23
#define MSK_NX90_sqi_sr_rx_fifo_level       0x1f000000
#define SRT_NX90_sqi_sr_rx_fifo_level       24
#define MSK_NX90_sqi_sr_rx_fifo_err_ovfl    0x40000000
#define SRT_NX90_sqi_sr_rx_fifo_err_ovfl    30
#define MSK_NX90_sqi_sr_rx_fifo_err_undr    0x80000000
#define SRT_NX90_sqi_sr_rx_fifo_err_undr    31

/* all used bits of 'NX90_sqi_sr': */
#define MSK_USED_BITS_NX90_sqi_sr 0xdfdfe01f

/* --------------------------------------------------------------------- */
/* Register sqi_tcr */
/* => SQI transfer control */
/*    This register must not be changed during a transfer (bit 'busy' of register 'sqi_sr' is '1') to avoid corrupted transfers causing \ */
/*    damage to the hardware. */
/*    Module address offset 0x10 is reserved in the netX10/50 SPI module. Thus, no compatibility problems will result from using this \ */
/*    address for extended transfer control features. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_tcr      0x00000010
#define Adr_NX90_sqi_sqi_tcr      0xFF401650
#define Adr_NX90_sqi0_app_sqi_tcr 0xFF801190
#define Adr_NX90_sqi1_app_sqi_tcr 0xFF8011D0
#define DFLT_VAL_NX90_sqi_tcr     0x1c000000

#define MSK_NX90_sqi_tcr_transfer_size          0x0007ffff
#define SRT_NX90_sqi_tcr_transfer_size          0
#define DFLT_VAL_NX90_sqi_tcr_transfer_size     0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_transfer_size  0x00000000
#define MSK_NX90_sqi_tcr_tx_out                 0x00200000
#define SRT_NX90_sqi_tcr_tx_out                 21
#define DFLT_VAL_NX90_sqi_tcr_tx_out            0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_tx_out         0x00000000
#define MSK_NX90_sqi_tcr_tx_oe                  0x00400000
#define SRT_NX90_sqi_tcr_tx_oe                  22
#define DFLT_VAL_NX90_sqi_tcr_tx_oe             0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_tx_oe          0x00000000
#define MSK_NX90_sqi_tcr_start_transfer         0x00800000
#define SRT_NX90_sqi_tcr_start_transfer         23
#define DFLT_VAL_NX90_sqi_tcr_start_transfer    0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_start_transfer 0x00000000
#define MSK_NX90_sqi_tcr_mode                   0x03000000
#define SRT_NX90_sqi_tcr_mode                   24
#define DFLT_VAL_NX90_sqi_tcr_mode              0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_mode           0x00000000
#define MSK_NX90_sqi_tcr_duplex                 0x0c000000
#define SRT_NX90_sqi_tcr_duplex                 26
#define DFLT_VAL_NX90_sqi_tcr_duplex            0x0c000000
#define DFLT_BF_VAL_NX90_sqi_tcr_duplex         0x00000003
#define MSK_NX90_sqi_tcr_ms_bit_first           0x10000000
#define SRT_NX90_sqi_tcr_ms_bit_first           28
#define DFLT_VAL_NX90_sqi_tcr_ms_bit_first      0x10000000
#define DFLT_BF_VAL_NX90_sqi_tcr_ms_bit_first   0x00000001
#define MSK_NX90_sqi_tcr_ms_byte_first          0x20000000
#define SRT_NX90_sqi_tcr_ms_byte_first          29
#define DFLT_VAL_NX90_sqi_tcr_ms_byte_first     0x00000000
#define DFLT_BF_VAL_NX90_sqi_tcr_ms_byte_first  0x00000000

/* all used bits of 'NX90_sqi_tcr': */
#define MSK_USED_BITS_NX90_sqi_tcr 0x3fe7ffff

/* --------------------------------------------------------------------- */
/* Register sqi_irq_mask */
/* => SQI interrupt mask register: */
/*    IRQ mask is an AND-mask: Only raw interrupts with mask bit set can generate a module IRQ to CPU. \ */
/*    For detailed IRQ behavior and function, see register 'sqi_irq_raw'. */
/*    The functionality of this register is similar to that of the corresponding SPI register spi_imsc. \ */
/*    In contrast to this register, setting bits in spi_imsc also clears the corresponding raw interrupts. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_mask      0x00000014
#define Adr_NX90_sqi_sqi_irq_mask      0xFF401654
#define Adr_NX90_sqi0_app_sqi_irq_mask 0xFF801194
#define Adr_NX90_sqi1_app_sqi_irq_mask 0xFF8011D4
#define DFLT_VAL_NX90_sqi_irq_mask     0x00000000

#define MSK_NX90_sqi_irq_mask_RORIM                0x00000001
#define SRT_NX90_sqi_irq_mask_RORIM                0
#define DFLT_VAL_NX90_sqi_irq_mask_RORIM           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RORIM        0x00000000
#define MSK_NX90_sqi_irq_mask_RTIM                 0x00000002
#define SRT_NX90_sqi_irq_mask_RTIM                 1
#define DFLT_VAL_NX90_sqi_irq_mask_RTIM            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RTIM         0x00000000
#define MSK_NX90_sqi_irq_mask_RXIM                 0x00000004
#define SRT_NX90_sqi_irq_mask_RXIM                 2
#define DFLT_VAL_NX90_sqi_irq_mask_RXIM            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_RXIM         0x00000000
#define MSK_NX90_sqi_irq_mask_TXIM                 0x00000008
#define SRT_NX90_sqi_irq_mask_TXIM                 3
#define DFLT_VAL_NX90_sqi_irq_mask_TXIM            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_TXIM         0x00000000
#define MSK_NX90_sqi_irq_mask_rxneim               0x00000010
#define SRT_NX90_sqi_irq_mask_rxneim               4
#define DFLT_VAL_NX90_sqi_irq_mask_rxneim          0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_rxneim       0x00000000
#define MSK_NX90_sqi_irq_mask_rxfim                0x00000020
#define SRT_NX90_sqi_irq_mask_rxfim                5
#define DFLT_VAL_NX90_sqi_irq_mask_rxfim           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_rxfim        0x00000000
#define MSK_NX90_sqi_irq_mask_txeim                0x00000040
#define SRT_NX90_sqi_irq_mask_txeim                6
#define DFLT_VAL_NX90_sqi_irq_mask_txeim           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_txeim        0x00000000
#define MSK_NX90_sqi_irq_mask_trans_end            0x00000080
#define SRT_NX90_sqi_irq_mask_trans_end            7
#define DFLT_VAL_NX90_sqi_irq_mask_trans_end       0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_trans_end    0x00000000
#define MSK_NX90_sqi_irq_mask_sqirom_error         0x00000100
#define SRT_NX90_sqi_irq_mask_sqirom_error         8
#define DFLT_VAL_NX90_sqi_irq_mask_sqirom_error    0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_mask_sqirom_error 0x00000000

/* all used bits of 'NX90_sqi_irq_mask': */
#define MSK_USED_BITS_NX90_sqi_irq_mask 0x000001ff

/* --------------------------------------------------------------------- */
/* Register sqi_irq_raw */
/* => SQI interrupt state before masking register (raw interrupt). */
/*    Writing a "1" to a bit clears this interrupt. */
/*    IRQ flags can also be cleared by using 'sqi_irq_clear' for SPI module compatibility. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_raw      0x00000018
#define Adr_NX90_sqi_sqi_irq_raw      0xFF401658
#define Adr_NX90_sqi0_app_sqi_irq_raw 0xFF801198
#define Adr_NX90_sqi1_app_sqi_irq_raw 0xFF8011D8
#define DFLT_VAL_NX90_sqi_irq_raw     0x00000008

#define MSK_NX90_sqi_irq_raw_RORRIS               0x00000001
#define SRT_NX90_sqi_irq_raw_RORRIS               0
#define DFLT_VAL_NX90_sqi_irq_raw_RORRIS          0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_RORRIS       0x00000000
#define MSK_NX90_sqi_irq_raw_RTRIS                0x00000002
#define SRT_NX90_sqi_irq_raw_RTRIS                1
#define DFLT_VAL_NX90_sqi_irq_raw_RTRIS           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_RTRIS        0x00000000
#define MSK_NX90_sqi_irq_raw_RXRIS                0x00000004
#define SRT_NX90_sqi_irq_raw_RXRIS                2
#define DFLT_VAL_NX90_sqi_irq_raw_RXRIS           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_RXRIS        0x00000000
#define MSK_NX90_sqi_irq_raw_TXRIS                0x00000008
#define SRT_NX90_sqi_irq_raw_TXRIS                3
#define DFLT_VAL_NX90_sqi_irq_raw_TXRIS           0x00000008
#define DFLT_BF_VAL_NX90_sqi_irq_raw_TXRIS        0x00000001
#define MSK_NX90_sqi_irq_raw_rxneris              0x00000010
#define SRT_NX90_sqi_irq_raw_rxneris              4
#define DFLT_VAL_NX90_sqi_irq_raw_rxneris         0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_rxneris      0x00000000
#define MSK_NX90_sqi_irq_raw_rxfris               0x00000020
#define SRT_NX90_sqi_irq_raw_rxfris               5
#define DFLT_VAL_NX90_sqi_irq_raw_rxfris          0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_rxfris       0x00000000
#define MSK_NX90_sqi_irq_raw_txeris               0x00000040
#define SRT_NX90_sqi_irq_raw_txeris               6
#define DFLT_VAL_NX90_sqi_irq_raw_txeris          0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_txeris       0x00000000
#define MSK_NX90_sqi_irq_raw_trans_end            0x00000080
#define SRT_NX90_sqi_irq_raw_trans_end            7
#define DFLT_VAL_NX90_sqi_irq_raw_trans_end       0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_trans_end    0x00000000
#define MSK_NX90_sqi_irq_raw_sqirom_error         0x00000100
#define SRT_NX90_sqi_irq_raw_sqirom_error         8
#define DFLT_VAL_NX90_sqi_irq_raw_sqirom_error    0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_raw_sqirom_error 0x00000000

/* all used bits of 'NX90_sqi_irq_raw': */
#define MSK_USED_BITS_NX90_sqi_irq_raw 0x000001ff

/* --------------------------------------------------------------------- */
/* Register sqi_irq_masked */
/* => SQI masked interrupt status register */
/*    For detailed IRQ behavior and function, see register 'sqi_irq_raw'. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_masked      0x0000001C
#define Adr_NX90_sqi_sqi_irq_masked      0xFF40165C
#define Adr_NX90_sqi0_app_sqi_irq_masked 0xFF80119C
#define Adr_NX90_sqi1_app_sqi_irq_masked 0xFF8011DC

#define MSK_NX90_sqi_irq_masked_RORMIS       0x00000001
#define SRT_NX90_sqi_irq_masked_RORMIS       0
#define MSK_NX90_sqi_irq_masked_RTMIS        0x00000002
#define SRT_NX90_sqi_irq_masked_RTMIS        1
#define MSK_NX90_sqi_irq_masked_RXMIS        0x00000004
#define SRT_NX90_sqi_irq_masked_RXMIS        2
#define MSK_NX90_sqi_irq_masked_TXMIS        0x00000008
#define SRT_NX90_sqi_irq_masked_TXMIS        3
#define MSK_NX90_sqi_irq_masked_rxnemis      0x00000010
#define SRT_NX90_sqi_irq_masked_rxnemis      4
#define MSK_NX90_sqi_irq_masked_rxfmis       0x00000020
#define SRT_NX90_sqi_irq_masked_rxfmis       5
#define MSK_NX90_sqi_irq_masked_txemis       0x00000040
#define SRT_NX90_sqi_irq_masked_txemis       6
#define MSK_NX90_sqi_irq_masked_trans_end    0x00000080
#define SRT_NX90_sqi_irq_masked_trans_end    7
#define MSK_NX90_sqi_irq_masked_sqirom_error 0x00000100
#define SRT_NX90_sqi_irq_masked_sqirom_error 8

/* all used bits of 'NX90_sqi_irq_masked': */
#define MSK_USED_BITS_NX90_sqi_irq_masked 0x000001ff

/* --------------------------------------------------------------------- */
/* Register sqi_irq_clear */
/* => SQI interrupt clear register (for compatibility with netX10/50 SPI module). */
/*    This register is always '0' on read. */
/*    IRQ flags can also be cleared by writing register 'sqi_irq_raw'. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_irq_clear      0x00000020
#define Adr_NX90_sqi_sqi_irq_clear      0xFF401660
#define Adr_NX90_sqi0_app_sqi_irq_clear 0xFF8011A0
#define Adr_NX90_sqi1_app_sqi_irq_clear 0xFF8011E0
#define DFLT_VAL_NX90_sqi_irq_clear     0x00000000

#define MSK_NX90_sqi_irq_clear_RORIC                0x00000001
#define SRT_NX90_sqi_irq_clear_RORIC                0
#define DFLT_VAL_NX90_sqi_irq_clear_RORIC           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RORIC        0x00000000
#define MSK_NX90_sqi_irq_clear_RTIC                 0x00000002
#define SRT_NX90_sqi_irq_clear_RTIC                 1
#define DFLT_VAL_NX90_sqi_irq_clear_RTIC            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RTIC         0x00000000
#define MSK_NX90_sqi_irq_clear_RXIC                 0x00000004
#define SRT_NX90_sqi_irq_clear_RXIC                 2
#define DFLT_VAL_NX90_sqi_irq_clear_RXIC            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_RXIC         0x00000000
#define MSK_NX90_sqi_irq_clear_TXIC                 0x00000008
#define SRT_NX90_sqi_irq_clear_TXIC                 3
#define DFLT_VAL_NX90_sqi_irq_clear_TXIC            0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_TXIC         0x00000000
#define MSK_NX90_sqi_irq_clear_rxneic               0x00000010
#define SRT_NX90_sqi_irq_clear_rxneic               4
#define DFLT_VAL_NX90_sqi_irq_clear_rxneic          0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_rxneic       0x00000000
#define MSK_NX90_sqi_irq_clear_rxfic                0x00000020
#define SRT_NX90_sqi_irq_clear_rxfic                5
#define DFLT_VAL_NX90_sqi_irq_clear_rxfic           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_rxfic        0x00000000
#define MSK_NX90_sqi_irq_clear_txeic                0x00000040
#define SRT_NX90_sqi_irq_clear_txeic                6
#define DFLT_VAL_NX90_sqi_irq_clear_txeic           0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_txeic        0x00000000
#define MSK_NX90_sqi_irq_clear_trans_end            0x00000080
#define SRT_NX90_sqi_irq_clear_trans_end            7
#define DFLT_VAL_NX90_sqi_irq_clear_trans_end       0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_trans_end    0x00000000
#define MSK_NX90_sqi_irq_clear_sqirom_error         0x00000100
#define SRT_NX90_sqi_irq_clear_sqirom_error         8
#define DFLT_VAL_NX90_sqi_irq_clear_sqirom_error    0x00000000
#define DFLT_BF_VAL_NX90_sqi_irq_clear_sqirom_error 0x00000000

/* all used bits of 'NX90_sqi_irq_clear': */
#define MSK_USED_BITS_NX90_sqi_irq_clear 0x000001ff

/* --------------------------------------------------------------------- */
/* Register sqi_dmacr */
/* => SQI DMA control register */
/*    This module generates normal transfer requests only (i.e. no last requests will be issued). In consequence, \ */
/*    you can use DMAC-controlled transfers only (no peripheral-controlled mode). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_dmacr      0x00000024
#define Adr_NX90_sqi_sqi_dmacr      0xFF401664
#define Adr_NX90_sqi0_app_sqi_dmacr 0xFF8011A4
#define Adr_NX90_sqi1_app_sqi_dmacr 0xFF8011E4
#define DFLT_VAL_NX90_sqi_dmacr     0x00000000

#define MSK_NX90_sqi_dmacr_rx_dma_en         0x00000001
#define SRT_NX90_sqi_dmacr_rx_dma_en         0
#define DFLT_VAL_NX90_sqi_dmacr_rx_dma_en    0x00000000
#define DFLT_BF_VAL_NX90_sqi_dmacr_rx_dma_en 0x00000000
#define MSK_NX90_sqi_dmacr_tx_dma_en         0x00000002
#define SRT_NX90_sqi_dmacr_tx_dma_en         1
#define DFLT_VAL_NX90_sqi_dmacr_tx_dma_en    0x00000000
#define DFLT_BF_VAL_NX90_sqi_dmacr_tx_dma_en 0x00000000

/* all used bits of 'NX90_sqi_dmacr': */
#define MSK_USED_BITS_NX90_sqi_dmacr 0x00000003

/* --------------------------------------------------------------------- */
/* Register sqi_pio_out */
/* => SQI PIO output level control register */
/*    Bits 'sio_cfg' of register 'sqi_cr0' control the IO PIO mode. */
/*    Bit 'sqi_en' of register 'sqi_cr0' has to be set to drive the SQI IOs in the PIO mode. */
/*    PIO input signal states are never filtered (bit 'filter_in' of register 'sqi_cr0'). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_out      0x00000028
#define Adr_NX90_sqi_sqi_pio_out      0xFF401668
#define Adr_NX90_sqi0_app_sqi_pio_out 0xFF8011A8
#define Adr_NX90_sqi1_app_sqi_pio_out 0xFF8011E8
#define DFLT_VAL_NX90_sqi_pio_out     0x0000000e

#define MSK_NX90_sqi_pio_out_sclk         0x00000001
#define SRT_NX90_sqi_pio_out_sclk         0
#define DFLT_VAL_NX90_sqi_pio_out_sclk    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_out_sclk 0x00000000
#define MSK_NX90_sqi_pio_out_csn          0x0000000e
#define SRT_NX90_sqi_pio_out_csn          1
#define DFLT_VAL_NX90_sqi_pio_out_csn     0x0000000e
#define DFLT_BF_VAL_NX90_sqi_pio_out_csn  0x00000007
#define MSK_NX90_sqi_pio_out_mosi         0x00000010
#define SRT_NX90_sqi_pio_out_mosi         4
#define DFLT_VAL_NX90_sqi_pio_out_mosi    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_out_mosi 0x00000000
#define MSK_NX90_sqi_pio_out_miso         0x00000020
#define SRT_NX90_sqi_pio_out_miso         5
#define DFLT_VAL_NX90_sqi_pio_out_miso    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_out_miso 0x00000000
#define MSK_NX90_sqi_pio_out_sio2         0x00000040
#define SRT_NX90_sqi_pio_out_sio2         6
#define DFLT_VAL_NX90_sqi_pio_out_sio2    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_out_sio2 0x00000000
#define MSK_NX90_sqi_pio_out_sio3         0x00000080
#define SRT_NX90_sqi_pio_out_sio3         7
#define DFLT_VAL_NX90_sqi_pio_out_sio3    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_out_sio3 0x00000000

/* all used bits of 'NX90_sqi_pio_out': */
#define MSK_USED_BITS_NX90_sqi_pio_out 0x000000ff

/* --------------------------------------------------------------------- */
/* Register sqi_pio_oe */
/* => SQI PIO output enable control register */
/*    Bits 'sio_cfg' of register 'sqi_cr0' control the IO PIO mode. */
/*    Bit 'sqi_en' of register 'sqi_cr0' has to be set to drive the SQI IOs in the PIO mode. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_oe      0x00000030
#define Adr_NX90_sqi_sqi_pio_oe      0xFF401670
#define Adr_NX90_sqi0_app_sqi_pio_oe 0xFF8011B0
#define Adr_NX90_sqi1_app_sqi_pio_oe 0xFF8011F0
#define DFLT_VAL_NX90_sqi_pio_oe     0x00000000

#define MSK_NX90_sqi_pio_oe_sclk         0x00000001
#define SRT_NX90_sqi_pio_oe_sclk         0
#define DFLT_VAL_NX90_sqi_pio_oe_sclk    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sclk 0x00000000
#define MSK_NX90_sqi_pio_oe_csn          0x0000000e
#define SRT_NX90_sqi_pio_oe_csn          1
#define DFLT_VAL_NX90_sqi_pio_oe_csn     0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_csn  0x00000000
#define MSK_NX90_sqi_pio_oe_mosi         0x00000010
#define SRT_NX90_sqi_pio_oe_mosi         4
#define DFLT_VAL_NX90_sqi_pio_oe_mosi    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_mosi 0x00000000
#define MSK_NX90_sqi_pio_oe_miso         0x00000020
#define SRT_NX90_sqi_pio_oe_miso         5
#define DFLT_VAL_NX90_sqi_pio_oe_miso    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_miso 0x00000000
#define MSK_NX90_sqi_pio_oe_sio2         0x00000040
#define SRT_NX90_sqi_pio_oe_sio2         6
#define DFLT_VAL_NX90_sqi_pio_oe_sio2    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sio2 0x00000000
#define MSK_NX90_sqi_pio_oe_sio3         0x00000080
#define SRT_NX90_sqi_pio_oe_sio3         7
#define DFLT_VAL_NX90_sqi_pio_oe_sio3    0x00000000
#define DFLT_BF_VAL_NX90_sqi_pio_oe_sio3 0x00000000

/* all used bits of 'NX90_sqi_pio_oe': */
#define MSK_USED_BITS_NX90_sqi_pio_oe 0x000000ff

/* --------------------------------------------------------------------- */
/* Register sqi_pio_in */
/* => SQI PIO input status register */
/*    Bits 'sio_cfg' of register 'sqi_cr0' control the IO PIO mode. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_pio_in      0x00000034
#define Adr_NX90_sqi_sqi_pio_in      0xFF401674
#define Adr_NX90_sqi0_app_sqi_pio_in 0xFF8011B4
#define Adr_NX90_sqi1_app_sqi_pio_in 0xFF8011F4

#define MSK_NX90_sqi_pio_in_sclk 0x00000001
#define SRT_NX90_sqi_pio_in_sclk 0
#define MSK_NX90_sqi_pio_in_csn  0x0000000e
#define SRT_NX90_sqi_pio_in_csn  1
#define MSK_NX90_sqi_pio_in_mosi 0x00000010
#define SRT_NX90_sqi_pio_in_mosi 4
#define MSK_NX90_sqi_pio_in_miso 0x00000020
#define SRT_NX90_sqi_pio_in_miso 5
#define MSK_NX90_sqi_pio_in_sio2 0x00000040
#define SRT_NX90_sqi_pio_in_sio2 6
#define MSK_NX90_sqi_pio_in_sio3 0x00000080
#define SRT_NX90_sqi_pio_in_sio3 7

/* all used bits of 'NX90_sqi_pio_in': */
#define MSK_USED_BITS_NX90_sqi_pio_in 0x000000ff

/* --------------------------------------------------------------------- */
/* Register sqi_sqirom_cfg */
/* => SQIROM mode configuration */
/*    This mode supports the 'eXecute in Place' (XiP) feature of SQI flash chips. This register serves to configure the position of command \ */
/*    byte and address nibbles as well as the number of address nibbles and dummy cycles. To support a wide range of frequencies for the \ */
/*    serial clock output, you can also change the clock divider. */
/*    Notes: */
/*    1. Before enabling this mode, make sure that the SQI flash chip is in 4-bit command mode, otherwise the module is not able to fetch data \ */
/*    from the flash. */
/*    2. When enabled, the SQI module is completely blocked, i.e. other SQI or SPI transactions are not possible. */
/*    3. The chip select signal of the flash must be connected to sqi_cs0. */
/*    4. SQIROM transfers can be generated in SPI mode 0 or 3, which can be selected in register 'sqi_cr0'. DO NOT select mode 1 and 2 \ */
/*    for SQIROM usage. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sqi_sqirom_cfg      0x00000038
#define Adr_NX90_sqi_sqi_sqirom_cfg      0xFF401678
#define Adr_NX90_sqi0_app_sqi_sqirom_cfg 0xFF8011B8
#define Adr_NX90_sqi1_app_sqi_sqirom_cfg 0xFF8011F8
#define DFLT_VAL_NX90_sqi_sqirom_cfg     0x02020004

#define MSK_NX90_sqi_sqirom_cfg_enable                  0x00000001
#define SRT_NX90_sqi_sqirom_cfg_enable                  0
#define DFLT_VAL_NX90_sqi_sqirom_cfg_enable             0x00000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_enable          0x00000000
#define MSK_NX90_sqi_sqirom_cfg_addr_before_cmd         0x00000002
#define SRT_NX90_sqi_sqirom_cfg_addr_before_cmd         1
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_before_cmd    0x00000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_before_cmd 0x00000000
#define MSK_NX90_sqi_sqirom_cfg_addr_nibbles            0x0000000c
#define SRT_NX90_sqi_sqirom_cfg_addr_nibbles            2
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_nibbles       0x00000004
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_nibbles    0x00000001
#define MSK_NX90_sqi_sqirom_cfg_addr_bits               0x00000070
#define SRT_NX90_sqi_sqirom_cfg_addr_bits               4
#define DFLT_VAL_NX90_sqi_sqirom_cfg_addr_bits          0x00000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_addr_bits       0x00000000
#define MSK_NX90_sqi_sqirom_cfg_cmd_byte                0x0000ff00
#define SRT_NX90_sqi_sqirom_cfg_cmd_byte                8
#define DFLT_VAL_NX90_sqi_sqirom_cfg_cmd_byte           0x00000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_cmd_byte        0x00000000
#define MSK_NX90_sqi_sqirom_cfg_dummy_cycles            0x000f0000
#define SRT_NX90_sqi_sqirom_cfg_dummy_cycles            16
#define DFLT_VAL_NX90_sqi_sqirom_cfg_dummy_cycles       0x00020000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_dummy_cycles    0x00000002
#define MSK_NX90_sqi_sqirom_cfg_t_csh                   0x00300000
#define SRT_NX90_sqi_sqirom_cfg_t_csh                   20
#define DFLT_VAL_NX90_sqi_sqirom_cfg_t_csh              0x00000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_t_csh           0x00000000
#define MSK_NX90_sqi_sqirom_cfg_clk_div_val             0xff000000
#define SRT_NX90_sqi_sqirom_cfg_clk_div_val             24
#define DFLT_VAL_NX90_sqi_sqirom_cfg_clk_div_val        0x02000000
#define DFLT_BF_VAL_NX90_sqi_sqirom_cfg_clk_div_val     0x00000002

/* all used bits of 'NX90_sqi_sqirom_cfg': */
#define MSK_USED_BITS_NX90_sqi_sqirom_cfg 0xff3fff7f


/* ===================================================================== */

/* AREA uart */
/* Area of uart, uart_app, uart_xpic_app */

/* ===================================================================== */

#define Addr_NX90_uart          0xFF401680
#define Addr_NX90_uart_app      0xFF801040
#define Addr_NX90_uart_xpic_app 0xFF900300

/* --------------------------------------------------------------------- */
/* Register uartdr */
/* => data read or written from the interface */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartdr           0x00000000
#define Adr_NX90_uart_uartdr          0xFF401680
#define Adr_NX90_uart_app_uartdr      0xFF801040
#define Adr_NX90_uart_xpic_app_uartdr 0xFF900300
#define DFLT_VAL_NX90_uartdr          0x00000000

#define MSK_NX90_uartdr_DATA         0x000000ff
#define SRT_NX90_uartdr_DATA         0
#define DFLT_VAL_NX90_uartdr_DATA    0x00000000
#define DFLT_BF_VAL_NX90_uartdr_DATA 0x00000000
#define MSK_NX90_uartdr_FE           0x00000100
#define SRT_NX90_uartdr_FE           8
#define DFLT_VAL_NX90_uartdr_FE      0x00000000
#define DFLT_BF_VAL_NX90_uartdr_FE   0x00000000
#define MSK_NX90_uartdr_PE           0x00000200
#define SRT_NX90_uartdr_PE           9
#define DFLT_VAL_NX90_uartdr_PE      0x00000000
#define DFLT_BF_VAL_NX90_uartdr_PE   0x00000000
#define MSK_NX90_uartdr_BE           0x00000400
#define SRT_NX90_uartdr_BE           10
#define DFLT_VAL_NX90_uartdr_BE      0x00000000
#define DFLT_BF_VAL_NX90_uartdr_BE   0x00000000

/* all used bits of 'NX90_uartdr': */
#define MSK_USED_BITS_NX90_uartdr 0x000007ff

/* --------------------------------------------------------------------- */
/* Register uartrsr */
/* => receive status register (read) / Error Clear Register (write) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrsr           0x00000004
#define Adr_NX90_uart_uartrsr          0xFF401684
#define Adr_NX90_uart_app_uartrsr      0xFF801044
#define Adr_NX90_uart_xpic_app_uartrsr 0xFF900304
#define DFLT_VAL_NX90_uartrsr          0x00000000

#define MSK_NX90_uartrsr_FE         0x00000001
#define SRT_NX90_uartrsr_FE         0
#define DFLT_VAL_NX90_uartrsr_FE    0x00000000
#define DFLT_BF_VAL_NX90_uartrsr_FE 0x00000000
#define MSK_NX90_uartrsr_PE         0x00000002
#define SRT_NX90_uartrsr_PE         1
#define DFLT_VAL_NX90_uartrsr_PE    0x00000000
#define DFLT_BF_VAL_NX90_uartrsr_PE 0x00000000
#define MSK_NX90_uartrsr_BE         0x00000004
#define SRT_NX90_uartrsr_BE         2
#define DFLT_VAL_NX90_uartrsr_BE    0x00000000
#define DFLT_BF_VAL_NX90_uartrsr_BE 0x00000000
#define MSK_NX90_uartrsr_OE         0x00000008
#define SRT_NX90_uartrsr_OE         3
#define DFLT_VAL_NX90_uartrsr_OE    0x00000000
#define DFLT_BF_VAL_NX90_uartrsr_OE 0x00000000

/* all used bits of 'NX90_uartrsr': */
#define MSK_USED_BITS_NX90_uartrsr 0x0000000f

/* --------------------------------------------------------------------- */
/* Register uartlcr_h */
/* => Line control Register, high byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_h           0x00000008
#define Adr_NX90_uart_uartlcr_h          0xFF401688
#define Adr_NX90_uart_app_uartlcr_h      0xFF801048
#define Adr_NX90_uart_xpic_app_uartlcr_h 0xFF900308
#define DFLT_VAL_NX90_uartlcr_h          0x00000000

#define MSK_NX90_uartlcr_h_BRK          0x00000001
#define SRT_NX90_uartlcr_h_BRK          0
#define DFLT_VAL_NX90_uartlcr_h_BRK     0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_BRK  0x00000000
#define MSK_NX90_uartlcr_h_PEN          0x00000002
#define SRT_NX90_uartlcr_h_PEN          1
#define DFLT_VAL_NX90_uartlcr_h_PEN     0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_PEN  0x00000000
#define MSK_NX90_uartlcr_h_EPS          0x00000004
#define SRT_NX90_uartlcr_h_EPS          2
#define DFLT_VAL_NX90_uartlcr_h_EPS     0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_EPS  0x00000000
#define MSK_NX90_uartlcr_h_STP2         0x00000008
#define SRT_NX90_uartlcr_h_STP2         3
#define DFLT_VAL_NX90_uartlcr_h_STP2    0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_STP2 0x00000000
#define MSK_NX90_uartlcr_h_FEN          0x00000010
#define SRT_NX90_uartlcr_h_FEN          4
#define DFLT_VAL_NX90_uartlcr_h_FEN     0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_FEN  0x00000000
#define MSK_NX90_uartlcr_h_WLEN         0x00000060
#define SRT_NX90_uartlcr_h_WLEN         5
#define DFLT_VAL_NX90_uartlcr_h_WLEN    0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_h_WLEN 0x00000000

/* all used bits of 'NX90_uartlcr_h': */
#define MSK_USED_BITS_NX90_uartlcr_h 0x0000007f

/* --------------------------------------------------------------------- */
/* Register uartlcr_m */
/* => Line control Register, middle byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_m           0x0000000C
#define Adr_NX90_uart_uartlcr_m          0xFF40168C
#define Adr_NX90_uart_app_uartlcr_m      0xFF80104C
#define Adr_NX90_uart_xpic_app_uartlcr_m 0xFF90030C
#define DFLT_VAL_NX90_uartlcr_m          0x00000000

#define MSK_NX90_uartlcr_m_BAUDDIVMS         0x000000ff
#define SRT_NX90_uartlcr_m_BAUDDIVMS         0
#define DFLT_VAL_NX90_uartlcr_m_BAUDDIVMS    0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_m_BAUDDIVMS 0x00000000

/* all used bits of 'NX90_uartlcr_m': */
#define MSK_USED_BITS_NX90_uartlcr_m 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartlcr_l */
/* => Line control Register, low byte */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartlcr_l           0x00000010
#define Adr_NX90_uart_uartlcr_l          0xFF401690
#define Adr_NX90_uart_app_uartlcr_l      0xFF801050
#define Adr_NX90_uart_xpic_app_uartlcr_l 0xFF900310
#define DFLT_VAL_NX90_uartlcr_l          0x00000000

#define MSK_NX90_uartlcr_l_BAUDDIVLS         0x000000ff
#define SRT_NX90_uartlcr_l_BAUDDIVLS         0
#define DFLT_VAL_NX90_uartlcr_l_BAUDDIVLS    0x00000000
#define DFLT_BF_VAL_NX90_uartlcr_l_BAUDDIVLS 0x00000000

/* all used bits of 'NX90_uartlcr_l': */
#define MSK_USED_BITS_NX90_uartlcr_l 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartcr */
/* => uart control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartcr           0x00000014
#define Adr_NX90_uart_uartcr          0xFF401694
#define Adr_NX90_uart_app_uartcr      0xFF801054
#define Adr_NX90_uart_xpic_app_uartcr 0xFF900314
#define DFLT_VAL_NX90_uartcr          0x00000000

#define MSK_NX90_uartcr_uartEN             0x00000001
#define SRT_NX90_uartcr_uartEN             0
#define DFLT_VAL_NX90_uartcr_uartEN        0x00000000
#define DFLT_BF_VAL_NX90_uartcr_uartEN     0x00000000
#define MSK_NX90_uartcr_SIREN              0x00000002
#define SRT_NX90_uartcr_SIREN              1
#define DFLT_VAL_NX90_uartcr_SIREN         0x00000000
#define DFLT_BF_VAL_NX90_uartcr_SIREN      0x00000000
#define MSK_NX90_uartcr_SIRLP              0x00000004
#define SRT_NX90_uartcr_SIRLP              2
#define DFLT_VAL_NX90_uartcr_SIRLP         0x00000000
#define DFLT_BF_VAL_NX90_uartcr_SIRLP      0x00000000
#define MSK_NX90_uartcr_MSIE               0x00000008
#define SRT_NX90_uartcr_MSIE               3
#define DFLT_VAL_NX90_uartcr_MSIE          0x00000000
#define DFLT_BF_VAL_NX90_uartcr_MSIE       0x00000000
#define MSK_NX90_uartcr_RIE                0x00000010
#define SRT_NX90_uartcr_RIE                4
#define DFLT_VAL_NX90_uartcr_RIE           0x00000000
#define DFLT_BF_VAL_NX90_uartcr_RIE        0x00000000
#define MSK_NX90_uartcr_TIE                0x00000020
#define SRT_NX90_uartcr_TIE                5
#define DFLT_VAL_NX90_uartcr_TIE           0x00000000
#define DFLT_BF_VAL_NX90_uartcr_TIE        0x00000000
#define MSK_NX90_uartcr_RTIE               0x00000040
#define SRT_NX90_uartcr_RTIE               6
#define DFLT_VAL_NX90_uartcr_RTIE          0x00000000
#define DFLT_BF_VAL_NX90_uartcr_RTIE       0x00000000
#define MSK_NX90_uartcr_LBE                0x00000080
#define SRT_NX90_uartcr_LBE                7
#define DFLT_VAL_NX90_uartcr_LBE           0x00000000
#define DFLT_BF_VAL_NX90_uartcr_LBE        0x00000000
#define MSK_NX90_uartcr_TX_RX_LOOP         0x00000100
#define SRT_NX90_uartcr_TX_RX_LOOP         8
#define DFLT_VAL_NX90_uartcr_TX_RX_LOOP    0x00000000
#define DFLT_BF_VAL_NX90_uartcr_TX_RX_LOOP 0x00000000

/* all used bits of 'NX90_uartcr': */
#define MSK_USED_BITS_NX90_uartcr 0x000001ff

/* --------------------------------------------------------------------- */
/* Register uartfr */
/* => uart Flag Register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartfr           0x00000018
#define Adr_NX90_uart_uartfr          0xFF401698
#define Adr_NX90_uart_app_uartfr      0xFF801058
#define Adr_NX90_uart_xpic_app_uartfr 0xFF900318

#define MSK_NX90_uartfr_CTS  0x00000001
#define SRT_NX90_uartfr_CTS  0
#define MSK_NX90_uartfr_DSR  0x00000002
#define SRT_NX90_uartfr_DSR  1
#define MSK_NX90_uartfr_DCD  0x00000004
#define SRT_NX90_uartfr_DCD  2
#define MSK_NX90_uartfr_BUSY 0x00000008
#define SRT_NX90_uartfr_BUSY 3
#define MSK_NX90_uartfr_RXFE 0x00000010
#define SRT_NX90_uartfr_RXFE 4
#define MSK_NX90_uartfr_TXFF 0x00000020
#define SRT_NX90_uartfr_TXFF 5
#define MSK_NX90_uartfr_RXFF 0x00000040
#define SRT_NX90_uartfr_RXFF 6
#define MSK_NX90_uartfr_TXFE 0x00000080
#define SRT_NX90_uartfr_TXFE 7

/* all used bits of 'NX90_uartfr': */
#define MSK_USED_BITS_NX90_uartfr 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartiir */
/* => Interrupt Identification (read) / interrupt clear (write) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartiir           0x0000001C
#define Adr_NX90_uart_uartiir          0xFF40169C
#define Adr_NX90_uart_app_uartiir      0xFF80105C
#define Adr_NX90_uart_xpic_app_uartiir 0xFF90031C
#define DFLT_VAL_NX90_uartiir          0x00000000

#define MSK_NX90_uartiir_MIS          0x00000001
#define SRT_NX90_uartiir_MIS          0
#define DFLT_VAL_NX90_uartiir_MIS     0x00000000
#define DFLT_BF_VAL_NX90_uartiir_MIS  0x00000000
#define MSK_NX90_uartiir_RIS          0x00000002
#define SRT_NX90_uartiir_RIS          1
#define DFLT_VAL_NX90_uartiir_RIS     0x00000000
#define DFLT_BF_VAL_NX90_uartiir_RIS  0x00000000
#define MSK_NX90_uartiir_TIS          0x00000004
#define SRT_NX90_uartiir_TIS          2
#define DFLT_VAL_NX90_uartiir_TIS     0x00000000
#define DFLT_BF_VAL_NX90_uartiir_TIS  0x00000000
#define MSK_NX90_uartiir_RTIS         0x00000008
#define SRT_NX90_uartiir_RTIS         3
#define DFLT_VAL_NX90_uartiir_RTIS    0x00000000
#define DFLT_BF_VAL_NX90_uartiir_RTIS 0x00000000

/* all used bits of 'NX90_uartiir': */
#define MSK_USED_BITS_NX90_uartiir 0x0000000f

/* --------------------------------------------------------------------- */
/* Register uartilpr */
/* => IrDA Low Power Counter Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartilpr           0x00000020
#define Adr_NX90_uart_uartilpr          0xFF4016A0
#define Adr_NX90_uart_app_uartilpr      0xFF801060
#define Adr_NX90_uart_xpic_app_uartilpr 0xFF900320
#define DFLT_VAL_NX90_uartilpr          0x00000000

#define MSK_NX90_uartilpr_ILPDVSR         0x000000ff
#define SRT_NX90_uartilpr_ILPDVSR         0
#define DFLT_VAL_NX90_uartilpr_ILPDVSR    0x00000000
#define DFLT_BF_VAL_NX90_uartilpr_ILPDVSR 0x00000000

/* all used bits of 'NX90_uartilpr': */
#define MSK_USED_BITS_NX90_uartilpr 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartrts */
/* => RTS Control Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrts           0x00000024
#define Adr_NX90_uart_uartrts          0xFF4016A4
#define Adr_NX90_uart_app_uartrts      0xFF801064
#define Adr_NX90_uart_xpic_app_uartrts 0xFF900324
#define DFLT_VAL_NX90_uartrts          0x00000000

#define MSK_NX90_uartrts_AUTO            0x00000001
#define SRT_NX90_uartrts_AUTO            0
#define DFLT_VAL_NX90_uartrts_AUTO       0x00000000
#define DFLT_BF_VAL_NX90_uartrts_AUTO    0x00000000
#define MSK_NX90_uartrts_RTS             0x00000002
#define SRT_NX90_uartrts_RTS             1
#define DFLT_VAL_NX90_uartrts_RTS        0x00000000
#define DFLT_BF_VAL_NX90_uartrts_RTS     0x00000000
#define MSK_NX90_uartrts_COUNT           0x00000004
#define SRT_NX90_uartrts_COUNT           2
#define DFLT_VAL_NX90_uartrts_COUNT      0x00000000
#define DFLT_BF_VAL_NX90_uartrts_COUNT   0x00000000
#define MSK_NX90_uartrts_MOD2            0x00000008
#define SRT_NX90_uartrts_MOD2            3
#define DFLT_VAL_NX90_uartrts_MOD2       0x00000000
#define DFLT_BF_VAL_NX90_uartrts_MOD2    0x00000000
#define MSK_NX90_uartrts_RTS_pol         0x00000010
#define SRT_NX90_uartrts_RTS_pol         4
#define DFLT_VAL_NX90_uartrts_RTS_pol    0x00000000
#define DFLT_BF_VAL_NX90_uartrts_RTS_pol 0x00000000
#define MSK_NX90_uartrts_CTS_ctr         0x00000020
#define SRT_NX90_uartrts_CTS_ctr         5
#define DFLT_VAL_NX90_uartrts_CTS_ctr    0x00000000
#define DFLT_BF_VAL_NX90_uartrts_CTS_ctr 0x00000000
#define MSK_NX90_uartrts_CTS_pol         0x00000040
#define SRT_NX90_uartrts_CTS_pol         6
#define DFLT_VAL_NX90_uartrts_CTS_pol    0x00000000
#define DFLT_BF_VAL_NX90_uartrts_CTS_pol 0x00000000
#define MSK_NX90_uartrts_STICK           0x00000080
#define SRT_NX90_uartrts_STICK           7
#define DFLT_VAL_NX90_uartrts_STICK      0x00000000
#define DFLT_BF_VAL_NX90_uartrts_STICK   0x00000000

/* all used bits of 'NX90_uartrts': */
#define MSK_USED_BITS_NX90_uartrts 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartforerun */
/* => RTS forerun cycles */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartforerun           0x00000028
#define Adr_NX90_uart_uartforerun          0xFF4016A8
#define Adr_NX90_uart_app_uartforerun      0xFF801068
#define Adr_NX90_uart_xpic_app_uartforerun 0xFF900328
#define DFLT_VAL_NX90_uartforerun          0x00000000

#define MSK_NX90_uartforerun_FORERUN         0x000000ff
#define SRT_NX90_uartforerun_FORERUN         0
#define DFLT_VAL_NX90_uartforerun_FORERUN    0x00000000
#define DFLT_BF_VAL_NX90_uartforerun_FORERUN 0x00000000

/* all used bits of 'NX90_uartforerun': */
#define MSK_USED_BITS_NX90_uartforerun 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uarttrail */
/* => RTS trail cycles */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uarttrail           0x0000002C
#define Adr_NX90_uart_uarttrail          0xFF4016AC
#define Adr_NX90_uart_app_uarttrail      0xFF80106C
#define Adr_NX90_uart_xpic_app_uarttrail 0xFF90032C
#define DFLT_VAL_NX90_uarttrail          0x00000000

#define MSK_NX90_uarttrail_TRAIL         0x000000ff
#define SRT_NX90_uarttrail_TRAIL         0
#define DFLT_VAL_NX90_uarttrail_TRAIL    0x00000000
#define DFLT_BF_VAL_NX90_uarttrail_TRAIL 0x00000000

/* all used bits of 'NX90_uarttrail': */
#define MSK_USED_BITS_NX90_uarttrail 0x000000ff

/* --------------------------------------------------------------------- */
/* Register uartdrvout */
/* => Drive Output */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartdrvout           0x00000030
#define Adr_NX90_uart_uartdrvout          0xFF4016B0
#define Adr_NX90_uart_app_uartdrvout      0xFF801070
#define Adr_NX90_uart_xpic_app_uartdrvout 0xFF900330
#define DFLT_VAL_NX90_uartdrvout          0x00000000

#define MSK_NX90_uartdrvout_DRVTX          0x00000001
#define SRT_NX90_uartdrvout_DRVTX          0
#define DFLT_VAL_NX90_uartdrvout_DRVTX     0x00000000
#define DFLT_BF_VAL_NX90_uartdrvout_DRVTX  0x00000000
#define MSK_NX90_uartdrvout_DRVRTS         0x00000002
#define SRT_NX90_uartdrvout_DRVRTS         1
#define DFLT_VAL_NX90_uartdrvout_DRVRTS    0x00000000
#define DFLT_BF_VAL_NX90_uartdrvout_DRVRTS 0x00000000

/* all used bits of 'NX90_uartdrvout': */
#define MSK_USED_BITS_NX90_uartdrvout 0x00000003

/* --------------------------------------------------------------------- */
/* Register uartcr_2 */
/* => Control Register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartcr_2           0x00000034
#define Adr_NX90_uart_uartcr_2          0xFF4016B4
#define Adr_NX90_uart_app_uartcr_2      0xFF801074
#define Adr_NX90_uart_xpic_app_uartcr_2 0xFF900334
#define DFLT_VAL_NX90_uartcr_2          0x00000000

#define MSK_NX90_uartcr_2_Baud_Rate_Mode          0x00000001
#define SRT_NX90_uartcr_2_Baud_Rate_Mode          0
#define DFLT_VAL_NX90_uartcr_2_Baud_Rate_Mode     0x00000000
#define DFLT_BF_VAL_NX90_uartcr_2_Baud_Rate_Mode  0x00000000
#define MSK_NX90_uartcr_2_oversampling_8x         0x00000002
#define SRT_NX90_uartcr_2_oversampling_8x         1
#define DFLT_VAL_NX90_uartcr_2_oversampling_8x    0x00000000
#define DFLT_BF_VAL_NX90_uartcr_2_oversampling_8x 0x00000000

/* all used bits of 'NX90_uartcr_2': */
#define MSK_USED_BITS_NX90_uartcr_2 0x00000003

/* --------------------------------------------------------------------- */
/* Register uartrxiflsel */
/* => RX FIFO trigger level and RX-DMA enable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uartrxiflsel           0x00000038
#define Adr_NX90_uart_uartrxiflsel          0xFF4016B8
#define Adr_NX90_uart_app_uartrxiflsel      0xFF801078
#define Adr_NX90_uart_xpic_app_uartrxiflsel 0xFF900338
#define DFLT_VAL_NX90_uartrxiflsel          0x00000008

#define MSK_NX90_uartrxiflsel_RXIFLSEL         0x0000001f
#define SRT_NX90_uartrxiflsel_RXIFLSEL         0
#define DFLT_VAL_NX90_uartrxiflsel_RXIFLSEL    0x00000008
#define DFLT_BF_VAL_NX90_uartrxiflsel_RXIFLSEL 0x00000008
#define MSK_NX90_uartrxiflsel_RXDMA            0x00000020
#define SRT_NX90_uartrxiflsel_RXDMA            5
#define DFLT_VAL_NX90_uartrxiflsel_RXDMA       0x00000000
#define DFLT_BF_VAL_NX90_uartrxiflsel_RXDMA    0x00000000

/* all used bits of 'NX90_uartrxiflsel': */
#define MSK_USED_BITS_NX90_uartrxiflsel 0x0000003f

/* --------------------------------------------------------------------- */
/* Register uarttxiflsel */
/* => TX FIFO trigger level and TX-DMA enable */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_uarttxiflsel           0x0000003C
#define Adr_NX90_uart_uarttxiflsel          0xFF4016BC
#define Adr_NX90_uart_app_uarttxiflsel      0xFF80107C
#define Adr_NX90_uart_xpic_app_uarttxiflsel 0xFF90033C
#define DFLT_VAL_NX90_uarttxiflsel          0x00000008

#define MSK_NX90_uarttxiflsel_TXIFLSEL         0x0000001f
#define SRT_NX90_uarttxiflsel_TXIFLSEL         0
#define DFLT_VAL_NX90_uarttxiflsel_TXIFLSEL    0x00000008
#define DFLT_BF_VAL_NX90_uarttxiflsel_TXIFLSEL 0x00000008
#define MSK_NX90_uarttxiflsel_TXDMA            0x00000020
#define SRT_NX90_uarttxiflsel_TXDMA            5
#define DFLT_VAL_NX90_uarttxiflsel_TXDMA       0x00000000
#define DFLT_BF_VAL_NX90_uarttxiflsel_TXDMA    0x00000000

/* all used bits of 'NX90_uarttxiflsel': */
#define MSK_USED_BITS_NX90_uarttxiflsel 0x0000003f


/* ===================================================================== */

/* Area of abort */

/* ===================================================================== */

#define Addr_NX90_abort 0xFF4016C0

/* --------------------------------------------------------------------- */
/* Register abort_base */
/* => Start-address of abort generating address area. */
/*    Area size: 16Bytes */
/*    Abort (AHB: HRESP=ERROR) will be generated by access to this area. */
/*    Write access will be ignored. */
/*    Read access returns 0xdeadbeef. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_abort_base   0x00000000
#define Adr_NX90_abort_abort_base 0xFF4016C0
#define Adr_NX90_abort_base       0xFF4016C0

/* --------------------------------------------------------------------- */
/* Register abort_end */
/* => End-address of abort generating address area. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_abort_end   0x0000000C
#define Adr_NX90_abort_abort_end 0xFF4016CC
#define Adr_NX90_abort_end       0xFF4016CC


/* ===================================================================== */

/* Area of sample_at_porn_stat */

/* ===================================================================== */

#define Addr_NX90_sample_at_porn_stat 0xFF4016D0

/* --------------------------------------------------------------------- */
/* Register sample_at_porn_stat_in0 */
/* => Status of inputs sampled at power-on-reset (PORn) register 0. */
/*    This register shows the status of the inputs sampled at power-on-reset. It will not change on normal system reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_at_porn_stat_in0                 0x00000000
#define Adr_NX90_sample_at_porn_stat_sample_at_porn_stat_in0 0xFF4016D0
#define Adr_NX90_sample_at_porn_stat_in0                     0xFF4016D0

#define MSK_NX90_sample_at_porn_stat_in0_hif_d0  0x00000001
#define SRT_NX90_sample_at_porn_stat_in0_hif_d0  0
#define MSK_NX90_sample_at_porn_stat_in0_hif_d1  0x00000002
#define SRT_NX90_sample_at_porn_stat_in0_hif_d1  1
#define MSK_NX90_sample_at_porn_stat_in0_hif_d2  0x00000004
#define SRT_NX90_sample_at_porn_stat_in0_hif_d2  2
#define MSK_NX90_sample_at_porn_stat_in0_hif_d3  0x00000008
#define SRT_NX90_sample_at_porn_stat_in0_hif_d3  3
#define MSK_NX90_sample_at_porn_stat_in0_hif_d4  0x00000010
#define SRT_NX90_sample_at_porn_stat_in0_hif_d4  4
#define MSK_NX90_sample_at_porn_stat_in0_hif_d5  0x00000020
#define SRT_NX90_sample_at_porn_stat_in0_hif_d5  5
#define MSK_NX90_sample_at_porn_stat_in0_hif_d6  0x00000040
#define SRT_NX90_sample_at_porn_stat_in0_hif_d6  6
#define MSK_NX90_sample_at_porn_stat_in0_hif_d7  0x00000080
#define SRT_NX90_sample_at_porn_stat_in0_hif_d7  7
#define MSK_NX90_sample_at_porn_stat_in0_hif_d8  0x00000100
#define SRT_NX90_sample_at_porn_stat_in0_hif_d8  8
#define MSK_NX90_sample_at_porn_stat_in0_hif_d9  0x00000200
#define SRT_NX90_sample_at_porn_stat_in0_hif_d9  9
#define MSK_NX90_sample_at_porn_stat_in0_hif_d10 0x00000400
#define SRT_NX90_sample_at_porn_stat_in0_hif_d10 10
#define MSK_NX90_sample_at_porn_stat_in0_hif_d11 0x00000800
#define SRT_NX90_sample_at_porn_stat_in0_hif_d11 11
#define MSK_NX90_sample_at_porn_stat_in0_hif_d12 0x00001000
#define SRT_NX90_sample_at_porn_stat_in0_hif_d12 12
#define MSK_NX90_sample_at_porn_stat_in0_hif_d13 0x00002000
#define SRT_NX90_sample_at_porn_stat_in0_hif_d13 13
#define MSK_NX90_sample_at_porn_stat_in0_hif_d14 0x00004000
#define SRT_NX90_sample_at_porn_stat_in0_hif_d14 14
#define MSK_NX90_sample_at_porn_stat_in0_hif_d15 0x00008000
#define SRT_NX90_sample_at_porn_stat_in0_hif_d15 15
#define MSK_NX90_sample_at_porn_stat_in0_hif_a0  0x00010000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a0  16
#define MSK_NX90_sample_at_porn_stat_in0_hif_a1  0x00020000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a1  17
#define MSK_NX90_sample_at_porn_stat_in0_hif_a2  0x00040000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a2  18
#define MSK_NX90_sample_at_porn_stat_in0_hif_a3  0x00080000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a3  19
#define MSK_NX90_sample_at_porn_stat_in0_hif_a4  0x00100000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a4  20
#define MSK_NX90_sample_at_porn_stat_in0_hif_a5  0x00200000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a5  21
#define MSK_NX90_sample_at_porn_stat_in0_hif_a6  0x00400000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a6  22
#define MSK_NX90_sample_at_porn_stat_in0_hif_a7  0x00800000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a7  23
#define MSK_NX90_sample_at_porn_stat_in0_hif_a8  0x01000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a8  24
#define MSK_NX90_sample_at_porn_stat_in0_hif_a9  0x02000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a9  25
#define MSK_NX90_sample_at_porn_stat_in0_hif_a10 0x04000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a10 26
#define MSK_NX90_sample_at_porn_stat_in0_hif_a11 0x08000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a11 27
#define MSK_NX90_sample_at_porn_stat_in0_hif_a12 0x10000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a12 28
#define MSK_NX90_sample_at_porn_stat_in0_hif_a13 0x20000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a13 29
#define MSK_NX90_sample_at_porn_stat_in0_hif_a14 0x40000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a14 30
#define MSK_NX90_sample_at_porn_stat_in0_hif_a15 0x80000000
#define SRT_NX90_sample_at_porn_stat_in0_hif_a15 31

/* all used bits of 'NX90_sample_at_porn_stat_in0': */
#define MSK_USED_BITS_NX90_sample_at_porn_stat_in0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register sample_at_porn_stat_in1 */
/* => Status of inputs sampled at power-on-reset (PORn) register 1. */
/*    This register shows the status of the inputs sampled at power-on-reset. It will not change on normal system reset. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_sample_at_porn_stat_in1                 0x00000004
#define Adr_NX90_sample_at_porn_stat_sample_at_porn_stat_in1 0xFF4016D4
#define Adr_NX90_sample_at_porn_stat_in1                     0xFF4016D4

#define MSK_NX90_sample_at_porn_stat_in1_hif_a16   0x00000001
#define SRT_NX90_sample_at_porn_stat_in1_hif_a16   0
#define MSK_NX90_sample_at_porn_stat_in1_hif_a17   0x00000002
#define SRT_NX90_sample_at_porn_stat_in1_hif_a17   1
#define MSK_NX90_sample_at_porn_stat_in1_hif_bhen  0x00000004
#define SRT_NX90_sample_at_porn_stat_in1_hif_bhen  2
#define MSK_NX90_sample_at_porn_stat_in1_hif_rdn   0x00000008
#define SRT_NX90_sample_at_porn_stat_in1_hif_rdn   3
#define MSK_NX90_sample_at_porn_stat_in1_hif_wrn   0x00000010
#define SRT_NX90_sample_at_porn_stat_in1_hif_wrn   4
#define MSK_NX90_sample_at_porn_stat_in1_hif_csn   0x00000020
#define SRT_NX90_sample_at_porn_stat_in1_hif_csn   5
#define MSK_NX90_sample_at_porn_stat_in1_hif_rdy   0x00000040
#define SRT_NX90_sample_at_porn_stat_in1_hif_rdy   6
#define MSK_NX90_sample_at_porn_stat_in1_hif_dirq  0x00000080
#define SRT_NX90_sample_at_porn_stat_in1_hif_dirq  7
#define MSK_NX90_sample_at_porn_stat_in1_hif_sdclk 0x00000100
#define SRT_NX90_sample_at_porn_stat_in1_hif_sdclk 8
#define MSK_NX90_sample_at_porn_stat_in1_rdy_n     0x00000200
#define SRT_NX90_sample_at_porn_stat_in1_rdy_n     9
#define MSK_NX90_sample_at_porn_stat_in1_run_n     0x00000400
#define SRT_NX90_sample_at_porn_stat_in1_run_n     10
#define MSK_NX90_sample_at_porn_stat_in1_sqi_clk   0x00000800
#define SRT_NX90_sample_at_porn_stat_in1_sqi_clk   11
#define MSK_NX90_sample_at_porn_stat_in1_sqi_cs0n  0x00001000
#define SRT_NX90_sample_at_porn_stat_in1_sqi_cs0n  12
#define MSK_NX90_sample_at_porn_stat_in1_sqi_mosi  0x00002000
#define SRT_NX90_sample_at_porn_stat_in1_sqi_mosi  13
#define MSK_NX90_sample_at_porn_stat_in1_sqi_miso  0x00004000
#define SRT_NX90_sample_at_porn_stat_in1_sqi_miso  14
#define MSK_NX90_sample_at_porn_stat_in1_sqi_sio2  0x00008000
#define SRT_NX90_sample_at_porn_stat_in1_sqi_sio2  15
#define MSK_NX90_sample_at_porn_stat_in1_sqi_sio3  0x00010000
#define SRT_NX90_sample_at_porn_stat_in1_sqi_sio3  16

/* all used bits of 'NX90_sample_at_porn_stat_in1': */
#define MSK_USED_BITS_NX90_sample_at_porn_stat_in1 0x0001ffff


/* ===================================================================== */

/* Area of slave_firewall_ctrl */

/* ===================================================================== */

#define Addr_NX90_slave_firewall_ctrl 0xFF401700

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_crypt_system */
/* => Firewall configuration register for the crypt_system NETX AHB channel. */
/*     */
/*    Basic function: */
/*    A denied access will generate an ERROR-response (abort). Masters which cannot handle aborts */
/*    directly can generate an IRQ to their controlling master when they receive an abort (e.g. the */
/*    DPM-master can generate an IRQ to its host or the DMA-controllers can generate an IRQ to the ARM-CPU). */
/*    The firewall will no generate any IRQ by itself. */
/*    A denied write access will be junked. */
/*    A denied read access will return unpredictable data. */
/*     */
/*    Note: */
/*      COM-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      APP-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: ADC_MASTER, IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_crypt_system                 0x00000000
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_crypt_system 0xFF401700
#define Adr_NX90_firewall_cfg_crypt_system                     0xFF401700
#define DFLT_VAL_NX90_firewall_cfg_crypt_system                0x00000033

#define MSK_NX90_firewall_cfg_crypt_system_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_crypt_system_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_crypt_system_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_crypt_system_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_crypt_system_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_crypt_system_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_crypt_system_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_crypt_system_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_crypt_system_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_crypt_system_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_crypt_system_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_crypt_system_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_crypt_system_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_crypt_system_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_crypt_system_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_crypt_system_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_crypt_system': */
#define MSK_USED_BITS_NX90_firewall_cfg_crypt_system 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_debug_slave */
/* => Firewall configuration register for the debug_slave NETX AHB channel. */
/*     */
/*    See description of register firewall_cfg_crypt_system for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_debug_slave                 0x00000004
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_debug_slave 0xFF401704
#define Adr_NX90_firewall_cfg_debug_slave                     0xFF401704
#define DFLT_VAL_NX90_firewall_cfg_debug_slave                0x00000033

#define MSK_NX90_firewall_cfg_debug_slave_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_debug_slave_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_debug_slave_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_debug_slave_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_debug_slave_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_debug_slave_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_debug_slave_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_debug_slave_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_debug_slave_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_debug_slave_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_debug_slave_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_debug_slave_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_debug_slave_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_debug_slave_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_debug_slave_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_debug_slave_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_debug_slave': */
#define MSK_USED_BITS_NX90_firewall_cfg_debug_slave 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_eth_system */
/* => Firewall configuration register for the eth_system NETX AHB channel. */
/*     */
/*    See description of register firewall_cfg_crypt_system for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_eth_system                 0x00000008
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_eth_system 0xFF401708
#define Adr_NX90_firewall_cfg_eth_system                     0xFF401708
#define DFLT_VAL_NX90_firewall_cfg_eth_system                0x00000033

#define MSK_NX90_firewall_cfg_eth_system_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_eth_system_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_eth_system_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_eth_system_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_eth_system_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_eth_system_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_eth_system_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_eth_system_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_eth_system_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_eth_system_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_eth_system_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_eth_system_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_eth_system_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_eth_system_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_eth_system_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_eth_system_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_eth_system_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_eth_system_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_eth_system_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_eth_system_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_eth_system_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_eth_system_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_eth_system': */
#define MSK_USED_BITS_NX90_firewall_cfg_eth_system 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_sqirom */
/* => Firewall configuration register for the sqirom NETX AHB channel. */
/*     */
/*    See description of register firewall_cfg_crypt_system for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_sqirom                 0x0000000C
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_sqirom 0xFF40170C
#define Adr_NX90_firewall_cfg_sqirom                     0xFF40170C
#define DFLT_VAL_NX90_firewall_cfg_sqirom                0x00000033

#define MSK_NX90_firewall_cfg_sqirom_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_sqirom_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_sqirom_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_sqirom_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_sqirom_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_sqirom_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_sqirom_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_sqirom_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_sqirom_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_sqirom_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_sqirom_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_sqirom_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_sqirom_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_sqirom_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_sqirom_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_sqirom_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_sqirom_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_sqirom_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_sqirom_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_sqirom_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_sqirom_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_sqirom_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_sqirom': */
#define MSK_USED_BITS_NX90_firewall_cfg_sqirom 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_hifmem_amem */
/* => Firewall configuration register for the hifmem_amem NETX AHB channel. */
/*     */
/*    See description of register firewall_cfg_crypt_system for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_hifmem_amem                 0x00000010
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_hifmem_amem 0xFF401710
#define Adr_NX90_firewall_cfg_hifmem_amem                     0xFF401710
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem                0x00000033

#define MSK_NX90_firewall_cfg_hifmem_amem_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_hifmem_amem_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_amem_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_hifmem_amem_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_amem_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_hifmem_amem_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_amem_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_hifmem_amem_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_amem_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_hifmem_amem_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_hifmem_amem_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_hifmem_amem_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_hifmem_amem_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_hifmem_amem_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_hifmem_amem_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_amem_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_hifmem_amem': */
#define MSK_USED_BITS_NX90_firewall_cfg_hifmem_amem 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_hifmem_sdram */
/* => Firewall configuration register for the hifmem_sdram NETX AHB channel. */
/*     */
/*    See description of register firewall_cfg_crypt_system for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_hifmem_sdram                 0x00000014
#define Adr_NX90_slave_firewall_ctrl_firewall_cfg_hifmem_sdram 0xFF401714
#define Adr_NX90_firewall_cfg_hifmem_sdram                     0xFF401714
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram                0x00000033

#define MSK_NX90_firewall_cfg_hifmem_sdram_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_hifmem_sdram_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_sdram_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_hifmem_sdram_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_sdram_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_hifmem_sdram_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_sdram_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_hifmem_sdram_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_hifmem_sdram_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_hifmem_sdram_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_hifmem_sdram_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_hifmem_sdram_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_hifmem_sdram_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_hifmem_sdram_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_hifmem_sdram_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmem_sdram_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_hifmem_sdram': */
#define MSK_USED_BITS_NX90_firewall_cfg_hifmem_sdram 0x80000333


/* ===================================================================== */

/* Area of module_firewall_ctrl */

/* ===================================================================== */

#define Addr_NX90_module_firewall_ctrl 0xFF401740

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_pad_ctrl */
/* => Firewall configuration register for the intlogic_shd_pad_ctrl module. */
/*     */
/*    Basic function: */
/*    A denied access will generate an ERROR-response (abort). Masters which cannot handle aborts */
/*    directly can generate an IRQ to their controlling master when they receive an abort (e.g. the */
/*    DPM-master can generate an IRQ to its host or the DMA-controllers can generate an IRQ to the ARM-CPU). */
/*    The firewall will no generate any IRQ by itself. */
/*    A denied write access will be junked. */
/*    A denied read access will return unpredictable data. */
/*     */
/*    Note: */
/*      COM-side masters are: DPM0, DPM1, XC01, XPIC_COM, ARM_COM, DMAC_COM. */
/*      APP-side masters are: IDPM_MASTER, XPIC_APP, ARM_APP, DMAC_APP. */
/*      Other masters which cannot be filtered but globally disabled are: ADC_MASTER, IPC_MASTER, DEBUG_MASTER. */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_pad_ctrl                  0x00000000
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_pad_ctrl 0xFF401740
#define Adr_NX90_firewall_cfg_intlogic_shd_pad_ctrl                      0xFF401740
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_pad_ctrl_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_pad_ctrl_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_pad_ctrl_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_pad_ctrl': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_pad_ctrl 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_sqi */
/* => Firewall configuration register for the intlogic_shd_sqi module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_sqi                  0x00000004
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_sqi 0xFF401744
#define Adr_NX90_firewall_cfg_intlogic_shd_sqi                      0xFF401744
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_sqi_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_sqi_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_sqi_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_sqi_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_sqi': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_sqi 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_uart */
/* => Firewall configuration register for the intlogic_shd_uart module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_uart                  0x00000008
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_uart 0xFF401748
#define Adr_NX90_firewall_cfg_intlogic_shd_uart                      0xFF401748
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_uart_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_uart_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_uart_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_uart_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_uart_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_uart': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_uart 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_ecc_ctrl */
/* => Firewall configuration register for the intlogic_shd_ecc_ctrl module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_ecc_ctrl                  0x0000000C
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_ecc_ctrl 0xFF40174C
#define Adr_NX90_firewall_cfg_intlogic_shd_ecc_ctrl                      0xFF40174C
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_ecc_ctrl_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_ecc_ctrl': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_ecc_ctrl 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_madc */
/* => Firewall configuration register for the intlogic_shd_madc module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_madc                  0x00000010
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_madc 0xFF401750
#define Adr_NX90_firewall_cfg_intlogic_shd_madc                      0xFF401750
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_madc_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_madc': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_madc 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_madc_seq0 */
/* => Firewall configuration register for the intlogic_shd_madc_seq0 module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_madc_seq0                  0x00000014
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_madc_seq0 0xFF401754
#define Adr_NX90_firewall_cfg_intlogic_shd_madc_seq0                      0xFF401754
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq0_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq0_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq0_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_madc_seq0': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_madc_seq0 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_madc_seq1 */
/* => Firewall configuration register for the intlogic_shd_madc_seq1 module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_madc_seq1                  0x00000018
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_madc_seq1 0xFF401758
#define Adr_NX90_firewall_cfg_intlogic_shd_madc_seq1                      0xFF401758
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq1_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq1_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq1_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_madc_seq1': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_madc_seq1 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_madc_seq2 */
/* => Firewall configuration register for the intlogic_shd_madc_seq2 module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_madc_seq2                  0x0000001C
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_madc_seq2 0xFF40175C
#define Adr_NX90_firewall_cfg_intlogic_shd_madc_seq2                      0xFF40175C
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq2_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq2_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq2_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_madc_seq2': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_madc_seq2 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_intlogic_shd_madc_seq3 */
/* => Firewall configuration register for the intlogic_shd_madc_seq3 module. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_intlogic_shd_madc_seq3                  0x00000020
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_intlogic_shd_madc_seq3 0xFF401760
#define Adr_NX90_firewall_cfg_intlogic_shd_madc_seq3                      0xFF401760
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3                 0x00000033

#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_com            0x00000010
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_com            4
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_com       0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_com    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_app            0x00000020
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_app            5
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_app       0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_rp_app    0x00000001
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_com          0x00000100
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_com          8
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_com     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_com  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_app          0x00000200
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_app          9
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_app     0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_stat_app  0x00000000
#define MSK_NX90_firewall_cfg_intlogic_shd_madc_seq3_abort_dis         0x80000000
#define SRT_NX90_firewall_cfg_intlogic_shd_madc_seq3_abort_dis         31
#define DFLT_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_abort_dis    0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_intlogic_shd_madc_seq3_abort_dis 0x00000000

/* all used bits of 'NX90_firewall_cfg_intlogic_shd_madc_seq3': */
#define MSK_USED_BITS_NX90_firewall_cfg_intlogic_shd_madc_seq3 0x80000333

/* --------------------------------------------------------------------- */
/* Register firewall_cfg_hifmemctrl */
/* => Firewall configuration register for the configuration registers of the HIF MI. */
/*     */
/*    See description of register firewall_cfg_intlogic_shd_pad_ctrl for details. Note that read access cannot be blocked for */
/*    the configuration registers of the HIF MI. The failed-access-status is not logged individually for each MI configuration */
/*    register. */
/*     */
/*    Note: */
/*      The configuration bits of this register can be locked to protect it from reconfiguration by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*      The functionality of the status bits are not influenced by ASIC_CTRL_COM.netx_lock.lock_firewall. */
/*     */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_firewall_cfg_hifmemctrl                  0x0000003C
#define Adr_NX90_module_firewall_ctrl_firewall_cfg_hifmemctrl 0xFF40177C
#define Adr_NX90_firewall_cfg_hifmemctrl                      0xFF40177C
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl                 0x03333333

#define MSK_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_com            0x00000001
#define SRT_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_com            0
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_com       0x00000001
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_com    0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_app            0x00000002
#define SRT_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_app            1
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_app       0x00000002
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_cfg_wp_app    0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_com         0x00000010
#define SRT_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_com         4
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_com    0x00000010
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_com 0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_app         0x00000020
#define SRT_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_app         5
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_app    0x00000020
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_ext_rdy_status_wp_app 0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_com          0x00000100
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_com          8
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_com     0x00000100
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_com  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_app          0x00000200
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_app          9
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_app     0x00000200
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram0_ctrl_wp_app  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_com          0x00001000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_com          12
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_com     0x00001000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_com  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_app          0x00002000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_app          13
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_app     0x00002000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram1_ctrl_wp_app  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_com          0x00010000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_com          16
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_com     0x00010000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_com  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_app          0x00020000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_app          17
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_app     0x00020000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram2_ctrl_wp_app  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_com          0x00100000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_com          20
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_com     0x00100000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_com  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_app          0x00200000
#define SRT_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_app          21
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_app     0x00200000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_extsram3_ctrl_wp_app  0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_com             0x01000000
#define SRT_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_com             24
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_com        0x01000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_com     0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_app             0x02000000
#define SRT_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_app             25
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_app        0x02000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_sdram_ctrl_wp_app     0x00000001
#define MSK_NX90_firewall_cfg_hifmemctrl_stat_com                      0x10000000
#define SRT_NX90_firewall_cfg_hifmemctrl_stat_com                      28
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_stat_com                 0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_stat_com              0x00000000
#define MSK_NX90_firewall_cfg_hifmemctrl_stat_app                      0x20000000
#define SRT_NX90_firewall_cfg_hifmemctrl_stat_app                      29
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_stat_app                 0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_stat_app              0x00000000
#define MSK_NX90_firewall_cfg_hifmemctrl_abort_dis                     0x80000000
#define SRT_NX90_firewall_cfg_hifmemctrl_abort_dis                     31
#define DFLT_VAL_NX90_firewall_cfg_hifmemctrl_abort_dis                0x00000000
#define DFLT_BF_VAL_NX90_firewall_cfg_hifmemctrl_abort_dis             0x00000000

/* all used bits of 'NX90_firewall_cfg_hifmemctrl': */
#define MSK_USED_BITS_NX90_firewall_cfg_hifmemctrl 0xb3333333


/* ===================================================================== */

/* Area of ecc_ctrl */

/* ===================================================================== */

#define Addr_NX90_ecc_ctrl 0xFF401780

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_ctrl */
/* => IFLASH2 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_ctrl      0x00000000
#define Adr_NX90_ecc_ctrl_ecc_ctrl_iflash2_ctrl 0xFF401780
#define Adr_NX90_ecc_ctrl_iflash2_ctrl          0xFF401780
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl     0x00000000

#define MSK_NX90_ecc_ctrl_iflash2_ctrl_enable               0x00000001
#define SRT_NX90_ecc_ctrl_iflash2_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl_enable          0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash2_ctrl_enable       0x00000000
#define MSK_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv         0x000001fe
#define SRT_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_iflash2_ctrl_syndrome_inv 0x00000000

/* all used bits of 'NX90_ecc_ctrl_iflash2_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_ctrl 0x000001ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_addr_sbe      0x00000004
#define Adr_NX90_ecc_ctrl_ecc_ctrl_iflash2_addr_sbe 0xFF401784
#define Adr_NX90_ecc_ctrl_iflash2_addr_sbe          0xFF401784

#define MSK_NX90_ecc_ctrl_iflash2_addr_sbe_address 0x00007fff
#define SRT_NX90_ecc_ctrl_iflash2_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash2_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_addr_sbe 0x00007fff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_iflash2_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_iflash2_addr_dbe      0x00000008
#define Adr_NX90_ecc_ctrl_ecc_ctrl_iflash2_addr_dbe 0xFF401788
#define Adr_NX90_ecc_ctrl_iflash2_addr_dbe          0xFF401788

#define MSK_NX90_ecc_ctrl_iflash2_addr_dbe_address 0x00007fff
#define SRT_NX90_ecc_ctrl_iflash2_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_iflash2_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_iflash2_addr_dbe 0x00007fff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_status_sbe */
/* => ECC status SBE: */
/*    This register collects single bit error (SBE) status information. */
/*    In case of ECC SBE, a bit in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_status_sbe      0x0000000C
#define Adr_NX90_ecc_ctrl_ecc_ctrl_status_sbe 0xFF40178C
#define Adr_NX90_ecc_ctrl_status_sbe          0xFF40178C
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe     0x00000000

#define MSK_NX90_ecc_ctrl_status_sbe_iflash2         0x00000001
#define SRT_NX90_ecc_ctrl_status_sbe_iflash2         0
#define DFLT_VAL_NX90_ecc_ctrl_status_sbe_iflash2    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_sbe_iflash2 0x00000000

/* all used bits of 'NX90_ecc_ctrl_status_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_status_sbe 0x00000001

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_status_dbe */
/* => ECC status DBE: */
/*    This register collects double bit error (DBE) status information. */
/*    In case of ECC DBE, a bit of the appropriate RAM in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_status_dbe      0x00000010
#define Adr_NX90_ecc_ctrl_ecc_ctrl_status_dbe 0xFF401790
#define Adr_NX90_ecc_ctrl_status_dbe          0xFF401790
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe     0x00000000

#define MSK_NX90_ecc_ctrl_status_dbe_iflash2         0x00000001
#define SRT_NX90_ecc_ctrl_status_dbe_iflash2         0
#define DFLT_VAL_NX90_ecc_ctrl_status_dbe_iflash2    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_status_dbe_iflash2 0x00000000

/* all used bits of 'NX90_ecc_ctrl_status_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_status_dbe 0x00000001


/* ===================================================================== */

/* Area of madc */

/* ===================================================================== */

#define Addr_NX90_madc 0xFF4017E0

/* --------------------------------------------------------------------- */
/* Register madc_cfg */
/* => Config bits for the MADC common module. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_cfg  0x00000000
#define Adr_NX90_madc_madc_cfg 0xFF4017E0
#define Adr_NX90_madc_cfg      0xFF4017E0
#define DFLT_VAL_NX90_madc_cfg 0x00000002

#define MSK_NX90_madc_cfg_adcclk_period         0x000000ff
#define SRT_NX90_madc_cfg_adcclk_period         0
#define DFLT_VAL_NX90_madc_cfg_adcclk_period    0x00000002
#define DFLT_BF_VAL_NX90_madc_cfg_adcclk_period 0x00000002

/* all used bits of 'NX90_madc_cfg': */
#define MSK_USED_BITS_NX90_madc_cfg 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_adc01_static_cfg */
/* => Static configuration signals (D2A) to the MAZ IP containing the analog modules ADC0 to ADC3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_adc01_static_cfg  0x00000004
#define Adr_NX90_madc_madc_adc01_static_cfg 0xFF4017E4
#define Adr_NX90_madc_adc01_static_cfg      0xFF4017E4
#define DFLT_VAL_NX90_madc_adc01_static_cfg 0x00000000

#define MSK_NX90_madc_adc01_static_cfg_adc01_enable               0x00000001
#define SRT_NX90_madc_adc01_static_cfg_adc01_enable               0
#define DFLT_VAL_NX90_madc_adc01_static_cfg_adc01_enable          0x00000000
#define DFLT_BF_VAL_NX90_madc_adc01_static_cfg_adc01_enable       0x00000000
#define MSK_NX90_madc_adc01_static_cfg_adc01_reset_n              0x00000002
#define SRT_NX90_madc_adc01_static_cfg_adc01_reset_n              1
#define DFLT_VAL_NX90_madc_adc01_static_cfg_adc01_reset_n         0x00000000
#define DFLT_BF_VAL_NX90_madc_adc01_static_cfg_adc01_reset_n      0x00000000
#define MSK_NX90_madc_adc01_static_cfg_vref_buffer_enable         0x00000004
#define SRT_NX90_madc_adc01_static_cfg_vref_buffer_enable         2
#define DFLT_VAL_NX90_madc_adc01_static_cfg_vref_buffer_enable    0x00000000
#define DFLT_BF_VAL_NX90_madc_adc01_static_cfg_vref_buffer_enable 0x00000000

/* all used bits of 'NX90_madc_adc01_static_cfg': */
#define MSK_USED_BITS_NX90_madc_adc01_static_cfg 0x00000007

/* --------------------------------------------------------------------- */
/* Register madc_adc23_static_cfg */
/* => Static configuration signals (D2A) to the MAZ IP containing the analog modules ADC0 to ADC3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_adc23_static_cfg  0x00000008
#define Adr_NX90_madc_madc_adc23_static_cfg 0xFF4017E8
#define Adr_NX90_madc_adc23_static_cfg      0xFF4017E8
#define DFLT_VAL_NX90_madc_adc23_static_cfg 0x00000000

#define MSK_NX90_madc_adc23_static_cfg_adc23_enable          0x00000001
#define SRT_NX90_madc_adc23_static_cfg_adc23_enable          0
#define DFLT_VAL_NX90_madc_adc23_static_cfg_adc23_enable     0x00000000
#define DFLT_BF_VAL_NX90_madc_adc23_static_cfg_adc23_enable  0x00000000
#define MSK_NX90_madc_adc23_static_cfg_adc23_reset_n         0x00000002
#define SRT_NX90_madc_adc23_static_cfg_adc23_reset_n         1
#define DFLT_VAL_NX90_madc_adc23_static_cfg_adc23_reset_n    0x00000000
#define DFLT_BF_VAL_NX90_madc_adc23_static_cfg_adc23_reset_n 0x00000000

/* all used bits of 'NX90_madc_adc23_static_cfg': */
#define MSK_USED_BITS_NX90_madc_adc23_static_cfg 0x00000003

/* --------------------------------------------------------------------- */
/* Register madc_start */
/* => ADC start register: */
/*    This register allows to start all ADCs in parallel. \ */
/*    All further configuration is done within the ADC sequencers. \ */
/*    Also ADCs can be started from their sequencers address range. */
/*    This register is writable but can also be changed by hardware (reset). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_start  0x0000000C
#define Adr_NX90_madc_madc_start 0xFF4017EC
#define Adr_NX90_madc_start      0xFF4017EC
#define DFLT_VAL_NX90_madc_start 0x00000000

#define MSK_NX90_madc_start_start_adc0         0x00000001
#define SRT_NX90_madc_start_start_adc0         0
#define DFLT_VAL_NX90_madc_start_start_adc0    0x00000000
#define DFLT_BF_VAL_NX90_madc_start_start_adc0 0x00000000
#define MSK_NX90_madc_start_start_adc1         0x00000002
#define SRT_NX90_madc_start_start_adc1         1
#define DFLT_VAL_NX90_madc_start_start_adc1    0x00000000
#define DFLT_BF_VAL_NX90_madc_start_start_adc1 0x00000000
#define MSK_NX90_madc_start_start_adc2         0x00000004
#define SRT_NX90_madc_start_start_adc2         2
#define DFLT_VAL_NX90_madc_start_start_adc2    0x00000000
#define DFLT_BF_VAL_NX90_madc_start_start_adc2 0x00000000
#define MSK_NX90_madc_start_start_adc3         0x00000008
#define SRT_NX90_madc_start_start_adc3         3
#define DFLT_VAL_NX90_madc_start_start_adc3    0x00000000
#define DFLT_BF_VAL_NX90_madc_start_start_adc3 0x00000000

/* all used bits of 'NX90_madc_start': */
#define MSK_USED_BITS_NX90_madc_start 0x0000000f

/* --------------------------------------------------------------------- */
/* Register madc_deadtime01_delay */
/* => Dead time delay: */
/*    Delay in steps of system clock (10ns) between Dead Time EVenT from PWM module and trigger. */
/*    In case of 2nd DTEVT within delay time, the second DTEVT will be lost. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_deadtime01_delay  0x00000010
#define Adr_NX90_madc_madc_deadtime01_delay 0xFF4017F0
#define Adr_NX90_madc_deadtime01_delay      0xFF4017F0
#define DFLT_VAL_NX90_madc_deadtime01_delay 0x000a000a

#define MSK_NX90_madc_deadtime01_delay_dt0         0x0000ffff
#define SRT_NX90_madc_deadtime01_delay_dt0         0
#define DFLT_VAL_NX90_madc_deadtime01_delay_dt0    0x0000000a
#define DFLT_BF_VAL_NX90_madc_deadtime01_delay_dt0 0x0000000a
#define MSK_NX90_madc_deadtime01_delay_dt1         0xffff0000
#define SRT_NX90_madc_deadtime01_delay_dt1         16
#define DFLT_VAL_NX90_madc_deadtime01_delay_dt1    0x000a0000
#define DFLT_BF_VAL_NX90_madc_deadtime01_delay_dt1 0x0000000a

/* all used bits of 'NX90_madc_deadtime01_delay': */
#define MSK_USED_BITS_NX90_madc_deadtime01_delay 0xffffffff

/* --------------------------------------------------------------------- */
/* Register madc_deadtime23_delay */
/* => Dead time delay: */
/*    Delay in steps of system clock (10ns) between Dead Time Event from PWM module and trigger. */
/*    In case of 2nd Dead Time Event within delay time, the second DTEVT will be lost. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_deadtime23_delay  0x00000014
#define Adr_NX90_madc_madc_deadtime23_delay 0xFF4017F4
#define Adr_NX90_madc_deadtime23_delay      0xFF4017F4
#define DFLT_VAL_NX90_madc_deadtime23_delay 0x000a000a

#define MSK_NX90_madc_deadtime23_delay_dt2         0x0000ffff
#define SRT_NX90_madc_deadtime23_delay_dt2         0
#define DFLT_VAL_NX90_madc_deadtime23_delay_dt2    0x0000000a
#define DFLT_BF_VAL_NX90_madc_deadtime23_delay_dt2 0x0000000a
#define MSK_NX90_madc_deadtime23_delay_dt3         0xffff0000
#define SRT_NX90_madc_deadtime23_delay_dt3         16
#define DFLT_VAL_NX90_madc_deadtime23_delay_dt3    0x000a0000
#define DFLT_BF_VAL_NX90_madc_deadtime23_delay_dt3 0x0000000a

/* all used bits of 'NX90_madc_deadtime23_delay': */
#define MSK_USED_BITS_NX90_madc_deadtime23_delay 0xffffffff

/* --------------------------------------------------------------------- */
/* Register madc_deadtime45_delay */
/* => Dead time delay: */
/*    Delay in steps of system clock (10ns) between Dead Time Event from PWM module and trigger. */
/*    In case of 2nd Dead Time Event within delay time, the second DTEVT will be lost. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_deadtime45_delay  0x00000018
#define Adr_NX90_madc_madc_deadtime45_delay 0xFF4017F8
#define Adr_NX90_madc_deadtime45_delay      0xFF4017F8
#define DFLT_VAL_NX90_madc_deadtime45_delay 0x000a000a

#define MSK_NX90_madc_deadtime45_delay_dt4         0x0000ffff
#define SRT_NX90_madc_deadtime45_delay_dt4         0
#define DFLT_VAL_NX90_madc_deadtime45_delay_dt4    0x0000000a
#define DFLT_BF_VAL_NX90_madc_deadtime45_delay_dt4 0x0000000a
#define MSK_NX90_madc_deadtime45_delay_dt5         0xffff0000
#define SRT_NX90_madc_deadtime45_delay_dt5         16
#define DFLT_VAL_NX90_madc_deadtime45_delay_dt5    0x000a0000
#define DFLT_BF_VAL_NX90_madc_deadtime45_delay_dt5 0x0000000a

/* all used bits of 'NX90_madc_deadtime45_delay': */
#define MSK_USED_BITS_NX90_madc_deadtime45_delay 0xffffffff


/* ===================================================================== */

/* AREA madc_seq */
/* Area of madc_seq0, madc_seq1, madc_seq2, madc_seq3 */

/* ===================================================================== */

#define Addr_NX90_madc_seq0 0xFF401800
#define Addr_NX90_madc_seq1 0xFF401900
#define Addr_NX90_madc_seq2 0xFF401A00
#define Addr_NX90_madc_seq3 0xFF401B00

/* --------------------------------------------------------------------- */
/* Register madc_seq_cfg */
/* => ADC static configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_cfg       0x00000000
#define Adr_NX90_madc_seq0_madc_seq_cfg 0xFF401800
#define Adr_NX90_madc_seq1_madc_seq_cfg 0xFF401900
#define Adr_NX90_madc_seq2_madc_seq_cfg 0xFF401A00
#define Adr_NX90_madc_seq3_madc_seq_cfg 0xFF401B00
#define DFLT_VAL_NX90_madc_seq_cfg      0x0000ff02

#define MSK_NX90_madc_seq_cfg_adcclk_period         0x000000ff
#define SRT_NX90_madc_seq_cfg_adcclk_period         0
#define DFLT_VAL_NX90_madc_seq_cfg_adcclk_period    0x00000002
#define DFLT_BF_VAL_NX90_madc_seq_cfg_adcclk_period 0x00000002
#define MSK_NX90_madc_seq_cfg_adcclk_phase          0x0000ff00
#define SRT_NX90_madc_seq_cfg_adcclk_phase          8
#define DFLT_VAL_NX90_madc_seq_cfg_adcclk_phase     0x0000ff00
#define DFLT_BF_VAL_NX90_madc_seq_cfg_adcclk_phase  0x000000ff
#define MSK_NX90_madc_seq_cfg_adcclk_sync           0x00010000
#define SRT_NX90_madc_seq_cfg_adcclk_sync           16
#define DFLT_VAL_NX90_madc_seq_cfg_adcclk_sync      0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cfg_adcclk_sync   0x00000000
#define MSK_NX90_madc_seq_cfg_vref_vdd3             0x00020000
#define SRT_NX90_madc_seq_cfg_vref_vdd3             17
#define DFLT_VAL_NX90_madc_seq_cfg_vref_vdd3        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cfg_vref_vdd3     0x00000000
#define MSK_NX90_madc_seq_cfg_dma_32bit_adr         0x00040000
#define SRT_NX90_madc_seq_cfg_dma_32bit_adr         18
#define DFLT_VAL_NX90_madc_seq_cfg_dma_32bit_adr    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cfg_dma_32bit_adr 0x00000000
#define MSK_NX90_madc_seq_cfg_dma_disable           0x00080000
#define SRT_NX90_madc_seq_cfg_dma_disable           19
#define DFLT_VAL_NX90_madc_seq_cfg_dma_disable      0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cfg_dma_disable   0x00000000

/* all used bits of 'NX90_madc_seq_cfg': */
#define MSK_USED_BITS_NX90_madc_seq_cfg 0x000fffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux0 */
/* => ADC sample extension for input channel 0 */
/*    Length of 2nd adcclk in steps of 10ns system clock(~ delay of 3rd adcclk edge). */
/*    The capacitor inside ADC needs time to be charged depending \ */
/*    on the driving strength of the external signal. \ */
/*    For 12 bit precision, this time should be 9*(Rint+Rext)*C, \ */
/*    with Rint=1kOhm and C=7.5pF. */
/*    The total formula for this value is: */
/*    tt_add = ceil((6,75 x Rext/kOhm) + 6,75) - adcclk_period/10ns - 2 */
/*    Set tt_add=4 if calculated value is smaller 4. */
/*    The total ADC cycle time results in: */
/*    tcycle = 14 * adcclk_period + clock_sync_delay (max 1 adcclk_period) + tt_add * 10ns. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux0       0x00000004
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux0 0xFF401804
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux0 0xFF401904
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux0 0xFF401A04
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux0 0xFF401B04
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux0      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux0_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux0_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux0_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux0_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux0': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux0 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux1 */
/* => ADC sample extension for input channel 1 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux1       0x00000008
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux1 0xFF401808
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux1 0xFF401908
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux1 0xFF401A08
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux1 0xFF401B08
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux1      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux1_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux1_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux1_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux1_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux1': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux1 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux2 */
/* => ADC sample extension for input channel 2 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux2       0x0000000C
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux2 0xFF40180C
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux2 0xFF40190C
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux2 0xFF401A0C
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux2 0xFF401B0C
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux2      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux2_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux2_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux2_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux2_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux2': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux2 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux3 */
/* => ADC sample extension for input channel 3 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux3       0x00000010
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux3 0xFF401810
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux3 0xFF401910
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux3 0xFF401A10
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux3 0xFF401B10
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux3      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux3_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux3_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux3_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux3_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux3': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux3 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux4 */
/* => ADC sample extension for input channel 4 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux4       0x00000014
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux4 0xFF401814
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux4 0xFF401914
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux4 0xFF401A14
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux4 0xFF401B14
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux4      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux4_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux4_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux4_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux4_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux4': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux4 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux5 */
/* => ADC sample extension for input channel 5 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux5       0x00000018
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux5 0xFF401818
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux5 0xFF401918
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux5 0xFF401A18
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux5 0xFF401B18
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux5      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux5_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux5_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux5_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux5_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux5': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux5 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux6 */
/* => ADC sample extension for input channel 6 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux6       0x0000001C
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux6 0xFF40181C
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux6 0xFF40191C
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux6 0xFF401A1C
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux6 0xFF401B1C
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux6      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux6_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux6_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux6_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux6_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux6': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux6 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_tracking_time_mux7 */
/* => ADC sample extension for input channel 7 */
/*    s. madc_seq_tracking_time_mux0 for details. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_tracking_time_mux7       0x00000020
#define Adr_NX90_madc_seq0_madc_seq_tracking_time_mux7 0xFF401820
#define Adr_NX90_madc_seq1_madc_seq_tracking_time_mux7 0xFF401920
#define Adr_NX90_madc_seq2_madc_seq_tracking_time_mux7 0xFF401A20
#define Adr_NX90_madc_seq3_madc_seq_tracking_time_mux7 0xFF401B20
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux7      0x00000004

#define MSK_NX90_madc_seq_tracking_time_mux7_tt_add         0x000000ff
#define SRT_NX90_madc_seq_tracking_time_mux7_tt_add         0
#define DFLT_VAL_NX90_madc_seq_tracking_time_mux7_tt_add    0x00000004
#define DFLT_BF_VAL_NX90_madc_seq_tracking_time_mux7_tt_add 0x00000004

/* all used bits of 'NX90_madc_seq_tracking_time_mux7': */
#define MSK_USED_BITS_NX90_madc_seq_tracking_time_mux7 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_ms_en */
/* => Enable measurement configurations: */
/*    Terminology: */
/*    A measurement sequence consists of upto 8 measurements. */
/*    A measurement consists of up to 8 samples. */
/*    A sample needs at least 14 adcclk cycles (+ tracking time addon). */
/*    This register enables the measurements belonging to a measurement sequence (up to 8). */
/*    With the start of a measurement sequence (s. madc_seq_cmd) all sequence configuration registers \ */
/*    (ms_en, ms_adr, m0..m7) are copied to shadow registers that can no longer be changed until \ */
/*    the measurement sequence is finished. All further write accesses to these registers will be valid */
/*    for the subsequent measurement sequence. */
/*    The software must ensure, that a set of configuration data for one sequence is completely written \ */
/*    before starting the next sequence. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_ms_en       0x00000024
#define Adr_NX90_madc_seq0_madc_seq_ms_en 0xFF401824
#define Adr_NX90_madc_seq1_madc_seq_ms_en 0xFF401924
#define Adr_NX90_madc_seq2_madc_seq_ms_en 0xFF401A24
#define Adr_NX90_madc_seq3_madc_seq_ms_en 0xFF401B24
#define DFLT_VAL_NX90_madc_seq_ms_en      0x00000000

#define MSK_NX90_madc_seq_ms_en_m0         0x00000001
#define SRT_NX90_madc_seq_ms_en_m0         0
#define DFLT_VAL_NX90_madc_seq_ms_en_m0    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m0 0x00000000
#define MSK_NX90_madc_seq_ms_en_m1         0x00000002
#define SRT_NX90_madc_seq_ms_en_m1         1
#define DFLT_VAL_NX90_madc_seq_ms_en_m1    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m1 0x00000000
#define MSK_NX90_madc_seq_ms_en_m2         0x00000004
#define SRT_NX90_madc_seq_ms_en_m2         2
#define DFLT_VAL_NX90_madc_seq_ms_en_m2    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m2 0x00000000
#define MSK_NX90_madc_seq_ms_en_m3         0x00000008
#define SRT_NX90_madc_seq_ms_en_m3         3
#define DFLT_VAL_NX90_madc_seq_ms_en_m3    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m3 0x00000000
#define MSK_NX90_madc_seq_ms_en_m4         0x00000010
#define SRT_NX90_madc_seq_ms_en_m4         4
#define DFLT_VAL_NX90_madc_seq_ms_en_m4    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m4 0x00000000
#define MSK_NX90_madc_seq_ms_en_m5         0x00000020
#define SRT_NX90_madc_seq_ms_en_m5         5
#define DFLT_VAL_NX90_madc_seq_ms_en_m5    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m5 0x00000000
#define MSK_NX90_madc_seq_ms_en_m6         0x00000040
#define SRT_NX90_madc_seq_ms_en_m6         6
#define DFLT_VAL_NX90_madc_seq_ms_en_m6    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m6 0x00000000
#define MSK_NX90_madc_seq_ms_en_m7         0x00000080
#define SRT_NX90_madc_seq_ms_en_m7         7
#define DFLT_VAL_NX90_madc_seq_ms_en_m7    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_en_m7 0x00000000

/* all used bits of 'NX90_madc_seq_ms_en': */
#define MSK_USED_BITS_NX90_madc_seq_ms_en 0x000000ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_ms_baseadr */
/* => Base address for writing the measurement results. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_ms_baseadr       0x00000028
#define Adr_NX90_madc_seq0_madc_seq_ms_baseadr 0xFF401828
#define Adr_NX90_madc_seq1_madc_seq_ms_baseadr 0xFF401928
#define Adr_NX90_madc_seq2_madc_seq_ms_baseadr 0xFF401A28
#define Adr_NX90_madc_seq3_madc_seq_ms_baseadr 0xFF401B28
#define DFLT_VAL_NX90_madc_seq_ms_baseadr      0x00000000

#define MSK_NX90_madc_seq_ms_baseadr_adr         0xfffffffe
#define SRT_NX90_madc_seq_ms_baseadr_adr         1
#define DFLT_VAL_NX90_madc_seq_ms_baseadr_adr    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_ms_baseadr_adr 0x00000000

/* all used bits of 'NX90_madc_seq_ms_baseadr': */
#define MSK_USED_BITS_NX90_madc_seq_ms_baseadr 0xfffffffe

/* --------------------------------------------------------------------- */
/* Register madc_seq_m0 */
/* => Measurement 0 configuration: */
/*    A measurement performs (oversample+1) ADC conversions, summing up the results. */
/*    Every ADC conversion starts with two adcclk periods followed by a sampling phase extension with a minimal duration selected by sext_sel. */
/*    The sampling phase of the first ADC conversion of the measurement ends when the trigger condition is fulfilled. */
/*    All subsequent conversions of the measurement do not wait for any trigger condition. */
/*    The sum consisting of (oversample+1) ADC conversions is written as a 16 bit word to the memory location (byte address) ms_adr + 2*adr_offset. */
/*    During the measurement the input multiplexer setting (channel selection) is changed to the value mux. */
/*    Depending on the timing selected by mux_time_sel the channel setting becomes effective for this or the next measurement. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m0       0x0000002C
#define Adr_NX90_madc_seq0_madc_seq_m0 0xFF40182C
#define Adr_NX90_madc_seq1_madc_seq_m0 0xFF40192C
#define Adr_NX90_madc_seq2_madc_seq_m0 0xFF401A2C
#define Adr_NX90_madc_seq3_madc_seq_m0 0xFF401B2C
#define DFLT_VAL_NX90_madc_seq_m0      0x0001ffff

#define MSK_NX90_madc_seq_m0_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m0_trigger            0
#define DFLT_VAL_NX90_madc_seq_m0_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m0_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m0_oversample         0x000e0000
#define SRT_NX90_madc_seq_m0_oversample         17
#define DFLT_VAL_NX90_madc_seq_m0_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m0_oversample 0x00000000
#define MSK_NX90_madc_seq_m0_mux                0x00700000
#define SRT_NX90_madc_seq_m0_mux                20
#define DFLT_VAL_NX90_madc_seq_m0_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m0_mux        0x00000000
#define MSK_NX90_madc_seq_m0_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m0_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m0_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m0_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m0': */
#define MSK_USED_BITS_NX90_madc_seq_m0 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m1 */
/* => Measurement 1 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m1       0x00000030
#define Adr_NX90_madc_seq0_madc_seq_m1 0xFF401830
#define Adr_NX90_madc_seq1_madc_seq_m1 0xFF401930
#define Adr_NX90_madc_seq2_madc_seq_m1 0xFF401A30
#define Adr_NX90_madc_seq3_madc_seq_m1 0xFF401B30
#define DFLT_VAL_NX90_madc_seq_m1      0x0001ffff

#define MSK_NX90_madc_seq_m1_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m1_trigger            0
#define DFLT_VAL_NX90_madc_seq_m1_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m1_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m1_oversample         0x000e0000
#define SRT_NX90_madc_seq_m1_oversample         17
#define DFLT_VAL_NX90_madc_seq_m1_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m1_oversample 0x00000000
#define MSK_NX90_madc_seq_m1_mux                0x00700000
#define SRT_NX90_madc_seq_m1_mux                20
#define DFLT_VAL_NX90_madc_seq_m1_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m1_mux        0x00000000
#define MSK_NX90_madc_seq_m1_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m1_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m1_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m1_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m1': */
#define MSK_USED_BITS_NX90_madc_seq_m1 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m2 */
/* => Measurement 2 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m2       0x00000034
#define Adr_NX90_madc_seq0_madc_seq_m2 0xFF401834
#define Adr_NX90_madc_seq1_madc_seq_m2 0xFF401934
#define Adr_NX90_madc_seq2_madc_seq_m2 0xFF401A34
#define Adr_NX90_madc_seq3_madc_seq_m2 0xFF401B34
#define DFLT_VAL_NX90_madc_seq_m2      0x0001ffff

#define MSK_NX90_madc_seq_m2_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m2_trigger            0
#define DFLT_VAL_NX90_madc_seq_m2_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m2_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m2_oversample         0x000e0000
#define SRT_NX90_madc_seq_m2_oversample         17
#define DFLT_VAL_NX90_madc_seq_m2_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m2_oversample 0x00000000
#define MSK_NX90_madc_seq_m2_mux                0x00700000
#define SRT_NX90_madc_seq_m2_mux                20
#define DFLT_VAL_NX90_madc_seq_m2_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m2_mux        0x00000000
#define MSK_NX90_madc_seq_m2_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m2_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m2_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m2_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m2': */
#define MSK_USED_BITS_NX90_madc_seq_m2 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m3 */
/* => Measurement 3 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m3       0x00000038
#define Adr_NX90_madc_seq0_madc_seq_m3 0xFF401838
#define Adr_NX90_madc_seq1_madc_seq_m3 0xFF401938
#define Adr_NX90_madc_seq2_madc_seq_m3 0xFF401A38
#define Adr_NX90_madc_seq3_madc_seq_m3 0xFF401B38
#define DFLT_VAL_NX90_madc_seq_m3      0x0001ffff

#define MSK_NX90_madc_seq_m3_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m3_trigger            0
#define DFLT_VAL_NX90_madc_seq_m3_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m3_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m3_oversample         0x000e0000
#define SRT_NX90_madc_seq_m3_oversample         17
#define DFLT_VAL_NX90_madc_seq_m3_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m3_oversample 0x00000000
#define MSK_NX90_madc_seq_m3_mux                0x00700000
#define SRT_NX90_madc_seq_m3_mux                20
#define DFLT_VAL_NX90_madc_seq_m3_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m3_mux        0x00000000
#define MSK_NX90_madc_seq_m3_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m3_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m3_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m3_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m3': */
#define MSK_USED_BITS_NX90_madc_seq_m3 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m4 */
/* => Measurement 4 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m4       0x0000003C
#define Adr_NX90_madc_seq0_madc_seq_m4 0xFF40183C
#define Adr_NX90_madc_seq1_madc_seq_m4 0xFF40193C
#define Adr_NX90_madc_seq2_madc_seq_m4 0xFF401A3C
#define Adr_NX90_madc_seq3_madc_seq_m4 0xFF401B3C
#define DFLT_VAL_NX90_madc_seq_m4      0x0001ffff

#define MSK_NX90_madc_seq_m4_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m4_trigger            0
#define DFLT_VAL_NX90_madc_seq_m4_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m4_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m4_oversample         0x000e0000
#define SRT_NX90_madc_seq_m4_oversample         17
#define DFLT_VAL_NX90_madc_seq_m4_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m4_oversample 0x00000000
#define MSK_NX90_madc_seq_m4_mux                0x00700000
#define SRT_NX90_madc_seq_m4_mux                20
#define DFLT_VAL_NX90_madc_seq_m4_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m4_mux        0x00000000
#define MSK_NX90_madc_seq_m4_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m4_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m4_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m4_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m4': */
#define MSK_USED_BITS_NX90_madc_seq_m4 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m5 */
/* => Measurement 5 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m5       0x00000040
#define Adr_NX90_madc_seq0_madc_seq_m5 0xFF401840
#define Adr_NX90_madc_seq1_madc_seq_m5 0xFF401940
#define Adr_NX90_madc_seq2_madc_seq_m5 0xFF401A40
#define Adr_NX90_madc_seq3_madc_seq_m5 0xFF401B40
#define DFLT_VAL_NX90_madc_seq_m5      0x0001ffff

#define MSK_NX90_madc_seq_m5_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m5_trigger            0
#define DFLT_VAL_NX90_madc_seq_m5_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m5_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m5_oversample         0x000e0000
#define SRT_NX90_madc_seq_m5_oversample         17
#define DFLT_VAL_NX90_madc_seq_m5_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m5_oversample 0x00000000
#define MSK_NX90_madc_seq_m5_mux                0x00700000
#define SRT_NX90_madc_seq_m5_mux                20
#define DFLT_VAL_NX90_madc_seq_m5_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m5_mux        0x00000000
#define MSK_NX90_madc_seq_m5_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m5_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m5_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m5_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m5': */
#define MSK_USED_BITS_NX90_madc_seq_m5 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m6 */
/* => Measurement 6 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m6       0x00000044
#define Adr_NX90_madc_seq0_madc_seq_m6 0xFF401844
#define Adr_NX90_madc_seq1_madc_seq_m6 0xFF401944
#define Adr_NX90_madc_seq2_madc_seq_m6 0xFF401A44
#define Adr_NX90_madc_seq3_madc_seq_m6 0xFF401B44
#define DFLT_VAL_NX90_madc_seq_m6      0x0001ffff

#define MSK_NX90_madc_seq_m6_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m6_trigger            0
#define DFLT_VAL_NX90_madc_seq_m6_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m6_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m6_oversample         0x000e0000
#define SRT_NX90_madc_seq_m6_oversample         17
#define DFLT_VAL_NX90_madc_seq_m6_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m6_oversample 0x00000000
#define MSK_NX90_madc_seq_m6_mux                0x00700000
#define SRT_NX90_madc_seq_m6_mux                20
#define DFLT_VAL_NX90_madc_seq_m6_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m6_mux        0x00000000
#define MSK_NX90_madc_seq_m6_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m6_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m6_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m6_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m6': */
#define MSK_USED_BITS_NX90_madc_seq_m6 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_m7 */
/* => Measurement 7 configuration: */
/*    s. madc_seq_m0 for details */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_m7       0x00000048
#define Adr_NX90_madc_seq0_madc_seq_m7 0xFF401848
#define Adr_NX90_madc_seq1_madc_seq_m7 0xFF401948
#define Adr_NX90_madc_seq2_madc_seq_m7 0xFF401A48
#define Adr_NX90_madc_seq3_madc_seq_m7 0xFF401B48
#define DFLT_VAL_NX90_madc_seq_m7      0x0001ffff

#define MSK_NX90_madc_seq_m7_trigger            0x0001ffff
#define SRT_NX90_madc_seq_m7_trigger            0
#define DFLT_VAL_NX90_madc_seq_m7_trigger       0x0001ffff
#define DFLT_BF_VAL_NX90_madc_seq_m7_trigger    0x0001ffff
#define MSK_NX90_madc_seq_m7_oversample         0x000e0000
#define SRT_NX90_madc_seq_m7_oversample         17
#define DFLT_VAL_NX90_madc_seq_m7_oversample    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m7_oversample 0x00000000
#define MSK_NX90_madc_seq_m7_mux                0x00700000
#define SRT_NX90_madc_seq_m7_mux                20
#define DFLT_VAL_NX90_madc_seq_m7_mux           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m7_mux        0x00000000
#define MSK_NX90_madc_seq_m7_adr_offset         0x0f800000
#define SRT_NX90_madc_seq_m7_adr_offset         23
#define DFLT_VAL_NX90_madc_seq_m7_adr_offset    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_m7_adr_offset 0x00000000

/* all used bits of 'NX90_madc_seq_m7': */
#define MSK_USED_BITS_NX90_madc_seq_m7 0x0fffffff

/* --------------------------------------------------------------------- */
/* Register madc_seq_cmd */
/* => Command Register: */
/*    Run or abort processing the measurement sequence. */
/*    This register is writable but can also be changed by hardware (reset). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_cmd       0x0000004C
#define Adr_NX90_madc_seq0_madc_seq_cmd 0xFF40184C
#define Adr_NX90_madc_seq1_madc_seq_cmd 0xFF40194C
#define Adr_NX90_madc_seq2_madc_seq_cmd 0xFF401A4C
#define Adr_NX90_madc_seq3_madc_seq_cmd 0xFF401B4C
#define DFLT_VAL_NX90_madc_seq_cmd      0x00000000

#define MSK_NX90_madc_seq_cmd_run                0x00000001
#define SRT_NX90_madc_seq_cmd_run                0
#define DFLT_VAL_NX90_madc_seq_cmd_run           0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cmd_run        0x00000000
#define MSK_NX90_madc_seq_cmd_continuous         0x00000002
#define SRT_NX90_madc_seq_cmd_continuous         1
#define DFLT_VAL_NX90_madc_seq_cmd_continuous    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cmd_continuous 0x00000000
#define MSK_NX90_madc_seq_cmd_reset              0x00000004
#define SRT_NX90_madc_seq_cmd_reset              2
#define DFLT_VAL_NX90_madc_seq_cmd_reset         0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cmd_reset      0x00000000
#define MSK_NX90_madc_seq_cmd_debug              0x00000008
#define SRT_NX90_madc_seq_cmd_debug              3
#define DFLT_VAL_NX90_madc_seq_cmd_debug         0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_cmd_debug      0x00000000

/* all used bits of 'NX90_madc_seq_cmd': */
#define MSK_USED_BITS_NX90_madc_seq_cmd 0x0000000f

/* --------------------------------------------------------------------- */
/* Register madc_seq_status */
/* => Status of the current measurement sequence in progress */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_status       0x00000050
#define Adr_NX90_madc_seq0_madc_seq_status 0xFF401850
#define Adr_NX90_madc_seq1_madc_seq_status 0xFF401950
#define Adr_NX90_madc_seq2_madc_seq_status 0xFF401A50
#define Adr_NX90_madc_seq3_madc_seq_status 0xFF401B50

#define MSK_NX90_madc_seq_status_m_nr                 0x0000000f
#define SRT_NX90_madc_seq_status_m_nr                 0
#define MSK_NX90_madc_seq_status_adc_half_clock_cycle 0x000001f0
#define SRT_NX90_madc_seq_status_adc_half_clock_cycle 4

/* all used bits of 'NX90_madc_seq_status': */
#define MSK_USED_BITS_NX90_madc_seq_status 0x000001ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_result_current */
/* => Result register of current measurement */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_result_current       0x00000054
#define Adr_NX90_madc_seq0_madc_seq_result_current 0xFF401854
#define Adr_NX90_madc_seq1_madc_seq_result_current 0xFF401954
#define Adr_NX90_madc_seq2_madc_seq_result_current 0xFF401A54
#define Adr_NX90_madc_seq3_madc_seq_result_current 0xFF401B54

#define MSK_NX90_madc_seq_result_current_val   0x00007fff
#define SRT_NX90_madc_seq_result_current_val   0
#define MSK_NX90_madc_seq_result_current_mnr   0x00070000
#define SRT_NX90_madc_seq_result_current_mnr   16
#define MSK_NX90_madc_seq_result_current_valid 0x80000000
#define SRT_NX90_madc_seq_result_current_valid 31

/* all used bits of 'NX90_madc_seq_result_current': */
#define MSK_USED_BITS_NX90_madc_seq_result_current 0x80077fff

/* --------------------------------------------------------------------- */
/* Register madc_seq_result_last */
/* => Result register of last measurement */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_result_last       0x00000058
#define Adr_NX90_madc_seq0_madc_seq_result_last 0xFF401858
#define Adr_NX90_madc_seq1_madc_seq_result_last 0xFF401958
#define Adr_NX90_madc_seq2_madc_seq_result_last 0xFF401A58
#define Adr_NX90_madc_seq3_madc_seq_result_last 0xFF401B58

#define MSK_NX90_madc_seq_result_last_val   0x00007fff
#define SRT_NX90_madc_seq_result_last_val   0
#define MSK_NX90_madc_seq_result_last_mnr   0x00070000
#define SRT_NX90_madc_seq_result_last_mnr   16
#define MSK_NX90_madc_seq_result_last_valid 0x80000000
#define SRT_NX90_madc_seq_result_last_valid 31

/* all used bits of 'NX90_madc_seq_result_last': */
#define MSK_USED_BITS_NX90_madc_seq_result_last 0x80077fff

/* --------------------------------------------------------------------- */
/* Register madc_seq_debug */
/* => Debug Mode register: */
/*    If cmd-debug is enabled, this register directly controls inputs of both ADCs. */
/*    Output data of both ADCs will still be at data0 and data1. */
/*    In debug mode, a software reset (cfg-reset_n) will not influence these values (only directly signal ADC_NRES). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_debug       0x0000005C
#define Adr_NX90_madc_seq0_madc_seq_debug 0xFF40185C
#define Adr_NX90_madc_seq1_madc_seq_debug 0xFF40195C
#define Adr_NX90_madc_seq2_madc_seq_debug 0xFF401A5C
#define Adr_NX90_madc_seq3_madc_seq_debug 0xFF401B5C
#define DFLT_VAL_NX90_madc_seq_debug      0x00000000

#define MSK_NX90_madc_seq_debug_adc_clk              0x00000001
#define SRT_NX90_madc_seq_debug_adc_clk              0
#define DFLT_VAL_NX90_madc_seq_debug_adc_clk         0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_clk      0x00000000
#define MSK_NX90_madc_seq_debug_adc_soc              0x00000002
#define SRT_NX90_madc_seq_debug_adc_soc              1
#define DFLT_VAL_NX90_madc_seq_debug_adc_soc         0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_soc      0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux0         0x00000004
#define SRT_NX90_madc_seq_debug_adc_set_mux0         2
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux0    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux0 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux1         0x00000008
#define SRT_NX90_madc_seq_debug_adc_set_mux1         3
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux1    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux1 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux2         0x00000010
#define SRT_NX90_madc_seq_debug_adc_set_mux2         4
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux2    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux2 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux3         0x00000020
#define SRT_NX90_madc_seq_debug_adc_set_mux3         5
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux3    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux3 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux4         0x00000040
#define SRT_NX90_madc_seq_debug_adc_set_mux4         6
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux4    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux4 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux5         0x00000080
#define SRT_NX90_madc_seq_debug_adc_set_mux5         7
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux5    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux5 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux6         0x00000100
#define SRT_NX90_madc_seq_debug_adc_set_mux6         8
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux6    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux6 0x00000000
#define MSK_NX90_madc_seq_debug_adc_set_mux7         0x00000200
#define SRT_NX90_madc_seq_debug_adc_set_mux7         9
#define DFLT_VAL_NX90_madc_seq_debug_adc_set_mux7    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_debug_adc_set_mux7 0x00000000

/* all used bits of 'NX90_madc_seq_debug': */
#define MSK_USED_BITS_NX90_madc_seq_debug 0x000003ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event irq, reset status irqs at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_irq_raw       0x00000070
#define Adr_NX90_madc_seq0_madc_seq_irq_raw 0xFF401870
#define Adr_NX90_madc_seq1_madc_seq_irq_raw 0xFF401970
#define Adr_NX90_madc_seq2_madc_seq_irq_raw 0xFF401A70
#define Adr_NX90_madc_seq3_madc_seq_irq_raw 0xFF401B70
#define DFLT_VAL_NX90_madc_seq_irq_raw      0x00000000

#define MSK_NX90_madc_seq_irq_raw_m0_cmpl             0x00000001
#define SRT_NX90_madc_seq_irq_raw_m0_cmpl             0
#define DFLT_VAL_NX90_madc_seq_irq_raw_m0_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m0_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m1_cmpl             0x00000002
#define SRT_NX90_madc_seq_irq_raw_m1_cmpl             1
#define DFLT_VAL_NX90_madc_seq_irq_raw_m1_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m1_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m2_cmpl             0x00000004
#define SRT_NX90_madc_seq_irq_raw_m2_cmpl             2
#define DFLT_VAL_NX90_madc_seq_irq_raw_m2_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m2_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m3_cmpl             0x00000008
#define SRT_NX90_madc_seq_irq_raw_m3_cmpl             3
#define DFLT_VAL_NX90_madc_seq_irq_raw_m3_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m3_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m4_cmpl             0x00000010
#define SRT_NX90_madc_seq_irq_raw_m4_cmpl             4
#define DFLT_VAL_NX90_madc_seq_irq_raw_m4_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m4_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m5_cmpl             0x00000020
#define SRT_NX90_madc_seq_irq_raw_m5_cmpl             5
#define DFLT_VAL_NX90_madc_seq_irq_raw_m5_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m5_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m6_cmpl             0x00000040
#define SRT_NX90_madc_seq_irq_raw_m6_cmpl             6
#define DFLT_VAL_NX90_madc_seq_irq_raw_m6_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m6_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_m7_cmpl             0x00000080
#define SRT_NX90_madc_seq_irq_raw_m7_cmpl             7
#define DFLT_VAL_NX90_madc_seq_irq_raw_m7_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_m7_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_raw_seq_cmpl            0x00000100
#define SRT_NX90_madc_seq_irq_raw_seq_cmpl            8
#define DFLT_VAL_NX90_madc_seq_irq_raw_seq_cmpl       0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_seq_cmpl    0x00000000
#define MSK_NX90_madc_seq_irq_raw_dma_overrun         0x00000200
#define SRT_NX90_madc_seq_irq_raw_dma_overrun         9
#define DFLT_VAL_NX90_madc_seq_irq_raw_dma_overrun    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_dma_overrun 0x00000000
#define MSK_NX90_madc_seq_irq_raw_dma_hresp           0x00000400
#define SRT_NX90_madc_seq_irq_raw_dma_hresp           10
#define DFLT_VAL_NX90_madc_seq_irq_raw_dma_hresp      0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_raw_dma_hresp   0x00000000

/* all used bits of 'NX90_madc_seq_irq_raw': */
#define MSK_USED_BITS_NX90_madc_seq_irq_raw 0x000007ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_irq_masked       0x00000074
#define Adr_NX90_madc_seq0_madc_seq_irq_masked 0xFF401874
#define Adr_NX90_madc_seq1_madc_seq_irq_masked 0xFF401974
#define Adr_NX90_madc_seq2_madc_seq_irq_masked 0xFF401A74
#define Adr_NX90_madc_seq3_madc_seq_irq_masked 0xFF401B74

#define MSK_NX90_madc_seq_irq_masked_m0_cmpl     0x00000001
#define SRT_NX90_madc_seq_irq_masked_m0_cmpl     0
#define MSK_NX90_madc_seq_irq_masked_m1_cmpl     0x00000002
#define SRT_NX90_madc_seq_irq_masked_m1_cmpl     1
#define MSK_NX90_madc_seq_irq_masked_m2_cmpl     0x00000004
#define SRT_NX90_madc_seq_irq_masked_m2_cmpl     2
#define MSK_NX90_madc_seq_irq_masked_m3_cmpl     0x00000008
#define SRT_NX90_madc_seq_irq_masked_m3_cmpl     3
#define MSK_NX90_madc_seq_irq_masked_m4_cmpl     0x00000010
#define SRT_NX90_madc_seq_irq_masked_m4_cmpl     4
#define MSK_NX90_madc_seq_irq_masked_m5_cmpl     0x00000020
#define SRT_NX90_madc_seq_irq_masked_m5_cmpl     5
#define MSK_NX90_madc_seq_irq_masked_m6_cmpl     0x00000040
#define SRT_NX90_madc_seq_irq_masked_m6_cmpl     6
#define MSK_NX90_madc_seq_irq_masked_m7_cmpl     0x00000080
#define SRT_NX90_madc_seq_irq_masked_m7_cmpl     7
#define MSK_NX90_madc_seq_irq_masked_seq_cmpl    0x00000100
#define SRT_NX90_madc_seq_irq_masked_seq_cmpl    8
#define MSK_NX90_madc_seq_irq_masked_dma_overrun 0x00000200
#define SRT_NX90_madc_seq_irq_masked_dma_overrun 9
#define MSK_NX90_madc_seq_irq_masked_dma_hresp   0x00000400
#define SRT_NX90_madc_seq_irq_masked_dma_hresp   10

/* all used bits of 'NX90_madc_seq_irq_masked': */
#define MSK_USED_BITS_NX90_madc_seq_irq_masked 0x000007ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_irq_mask_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_mpwm_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_irq_mask_set       0x00000078
#define Adr_NX90_madc_seq0_madc_seq_irq_mask_set 0xFF401878
#define Adr_NX90_madc_seq1_madc_seq_irq_mask_set 0xFF401978
#define Adr_NX90_madc_seq2_madc_seq_irq_mask_set 0xFF401A78
#define Adr_NX90_madc_seq3_madc_seq_irq_mask_set 0xFF401B78
#define DFLT_VAL_NX90_madc_seq_irq_mask_set      0x00000000

#define MSK_NX90_madc_seq_irq_mask_set_m0_cmpl             0x00000001
#define SRT_NX90_madc_seq_irq_mask_set_m0_cmpl             0
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m0_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m0_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m1_cmpl             0x00000002
#define SRT_NX90_madc_seq_irq_mask_set_m1_cmpl             1
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m1_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m1_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m2_cmpl             0x00000004
#define SRT_NX90_madc_seq_irq_mask_set_m2_cmpl             2
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m2_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m2_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m3_cmpl             0x00000008
#define SRT_NX90_madc_seq_irq_mask_set_m3_cmpl             3
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m3_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m3_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m4_cmpl             0x00000010
#define SRT_NX90_madc_seq_irq_mask_set_m4_cmpl             4
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m4_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m4_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m5_cmpl             0x00000020
#define SRT_NX90_madc_seq_irq_mask_set_m5_cmpl             5
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m5_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m5_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m6_cmpl             0x00000040
#define SRT_NX90_madc_seq_irq_mask_set_m6_cmpl             6
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m6_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m6_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_m7_cmpl             0x00000080
#define SRT_NX90_madc_seq_irq_mask_set_m7_cmpl             7
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_m7_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_m7_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_seq_cmpl            0x00000100
#define SRT_NX90_madc_seq_irq_mask_set_seq_cmpl            8
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_seq_cmpl       0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_seq_cmpl    0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_dma_overrun         0x00000200
#define SRT_NX90_madc_seq_irq_mask_set_dma_overrun         9
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_dma_overrun    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_dma_overrun 0x00000000
#define MSK_NX90_madc_seq_irq_mask_set_dma_hresp           0x00000400
#define SRT_NX90_madc_seq_irq_mask_set_dma_hresp           10
#define DFLT_VAL_NX90_madc_seq_irq_mask_set_dma_hresp      0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_set_dma_hresp   0x00000000

/* all used bits of 'NX90_madc_seq_irq_mask_set': */
#define MSK_USED_BITS_NX90_madc_seq_irq_mask_set 0x000007ff

/* --------------------------------------------------------------------- */
/* Register madc_seq_irq_mask_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows bit number of the lowest active bit in IRQ_MASKED or MAX+1 when no bit is set. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_madc_seq_irq_mask_reset       0x0000007C
#define Adr_NX90_madc_seq0_madc_seq_irq_mask_reset 0xFF40187C
#define Adr_NX90_madc_seq1_madc_seq_irq_mask_reset 0xFF40197C
#define Adr_NX90_madc_seq2_madc_seq_irq_mask_reset 0xFF401A7C
#define Adr_NX90_madc_seq3_madc_seq_irq_mask_reset 0xFF401B7C
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset      0x00000000

#define MSK_NX90_madc_seq_irq_mask_reset_m0_cmpl             0x00000001
#define SRT_NX90_madc_seq_irq_mask_reset_m0_cmpl             0
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m0_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m0_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m1_cmpl             0x00000002
#define SRT_NX90_madc_seq_irq_mask_reset_m1_cmpl             1
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m1_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m1_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m2_cmpl             0x00000004
#define SRT_NX90_madc_seq_irq_mask_reset_m2_cmpl             2
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m2_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m2_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m3_cmpl             0x00000008
#define SRT_NX90_madc_seq_irq_mask_reset_m3_cmpl             3
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m3_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m3_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m4_cmpl             0x00000010
#define SRT_NX90_madc_seq_irq_mask_reset_m4_cmpl             4
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m4_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m4_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m5_cmpl             0x00000020
#define SRT_NX90_madc_seq_irq_mask_reset_m5_cmpl             5
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m5_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m5_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m6_cmpl             0x00000040
#define SRT_NX90_madc_seq_irq_mask_reset_m6_cmpl             6
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m6_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m6_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_m7_cmpl             0x00000080
#define SRT_NX90_madc_seq_irq_mask_reset_m7_cmpl             7
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_m7_cmpl        0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_m7_cmpl     0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_seq_cmpl            0x00000100
#define SRT_NX90_madc_seq_irq_mask_reset_seq_cmpl            8
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_seq_cmpl       0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_seq_cmpl    0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_dma_overrun         0x00000200
#define SRT_NX90_madc_seq_irq_mask_reset_dma_overrun         9
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_dma_overrun    0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_dma_overrun 0x00000000
#define MSK_NX90_madc_seq_irq_mask_reset_dma_hresp           0x00000400
#define SRT_NX90_madc_seq_irq_mask_reset_dma_hresp           10
#define DFLT_VAL_NX90_madc_seq_irq_mask_reset_dma_hresp      0x00000000
#define DFLT_BF_VAL_NX90_madc_seq_irq_mask_reset_dma_hresp   0x00000000

/* all used bits of 'NX90_madc_seq_irq_mask_reset': */
#define MSK_USED_BITS_NX90_madc_seq_irq_mask_reset 0x000007ff


/* ===================================================================== */

/* Area of eth_system */

/* ===================================================================== */

#define Addr_NX90_eth_system 0xFF480000

/* ===================================================================== */

/* Area of eth */

/* ===================================================================== */

#define Addr_NX90_eth 0xFF480000

/* --------------------------------------------------------------------- */
/* Register eth_config */
/* => ETH config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_config  0x00000000
#define Adr_NX90_eth_eth_config  0xFF480000
#define Adr_NX90_eth_config      0xFF480000
#define DFLT_VAL_NX90_eth_config 0x00000004

#define MSK_NX90_eth_config_rx_watermark_irq               0x0000000f
#define SRT_NX90_eth_config_rx_watermark_irq               0
#define DFLT_VAL_NX90_eth_config_rx_watermark_irq          0x00000004
#define DFLT_BF_VAL_NX90_eth_config_rx_watermark_irq       0x00000004
#define MSK_NX90_eth_config_rx_sample_phase                0x00000070
#define SRT_NX90_eth_config_rx_sample_phase                4
#define DFLT_VAL_NX90_eth_config_rx_sample_phase           0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_sample_phase        0x00000000
#define MSK_NX90_eth_config_rx_delay_inputs                0x00000080
#define SRT_NX90_eth_config_rx_delay_inputs                7
#define DFLT_VAL_NX90_eth_config_rx_delay_inputs           0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_delay_inputs        0x00000000
#define MSK_NX90_eth_config_rx_allow_jumbo_packets         0x00000100
#define SRT_NX90_eth_config_rx_allow_jumbo_packets         8
#define DFLT_VAL_NX90_eth_config_rx_allow_jumbo_packets    0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_allow_jumbo_packets 0x00000000
#define MSK_NX90_eth_config_rx_exact_preamble              0x00000200
#define SRT_NX90_eth_config_rx_exact_preamble              9
#define DFLT_VAL_NX90_eth_config_rx_exact_preamble         0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_exact_preamble      0x00000000
#define MSK_NX90_eth_config_rx_no_preamble                 0x00000400
#define SRT_NX90_eth_config_rx_no_preamble                 10
#define DFLT_VAL_NX90_eth_config_rx_no_preamble            0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_no_preamble         0x00000000
#define MSK_NX90_eth_config_rx_dma_mode                    0x00000800
#define SRT_NX90_eth_config_rx_dma_mode                    11
#define DFLT_VAL_NX90_eth_config_rx_dma_mode               0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_dma_mode            0x00000000
#define MSK_NX90_eth_config_rx_systime_sfd                 0x00001000
#define SRT_NX90_eth_config_rx_systime_sfd                 12
#define DFLT_VAL_NX90_eth_config_rx_systime_sfd            0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_systime_sfd         0x00000000
#define MSK_NX90_eth_config_rx_enable                      0x00002000
#define SRT_NX90_eth_config_rx_enable                      13
#define DFLT_VAL_NX90_eth_config_rx_enable                 0x00000000
#define DFLT_BF_VAL_NX90_eth_config_rx_enable              0x00000000
#define MSK_NX90_eth_config_frequency                      0x08000000
#define SRT_NX90_eth_config_frequency                      27
#define DFLT_VAL_NX90_eth_config_frequency                 0x00000000
#define DFLT_BF_VAL_NX90_eth_config_frequency              0x00000000
#define MSK_NX90_eth_config_hd_suppress_loopback           0x10000000
#define SRT_NX90_eth_config_hd_suppress_loopback           28
#define DFLT_VAL_NX90_eth_config_hd_suppress_loopback      0x00000000
#define DFLT_BF_VAL_NX90_eth_config_hd_suppress_loopback   0x00000000
#define MSK_NX90_eth_config_phy_mode                       0x20000000
#define SRT_NX90_eth_config_phy_mode                       29
#define DFLT_VAL_NX90_eth_config_phy_mode                  0x00000000
#define DFLT_BF_VAL_NX90_eth_config_phy_mode               0x00000000

/* all used bits of 'NX90_eth_config': */
#define MSK_USED_BITS_NX90_eth_config 0x38003fff

/* --------------------------------------------------------------------- */
/* Register eth_tx_config */
/* => ETH config register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_config  0x00000004
#define Adr_NX90_eth_eth_tx_config  0xFF480004
#define Adr_NX90_eth_tx_config      0xFF480004
#define DFLT_VAL_NX90_eth_tx_config 0x02188084

#define MSK_NX90_eth_tx_config_tx_watermark_irq           0x0000000f
#define SRT_NX90_eth_tx_config_tx_watermark_irq           0
#define DFLT_VAL_NX90_eth_tx_config_tx_watermark_irq      0x00000004
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_watermark_irq   0x00000004
#define MSK_NX90_eth_tx_config_tx_watermark_start         0x000000f0
#define SRT_NX90_eth_tx_config_tx_watermark_start         4
#define DFLT_VAL_NX90_eth_tx_config_tx_watermark_start    0x00000080
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_watermark_start 0x00000008
#define MSK_NX90_eth_tx_config_tx_output_phase            0x00000700
#define SRT_NX90_eth_tx_config_tx_output_phase            8
#define DFLT_VAL_NX90_eth_tx_config_tx_output_phase       0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_output_phase    0x00000000
#define MSK_NX90_eth_tx_config_tx_preamble_len            0x0000f800
#define SRT_NX90_eth_tx_config_tx_preamble_len            11
#define DFLT_VAL_NX90_eth_tx_config_tx_preamble_len       0x00008000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_preamble_len    0x00000010
#define MSK_NX90_eth_tx_config_tx_min_ifg_cycles          0x001f0000
#define SRT_NX90_eth_tx_config_tx_min_ifg_cycles          16
#define DFLT_VAL_NX90_eth_tx_config_tx_min_ifg_cycles     0x00180000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_min_ifg_cycles  0x00000018
#define MSK_NX90_eth_tx_config_tx_crs_low_cycles          0x03e00000
#define SRT_NX90_eth_tx_config_tx_crs_low_cycles          21
#define DFLT_VAL_NX90_eth_tx_config_tx_crs_low_cycles     0x02000000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_crs_low_cycles  0x00000010
#define MSK_NX90_eth_tx_config_tx_abort_frame             0x1c000000
#define SRT_NX90_eth_tx_config_tx_abort_frame             26
#define DFLT_VAL_NX90_eth_tx_config_tx_abort_frame        0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_abort_frame     0x00000000
#define MSK_NX90_eth_tx_config_tx_systime_sfd             0x20000000
#define SRT_NX90_eth_tx_config_tx_systime_sfd             29
#define DFLT_VAL_NX90_eth_tx_config_tx_systime_sfd        0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_systime_sfd     0x00000000
#define MSK_NX90_eth_tx_config_tx_dma_mode                0x40000000
#define SRT_NX90_eth_tx_config_tx_dma_mode                30
#define DFLT_VAL_NX90_eth_tx_config_tx_dma_mode           0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_config_tx_dma_mode        0x00000000
#define MSK_NX90_eth_tx_config_half_duplex                0x80000000
#define SRT_NX90_eth_tx_config_half_duplex                31
#define DFLT_VAL_NX90_eth_tx_config_half_duplex           0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_config_half_duplex        0x00000000

/* all used bits of 'NX90_eth_tx_config': */
#define MSK_USED_BITS_NX90_eth_tx_config 0xffffffff

/* --------------------------------------------------------------------- */
/* Register eth_status */
/* => ETH status register: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_status 0x00000008
#define Adr_NX90_eth_eth_status 0xFF480008
#define Adr_NX90_eth_status     0xFF480008

#define MSK_NX90_eth_status_rx_fill 0x0000001f
#define SRT_NX90_eth_status_rx_fill 0
#define MSK_NX90_eth_status_tx_fill 0x00000f80
#define SRT_NX90_eth_status_tx_fill 7

/* all used bits of 'NX90_eth_status': */
#define MSK_USED_BITS_NX90_eth_status 0x00000f9f

/* --------------------------------------------------------------------- */
/* Register eth_tx_data */
/* => Data to TX-FIFO: */
/*    returns 0xdeadbeef on read */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_data  0x0000000C
#define Adr_NX90_eth_eth_tx_data  0xFF48000C
#define Adr_NX90_eth_tx_data      0xFF48000C
#define DFLT_VAL_NX90_eth_tx_data 0x00000000

#define MSK_NX90_eth_tx_data_val         0xffffffff
#define SRT_NX90_eth_tx_data_val         0
#define DFLT_VAL_NX90_eth_tx_data_val    0x00000000
#define DFLT_BF_VAL_NX90_eth_tx_data_val 0x00000000

/* all used bits of 'NX90_eth_tx_data': */
#define MSK_USED_BITS_NX90_eth_tx_data 0xffffffff

/* --------------------------------------------------------------------- */
/* Register eth_rx_data */
/* => Data from RX-FIFO: */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_data 0x00000010
#define Adr_NX90_eth_eth_rx_data 0xFF480010
#define Adr_NX90_eth_rx_data     0xFF480010

#define MSK_NX90_eth_rx_data_val 0xffffffff
#define SRT_NX90_eth_rx_data_val 0

/* all used bits of 'NX90_eth_rx_data': */
#define MSK_USED_BITS_NX90_eth_rx_data 0xffffffff

/* --------------------------------------------------------------------- */
/* Register eth_tx_len */
/* => Length of data inside transmitted frame (between SFD and FCS) */
/*    Note: Set this value after previous frame is completely transmitted (irq-tx_frame_finished). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_len  0x00000014
#define Adr_NX90_eth_eth_tx_len  0xFF480014
#define Adr_NX90_eth_tx_len      0xFF480014
#define DFLT_VAL_NX90_eth_tx_len 0x000005ea

#define MSK_NX90_eth_tx_len_val         0x000007ff
#define SRT_NX90_eth_tx_len_val         0
#define DFLT_VAL_NX90_eth_tx_len_val    0x000005ea
#define DFLT_BF_VAL_NX90_eth_tx_len_val 0x000005ea

/* all used bits of 'NX90_eth_tx_len': */
#define MSK_USED_BITS_NX90_eth_tx_len 0x000007ff

/* --------------------------------------------------------------------- */
/* Register eth_rx_len_stat */
/* => Length and status information of lastly received frame */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_len_stat 0x00000018
#define Adr_NX90_eth_eth_rx_len_stat 0xFF480018
#define Adr_NX90_eth_rx_len_stat     0xFF480018

#define MSK_NX90_eth_rx_len_stat_rx_len            0x000007ff
#define SRT_NX90_eth_rx_len_stat_rx_len            0
#define MSK_NX90_eth_rx_len_stat_rx_short_ifg      0x08000000
#define SRT_NX90_eth_rx_len_stat_rx_short_ifg      27
#define MSK_NX90_eth_rx_len_stat_rx_jumbo_packet   0x10000000
#define SRT_NX90_eth_rx_len_stat_rx_jumbo_packet   28
#define MSK_NX90_eth_rx_len_stat_rx_dribble_nibble 0x20000000
#define SRT_NX90_eth_rx_len_stat_rx_dribble_nibble 29
#define MSK_NX90_eth_rx_len_stat_rx_crc_error      0x40000000
#define SRT_NX90_eth_rx_len_stat_rx_crc_error      30
#define MSK_NX90_eth_rx_len_stat_rx_mii_rxerr      0x80000000
#define SRT_NX90_eth_rx_len_stat_rx_mii_rxerr      31

/* all used bits of 'NX90_eth_rx_len_stat': */
#define MSK_USED_BITS_NX90_eth_rx_len_stat 0xf80007ff

/* --------------------------------------------------------------------- */
/* Register eth_rx_systime_ns */
/* => Systime_ns sampled at start of received frame. */
/*    Exact position of start of frame is defined in eth_config-systime_sfd. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_rx_systime_ns 0x00000020
#define Adr_NX90_eth_eth_rx_systime_ns 0xFF480020
#define Adr_NX90_eth_rx_systime_ns     0xFF480020

#define MSK_NX90_eth_rx_systime_ns_val 0xffffffff
#define SRT_NX90_eth_rx_systime_ns_val 0

/* all used bits of 'NX90_eth_rx_systime_ns': */
#define MSK_USED_BITS_NX90_eth_rx_systime_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register eth_tx_systime_ns */
/* => Systime_ns sampled at start of transmitted frame. */
/*    Exact position of start of frame is defined in eth_tx_config-systime_sfd. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_tx_systime_ns 0x00000024
#define Adr_NX90_eth_eth_tx_systime_ns 0xFF480024
#define Adr_NX90_eth_tx_systime_ns     0xFF480024

#define MSK_NX90_eth_tx_systime_ns_val 0xffffffff
#define SRT_NX90_eth_tx_systime_ns_val 0

/* all used bits of 'NX90_eth_tx_systime_ns': */
#define MSK_USED_BITS_NX90_eth_tx_systime_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register eth_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    Write access with '1' to rx_/tx_fifo_undr/_ovfl resets RX-FIFO/TX-FIFO. */
/*    Bits rx_data and tx_fifo are cleared by reading from/filling the appropriate FIFO. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_raw  0x00000028
#define Adr_NX90_eth_eth_irq_raw  0xFF480028
#define Adr_NX90_eth_irq_raw      0xFF480028
#define DFLT_VAL_NX90_eth_irq_raw 0x00000000

#define MSK_NX90_eth_irq_raw_tx_fifo                   0x00000001
#define SRT_NX90_eth_irq_raw_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo           0x00000000
#define MSK_NX90_eth_irq_raw_tx_frame_finished         0x00000002
#define SRT_NX90_eth_irq_raw_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_raw_tx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_raw_rx_data                   0x00000004
#define SRT_NX90_eth_irq_raw_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_raw_rx_data              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_data           0x00000000
#define MSK_NX90_eth_irq_raw_rx_frame_finished         0x00000008
#define SRT_NX90_eth_irq_raw_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_raw_rx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_raw_tx_fifo_undr              0x00000010
#define SRT_NX90_eth_irq_raw_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_raw_tx_fifo_ovfl              0x00000020
#define SRT_NX90_eth_irq_raw_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_raw_tx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_raw_rx_fifo_undr              0x00000040
#define SRT_NX90_eth_irq_raw_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_raw_rx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_raw_rx_fifo_ovfl              0x00000080
#define SRT_NX90_eth_irq_raw_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_raw_rx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_raw_rx_cpu_too_slow           0x00000100
#define SRT_NX90_eth_irq_raw_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_raw_rx_cpu_too_slow      0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_cpu_too_slow   0x00000000
#define MSK_NX90_eth_irq_raw_rx_short_dv               0x00000200
#define SRT_NX90_eth_irq_raw_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_raw_rx_short_dv          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_short_dv       0x00000000
#define MSK_NX90_eth_irq_raw_rx_preamble_error         0x00000400
#define SRT_NX90_eth_irq_raw_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_raw_rx_preamble_error    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_rx_preamble_error 0x00000000
#define MSK_NX90_eth_irq_raw_tx_col                    0x00000800
#define SRT_NX90_eth_irq_raw_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_raw_tx_col               0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_col            0x00000000
#define MSK_NX90_eth_irq_raw_tx_late_col               0x00001000
#define SRT_NX90_eth_irq_raw_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_raw_tx_late_col          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_raw_tx_late_col       0x00000000

/* all used bits of 'NX90_eth_irq_raw': */
#define MSK_USED_BITS_NX90_eth_irq_raw 0x00001fff

/* --------------------------------------------------------------------- */
/* Register eth_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs as connected to ARM/xPIC. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_masked 0x0000002C
#define Adr_NX90_eth_eth_irq_masked 0xFF48002C
#define Adr_NX90_eth_irq_masked     0xFF48002C

#define MSK_NX90_eth_irq_masked_tx_fifo           0x00000001
#define SRT_NX90_eth_irq_masked_tx_fifo           0
#define MSK_NX90_eth_irq_masked_tx_frame_finished 0x00000002
#define SRT_NX90_eth_irq_masked_tx_frame_finished 1
#define MSK_NX90_eth_irq_masked_rx_data           0x00000004
#define SRT_NX90_eth_irq_masked_rx_data           2
#define MSK_NX90_eth_irq_masked_rx_frame_finished 0x00000008
#define SRT_NX90_eth_irq_masked_rx_frame_finished 3
#define MSK_NX90_eth_irq_masked_tx_fifo_undr      0x00000010
#define SRT_NX90_eth_irq_masked_tx_fifo_undr      4
#define MSK_NX90_eth_irq_masked_tx_fifo_ovfl      0x00000020
#define SRT_NX90_eth_irq_masked_tx_fifo_ovfl      5
#define MSK_NX90_eth_irq_masked_rx_fifo_undr      0x00000040
#define SRT_NX90_eth_irq_masked_rx_fifo_undr      6
#define MSK_NX90_eth_irq_masked_rx_fifo_ovfl      0x00000080
#define SRT_NX90_eth_irq_masked_rx_fifo_ovfl      7
#define MSK_NX90_eth_irq_masked_rx_cpu_too_slow   0x00000100
#define SRT_NX90_eth_irq_masked_rx_cpu_too_slow   8
#define MSK_NX90_eth_irq_masked_rx_short_dv       0x00000200
#define SRT_NX90_eth_irq_masked_rx_short_dv       9
#define MSK_NX90_eth_irq_masked_rx_preamble_error 0x00000400
#define SRT_NX90_eth_irq_masked_rx_preamble_error 10
#define MSK_NX90_eth_irq_masked_tx_col            0x00000800
#define SRT_NX90_eth_irq_masked_tx_col            11
#define MSK_NX90_eth_irq_masked_tx_late_col       0x00001000
#define SRT_NX90_eth_irq_masked_tx_late_col       12

/* all used bits of 'NX90_eth_irq_masked': */
#define MSK_USED_BITS_NX90_eth_irq_masked 0x00001fff

/* --------------------------------------------------------------------- */
/* Register eth_irq_msk_set */
/* => IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_eth_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_msk_set  0x00000030
#define Adr_NX90_eth_eth_irq_msk_set  0xFF480030
#define Adr_NX90_eth_irq_msk_set      0xFF480030
#define DFLT_VAL_NX90_eth_irq_msk_set 0x00000000

#define MSK_NX90_eth_irq_msk_set_tx_fifo                   0x00000001
#define SRT_NX90_eth_irq_msk_set_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo           0x00000000
#define MSK_NX90_eth_irq_msk_set_tx_frame_finished         0x00000002
#define SRT_NX90_eth_irq_msk_set_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_data                   0x00000004
#define SRT_NX90_eth_irq_msk_set_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_data              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_data           0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_frame_finished         0x00000008
#define SRT_NX90_eth_irq_msk_set_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_msk_set_tx_fifo_undr              0x00000010
#define SRT_NX90_eth_irq_msk_set_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_msk_set_tx_fifo_ovfl              0x00000020
#define SRT_NX90_eth_irq_msk_set_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_fifo_undr              0x00000040
#define SRT_NX90_eth_irq_msk_set_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_fifo_ovfl              0x00000080
#define SRT_NX90_eth_irq_msk_set_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_cpu_too_slow           0x00000100
#define SRT_NX90_eth_irq_msk_set_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_cpu_too_slow      0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_cpu_too_slow   0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_short_dv               0x00000200
#define SRT_NX90_eth_irq_msk_set_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_short_dv          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_short_dv       0x00000000
#define MSK_NX90_eth_irq_msk_set_rx_preamble_error         0x00000400
#define SRT_NX90_eth_irq_msk_set_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_msk_set_rx_preamble_error    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_rx_preamble_error 0x00000000
#define MSK_NX90_eth_irq_msk_set_tx_col                    0x00000800
#define SRT_NX90_eth_irq_msk_set_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_col               0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_col            0x00000000
#define MSK_NX90_eth_irq_msk_set_tx_late_col               0x00001000
#define SRT_NX90_eth_irq_msk_set_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_msk_set_tx_late_col          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_set_tx_late_col       0x00000000

/* all used bits of 'NX90_eth_irq_msk_set': */
#define MSK_USED_BITS_NX90_eth_irq_msk_set 0x00001fff

/* --------------------------------------------------------------------- */
/* Register eth_irq_msk_reset */
/* => IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_irq_msk_reset  0x00000034
#define Adr_NX90_eth_eth_irq_msk_reset  0xFF480034
#define Adr_NX90_eth_irq_msk_reset      0xFF480034
#define DFLT_VAL_NX90_eth_irq_msk_reset 0x00000000

#define MSK_NX90_eth_irq_msk_reset_tx_fifo                   0x00000001
#define SRT_NX90_eth_irq_msk_reset_tx_fifo                   0
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo           0x00000000
#define MSK_NX90_eth_irq_msk_reset_tx_frame_finished         0x00000002
#define SRT_NX90_eth_irq_msk_reset_tx_frame_finished         1
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_data                   0x00000004
#define SRT_NX90_eth_irq_msk_reset_rx_data                   2
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_data              0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_data           0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_frame_finished         0x00000008
#define SRT_NX90_eth_irq_msk_reset_rx_frame_finished         3
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_frame_finished    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_frame_finished 0x00000000
#define MSK_NX90_eth_irq_msk_reset_tx_fifo_undr              0x00000010
#define SRT_NX90_eth_irq_msk_reset_tx_fifo_undr              4
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_msk_reset_tx_fifo_ovfl              0x00000020
#define SRT_NX90_eth_irq_msk_reset_tx_fifo_ovfl              5
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_fifo_undr              0x00000040
#define SRT_NX90_eth_irq_msk_reset_rx_fifo_undr              6
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_fifo_undr         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_fifo_undr      0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_fifo_ovfl              0x00000080
#define SRT_NX90_eth_irq_msk_reset_rx_fifo_ovfl              7
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_fifo_ovfl         0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_fifo_ovfl      0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_cpu_too_slow           0x00000100
#define SRT_NX90_eth_irq_msk_reset_rx_cpu_too_slow           8
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_cpu_too_slow      0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_cpu_too_slow   0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_short_dv               0x00000200
#define SRT_NX90_eth_irq_msk_reset_rx_short_dv               9
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_short_dv          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_short_dv       0x00000000
#define MSK_NX90_eth_irq_msk_reset_rx_preamble_error         0x00000400
#define SRT_NX90_eth_irq_msk_reset_rx_preamble_error         10
#define DFLT_VAL_NX90_eth_irq_msk_reset_rx_preamble_error    0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_rx_preamble_error 0x00000000
#define MSK_NX90_eth_irq_msk_reset_tx_col                    0x00000800
#define SRT_NX90_eth_irq_msk_reset_tx_col                    11
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_col               0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_col            0x00000000
#define MSK_NX90_eth_irq_msk_reset_tx_late_col               0x00001000
#define SRT_NX90_eth_irq_msk_reset_tx_late_col               12
#define DFLT_VAL_NX90_eth_irq_msk_reset_tx_late_col          0x00000000
#define DFLT_BF_VAL_NX90_eth_irq_msk_reset_tx_late_col       0x00000000

/* all used bits of 'NX90_eth_irq_msk_reset': */
#define MSK_USED_BITS_NX90_eth_irq_msk_reset 0x00001fff

/* --------------------------------------------------------------------- */
/* Register eth_miimu */
/* => MDIO FSM interface controlling for netX external PHY. */
/*    Note: */
/*       Loopback for purpose is provided by miimu_sw register and also performed */
/*       in non-software-mode when enabled. */
/*    Note: */
/*       Prior phy_nres-bit was removed. PHY reset must be done by register ASIC_CTRL.phy_control. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_miimu  0x00000038
#define Adr_NX90_eth_eth_miimu  0xFF480038
#define Adr_NX90_eth_miimu      0xFF480038
#define DFLT_VAL_NX90_eth_miimu 0x00000000

#define MSK_NX90_eth_miimu_snrdy              0x00000001
#define SRT_NX90_eth_miimu_snrdy              0
#define DFLT_VAL_NX90_eth_miimu_snrdy         0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_snrdy      0x00000000
#define MSK_NX90_eth_miimu_preamble           0x00000002
#define SRT_NX90_eth_miimu_preamble           1
#define DFLT_VAL_NX90_eth_miimu_preamble      0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_preamble   0x00000000
#define MSK_NX90_eth_miimu_opmode             0x00000004
#define SRT_NX90_eth_miimu_opmode             2
#define DFLT_VAL_NX90_eth_miimu_opmode        0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_opmode     0x00000000
#define MSK_NX90_eth_miimu_mdc_period         0x00000008
#define SRT_NX90_eth_miimu_mdc_period         3
#define DFLT_VAL_NX90_eth_miimu_mdc_period    0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_mdc_period 0x00000000
#define MSK_NX90_eth_miimu_rta                0x00000020
#define SRT_NX90_eth_miimu_rta                5
#define DFLT_VAL_NX90_eth_miimu_rta           0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_rta        0x00000000
#define MSK_NX90_eth_miimu_regaddr            0x000007c0
#define SRT_NX90_eth_miimu_regaddr            6
#define DFLT_VAL_NX90_eth_miimu_regaddr       0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_regaddr    0x00000000
#define MSK_NX90_eth_miimu_phyaddr            0x0000f800
#define SRT_NX90_eth_miimu_phyaddr            11
#define DFLT_VAL_NX90_eth_miimu_phyaddr       0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_phyaddr    0x00000000
#define MSK_NX90_eth_miimu_data               0xffff0000
#define SRT_NX90_eth_miimu_data               16
#define DFLT_VAL_NX90_eth_miimu_data          0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_data       0x00000000

/* all used bits of 'NX90_eth_miimu': */
#define MSK_USED_BITS_NX90_eth_miimu 0xffffffef

/* --------------------------------------------------------------------- */
/* Register eth_miimu_sw */
/* => MDIO software interface controlling for netX internal PHY. */
/*    Note: */
/*       Function is similar to old MIIMU unit register 'miimu_sw', however data output */
/*       enable was removed as it is not necessary for MDIO interface to internal PHY (due */
/*       to non-bidirectional data signal). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_eth_miimu_sw  0x0000003C
#define Adr_NX90_eth_eth_miimu_sw  0xFF48003C
#define Adr_NX90_eth_miimu_sw      0xFF48003C
#define DFLT_VAL_NX90_eth_miimu_sw 0x00000000

#define MSK_NX90_eth_miimu_sw_enable           0x00000001
#define SRT_NX90_eth_miimu_sw_enable           0
#define DFLT_VAL_NX90_eth_miimu_sw_enable      0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_enable   0x00000000
#define MSK_NX90_eth_miimu_sw_mdc              0x00000010
#define SRT_NX90_eth_miimu_sw_mdc              4
#define DFLT_VAL_NX90_eth_miimu_sw_mdc         0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_mdc      0x00000000
#define MSK_NX90_eth_miimu_sw_mdo              0x00000020
#define SRT_NX90_eth_miimu_sw_mdo              5
#define DFLT_VAL_NX90_eth_miimu_sw_mdo         0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_mdo      0x00000000
#define MSK_NX90_eth_miimu_sw_mdoe             0x00000040
#define SRT_NX90_eth_miimu_sw_mdoe             6
#define DFLT_VAL_NX90_eth_miimu_sw_mdoe        0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_mdoe     0x00000000
#define MSK_NX90_eth_miimu_sw_mdi_ro           0x00000080
#define SRT_NX90_eth_miimu_sw_mdi_ro           7
#define DFLT_VAL_NX90_eth_miimu_sw_mdi_ro      0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_mdi_ro   0x00000000
#define MSK_NX90_eth_miimu_sw_loopback         0x00000100
#define SRT_NX90_eth_miimu_sw_loopback         8
#define DFLT_VAL_NX90_eth_miimu_sw_loopback    0x00000000
#define DFLT_BF_VAL_NX90_eth_miimu_sw_loopback 0x00000000

/* all used bits of 'NX90_eth_miimu_sw': */
#define MSK_USED_BITS_NX90_eth_miimu_sw 0x000001f1


/* ===================================================================== */

/* Area of intlogic_app */

/* ===================================================================== */

#define Addr_NX90_intlogic_app 0xFF800000

/* ===================================================================== */

/* AREA dmac */
/* Area of dmac_app */

/* ===================================================================== */

#define Addr_NX90_dmac_app 0xFF800000

/* ===================================================================== */

/* AREA dmac_ch */
/* Area of dmac_app_ch0, dmac_app_ch1, dmac_app_ch2, dmac_app_ch3 */

/* ===================================================================== */

#define Addr_NX90_dmac_app_ch0 0xFF800100
#define Addr_NX90_dmac_app_ch1 0xFF800120
#define Addr_NX90_dmac_app_ch2 0xFF800140
#define Addr_NX90_dmac_app_ch3 0xFF800160

/* --------------------------------------------------------------------- */
/* Register dmac_chsrc_ad */
/* => channel source address registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chsrc_ad          0x00000000
#define Adr_NX90_dmac_app_ch0_dmac_chsrc_ad 0xFF800100
#define Adr_NX90_dmac_app_ch1_dmac_chsrc_ad 0xFF800120
#define Adr_NX90_dmac_app_ch2_dmac_chsrc_ad 0xFF800140
#define Adr_NX90_dmac_app_ch3_dmac_chsrc_ad 0xFF800160
#define DFLT_VAL_NX90_dmac_chsrc_ad         0x00000000

#define MSK_NX90_dmac_chsrc_ad_DMACCHSRCADDR         0xffffffff
#define SRT_NX90_dmac_chsrc_ad_DMACCHSRCADDR         0
#define DFLT_VAL_NX90_dmac_chsrc_ad_DMACCHSRCADDR    0x00000000
#define DFLT_BF_VAL_NX90_dmac_chsrc_ad_DMACCHSRCADDR 0x00000000

/* all used bits of 'NX90_dmac_chsrc_ad': */
#define MSK_USED_BITS_NX90_dmac_chsrc_ad 0xffffffff

/* --------------------------------------------------------------------- */
/* Register dmac_chdest_ad */
/* => channel destination address registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chdest_ad          0x00000004
#define Adr_NX90_dmac_app_ch0_dmac_chdest_ad 0xFF800104
#define Adr_NX90_dmac_app_ch1_dmac_chdest_ad 0xFF800124
#define Adr_NX90_dmac_app_ch2_dmac_chdest_ad 0xFF800144
#define Adr_NX90_dmac_app_ch3_dmac_chdest_ad 0xFF800164
#define DFLT_VAL_NX90_dmac_chdest_ad         0x00000000

#define MSK_NX90_dmac_chdest_ad_DMACCHDESTADDR         0xffffffff
#define SRT_NX90_dmac_chdest_ad_DMACCHDESTADDR         0
#define DFLT_VAL_NX90_dmac_chdest_ad_DMACCHDESTADDR    0x00000000
#define DFLT_BF_VAL_NX90_dmac_chdest_ad_DMACCHDESTADDR 0x00000000

/* all used bits of 'NX90_dmac_chdest_ad': */
#define MSK_USED_BITS_NX90_dmac_chdest_ad 0xffffffff

/* --------------------------------------------------------------------- */
/* Register dmac_chlink */
/* => channel linked list item register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chlink          0x00000008
#define Adr_NX90_dmac_app_ch0_dmac_chlink 0xFF800108
#define Adr_NX90_dmac_app_ch1_dmac_chlink 0xFF800128
#define Adr_NX90_dmac_app_ch2_dmac_chlink 0xFF800148
#define Adr_NX90_dmac_app_ch3_dmac_chlink 0xFF800168
#define DFLT_VAL_NX90_dmac_chlink         0x00000000

#define MSK_NX90_dmac_chlink_LLIADDR         0xfffffffc
#define SRT_NX90_dmac_chlink_LLIADDR         2
#define DFLT_VAL_NX90_dmac_chlink_LLIADDR    0x00000000
#define DFLT_BF_VAL_NX90_dmac_chlink_LLIADDR 0x00000000

/* all used bits of 'NX90_dmac_chlink': */
#define MSK_USED_BITS_NX90_dmac_chlink 0xfffffffc

/* --------------------------------------------------------------------- */
/* Register dmac_chctrl */
/* => channel control registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chctrl          0x0000000C
#define Adr_NX90_dmac_app_ch0_dmac_chctrl 0xFF80010C
#define Adr_NX90_dmac_app_ch1_dmac_chctrl 0xFF80012C
#define Adr_NX90_dmac_app_ch2_dmac_chctrl 0xFF80014C
#define Adr_NX90_dmac_app_ch3_dmac_chctrl 0xFF80016C
#define DFLT_VAL_NX90_dmac_chctrl         0x00000000

#define MSK_NX90_dmac_chctrl_TransferSize         0x00000fff
#define SRT_NX90_dmac_chctrl_TransferSize         0
#define DFLT_VAL_NX90_dmac_chctrl_TransferSize    0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_TransferSize 0x00000000
#define MSK_NX90_dmac_chctrl_SBSize               0x00007000
#define SRT_NX90_dmac_chctrl_SBSize               12
#define DFLT_VAL_NX90_dmac_chctrl_SBSize          0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_SBSize       0x00000000
#define MSK_NX90_dmac_chctrl_DBSize               0x00038000
#define SRT_NX90_dmac_chctrl_DBSize               15
#define DFLT_VAL_NX90_dmac_chctrl_DBSize          0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_DBSize       0x00000000
#define MSK_NX90_dmac_chctrl_SWidth               0x001c0000
#define SRT_NX90_dmac_chctrl_SWidth               18
#define DFLT_VAL_NX90_dmac_chctrl_SWidth          0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_SWidth       0x00000000
#define MSK_NX90_dmac_chctrl_DWidth               0x00e00000
#define SRT_NX90_dmac_chctrl_DWidth               21
#define DFLT_VAL_NX90_dmac_chctrl_DWidth          0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_DWidth       0x00000000
#define MSK_NX90_dmac_chctrl_ARM_EQ               0x01000000
#define SRT_NX90_dmac_chctrl_ARM_EQ               24
#define DFLT_VAL_NX90_dmac_chctrl_ARM_EQ          0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_ARM_EQ       0x00000000
#define MSK_NX90_dmac_chctrl_SI                   0x04000000
#define SRT_NX90_dmac_chctrl_SI                   26
#define DFLT_VAL_NX90_dmac_chctrl_SI              0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_SI           0x00000000
#define MSK_NX90_dmac_chctrl_DI                   0x08000000
#define SRT_NX90_dmac_chctrl_DI                   27
#define DFLT_VAL_NX90_dmac_chctrl_DI              0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_DI           0x00000000
#define MSK_NX90_dmac_chctrl_Prot                 0x70000000
#define SRT_NX90_dmac_chctrl_Prot                 28
#define DFLT_VAL_NX90_dmac_chctrl_Prot            0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_Prot         0x00000000
#define MSK_NX90_dmac_chctrl_I                    0x80000000
#define SRT_NX90_dmac_chctrl_I                    31
#define DFLT_VAL_NX90_dmac_chctrl_I               0x00000000
#define DFLT_BF_VAL_NX90_dmac_chctrl_I            0x00000000

/* all used bits of 'NX90_dmac_chctrl': */
#define MSK_USED_BITS_NX90_dmac_chctrl 0xfdffffff

/* --------------------------------------------------------------------- */
/* Register dmac_chcfg */
/* => channel configuration registers */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_chcfg          0x00000010
#define Adr_NX90_dmac_app_ch0_dmac_chcfg 0xFF800110
#define Adr_NX90_dmac_app_ch1_dmac_chcfg 0xFF800130
#define Adr_NX90_dmac_app_ch2_dmac_chcfg 0xFF800150
#define Adr_NX90_dmac_app_ch3_dmac_chcfg 0xFF800170
#define DFLT_VAL_NX90_dmac_chcfg         0x00000000

#define MSK_NX90_dmac_chcfg_E                      0x00000001
#define SRT_NX90_dmac_chcfg_E                      0
#define DFLT_VAL_NX90_dmac_chcfg_E                 0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_E              0x00000000
#define MSK_NX90_dmac_chcfg_SrcPeripheral          0x0000001e
#define SRT_NX90_dmac_chcfg_SrcPeripheral          1
#define DFLT_VAL_NX90_dmac_chcfg_SrcPeripheral     0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_SrcPeripheral  0x00000000
#define MSK_NX90_dmac_chcfg_DestPeripheral         0x000003c0
#define SRT_NX90_dmac_chcfg_DestPeripheral         6
#define DFLT_VAL_NX90_dmac_chcfg_DestPeripheral    0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_DestPeripheral 0x00000000
#define MSK_NX90_dmac_chcfg_FlowCntrl              0x00003800
#define SRT_NX90_dmac_chcfg_FlowCntrl              11
#define DFLT_VAL_NX90_dmac_chcfg_FlowCntrl         0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_FlowCntrl      0x00000000
#define MSK_NX90_dmac_chcfg_IE                     0x00004000
#define SRT_NX90_dmac_chcfg_IE                     14
#define DFLT_VAL_NX90_dmac_chcfg_IE                0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_IE             0x00000000
#define MSK_NX90_dmac_chcfg_ITC                    0x00008000
#define SRT_NX90_dmac_chcfg_ITC                    15
#define DFLT_VAL_NX90_dmac_chcfg_ITC               0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_ITC            0x00000000
#define MSK_NX90_dmac_chcfg_L                      0x00010000
#define SRT_NX90_dmac_chcfg_L                      16
#define DFLT_VAL_NX90_dmac_chcfg_L                 0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_L              0x00000000
#define MSK_NX90_dmac_chcfg_A                      0x00020000
#define SRT_NX90_dmac_chcfg_A                      17
#define DFLT_VAL_NX90_dmac_chcfg_A                 0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_A              0x00000000
#define MSK_NX90_dmac_chcfg_H                      0x00040000
#define SRT_NX90_dmac_chcfg_H                      18
#define DFLT_VAL_NX90_dmac_chcfg_H                 0x00000000
#define DFLT_BF_VAL_NX90_dmac_chcfg_H              0x00000000

/* all used bits of 'NX90_dmac_chcfg': */
#define MSK_USED_BITS_NX90_dmac_chcfg 0x0007fbdf


/* ===================================================================== */

/* AREA dmac_reg */
/* Area of dmac_app_reg */

/* ===================================================================== */

#define Addr_NX90_dmac_app_reg 0xFF800800

/* --------------------------------------------------------------------- */
/* Register dmac_int_status */
/* => interrupt status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_int_status          0x00000000
#define Adr_NX90_dmac_app_reg_dmac_int_status 0xFF800800
#define Adr_NX90_dmac_int_status              0xFF800800

#define MSK_NX90_dmac_int_status_DMACINT_ch0 0x00000001
#define SRT_NX90_dmac_int_status_DMACINT_ch0 0
#define MSK_NX90_dmac_int_status_DMACINT_ch1 0x00000002
#define SRT_NX90_dmac_int_status_DMACINT_ch1 1
#define MSK_NX90_dmac_int_status_DMACINT_ch2 0x00000004
#define SRT_NX90_dmac_int_status_DMACINT_ch2 2
#define MSK_NX90_dmac_int_status_DMACINT_ch3 0x00000008
#define SRT_NX90_dmac_int_status_DMACINT_ch3 3

/* all used bits of 'NX90_dmac_int_status': */
#define MSK_USED_BITS_NX90_dmac_int_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_inttc_status */
/* => interrupt terminal count status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_inttc_status          0x00000004
#define Adr_NX90_dmac_app_reg_dmac_inttc_status 0xFF800804
#define Adr_NX90_dmac_inttc_status              0xFF800804

#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch0 0x00000001
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch0 0
#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch1 0x00000002
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch1 1
#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch2 0x00000004
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch2 2
#define MSK_NX90_dmac_inttc_status_DMACINTTC_ch3 0x00000008
#define SRT_NX90_dmac_inttc_status_DMACINTTC_ch3 3

/* all used bits of 'NX90_dmac_inttc_status': */
#define MSK_USED_BITS_NX90_dmac_inttc_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_inttc_clear */
/* => interrupt terminal count clear register */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_inttc_clear          0x00000008
#define Adr_NX90_dmac_app_reg_dmac_inttc_clear 0xFF800808
#define Adr_NX90_dmac_inttc_clear              0xFF800808
#define DFLT_VAL_NX90_dmac_inttc_clear         0x00000000

#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0         0x00000001
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0         0
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0    0x00000000
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch0 0x00000000
#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1         0x00000002
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1         1
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1    0x00000000
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch1 0x00000000
#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2         0x00000004
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2         2
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2    0x00000000
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch2 0x00000000
#define MSK_NX90_dmac_inttc_clear_DMACINTTCCLR_ch3         0x00000008
#define SRT_NX90_dmac_inttc_clear_DMACINTTCCLR_ch3         3
#define DFLT_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch3    0x00000000
#define DFLT_BF_VAL_NX90_dmac_inttc_clear_DMACINTTCCLR_ch3 0x00000000

/* all used bits of 'NX90_dmac_inttc_clear': */
#define MSK_USED_BITS_NX90_dmac_inttc_clear 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_interr_status */
/* => interrupt error status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_interr_status          0x0000000C
#define Adr_NX90_dmac_app_reg_dmac_interr_status 0xFF80080C
#define Adr_NX90_dmac_interr_status              0xFF80080C

#define MSK_NX90_dmac_interr_status_DMACINTERR_ch0 0x00000001
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch0 0
#define MSK_NX90_dmac_interr_status_DMACINTERR_ch1 0x00000002
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch1 1
#define MSK_NX90_dmac_interr_status_DMACINTERR_ch2 0x00000004
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch2 2
#define MSK_NX90_dmac_interr_status_DMACINTERR_ch3 0x00000008
#define SRT_NX90_dmac_interr_status_DMACINTERR_ch3 3

/* all used bits of 'NX90_dmac_interr_status': */
#define MSK_USED_BITS_NX90_dmac_interr_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_interr_clear */
/* => interrupt error clear register */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_interr_clear          0x00000010
#define Adr_NX90_dmac_app_reg_dmac_interr_clear 0xFF800810
#define Adr_NX90_dmac_interr_clear              0xFF800810
#define DFLT_VAL_NX90_dmac_interr_clear         0x00000000

#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch0         0x00000001
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch0         0
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch0    0x00000000
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch0 0x00000000
#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch1         0x00000002
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch1         1
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch1    0x00000000
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch1 0x00000000
#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch2         0x00000004
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch2         2
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch2    0x00000000
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch2 0x00000000
#define MSK_NX90_dmac_interr_clear_DMACINTERRCLR_ch3         0x00000008
#define SRT_NX90_dmac_interr_clear_DMACINTERRCLR_ch3         3
#define DFLT_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch3    0x00000000
#define DFLT_BF_VAL_NX90_dmac_interr_clear_DMACINTERRCLR_ch3 0x00000000

/* all used bits of 'NX90_dmac_interr_clear': */
#define MSK_USED_BITS_NX90_dmac_interr_clear 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_rawinttc_status */
/* => raw interrupt terminal count status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_rawinttc_status          0x00000014
#define Adr_NX90_dmac_app_reg_dmac_rawinttc_status 0xFF800814
#define Adr_NX90_dmac_rawinttc_status              0xFF800814

#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch0 0x00000001
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch0 0
#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch1 0x00000002
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch1 1
#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch2 0x00000004
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch2 2
#define MSK_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch3 0x00000008
#define SRT_NX90_dmac_rawinttc_status_DMACRAWINTTC_ch3 3

/* all used bits of 'NX90_dmac_rawinttc_status': */
#define MSK_USED_BITS_NX90_dmac_rawinttc_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_rawinterr_status */
/* => raw interrupt error status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_rawinterr_status          0x00000018
#define Adr_NX90_dmac_app_reg_dmac_rawinterr_status 0xFF800818
#define Adr_NX90_dmac_rawinterr_status              0xFF800818

#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch0 0x00000001
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch0 0
#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch1 0x00000002
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch1 1
#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch2 0x00000004
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch2 2
#define MSK_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch3 0x00000008
#define SRT_NX90_dmac_rawinterr_status_DMACRAWINTERR_ch3 3

/* all used bits of 'NX90_dmac_rawinterr_status': */
#define MSK_USED_BITS_NX90_dmac_rawinterr_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_enabled_channel */
/* => channel enable register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_enabled_channel          0x0000001C
#define Adr_NX90_dmac_app_reg_dmac_enabled_channel 0xFF80081C
#define Adr_NX90_dmac_enabled_channel              0xFF80081C

#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch0 0x00000001
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch0 0
#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch1 0x00000002
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch1 1
#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch2 0x00000004
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch2 2
#define MSK_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch3 0x00000008
#define SRT_NX90_dmac_enabled_channel_DMACENABLEDCHNS_ch3 3

/* all used bits of 'NX90_dmac_enabled_channel': */
#define MSK_USED_BITS_NX90_dmac_enabled_channel 0x0000000f

/* --------------------------------------------------------------------- */
/* Register dmac_softb_req */
/* => software burst request register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softb_req          0x00000020
#define Adr_NX90_dmac_app_reg_dmac_softb_req 0xFF800820
#define Adr_NX90_dmac_softb_req              0xFF800820
#define DFLT_VAL_NX90_dmac_softb_req         0x00000000

#define MSK_NX90_dmac_softb_req_DMACSoftBReq         0x0000ffff
#define SRT_NX90_dmac_softb_req_DMACSoftBReq         0
#define DFLT_VAL_NX90_dmac_softb_req_DMACSoftBReq    0x00000000
#define DFLT_BF_VAL_NX90_dmac_softb_req_DMACSoftBReq 0x00000000

/* all used bits of 'NX90_dmac_softb_req': */
#define MSK_USED_BITS_NX90_dmac_softb_req 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register dmac_softs_req */
/* => software single request register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softs_req          0x00000024
#define Adr_NX90_dmac_app_reg_dmac_softs_req 0xFF800824
#define Adr_NX90_dmac_softs_req              0xFF800824
#define DFLT_VAL_NX90_dmac_softs_req         0x00000000

#define MSK_NX90_dmac_softs_req_DMACSoftSReq         0x0000ffff
#define SRT_NX90_dmac_softs_req_DMACSoftSReq         0
#define DFLT_VAL_NX90_dmac_softs_req_DMACSoftSReq    0x00000000
#define DFLT_BF_VAL_NX90_dmac_softs_req_DMACSoftSReq 0x00000000

/* all used bits of 'NX90_dmac_softs_req': */
#define MSK_USED_BITS_NX90_dmac_softs_req 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register dmac_softlb_req */
/* => software last burst request register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softlb_req          0x00000028
#define Adr_NX90_dmac_app_reg_dmac_softlb_req 0xFF800828
#define Adr_NX90_dmac_softlb_req              0xFF800828
#define DFLT_VAL_NX90_dmac_softlb_req         0x00000000

#define MSK_NX90_dmac_softlb_req_DMACSoftLBReq         0x0000ffff
#define SRT_NX90_dmac_softlb_req_DMACSoftLBReq         0
#define DFLT_VAL_NX90_dmac_softlb_req_DMACSoftLBReq    0x00000000
#define DFLT_BF_VAL_NX90_dmac_softlb_req_DMACSoftLBReq 0x00000000

/* all used bits of 'NX90_dmac_softlb_req': */
#define MSK_USED_BITS_NX90_dmac_softlb_req 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register dmac_softls_req */
/* => software last single request register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_softls_req          0x0000002C
#define Adr_NX90_dmac_app_reg_dmac_softls_req 0xFF80082C
#define Adr_NX90_dmac_softls_req              0xFF80082C
#define DFLT_VAL_NX90_dmac_softls_req         0x00000000

#define MSK_NX90_dmac_softls_req_DMACSoftLSReq         0x0000ffff
#define SRT_NX90_dmac_softls_req_DMACSoftLSReq         0
#define DFLT_VAL_NX90_dmac_softls_req_DMACSoftLSReq    0x00000000
#define DFLT_BF_VAL_NX90_dmac_softls_req_DMACSoftLSReq 0x00000000

/* all used bits of 'NX90_dmac_softls_req': */
#define MSK_USED_BITS_NX90_dmac_softls_req 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register dmac_config */
/* => configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_config          0x00000030
#define Adr_NX90_dmac_app_reg_dmac_config 0xFF800830
#define Adr_NX90_dmac_config              0xFF800830
#define DFLT_VAL_NX90_dmac_config         0x00000000

#define MSK_NX90_dmac_config_DMACENABLE         0x00000001
#define SRT_NX90_dmac_config_DMACENABLE         0
#define DFLT_VAL_NX90_dmac_config_DMACENABLE    0x00000000
#define DFLT_BF_VAL_NX90_dmac_config_DMACENABLE 0x00000000

/* all used bits of 'NX90_dmac_config': */
#define MSK_USED_BITS_NX90_dmac_config 0x00000001

/* --------------------------------------------------------------------- */
/* Register dmac_sync */
/* => sync register */
/*    DMA synchronization logic for DMA request signals enabled or disabled */
/*    A 1'b0 bit indicates that the synchronization logic for */
/*    the DMACBREQ[15:0], DMACSREQ[15:0], DMACLBREQ[15:0], and DMACLSREQ[15:0] request signals is enabled. */
/*    A HIGH bit indicates that the synchronization logic is disabled. */
/*    Note: Within the netX system all peripherals and the DMAC are running in the same clock-domain. Therefore, */
/*    it is recommended to disable the synchronisation for all channels (i.e. write 0xffff). This results in a */
/*    performance gain. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_sync          0x00000034
#define Adr_NX90_dmac_app_reg_dmac_sync 0xFF800834
#define Adr_NX90_dmac_sync              0xFF800834
#define DFLT_VAL_NX90_dmac_sync         0x00000000

#define MSK_NX90_dmac_sync_DIS_SYNC         0x0000ffff
#define SRT_NX90_dmac_sync_DIS_SYNC         0
#define DFLT_VAL_NX90_dmac_sync_DIS_SYNC    0x00000000
#define DFLT_BF_VAL_NX90_dmac_sync_DIS_SYNC 0x00000000

/* all used bits of 'NX90_dmac_sync': */
#define MSK_USED_BITS_NX90_dmac_sync 0x0000ffff


/* ===================================================================== */

/* AREA dmac_mux */
/* Area of dmac_mux_app */

/* ===================================================================== */

#define Addr_NX90_dmac_mux_app 0xFF801000

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel0 */
/* => Peripheral input select for DMAC input channel 0 */
/*    This register configures which peripheral should be connected to DMAC's input channel 0. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel0          0x00000000
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel0 0xFF801000
#define Adr_NX90_dmac_mux_peripheral_input_sel0              0xFF801000
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel0         0x00000002

#define MSK_NX90_dmac_mux_peripheral_input_sel0_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel0_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel0_index    0x00000002
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel0_index 0x00000002

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel0': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel0 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel1 */
/* => Peripheral input select for DMAC input channel 1 */
/*    This register configures which peripheral should be connected to DMAC's input channel 1. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel1          0x00000004
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel1 0xFF801004
#define Adr_NX90_dmac_mux_peripheral_input_sel1              0xFF801004
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel1         0x00000003

#define MSK_NX90_dmac_mux_peripheral_input_sel1_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel1_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel1_index    0x00000003
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel1_index 0x00000003

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel1': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel1 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel2 */
/* => Peripheral input select for DMAC input channel 2 */
/*    This register configures which peripheral should be connected to DMAC's input channel 2. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel2          0x00000008
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel2 0xFF801008
#define Adr_NX90_dmac_mux_peripheral_input_sel2              0xFF801008
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel2         0x00000004

#define MSK_NX90_dmac_mux_peripheral_input_sel2_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel2_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel2_index    0x00000004
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel2_index 0x00000004

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel2': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel2 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel3 */
/* => Peripheral input select for DMAC input channel 3 */
/*    This register configures which peripheral should be connected to DMAC's input channel 3. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel3          0x0000000C
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel3 0xFF80100C
#define Adr_NX90_dmac_mux_peripheral_input_sel3              0xFF80100C
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel3         0x00000005

#define MSK_NX90_dmac_mux_peripheral_input_sel3_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel3_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel3_index    0x00000005
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel3_index 0x00000005

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel3': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel3 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel4 */
/* => Peripheral input select for DMAC input channel 4 */
/*    This register configures which peripheral should be connected to DMAC's input channel 4. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel4          0x00000010
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel4 0xFF801010
#define Adr_NX90_dmac_mux_peripheral_input_sel4              0xFF801010
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel4         0x00000006

#define MSK_NX90_dmac_mux_peripheral_input_sel4_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel4_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel4_index    0x00000006
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel4_index 0x00000006

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel4': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel4 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel5 */
/* => Peripheral input select for DMAC input channel 5 */
/*    This register configures which peripheral should be connected to DMAC's input channel 5. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel5          0x00000014
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel5 0xFF801014
#define Adr_NX90_dmac_mux_peripheral_input_sel5              0xFF801014
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel5         0x00000007

#define MSK_NX90_dmac_mux_peripheral_input_sel5_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel5_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel5_index    0x00000007
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel5_index 0x00000007

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel5': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel5 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel6 */
/* => Peripheral input select for DMAC input channel 6 */
/*    This register configures which peripheral should be connected to DMAC's input channel 6. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel6          0x00000018
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel6 0xFF801018
#define Adr_NX90_dmac_mux_peripheral_input_sel6              0xFF801018
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel6         0x00000000

#define MSK_NX90_dmac_mux_peripheral_input_sel6_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel6_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel6_index    0x00000000
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel6_index 0x00000000

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel6': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel6 0x0000003f

/* --------------------------------------------------------------------- */
/* Register dmac_mux_peripheral_input_sel7 */
/* => Peripheral input select for DMAC input channel 7 */
/*    This register configures which peripheral should be connected to DMAC's input channel 7. */
/*    Note: This should not be changed while any of the DMA channels are performing DMA transfers. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_dmac_mux_peripheral_input_sel7          0x0000001C
#define Adr_NX90_dmac_mux_app_dmac_mux_peripheral_input_sel7 0xFF80101C
#define Adr_NX90_dmac_mux_peripheral_input_sel7              0xFF80101C
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel7         0x00000000

#define MSK_NX90_dmac_mux_peripheral_input_sel7_index         0x0000003f
#define SRT_NX90_dmac_mux_peripheral_input_sel7_index         0
#define DFLT_VAL_NX90_dmac_mux_peripheral_input_sel7_index    0x00000000
#define DFLT_BF_VAL_NX90_dmac_mux_peripheral_input_sel7_index 0x00000000

/* all used bits of 'NX90_dmac_mux_peripheral_input_sel7': */
#define MSK_USED_BITS_NX90_dmac_mux_peripheral_input_sel7 0x0000003f


/* ===================================================================== */

/* AREA i2c */
/* Area of i2c_app, i2c_xpic_app */

/* ===================================================================== */

#define Addr_NX90_i2c_app      0xFF801080
#define Addr_NX90_i2c_xpic_app 0xFF900340

/* --------------------------------------------------------------------- */
/* Register i2c_mcr */
/* => I2C master control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mcr          0x00000000
#define Adr_NX90_i2c_app_i2c_mcr      0xFF801080
#define Adr_NX90_i2c_xpic_app_i2c_mcr 0xFF900340
#define DFLT_VAL_NX90_i2c_mcr         0x00000000

#define MSK_NX90_i2c_mcr_en_i2c             0x00000001
#define SRT_NX90_i2c_mcr_en_i2c             0
#define DFLT_VAL_NX90_i2c_mcr_en_i2c        0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_en_i2c     0x00000000
#define MSK_NX90_i2c_mcr_mode               0x0000000e
#define SRT_NX90_i2c_mcr_mode               1
#define DFLT_VAL_NX90_i2c_mcr_mode          0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_mode       0x00000000
#define MSK_NX90_i2c_mcr_sadr               0x000007f0
#define SRT_NX90_i2c_mcr_sadr               4
#define DFLT_VAL_NX90_i2c_mcr_sadr          0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_sadr       0x00000000
#define MSK_NX90_i2c_mcr_pio_mode           0x00010000
#define SRT_NX90_i2c_mcr_pio_mode           16
#define DFLT_VAL_NX90_i2c_mcr_pio_mode      0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_pio_mode   0x00000000
#define MSK_NX90_i2c_mcr_rst_i2c            0x00020000
#define SRT_NX90_i2c_mcr_rst_i2c            17
#define DFLT_VAL_NX90_i2c_mcr_rst_i2c       0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_rst_i2c    0x00000000
#define MSK_NX90_i2c_mcr_en_timeout         0x00040000
#define SRT_NX90_i2c_mcr_en_timeout         18
#define DFLT_VAL_NX90_i2c_mcr_en_timeout    0x00000000
#define DFLT_BF_VAL_NX90_i2c_mcr_en_timeout 0x00000000

/* all used bits of 'NX90_i2c_mcr': */
#define MSK_USED_BITS_NX90_i2c_mcr 0x000707ff

/* --------------------------------------------------------------------- */
/* Register i2c_scr */
/* => I2C slave control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_scr          0x00000004
#define Adr_NX90_i2c_app_i2c_scr      0xFF801084
#define Adr_NX90_i2c_xpic_app_i2c_scr 0xFF900344
#define DFLT_VAL_NX90_i2c_scr         0x00000000

#define MSK_NX90_i2c_scr_sid                        0x000003ff
#define SRT_NX90_i2c_scr_sid                        0
#define DFLT_VAL_NX90_i2c_scr_sid                   0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_sid                0x00000000
#define MSK_NX90_i2c_scr_sid10                      0x00000400
#define SRT_NX90_i2c_scr_sid10                      10
#define DFLT_VAL_NX90_i2c_scr_sid10                 0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_sid10              0x00000000
#define MSK_NX90_i2c_scr_ac_srx                     0x00010000
#define SRT_NX90_i2c_scr_ac_srx                     16
#define DFLT_VAL_NX90_i2c_scr_ac_srx                0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_ac_srx             0x00000000
#define MSK_NX90_i2c_scr_ac_start                   0x00020000
#define SRT_NX90_i2c_scr_ac_start                   17
#define DFLT_VAL_NX90_i2c_scr_ac_start              0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_ac_start           0x00000000
#define MSK_NX90_i2c_scr_ac_gcall                   0x00040000
#define SRT_NX90_i2c_scr_ac_gcall                   18
#define DFLT_VAL_NX90_i2c_scr_ac_gcall              0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_ac_gcall           0x00000000
#define MSK_NX90_i2c_scr_autoreset_ac_start         0x00100000
#define SRT_NX90_i2c_scr_autoreset_ac_start         20
#define DFLT_VAL_NX90_i2c_scr_autoreset_ac_start    0x00000000
#define DFLT_BF_VAL_NX90_i2c_scr_autoreset_ac_start 0x00000000

/* all used bits of 'NX90_i2c_scr': */
#define MSK_USED_BITS_NX90_i2c_scr 0x001707ff

/* --------------------------------------------------------------------- */
/* Register i2c_cmd */
/* => I2C master command register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_cmd          0x00000008
#define Adr_NX90_i2c_app_i2c_cmd      0xFF801088
#define Adr_NX90_i2c_xpic_app_i2c_cmd 0xFF900348
#define DFLT_VAL_NX90_i2c_cmd         0x0000000e

#define MSK_NX90_i2c_cmd_nwr               0x00000001
#define SRT_NX90_i2c_cmd_nwr               0
#define DFLT_VAL_NX90_i2c_cmd_nwr          0x00000000
#define DFLT_BF_VAL_NX90_i2c_cmd_nwr       0x00000000
#define MSK_NX90_i2c_cmd_cmd               0x0000000e
#define SRT_NX90_i2c_cmd_cmd               1
#define DFLT_VAL_NX90_i2c_cmd_cmd          0x0000000e
#define DFLT_BF_VAL_NX90_i2c_cmd_cmd       0x00000007
#define MSK_NX90_i2c_cmd_tsize             0x0003ff00
#define SRT_NX90_i2c_cmd_tsize             8
#define DFLT_VAL_NX90_i2c_cmd_tsize        0x00000000
#define DFLT_BF_VAL_NX90_i2c_cmd_tsize     0x00000000
#define MSK_NX90_i2c_cmd_acpollmax         0x0ff00000
#define SRT_NX90_i2c_cmd_acpollmax         20
#define DFLT_VAL_NX90_i2c_cmd_acpollmax    0x00000000
#define DFLT_BF_VAL_NX90_i2c_cmd_acpollmax 0x00000000

/* all used bits of 'NX90_i2c_cmd': */
#define MSK_USED_BITS_NX90_i2c_cmd 0x0ff3ff0f

/* --------------------------------------------------------------------- */
/* Register i2c_mdr */
/* => I2C master data register (master FIFO): */
/*    There is only one FIFO for both receive and transmit master data with a depth of 16 bytes. For master write access, data sent by the master */
/*    is delivered from the FIFO. For master read access, data received by the master is stored in the FIFO. */
/*    In case of imminent data transfer failure (read transfer and FIFO is full or write transfer and FIFO is empty), the transfer will be interrupted. */
/*    To continue the transfer, the FIFO must be handled first (filled for write transfer, read out for read transfer). */
/*    Note: The FIFO behavior has been changed: For netX 51/52/56 and older versions, the current command was aborted and the cmd_err was raised. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mdr          0x0000000C
#define Adr_NX90_i2c_app_i2c_mdr      0xFF80108C
#define Adr_NX90_i2c_xpic_app_i2c_mdr 0xFF90034C
#define DFLT_VAL_NX90_i2c_mdr         0x00000000

#define MSK_NX90_i2c_mdr_mdata         0x000000ff
#define SRT_NX90_i2c_mdr_mdata         0
#define DFLT_VAL_NX90_i2c_mdr_mdata    0x00000000
#define DFLT_BF_VAL_NX90_i2c_mdr_mdata 0x00000000

/* all used bits of 'NX90_i2c_mdr': */
#define MSK_USED_BITS_NX90_i2c_mdr 0x000000ff

/* --------------------------------------------------------------------- */
/* Register i2c_sdr */
/* => I2C slave data register (slave FIFO): */
/*    There is only one FIFO for both receive and transmit slave data with a depth of 16 bytes. For master read access, data sent by the slave */
/*    is delivered from the FIFO. For master write access, data received by the slave is stored in the FIFO. */
/*    A transfer is initiated after the detection of I2C-start-sequence to the device address (i2c_scr.sid, sreq IRQ) which is acknowledged by this */
/*    device (i2c_scr.ac_start). For read transfers, sent data is read from the FIFO immediately after the detection of the acknowledge on */
/*    the I2C-bus. SDA will be driven with the next data MSB immediately after the acknowledge SCL high phase. */
/*    In case of a master read transfer and slave FIFO underrun, corrupted data will be sent to the master and the IRQ fifo_err will be set. */
/*    In case of a master write transfer and slave FIFO is full, no acknowledge will be generated for the last received byte. No FIFO overflow */
/*    will occur, but the last transferred byte (not acknowledged) will be lost and has to be sent again by the master. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sdr          0x00000010
#define Adr_NX90_i2c_app_i2c_sdr      0xFF801090
#define Adr_NX90_i2c_xpic_app_i2c_sdr 0xFF900350
#define DFLT_VAL_NX90_i2c_sdr         0x00000000

#define MSK_NX90_i2c_sdr_sdata         0x000000ff
#define SRT_NX90_i2c_sdr_sdata         0
#define DFLT_VAL_NX90_i2c_sdr_sdata    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sdr_sdata 0x00000000

/* all used bits of 'NX90_i2c_sdr': */
#define MSK_USED_BITS_NX90_i2c_sdr 0x000000ff

/* --------------------------------------------------------------------- */
/* Register i2c_mfifo_cr */
/* => I2C master FIFO control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_mfifo_cr          0x00000014
#define Adr_NX90_i2c_app_i2c_mfifo_cr      0xFF801094
#define Adr_NX90_i2c_xpic_app_i2c_mfifo_cr 0xFF900354
#define DFLT_VAL_NX90_i2c_mfifo_cr         0x00000000

#define MSK_NX90_i2c_mfifo_cr_mfifo_wm          0x0000000f
#define SRT_NX90_i2c_mfifo_cr_mfifo_wm          0
#define DFLT_VAL_NX90_i2c_mfifo_cr_mfifo_wm     0x00000000
#define DFLT_BF_VAL_NX90_i2c_mfifo_cr_mfifo_wm  0x00000000
#define MSK_NX90_i2c_mfifo_cr_mfifo_clr         0x00000100
#define SRT_NX90_i2c_mfifo_cr_mfifo_clr         8
#define DFLT_VAL_NX90_i2c_mfifo_cr_mfifo_clr    0x00000000
#define DFLT_BF_VAL_NX90_i2c_mfifo_cr_mfifo_clr 0x00000000

/* all used bits of 'NX90_i2c_mfifo_cr': */
#define MSK_USED_BITS_NX90_i2c_mfifo_cr 0x0000010f

/* --------------------------------------------------------------------- */
/* Register i2c_sfifo_cr */
/* => I2C slave FIFO control register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sfifo_cr          0x00000018
#define Adr_NX90_i2c_app_i2c_sfifo_cr      0xFF801098
#define Adr_NX90_i2c_xpic_app_i2c_sfifo_cr 0xFF900358
#define DFLT_VAL_NX90_i2c_sfifo_cr         0x00000000

#define MSK_NX90_i2c_sfifo_cr_sfifo_wm          0x0000000f
#define SRT_NX90_i2c_sfifo_cr_sfifo_wm          0
#define DFLT_VAL_NX90_i2c_sfifo_cr_sfifo_wm     0x00000000
#define DFLT_BF_VAL_NX90_i2c_sfifo_cr_sfifo_wm  0x00000000
#define MSK_NX90_i2c_sfifo_cr_sfifo_clr         0x00000100
#define SRT_NX90_i2c_sfifo_cr_sfifo_clr         8
#define DFLT_VAL_NX90_i2c_sfifo_cr_sfifo_clr    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sfifo_cr_sfifo_clr 0x00000000

/* all used bits of 'NX90_i2c_sfifo_cr': */
#define MSK_USED_BITS_NX90_i2c_sfifo_cr 0x0000010f

/* --------------------------------------------------------------------- */
/* Register i2c_sr */
/* => I2C status register: */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_sr          0x0000001C
#define Adr_NX90_i2c_app_i2c_sr      0xFF80109C
#define Adr_NX90_i2c_xpic_app_i2c_sr 0xFF90035C
#define DFLT_VAL_NX90_i2c_sr         0xc0110040

#define MSK_NX90_i2c_sr_mfifo_level            0x0000001f
#define SRT_NX90_i2c_sr_mfifo_level            0
#define DFLT_VAL_NX90_i2c_sr_mfifo_level       0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_level    0x00000000
#define MSK_NX90_i2c_sr_mfifo_empty            0x00000040
#define SRT_NX90_i2c_sr_mfifo_empty            6
#define DFLT_VAL_NX90_i2c_sr_mfifo_empty       0x00000040
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_empty    0x00000001
#define MSK_NX90_i2c_sr_mfifo_full             0x00000080
#define SRT_NX90_i2c_sr_mfifo_full             7
#define DFLT_VAL_NX90_i2c_sr_mfifo_full        0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_full     0x00000000
#define MSK_NX90_i2c_sr_mfifo_err_ovfl         0x00000100
#define SRT_NX90_i2c_sr_mfifo_err_ovfl         8
#define DFLT_VAL_NX90_i2c_sr_mfifo_err_ovfl    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_err_ovfl 0x00000000
#define MSK_NX90_i2c_sr_mfifo_err_undr         0x00000200
#define SRT_NX90_i2c_sr_mfifo_err_undr         9
#define DFLT_VAL_NX90_i2c_sr_mfifo_err_undr    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_mfifo_err_undr 0x00000000
#define MSK_NX90_i2c_sr_sfifo_level            0x00007c00
#define SRT_NX90_i2c_sr_sfifo_level            10
#define DFLT_VAL_NX90_i2c_sr_sfifo_level       0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_level    0x00000000
#define MSK_NX90_i2c_sr_sfifo_empty            0x00010000
#define SRT_NX90_i2c_sr_sfifo_empty            16
#define DFLT_VAL_NX90_i2c_sr_sfifo_empty       0x00010000
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_empty    0x00000001
#define MSK_NX90_i2c_sr_sfifo_full             0x00020000
#define SRT_NX90_i2c_sr_sfifo_full             17
#define DFLT_VAL_NX90_i2c_sr_sfifo_full        0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_full     0x00000000
#define MSK_NX90_i2c_sr_sfifo_err_ovfl         0x00040000
#define SRT_NX90_i2c_sr_sfifo_err_ovfl         18
#define DFLT_VAL_NX90_i2c_sr_sfifo_err_ovfl    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_err_ovfl 0x00000000
#define MSK_NX90_i2c_sr_sfifo_err_undr         0x00080000
#define SRT_NX90_i2c_sr_sfifo_err_undr         19
#define DFLT_VAL_NX90_i2c_sr_sfifo_err_undr    0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_sfifo_err_undr 0x00000000
#define MSK_NX90_i2c_sr_bus_master             0x00100000
#define SRT_NX90_i2c_sr_bus_master             20
#define DFLT_VAL_NX90_i2c_sr_bus_master        0x00100000
#define DFLT_BF_VAL_NX90_i2c_sr_bus_master     0x00000001
#define MSK_NX90_i2c_sr_nwr                    0x00200000
#define SRT_NX90_i2c_sr_nwr                    21
#define DFLT_VAL_NX90_i2c_sr_nwr               0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_nwr            0x00000000
#define MSK_NX90_i2c_sr_started                0x00400000
#define SRT_NX90_i2c_sr_started                22
#define DFLT_VAL_NX90_i2c_sr_started           0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_started        0x00000000
#define MSK_NX90_i2c_sr_slave_access           0x00800000
#define SRT_NX90_i2c_sr_slave_access           23
#define DFLT_VAL_NX90_i2c_sr_slave_access      0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_slave_access   0x00000000
#define MSK_NX90_i2c_sr_last_ac                0x01000000
#define SRT_NX90_i2c_sr_last_ac                24
#define DFLT_VAL_NX90_i2c_sr_last_ac           0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_last_ac        0x00000000
#define MSK_NX90_i2c_sr_nwr_aced               0x02000000
#define SRT_NX90_i2c_sr_nwr_aced               25
#define DFLT_VAL_NX90_i2c_sr_nwr_aced          0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_nwr_aced       0x00000000
#define MSK_NX90_i2c_sr_gcall_aced             0x04000000
#define SRT_NX90_i2c_sr_gcall_aced             26
#define DFLT_VAL_NX90_i2c_sr_gcall_aced        0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_gcall_aced     0x00000000
#define MSK_NX90_i2c_sr_sid10_aced             0x08000000
#define SRT_NX90_i2c_sr_sid10_aced             27
#define DFLT_VAL_NX90_i2c_sr_sid10_aced        0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_sid10_aced     0x00000000
#define MSK_NX90_i2c_sr_timeout                0x10000000
#define SRT_NX90_i2c_sr_timeout                28
#define DFLT_VAL_NX90_i2c_sr_timeout           0x00000000
#define DFLT_BF_VAL_NX90_i2c_sr_timeout        0x00000000
#define MSK_NX90_i2c_sr_scl_state              0x40000000
#define SRT_NX90_i2c_sr_scl_state              30
#define DFLT_VAL_NX90_i2c_sr_scl_state         0x40000000
#define DFLT_BF_VAL_NX90_i2c_sr_scl_state      0x00000001
#define MSK_NX90_i2c_sr_sda_state              0x80000000
#define SRT_NX90_i2c_sr_sda_state              31
#define DFLT_VAL_NX90_i2c_sr_sda_state         0x80000000
#define DFLT_BF_VAL_NX90_i2c_sr_sda_state      0x00000001

/* all used bits of 'NX90_i2c_sr': */
#define MSK_USED_BITS_NX90_i2c_sr 0xdfff7fdf

/* --------------------------------------------------------------------- */
/* Register i2c_irqmsk */
/* => I2C interrupt mask set or clear register: */
/*    These bits have AND-mask character. The corresponding IRQ will generate the module IRQ only if the mask bit */
/*    is set. Changing a mask bit from '0' to '1' will clear the corresponding raw IRQ state. For a detailed IRQ */
/*    description, see i2c_irqraw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqmsk          0x00000020
#define Adr_NX90_i2c_app_i2c_irqmsk      0xFF8010A0
#define Adr_NX90_i2c_xpic_app_i2c_irqmsk 0xFF900360
#define DFLT_VAL_NX90_i2c_irqmsk         0x00000000

#define MSK_NX90_i2c_irqmsk_cmd_ok            0x00000001
#define SRT_NX90_i2c_irqmsk_cmd_ok            0
#define DFLT_VAL_NX90_i2c_irqmsk_cmd_ok       0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_cmd_ok    0x00000000
#define MSK_NX90_i2c_irqmsk_cmd_err           0x00000002
#define SRT_NX90_i2c_irqmsk_cmd_err           1
#define DFLT_VAL_NX90_i2c_irqmsk_cmd_err      0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_cmd_err   0x00000000
#define MSK_NX90_i2c_irqmsk_fifo_err          0x00000004
#define SRT_NX90_i2c_irqmsk_fifo_err          2
#define DFLT_VAL_NX90_i2c_irqmsk_fifo_err     0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_fifo_err  0x00000000
#define MSK_NX90_i2c_irqmsk_bus_busy          0x00000008
#define SRT_NX90_i2c_irqmsk_bus_busy          3
#define DFLT_VAL_NX90_i2c_irqmsk_bus_busy     0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_bus_busy  0x00000000
#define MSK_NX90_i2c_irqmsk_mfifo_req         0x00000010
#define SRT_NX90_i2c_irqmsk_mfifo_req         4
#define DFLT_VAL_NX90_i2c_irqmsk_mfifo_req    0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_mfifo_req 0x00000000
#define MSK_NX90_i2c_irqmsk_sfifo_req         0x00000020
#define SRT_NX90_i2c_irqmsk_sfifo_req         5
#define DFLT_VAL_NX90_i2c_irqmsk_sfifo_req    0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_sfifo_req 0x00000000
#define MSK_NX90_i2c_irqmsk_sreq              0x00000040
#define SRT_NX90_i2c_irqmsk_sreq              6
#define DFLT_VAL_NX90_i2c_irqmsk_sreq         0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqmsk_sreq      0x00000000

/* all used bits of 'NX90_i2c_irqmsk': */
#define MSK_USED_BITS_NX90_i2c_irqmsk 0x0000007f

/* --------------------------------------------------------------------- */
/* Register i2c_irqsr */
/* => I2C interrupt state register (raw interrupt before masking): */
/*    Writing '1' will clear the corresponding IRQ. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqsr          0x00000024
#define Adr_NX90_i2c_app_i2c_irqsr      0xFF8010A4
#define Adr_NX90_i2c_xpic_app_i2c_irqsr 0xFF900364
#define DFLT_VAL_NX90_i2c_irqsr         0x00000000

#define MSK_NX90_i2c_irqsr_cmd_ok            0x00000001
#define SRT_NX90_i2c_irqsr_cmd_ok            0
#define DFLT_VAL_NX90_i2c_irqsr_cmd_ok       0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_cmd_ok    0x00000000
#define MSK_NX90_i2c_irqsr_cmd_err           0x00000002
#define SRT_NX90_i2c_irqsr_cmd_err           1
#define DFLT_VAL_NX90_i2c_irqsr_cmd_err      0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_cmd_err   0x00000000
#define MSK_NX90_i2c_irqsr_fifo_err          0x00000004
#define SRT_NX90_i2c_irqsr_fifo_err          2
#define DFLT_VAL_NX90_i2c_irqsr_fifo_err     0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_fifo_err  0x00000000
#define MSK_NX90_i2c_irqsr_bus_busy          0x00000008
#define SRT_NX90_i2c_irqsr_bus_busy          3
#define DFLT_VAL_NX90_i2c_irqsr_bus_busy     0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_bus_busy  0x00000000
#define MSK_NX90_i2c_irqsr_mfifo_req         0x00000010
#define SRT_NX90_i2c_irqsr_mfifo_req         4
#define DFLT_VAL_NX90_i2c_irqsr_mfifo_req    0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_mfifo_req 0x00000000
#define MSK_NX90_i2c_irqsr_sfifo_req         0x00000020
#define SRT_NX90_i2c_irqsr_sfifo_req         5
#define DFLT_VAL_NX90_i2c_irqsr_sfifo_req    0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_sfifo_req 0x00000000
#define MSK_NX90_i2c_irqsr_sreq              0x00000040
#define SRT_NX90_i2c_irqsr_sreq              6
#define DFLT_VAL_NX90_i2c_irqsr_sreq         0x00000000
#define DFLT_BF_VAL_NX90_i2c_irqsr_sreq      0x00000000

/* all used bits of 'NX90_i2c_irqsr': */
#define MSK_USED_BITS_NX90_i2c_irqsr 0x0000007f

/* --------------------------------------------------------------------- */
/* Register i2c_irqmsked */
/* => I2C masked interrupt state register: */
/*    If one of these bits is set, the I2C IRQ will be set to the interrupt controller. */
/*    For a detailed IRQ description, see i2c_irqraw. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_irqmsked          0x00000028
#define Adr_NX90_i2c_app_i2c_irqmsked      0xFF8010A8
#define Adr_NX90_i2c_xpic_app_i2c_irqmsked 0xFF900368

#define MSK_NX90_i2c_irqmsked_cmd_ok    0x00000001
#define SRT_NX90_i2c_irqmsked_cmd_ok    0
#define MSK_NX90_i2c_irqmsked_cmd_err   0x00000002
#define SRT_NX90_i2c_irqmsked_cmd_err   1
#define MSK_NX90_i2c_irqmsked_fifo_err  0x00000004
#define SRT_NX90_i2c_irqmsked_fifo_err  2
#define MSK_NX90_i2c_irqmsked_bus_busy  0x00000008
#define SRT_NX90_i2c_irqmsked_bus_busy  3
#define MSK_NX90_i2c_irqmsked_mfifo_req 0x00000010
#define SRT_NX90_i2c_irqmsked_mfifo_req 4
#define MSK_NX90_i2c_irqmsked_sfifo_req 0x00000020
#define SRT_NX90_i2c_irqmsked_sfifo_req 5
#define MSK_NX90_i2c_irqmsked_sreq      0x00000040
#define SRT_NX90_i2c_irqmsked_sreq      6

/* all used bits of 'NX90_i2c_irqmsked': */
#define MSK_USED_BITS_NX90_i2c_irqmsked 0x0000007f

/* --------------------------------------------------------------------- */
/* Register i2c_dmacr */
/* => I2C DMA control register: */
/*    Required settings for the DMA controller: */
/*    - DMA transfer size to/from I2C module: Byte */
/*    - DMA burst length to/from I2C module: 4 */
/*    DMA burst requests will be generated if the corresponding FIFO contains more than 4 bytes (receive case) or if */
/*    more than 4 bytes are writable to the corresponding FIFO (transmit case). */
/*    DMA single transfer requests will be generated if the corresponding FIFO contains more than 1 byte (receive case) or if */
/*    more than 1 byte is writable to the corresponding FIFO (transmit case). */
/*    No further DMA requests will be generated if all transmit data is written to the master FIFO and the i2c module is */
/*    the DMA flow controller (for master data only). Once all data is written */
/*    to the master FIFO, the last burst/single request will be generated for the DMA controller. */
/*    If the DMA controller sets DMACTC (terminal count) to indicate the end of transfer, the corresponding bit will be cleared. */
/*    If one of the bits of this register is set to 0 by software and a DMA transfer has been requested before, the DMA controller */
/*    will perform one last transfer to reset DMA request signals. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_dmacr          0x0000002C
#define Adr_NX90_i2c_app_i2c_dmacr      0xFF8010AC
#define Adr_NX90_i2c_xpic_app_i2c_dmacr 0xFF90036C
#define DFLT_VAL_NX90_i2c_dmacr         0x00000000

#define MSK_NX90_i2c_dmacr_mdmas_en         0x00000001
#define SRT_NX90_i2c_dmacr_mdmas_en         0
#define DFLT_VAL_NX90_i2c_dmacr_mdmas_en    0x00000000
#define DFLT_BF_VAL_NX90_i2c_dmacr_mdmas_en 0x00000000
#define MSK_NX90_i2c_dmacr_mdmab_en         0x00000002
#define SRT_NX90_i2c_dmacr_mdmab_en         1
#define DFLT_VAL_NX90_i2c_dmacr_mdmab_en    0x00000000
#define DFLT_BF_VAL_NX90_i2c_dmacr_mdmab_en 0x00000000
#define MSK_NX90_i2c_dmacr_sdmas_en         0x00000004
#define SRT_NX90_i2c_dmacr_sdmas_en         2
#define DFLT_VAL_NX90_i2c_dmacr_sdmas_en    0x00000000
#define DFLT_BF_VAL_NX90_i2c_dmacr_sdmas_en 0x00000000
#define MSK_NX90_i2c_dmacr_sdmab_en         0x00000008
#define SRT_NX90_i2c_dmacr_sdmab_en         3
#define DFLT_VAL_NX90_i2c_dmacr_sdmab_en    0x00000000
#define DFLT_BF_VAL_NX90_i2c_dmacr_sdmab_en 0x00000000

/* all used bits of 'NX90_i2c_dmacr': */
#define MSK_USED_BITS_NX90_i2c_dmacr 0x0000000f

/* --------------------------------------------------------------------- */
/* Register i2c_pio */
/* => PIO mode register: */
/*    This register can directly control the I2C signals SCL and SDA if pio_mode is enabled in register i2c_mcr. In PIO mode, the */
/*    I2C controller state machine is disabled, thus, no FIFO action takes place, no IRQs will be set, and no DMA-controlling is possible. */
/*    Note: To avoid external driving conflicts, the I2C signals SCL and SDA are never driven active-high according to */
/*    the I2C bus specification. The high level of these signals is realized by a pull-up (of the pad or externally) \ */
/*    and by setting the appropriate output enable to 0 (scl_oe, sda_oe) instead of driving the level */
/*    active-high. Driving the signals directly by enabling the outputs (programming */
/*    the bits sda_oe or scl_oe to '1') can lead to driving conflicts and could cause damage. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_i2c_pio          0x00000030
#define Adr_NX90_i2c_app_i2c_pio      0xFF8010B0
#define Adr_NX90_i2c_xpic_app_i2c_pio 0xFF900370
#define DFLT_VAL_NX90_i2c_pio         0x00000044

#define MSK_NX90_i2c_pio_scl_out           0x00000001
#define SRT_NX90_i2c_pio_scl_out           0
#define DFLT_VAL_NX90_i2c_pio_scl_out      0x00000000
#define DFLT_BF_VAL_NX90_i2c_pio_scl_out   0x00000000
#define MSK_NX90_i2c_pio_scl_oe            0x00000002
#define SRT_NX90_i2c_pio_scl_oe            1
#define DFLT_VAL_NX90_i2c_pio_scl_oe       0x00000000
#define DFLT_BF_VAL_NX90_i2c_pio_scl_oe    0x00000000
#define MSK_NX90_i2c_pio_scl_in_ro         0x00000004
#define SRT_NX90_i2c_pio_scl_in_ro         2
#define DFLT_VAL_NX90_i2c_pio_scl_in_ro    0x00000004
#define DFLT_BF_VAL_NX90_i2c_pio_scl_in_ro 0x00000001
#define MSK_NX90_i2c_pio_sda_out           0x00000010
#define SRT_NX90_i2c_pio_sda_out           4
#define DFLT_VAL_NX90_i2c_pio_sda_out      0x00000000
#define DFLT_BF_VAL_NX90_i2c_pio_sda_out   0x00000000
#define MSK_NX90_i2c_pio_sda_oe            0x00000020
#define SRT_NX90_i2c_pio_sda_oe            5
#define DFLT_VAL_NX90_i2c_pio_sda_oe       0x00000000
#define DFLT_BF_VAL_NX90_i2c_pio_sda_oe    0x00000000
#define MSK_NX90_i2c_pio_sda_in_ro         0x00000040
#define SRT_NX90_i2c_pio_sda_in_ro         6
#define DFLT_VAL_NX90_i2c_pio_sda_in_ro    0x00000040
#define DFLT_BF_VAL_NX90_i2c_pio_sda_in_ro 0x00000001

/* all used bits of 'NX90_i2c_pio': */
#define MSK_USED_BITS_NX90_i2c_pio 0x00000077


/* ===================================================================== */

/* AREA spi */
/* Area of spi0_app, spi1_app, spi2_app, spi_xpic_app */

/* ===================================================================== */

#define Addr_NX90_spi0_app     0xFF8010C0
#define Addr_NX90_spi1_app     0xFF801100
#define Addr_NX90_spi2_app     0xFF801140
#define Addr_NX90_spi_xpic_app 0xFF900380

/* --------------------------------------------------------------------- */
/* Register spi_cr0 */
/* => SPI control register 0 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_cr0          0x00000000
#define Adr_NX90_spi0_app_spi_cr0     0xFF8010C0
#define Adr_NX90_spi1_app_spi_cr0     0xFF801100
#define Adr_NX90_spi2_app_spi_cr0     0xFF801140
#define Adr_NX90_spi_xpic_app_spi_cr0 0xFF900380
#define DFLT_VAL_NX90_spi_cr0         0x80080007

#define MSK_NX90_spi_cr0_datasize                0x0000000f
#define SRT_NX90_spi_cr0_datasize                0
#define DFLT_VAL_NX90_spi_cr0_datasize           0x00000007
#define DFLT_BF_VAL_NX90_spi_cr0_datasize        0x00000007
#define MSK_NX90_spi_cr0_SPO                     0x00000040
#define SRT_NX90_spi_cr0_SPO                     6
#define DFLT_VAL_NX90_spi_cr0_SPO                0x00000000
#define DFLT_BF_VAL_NX90_spi_cr0_SPO             0x00000000
#define MSK_NX90_spi_cr0_SPH                     0x00000080
#define SRT_NX90_spi_cr0_SPH                     7
#define DFLT_VAL_NX90_spi_cr0_SPH                0x00000000
#define DFLT_BF_VAL_NX90_spi_cr0_SPH             0x00000000
#define MSK_NX90_spi_cr0_sck_muladd              0x000fff00
#define SRT_NX90_spi_cr0_sck_muladd              8
#define DFLT_VAL_NX90_spi_cr0_sck_muladd         0x00080000
#define DFLT_BF_VAL_NX90_spi_cr0_sck_muladd      0x00000800
#define MSK_NX90_spi_cr0_format                  0x03000000
#define SRT_NX90_spi_cr0_format                  24
#define DFLT_VAL_NX90_spi_cr0_format             0x00000000
#define DFLT_BF_VAL_NX90_spi_cr0_format          0x00000000
#define MSK_NX90_spi_cr0_filter_in               0x08000000
#define SRT_NX90_spi_cr0_filter_in               27
#define DFLT_VAL_NX90_spi_cr0_filter_in          0x00000000
#define DFLT_BF_VAL_NX90_spi_cr0_filter_in       0x00000000
#define MSK_NX90_spi_cr0_slave_sig_early         0x10000000
#define SRT_NX90_spi_cr0_slave_sig_early         28
#define DFLT_VAL_NX90_spi_cr0_slave_sig_early    0x00000000
#define DFLT_BF_VAL_NX90_spi_cr0_slave_sig_early 0x00000000
#define MSK_NX90_spi_cr0_netx100_comp            0x80000000
#define SRT_NX90_spi_cr0_netx100_comp            31
#define DFLT_VAL_NX90_spi_cr0_netx100_comp       0x80000000
#define DFLT_BF_VAL_NX90_spi_cr0_netx100_comp    0x00000001

/* all used bits of 'NX90_spi_cr0': */
#define MSK_USED_BITS_NX90_spi_cr0 0x9b0fffcf

/* --------------------------------------------------------------------- */
/* Register spi_cr1 */
/* => SPI control register 1 */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_cr1          0x00000004
#define Adr_NX90_spi0_app_spi_cr1     0xFF8010C4
#define Adr_NX90_spi1_app_spi_cr1     0xFF801104
#define Adr_NX90_spi2_app_spi_cr1     0xFF801144
#define Adr_NX90_spi_xpic_app_spi_cr1 0xFF900384
#define DFLT_VAL_NX90_spi_cr1         0x08080000

#define MSK_NX90_spi_cr1_LBM                 0x00000001
#define SRT_NX90_spi_cr1_LBM                 0
#define DFLT_VAL_NX90_spi_cr1_LBM            0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_LBM         0x00000000
#define MSK_NX90_spi_cr1_SSE                 0x00000002
#define SRT_NX90_spi_cr1_SSE                 1
#define DFLT_VAL_NX90_spi_cr1_SSE            0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_SSE         0x00000000
#define MSK_NX90_spi_cr1_MS                  0x00000004
#define SRT_NX90_spi_cr1_MS                  2
#define DFLT_VAL_NX90_spi_cr1_MS             0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_MS          0x00000000
#define MSK_NX90_spi_cr1_SOD                 0x00000008
#define SRT_NX90_spi_cr1_SOD                 3
#define DFLT_VAL_NX90_spi_cr1_SOD            0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_SOD         0x00000000
#define MSK_NX90_spi_cr1_fss                 0x00000700
#define SRT_NX90_spi_cr1_fss                 8
#define DFLT_VAL_NX90_spi_cr1_fss            0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_fss         0x00000000
#define MSK_NX90_spi_cr1_fss_static          0x00000800
#define SRT_NX90_spi_cr1_fss_static          11
#define DFLT_VAL_NX90_spi_cr1_fss_static     0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_fss_static  0x00000000
#define MSK_NX90_spi_cr1_tx_fifo_wm          0x000f0000
#define SRT_NX90_spi_cr1_tx_fifo_wm          16
#define DFLT_VAL_NX90_spi_cr1_tx_fifo_wm     0x00080000
#define DFLT_BF_VAL_NX90_spi_cr1_tx_fifo_wm  0x00000008
#define MSK_NX90_spi_cr1_tx_fifo_clr         0x00100000
#define SRT_NX90_spi_cr1_tx_fifo_clr         20
#define DFLT_VAL_NX90_spi_cr1_tx_fifo_clr    0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_tx_fifo_clr 0x00000000
#define MSK_NX90_spi_cr1_rx_fifo_wm          0x0f000000
#define SRT_NX90_spi_cr1_rx_fifo_wm          24
#define DFLT_VAL_NX90_spi_cr1_rx_fifo_wm     0x08000000
#define DFLT_BF_VAL_NX90_spi_cr1_rx_fifo_wm  0x00000008
#define MSK_NX90_spi_cr1_rx_fifo_clr         0x10000000
#define SRT_NX90_spi_cr1_rx_fifo_clr         28
#define DFLT_VAL_NX90_spi_cr1_rx_fifo_clr    0x00000000
#define DFLT_BF_VAL_NX90_spi_cr1_rx_fifo_clr 0x00000000

/* all used bits of 'NX90_spi_cr1': */
#define MSK_USED_BITS_NX90_spi_cr1 0x1f1f0f0f

/* --------------------------------------------------------------------- */
/* Register spi_dr */
/* => SPI data register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    The SPI module has 2 FIFOs: One for transmit data and one for receive data. */
/*    Read access: Received data byte is delivered from receive FIFO. */
/*    Write access: Transmit data byte is written to send FIFO. */
/*    Both FIFOs (receive and transmit) have a depth of 16. */
/*    SPI master mode: MISO input data will be stored in the receive FIFO; transmit FIFO generates MOSI output data. */
/*    SPI slave mode: MOSI input data will be stored in the receive FIFO; transmit FIFO generates MISO output data. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_dr          0x00000008
#define Adr_NX90_spi0_app_spi_dr     0xFF8010C8
#define Adr_NX90_spi1_app_spi_dr     0xFF801108
#define Adr_NX90_spi2_app_spi_dr     0xFF801148
#define Adr_NX90_spi_xpic_app_spi_dr 0xFF900388
#define DFLT_VAL_NX90_spi_dr         0x00000000

#define MSK_NX90_spi_dr_data         0x0001ffff
#define SRT_NX90_spi_dr_data         0
#define DFLT_VAL_NX90_spi_dr_data    0x00000000
#define DFLT_BF_VAL_NX90_spi_dr_data 0x00000000

/* all used bits of 'NX90_spi_dr': */
#define MSK_USED_BITS_NX90_spi_dr 0x0001ffff

/* --------------------------------------------------------------------- */
/* Register spi_sr */
/* => SPI status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_sr          0x0000000C
#define Adr_NX90_spi0_app_spi_sr     0xFF8010CC
#define Adr_NX90_spi1_app_spi_sr     0xFF80110C
#define Adr_NX90_spi2_app_spi_sr     0xFF80114C
#define Adr_NX90_spi_xpic_app_spi_sr 0xFF90038C

#define MSK_NX90_spi_sr_TFE              0x00000001
#define SRT_NX90_spi_sr_TFE              0
#define MSK_NX90_spi_sr_TNF              0x00000002
#define SRT_NX90_spi_sr_TNF              1
#define MSK_NX90_spi_sr_RNE              0x00000004
#define SRT_NX90_spi_sr_RNE              2
#define MSK_NX90_spi_sr_RFF              0x00000008
#define SRT_NX90_spi_sr_RFF              3
#define MSK_NX90_spi_sr_BSY              0x00000010
#define SRT_NX90_spi_sr_BSY              4
#define MSK_NX90_spi_sr_tx_fifo_level    0x001f0000
#define SRT_NX90_spi_sr_tx_fifo_level    16
#define MSK_NX90_spi_sr_tx_fifo_err_ovfl 0x00400000
#define SRT_NX90_spi_sr_tx_fifo_err_ovfl 22
#define MSK_NX90_spi_sr_tx_fifo_err_undr 0x00800000
#define SRT_NX90_spi_sr_tx_fifo_err_undr 23
#define MSK_NX90_spi_sr_rx_fifo_level    0x1f000000
#define SRT_NX90_spi_sr_rx_fifo_level    24
#define MSK_NX90_spi_sr_rx_fifo_err_ovfl 0x40000000
#define SRT_NX90_spi_sr_rx_fifo_err_ovfl 30
#define MSK_NX90_spi_sr_rx_fifo_err_undr 0x80000000
#define SRT_NX90_spi_sr_rx_fifo_err_undr 31

/* all used bits of 'NX90_spi_sr': */
#define MSK_USED_BITS_NX90_spi_sr 0xdfdf001f

/* --------------------------------------------------------------------- */
/* Register spi_imsc */
/* => SPI Interrupt Mask Set and Clear register: */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    IRQ mask is an AND-mask: only raw interrupts with mask bit set can generate a module IRQ. */
/*    When writing this register, the corresponding interrupt is cleared similar to writing the register spi_icr. */
/*     */
/*    Note: The functionality of this register is similar to the corresponding SQI register sqi_irq_mask. */
/*          However, in contrast to this register, setting bits in sqi_irq_mask does not clear the corresponding interrupts. */
/*     */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_imsc          0x00000014
#define Adr_NX90_spi0_app_spi_imsc     0xFF8010D4
#define Adr_NX90_spi1_app_spi_imsc     0xFF801114
#define Adr_NX90_spi2_app_spi_imsc     0xFF801154
#define Adr_NX90_spi_xpic_app_spi_imsc 0xFF900394
#define DFLT_VAL_NX90_spi_imsc         0x00000000

#define MSK_NX90_spi_imsc_RORIM          0x00000001
#define SRT_NX90_spi_imsc_RORIM          0
#define DFLT_VAL_NX90_spi_imsc_RORIM     0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_RORIM  0x00000000
#define MSK_NX90_spi_imsc_RTIM           0x00000002
#define SRT_NX90_spi_imsc_RTIM           1
#define DFLT_VAL_NX90_spi_imsc_RTIM      0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_RTIM   0x00000000
#define MSK_NX90_spi_imsc_RXIM           0x00000004
#define SRT_NX90_spi_imsc_RXIM           2
#define DFLT_VAL_NX90_spi_imsc_RXIM      0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_RXIM   0x00000000
#define MSK_NX90_spi_imsc_TXIM           0x00000008
#define SRT_NX90_spi_imsc_TXIM           3
#define DFLT_VAL_NX90_spi_imsc_TXIM      0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_TXIM   0x00000000
#define MSK_NX90_spi_imsc_rxneim         0x00000010
#define SRT_NX90_spi_imsc_rxneim         4
#define DFLT_VAL_NX90_spi_imsc_rxneim    0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_rxneim 0x00000000
#define MSK_NX90_spi_imsc_rxfim          0x00000020
#define SRT_NX90_spi_imsc_rxfim          5
#define DFLT_VAL_NX90_spi_imsc_rxfim     0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_rxfim  0x00000000
#define MSK_NX90_spi_imsc_txeim          0x00000040
#define SRT_NX90_spi_imsc_txeim          6
#define DFLT_VAL_NX90_spi_imsc_txeim     0x00000000
#define DFLT_BF_VAL_NX90_spi_imsc_txeim  0x00000000

/* all used bits of 'NX90_spi_imsc': */
#define MSK_USED_BITS_NX90_spi_imsc 0x0000007f

/* --------------------------------------------------------------------- */
/* Register spi_ris */
/* => SPI interrupt state before masking register (raw interrupt) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_ris          0x00000018
#define Adr_NX90_spi0_app_spi_ris     0xFF8010D8
#define Adr_NX90_spi1_app_spi_ris     0xFF801118
#define Adr_NX90_spi2_app_spi_ris     0xFF801158
#define Adr_NX90_spi_xpic_app_spi_ris 0xFF900398

#define MSK_NX90_spi_ris_RORRIS  0x00000001
#define SRT_NX90_spi_ris_RORRIS  0
#define MSK_NX90_spi_ris_RTRIS   0x00000002
#define SRT_NX90_spi_ris_RTRIS   1
#define MSK_NX90_spi_ris_RXRIS   0x00000004
#define SRT_NX90_spi_ris_RXRIS   2
#define MSK_NX90_spi_ris_TXRIS   0x00000008
#define SRT_NX90_spi_ris_TXRIS   3
#define MSK_NX90_spi_ris_rxneris 0x00000010
#define SRT_NX90_spi_ris_rxneris 4
#define MSK_NX90_spi_ris_rxfris  0x00000020
#define SRT_NX90_spi_ris_rxfris  5
#define MSK_NX90_spi_ris_txeris  0x00000040
#define SRT_NX90_spi_ris_txeris  6

/* all used bits of 'NX90_spi_ris': */
#define MSK_USED_BITS_NX90_spi_ris 0x0000007f

/* --------------------------------------------------------------------- */
/* Register spi_mis */
/* => SPI interrupt status register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_mis          0x0000001C
#define Adr_NX90_spi0_app_spi_mis     0xFF8010DC
#define Adr_NX90_spi1_app_spi_mis     0xFF80111C
#define Adr_NX90_spi2_app_spi_mis     0xFF80115C
#define Adr_NX90_spi_xpic_app_spi_mis 0xFF90039C

#define MSK_NX90_spi_mis_RORMIS  0x00000001
#define SRT_NX90_spi_mis_RORMIS  0
#define MSK_NX90_spi_mis_RTMIS   0x00000002
#define SRT_NX90_spi_mis_RTMIS   1
#define MSK_NX90_spi_mis_RXMIS   0x00000004
#define SRT_NX90_spi_mis_RXMIS   2
#define MSK_NX90_spi_mis_TXMIS   0x00000008
#define SRT_NX90_spi_mis_TXMIS   3
#define MSK_NX90_spi_mis_rxnemis 0x00000010
#define SRT_NX90_spi_mis_rxnemis 4
#define MSK_NX90_spi_mis_rxfmis  0x00000020
#define SRT_NX90_spi_mis_rxfmis  5
#define MSK_NX90_spi_mis_txemis  0x00000040
#define SRT_NX90_spi_mis_txemis  6

/* all used bits of 'NX90_spi_mis': */
#define MSK_USED_BITS_NX90_spi_mis 0x0000007f

/* --------------------------------------------------------------------- */
/* Register spi_icr */
/* => SPI interrupt clear register */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    An interrupt is cleared by writing "1" to the according bit. */
/*    Note: Both FIFOs (receive and transmit) have a depth of 16. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_icr          0x00000020
#define Adr_NX90_spi0_app_spi_icr     0xFF8010E0
#define Adr_NX90_spi1_app_spi_icr     0xFF801120
#define Adr_NX90_spi2_app_spi_icr     0xFF801160
#define Adr_NX90_spi_xpic_app_spi_icr 0xFF9003A0
#define DFLT_VAL_NX90_spi_icr         0x00000000

#define MSK_NX90_spi_icr_RORIC          0x00000001
#define SRT_NX90_spi_icr_RORIC          0
#define DFLT_VAL_NX90_spi_icr_RORIC     0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_RORIC  0x00000000
#define MSK_NX90_spi_icr_RTIC           0x00000002
#define SRT_NX90_spi_icr_RTIC           1
#define DFLT_VAL_NX90_spi_icr_RTIC      0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_RTIC   0x00000000
#define MSK_NX90_spi_icr_RXIC           0x00000004
#define SRT_NX90_spi_icr_RXIC           2
#define DFLT_VAL_NX90_spi_icr_RXIC      0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_RXIC   0x00000000
#define MSK_NX90_spi_icr_TXIC           0x00000008
#define SRT_NX90_spi_icr_TXIC           3
#define DFLT_VAL_NX90_spi_icr_TXIC      0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_TXIC   0x00000000
#define MSK_NX90_spi_icr_rxneic         0x00000010
#define SRT_NX90_spi_icr_rxneic         4
#define DFLT_VAL_NX90_spi_icr_rxneic    0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_rxneic 0x00000000
#define MSK_NX90_spi_icr_rxfic          0x00000020
#define SRT_NX90_spi_icr_rxfic          5
#define DFLT_VAL_NX90_spi_icr_rxfic     0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_rxfic  0x00000000
#define MSK_NX90_spi_icr_txeic          0x00000040
#define SRT_NX90_spi_icr_txeic          6
#define DFLT_VAL_NX90_spi_icr_txeic     0x00000000
#define DFLT_BF_VAL_NX90_spi_icr_txeic  0x00000000

/* all used bits of 'NX90_spi_icr': */
#define MSK_USED_BITS_NX90_spi_icr 0x0000007f

/* --------------------------------------------------------------------- */
/* Register spi_dmacr */
/* => SPI DMA control register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_dmacr          0x00000028
#define Adr_NX90_spi0_app_spi_dmacr     0xFF8010E8
#define Adr_NX90_spi1_app_spi_dmacr     0xFF801128
#define Adr_NX90_spi2_app_spi_dmacr     0xFF801168
#define Adr_NX90_spi_xpic_app_spi_dmacr 0xFF9003A8
#define DFLT_VAL_NX90_spi_dmacr         0x00000000

#define MSK_NX90_spi_dmacr_RXDMAE         0x00000001
#define SRT_NX90_spi_dmacr_RXDMAE         0
#define DFLT_VAL_NX90_spi_dmacr_RXDMAE    0x00000000
#define DFLT_BF_VAL_NX90_spi_dmacr_RXDMAE 0x00000000
#define MSK_NX90_spi_dmacr_TXDMAE         0x00000002
#define SRT_NX90_spi_dmacr_TXDMAE         1
#define DFLT_VAL_NX90_spi_dmacr_TXDMAE    0x00000000
#define DFLT_BF_VAL_NX90_spi_dmacr_TXDMAE 0x00000000

/* all used bits of 'NX90_spi_dmacr': */
#define MSK_USED_BITS_NX90_spi_dmacr 0x00000003

/* --------------------------------------------------------------------- */
/* Register spi_data_register */
/* => netx100/500 compliant SPI data register (DR) */
/*    Registers 0x30..0x3C can be used instead of registers 0x00...0x24 to keep netx50 software compliant to netx100/500. */
/*    2 data bytes with valid bits. */
/*    During a write access data_byte_1 and dr_valid1 must not be used. dr_valid0 must be set. */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_data_register          0x00000030
#define Adr_NX90_spi0_app_spi_data_register     0xFF8010F0
#define Adr_NX90_spi1_app_spi_data_register     0xFF801130
#define Adr_NX90_spi2_app_spi_data_register     0xFF801170
#define Adr_NX90_spi_xpic_app_spi_data_register 0xFF9003B0
#define DFLT_VAL_NX90_spi_data_register         0x00000000

#define MSK_NX90_spi_data_register_data_byte_0         0x000000ff
#define SRT_NX90_spi_data_register_data_byte_0         0
#define DFLT_VAL_NX90_spi_data_register_data_byte_0    0x00000000
#define DFLT_BF_VAL_NX90_spi_data_register_data_byte_0 0x00000000
#define MSK_NX90_spi_data_register_data_byte_1         0x0000ff00
#define SRT_NX90_spi_data_register_data_byte_1         8
#define DFLT_VAL_NX90_spi_data_register_data_byte_1    0x00000000
#define DFLT_BF_VAL_NX90_spi_data_register_data_byte_1 0x00000000
#define MSK_NX90_spi_data_register_dr_valid0           0x00010000
#define SRT_NX90_spi_data_register_dr_valid0           16
#define DFLT_VAL_NX90_spi_data_register_dr_valid0      0x00000000
#define DFLT_BF_VAL_NX90_spi_data_register_dr_valid0   0x00000000
#define MSK_NX90_spi_data_register_dr_valid1           0x00020000
#define SRT_NX90_spi_data_register_dr_valid1           17
#define DFLT_VAL_NX90_spi_data_register_dr_valid1      0x00000000
#define DFLT_BF_VAL_NX90_spi_data_register_dr_valid1   0x00000000

/* all used bits of 'NX90_spi_data_register': */
#define MSK_USED_BITS_NX90_spi_data_register 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register spi_status_register */
/* => netx100/500 compliant SPI status register (SR): */
/*    Shows the actual status of the SPI interface. */
/*    Bits 24..18 show occurred interrupts; writing ones into these bits clears the interrupts. */
/*    Writing into other bits has no effect. */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_status_register          0x00000034
#define Adr_NX90_spi0_app_spi_status_register     0xFF8010F4
#define Adr_NX90_spi1_app_spi_status_register     0xFF801134
#define Adr_NX90_spi2_app_spi_status_register     0xFF801174
#define Adr_NX90_spi_xpic_app_spi_status_register 0xFF9003B4

#define MSK_NX90_spi_status_register_SR_in_fuel_val  0x000001ff
#define SRT_NX90_spi_status_register_SR_in_fuel_val  0
#define MSK_NX90_spi_status_register_SR_out_fuel_val 0x0003fe00
#define SRT_NX90_spi_status_register_SR_out_fuel_val 9
#define MSK_NX90_spi_status_register_SR_in_fuel      0x00040000
#define SRT_NX90_spi_status_register_SR_in_fuel      18
#define MSK_NX90_spi_status_register_SR_in_recdata   0x00080000
#define SRT_NX90_spi_status_register_SR_in_recdata   19
#define MSK_NX90_spi_status_register_SR_in_full      0x00100000
#define SRT_NX90_spi_status_register_SR_in_full      20
#define MSK_NX90_spi_status_register_SR_out_fuel     0x00200000
#define SRT_NX90_spi_status_register_SR_out_fuel     21
#define MSK_NX90_spi_status_register_SR_out_fw       0x00400000
#define SRT_NX90_spi_status_register_SR_out_fw       22
#define MSK_NX90_spi_status_register_SR_out_empty    0x00800000
#define SRT_NX90_spi_status_register_SR_out_empty    23
#define MSK_NX90_spi_status_register_SR_out_full     0x01000000
#define SRT_NX90_spi_status_register_SR_out_full     24
#define MSK_NX90_spi_status_register_SR_selected     0x02000000
#define SRT_NX90_spi_status_register_SR_selected     25

/* all used bits of 'NX90_spi_status_register': */
#define MSK_USED_BITS_NX90_spi_status_register 0x03ffffff

/* --------------------------------------------------------------------- */
/* Register spi_control_register */
/* => netx100/500 compliant SPI control register (CR) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_control_register          0x00000038
#define Adr_NX90_spi0_app_spi_control_register     0xFF8010F8
#define Adr_NX90_spi1_app_spi_control_register     0xFF801138
#define Adr_NX90_spi2_app_spi_control_register     0xFF801178
#define Adr_NX90_spi_xpic_app_spi_control_register 0xFF9003B8
#define DFLT_VAL_NX90_spi_control_register         0x00000000

#define MSK_NX90_spi_control_register_CR_softreset           0x00000001
#define SRT_NX90_spi_control_register_CR_softreset           0
#define DFLT_VAL_NX90_spi_control_register_CR_softreset      0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_softreset   0x00000000
#define MSK_NX90_spi_control_register_CR_speed               0x0000001e
#define SRT_NX90_spi_control_register_CR_speed               1
#define DFLT_VAL_NX90_spi_control_register_CR_speed          0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_speed       0x00000000
#define MSK_NX90_spi_control_register_CR_read                0x00000040
#define SRT_NX90_spi_control_register_CR_read                6
#define DFLT_VAL_NX90_spi_control_register_CR_read           0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_read        0x00000000
#define MSK_NX90_spi_control_register_CR_write               0x00000080
#define SRT_NX90_spi_control_register_CR_write               7
#define DFLT_VAL_NX90_spi_control_register_CR_write          0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_write       0x00000000
#define MSK_NX90_spi_control_register_CR_ss                  0x00000700
#define SRT_NX90_spi_control_register_CR_ss                  8
#define DFLT_VAL_NX90_spi_control_register_CR_ss             0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ss          0x00000000
#define MSK_NX90_spi_control_register_CS_mode                0x00000800
#define SRT_NX90_spi_control_register_CS_mode                11
#define DFLT_VAL_NX90_spi_control_register_CS_mode           0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CS_mode        0x00000000
#define MSK_NX90_spi_control_register_CR_clr_infifo          0x00100000
#define SRT_NX90_spi_control_register_CR_clr_infifo          20
#define DFLT_VAL_NX90_spi_control_register_CR_clr_infifo     0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_clr_infifo  0x00000000
#define MSK_NX90_spi_control_register_CR_clr_outfifo         0x00200000
#define SRT_NX90_spi_control_register_CR_clr_outfifo         21
#define DFLT_VAL_NX90_spi_control_register_CR_clr_outfifo    0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_clr_outfifo 0x00000000
#define MSK_NX90_spi_control_register_CR_burstdelay          0x01c00000
#define SRT_NX90_spi_control_register_CR_burstdelay          22
#define DFLT_VAL_NX90_spi_control_register_CR_burstdelay     0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_burstdelay  0x00000000
#define MSK_NX90_spi_control_register_CR_burst               0x0e000000
#define SRT_NX90_spi_control_register_CR_burst               25
#define DFLT_VAL_NX90_spi_control_register_CR_burst          0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_burst       0x00000000
#define MSK_NX90_spi_control_register_CR_ncpha               0x10000000
#define SRT_NX90_spi_control_register_CR_ncpha               28
#define DFLT_VAL_NX90_spi_control_register_CR_ncpha          0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ncpha       0x00000000
#define MSK_NX90_spi_control_register_CR_cpol                0x20000000
#define SRT_NX90_spi_control_register_CR_cpol                29
#define DFLT_VAL_NX90_spi_control_register_CR_cpol           0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_cpol        0x00000000
#define MSK_NX90_spi_control_register_CR_ms                  0x40000000
#define SRT_NX90_spi_control_register_CR_ms                  30
#define DFLT_VAL_NX90_spi_control_register_CR_ms             0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_ms          0x00000000
#define MSK_NX90_spi_control_register_CR_en                  0x80000000
#define SRT_NX90_spi_control_register_CR_en                  31
#define DFLT_VAL_NX90_spi_control_register_CR_en             0x00000000
#define DFLT_BF_VAL_NX90_spi_control_register_CR_en          0x00000000

/* all used bits of 'NX90_spi_control_register': */
#define MSK_USED_BITS_NX90_spi_control_register 0xfff00fdf

/* --------------------------------------------------------------------- */
/* Register spi_interrupt_control_register */
/* => netx100/500 compliant SPI interrupt control register (IR) */
/*    In netx50 and later versions both FIFOs (receive and transmit) have a depth of 16, fill values are fixed to 4. To keep software */
/*    compatible, not more than 8 bytes should be in netx100/500 FIFOs. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_spi_interrupt_control_register          0x0000003C
#define Adr_NX90_spi0_app_spi_interrupt_control_register     0xFF8010FC
#define Adr_NX90_spi1_app_spi_interrupt_control_register     0xFF80113C
#define Adr_NX90_spi2_app_spi_interrupt_control_register     0xFF80117C
#define Adr_NX90_spi_xpic_app_spi_interrupt_control_register 0xFF9003BC
#define DFLT_VAL_NX90_spi_interrupt_control_register         0x00000000

#define MSK_NX90_spi_interrupt_control_register_IR_in_fuel               0x000001ff
#define SRT_NX90_spi_interrupt_control_register_IR_in_fuel               0
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_fuel          0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_fuel       0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_out_fuel              0x0003fe00
#define SRT_NX90_spi_interrupt_control_register_IR_out_fuel              9
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fuel         0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fuel      0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_in_fuel_en            0x00040000
#define SRT_NX90_spi_interrupt_control_register_IR_in_fuel_en            18
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_fuel_en       0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_fuel_en    0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_in_recdata_en         0x00080000
#define SRT_NX90_spi_interrupt_control_register_IR_in_recdata_en         19
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_recdata_en    0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_recdata_en 0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_in_full_en            0x00100000
#define SRT_NX90_spi_interrupt_control_register_IR_in_full_en            20
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_in_full_en       0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_in_full_en    0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_out_fuel_en           0x00200000
#define SRT_NX90_spi_interrupt_control_register_IR_out_fuel_en           21
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fuel_en      0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fuel_en   0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_out_fw_en             0x00400000
#define SRT_NX90_spi_interrupt_control_register_IR_out_fw_en             22
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_fw_en        0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_fw_en     0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_out_empty_en          0x00800000
#define SRT_NX90_spi_interrupt_control_register_IR_out_empty_en          23
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_empty_en     0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_empty_en  0x00000000
#define MSK_NX90_spi_interrupt_control_register_IR_out_full_en           0x01000000
#define SRT_NX90_spi_interrupt_control_register_IR_out_full_en           24
#define DFLT_VAL_NX90_spi_interrupt_control_register_IR_out_full_en      0x00000000
#define DFLT_BF_VAL_NX90_spi_interrupt_control_register_IR_out_full_en   0x00000000

/* all used bits of 'NX90_spi_interrupt_control_register': */
#define MSK_USED_BITS_NX90_spi_interrupt_control_register 0x01ffffff


/* ===================================================================== */

/* AREA canctrl */
/* Area of can_ctrl0_app, can_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_can_ctrl0_app 0xFF801200
#define Addr_NX90_can_ctrl1_app 0xFF801280

/* --------------------------------------------------------------------- */
/* Register canctrl_mode */
/* => CAN mode register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_mode           0x00000000
#define Adr_NX90_can_ctrl0_app_canctrl_mode 0xFF801200
#define Adr_NX90_can_ctrl1_app_canctrl_mode 0xFF801280
#define DFLT_VAL_NX90_canctrl_mode          0x00000001

#define MSK_NX90_canctrl_mode_reset_mode              0x00000001
#define SRT_NX90_canctrl_mode_reset_mode              0
#define DFLT_VAL_NX90_canctrl_mode_reset_mode         0x00000001
#define DFLT_BF_VAL_NX90_canctrl_mode_reset_mode      0x00000001
#define MSK_NX90_canctrl_mode_listen_mode             0x00000002
#define SRT_NX90_canctrl_mode_listen_mode             1
#define DFLT_VAL_NX90_canctrl_mode_listen_mode        0x00000000
#define DFLT_BF_VAL_NX90_canctrl_mode_listen_mode     0x00000000
#define MSK_NX90_canctrl_mode_selftest                0x00000004
#define SRT_NX90_canctrl_mode_selftest                2
#define DFLT_VAL_NX90_canctrl_mode_selftest           0x00000000
#define DFLT_BF_VAL_NX90_canctrl_mode_selftest        0x00000000
#define MSK_NX90_canctrl_mode_acceptance_mode         0x00000008
#define SRT_NX90_canctrl_mode_acceptance_mode         3
#define DFLT_VAL_NX90_canctrl_mode_acceptance_mode    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_mode_acceptance_mode 0x00000000

/* all used bits of 'NX90_canctrl_mode': */
#define MSK_USED_BITS_NX90_canctrl_mode 0x0000000f

/* --------------------------------------------------------------------- */
/* Register canctrl_command */
/* => CAN command register */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_command           0x00000004
#define Adr_NX90_can_ctrl0_app_canctrl_command 0xFF801204
#define Adr_NX90_can_ctrl1_app_canctrl_command 0xFF801284
#define DFLT_VAL_NX90_canctrl_command          0x00000000

#define MSK_NX90_canctrl_command_tx_request              0x00000001
#define SRT_NX90_canctrl_command_tx_request              0
#define DFLT_VAL_NX90_canctrl_command_tx_request         0x00000000
#define DFLT_BF_VAL_NX90_canctrl_command_tx_request      0x00000000
#define MSK_NX90_canctrl_command_abort_tx                0x00000002
#define SRT_NX90_canctrl_command_abort_tx                1
#define DFLT_VAL_NX90_canctrl_command_abort_tx           0x00000000
#define DFLT_BF_VAL_NX90_canctrl_command_abort_tx        0x00000000
#define MSK_NX90_canctrl_command_release_rx_buf          0x00000004
#define SRT_NX90_canctrl_command_release_rx_buf          2
#define DFLT_VAL_NX90_canctrl_command_release_rx_buf     0x00000000
#define DFLT_BF_VAL_NX90_canctrl_command_release_rx_buf  0x00000000
#define MSK_NX90_canctrl_command_clr_overrun             0x00000008
#define SRT_NX90_canctrl_command_clr_overrun             3
#define DFLT_VAL_NX90_canctrl_command_clr_overrun        0x00000000
#define DFLT_BF_VAL_NX90_canctrl_command_clr_overrun     0x00000000
#define MSK_NX90_canctrl_command_self_rx_request         0x00000010
#define SRT_NX90_canctrl_command_self_rx_request         4
#define DFLT_VAL_NX90_canctrl_command_self_rx_request    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_command_self_rx_request 0x00000000

/* all used bits of 'NX90_canctrl_command': */
#define MSK_USED_BITS_NX90_canctrl_command 0x0000001f

/* --------------------------------------------------------------------- */
/* Register canctrl_status */
/* => CAN status register */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_status           0x00000008
#define Adr_NX90_can_ctrl0_app_canctrl_status 0xFF801208
#define Adr_NX90_can_ctrl1_app_canctrl_status 0xFF801288

#define MSK_NX90_canctrl_status_rx_buf_status 0x00000001
#define SRT_NX90_canctrl_status_rx_buf_status 0
#define MSK_NX90_canctrl_status_overrun       0x00000002
#define SRT_NX90_canctrl_status_overrun       1
#define MSK_NX90_canctrl_status_tx_buf_status 0x00000004
#define SRT_NX90_canctrl_status_tx_buf_status 2
#define MSK_NX90_canctrl_status_tx_complete   0x00000008
#define SRT_NX90_canctrl_status_tx_complete   3
#define MSK_NX90_canctrl_status_rx_status     0x00000010
#define SRT_NX90_canctrl_status_rx_status     4
#define MSK_NX90_canctrl_status_tx_status     0x00000020
#define SRT_NX90_canctrl_status_tx_status     5
#define MSK_NX90_canctrl_status_error_status  0x00000040
#define SRT_NX90_canctrl_status_error_status  6
#define MSK_NX90_canctrl_status_bus_status    0x00000080
#define SRT_NX90_canctrl_status_bus_status    7
#define MSK_NX90_canctrl_status_tx_aborted    0x00000100
#define SRT_NX90_canctrl_status_tx_aborted    8

/* all used bits of 'NX90_canctrl_status': */
#define MSK_USED_BITS_NX90_canctrl_status 0x000001ff

/* --------------------------------------------------------------------- */
/* Register canctrl_irq */
/* => CAN interrupt register */
/*    reading the register will clear all bits except rx_irq */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_irq           0x0000000C
#define Adr_NX90_can_ctrl0_app_canctrl_irq 0xFF80120C
#define Adr_NX90_can_ctrl1_app_canctrl_irq 0xFF80128C

#define MSK_NX90_canctrl_irq_rx_irq          0x00000001
#define SRT_NX90_canctrl_irq_rx_irq          0
#define MSK_NX90_canctrl_irq_tx_irq          0x00000002
#define SRT_NX90_canctrl_irq_tx_irq          1
#define MSK_NX90_canctrl_irq_warning_irq     0x00000004
#define SRT_NX90_canctrl_irq_warning_irq     2
#define MSK_NX90_canctrl_irq_overrun_irq     0x00000008
#define SRT_NX90_canctrl_irq_overrun_irq     3
#define MSK_NX90_canctrl_irq_err_passive_irq 0x00000020
#define SRT_NX90_canctrl_irq_err_passive_irq 5
#define MSK_NX90_canctrl_irq_arb_lost_irq    0x00000040
#define SRT_NX90_canctrl_irq_arb_lost_irq    6
#define MSK_NX90_canctrl_irq_bus_error_irq   0x00000080
#define SRT_NX90_canctrl_irq_bus_error_irq   7

/* all used bits of 'NX90_canctrl_irq': */
#define MSK_USED_BITS_NX90_canctrl_irq 0x000000ef

/* --------------------------------------------------------------------- */
/* Register canctrl_irq_en */
/* => CAN interrupt enable register */
/*    in not extended mode: acceptance_code_0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_irq_en           0x00000010
#define Adr_NX90_can_ctrl0_app_canctrl_irq_en 0xFF801210
#define Adr_NX90_can_ctrl1_app_canctrl_irq_en 0xFF801290
#define DFLT_VAL_NX90_canctrl_irq_en          0x00000000

#define MSK_NX90_canctrl_irq_en_rx_irq_en                  0x00000001
#define SRT_NX90_canctrl_irq_en_rx_irq_en                  0
#define DFLT_VAL_NX90_canctrl_irq_en_rx_irq_en             0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_rx_irq_en          0x00000000
#define MSK_NX90_canctrl_irq_en_tx_irq_en                  0x00000002
#define SRT_NX90_canctrl_irq_en_tx_irq_en                  1
#define DFLT_VAL_NX90_canctrl_irq_en_tx_irq_en             0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_tx_irq_en          0x00000000
#define MSK_NX90_canctrl_irq_en_warning_irq_en             0x00000004
#define SRT_NX90_canctrl_irq_en_warning_irq_en             2
#define DFLT_VAL_NX90_canctrl_irq_en_warning_irq_en        0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_warning_irq_en     0x00000000
#define MSK_NX90_canctrl_irq_en_overrun_irq_en             0x00000008
#define SRT_NX90_canctrl_irq_en_overrun_irq_en             3
#define DFLT_VAL_NX90_canctrl_irq_en_overrun_irq_en        0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_overrun_irq_en     0x00000000
#define MSK_NX90_canctrl_irq_en_err_passive_irq_en         0x00000020
#define SRT_NX90_canctrl_irq_en_err_passive_irq_en         5
#define DFLT_VAL_NX90_canctrl_irq_en_err_passive_irq_en    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_err_passive_irq_en 0x00000000
#define MSK_NX90_canctrl_irq_en_arb_lost_irq_en            0x00000040
#define SRT_NX90_canctrl_irq_en_arb_lost_irq_en            6
#define DFLT_VAL_NX90_canctrl_irq_en_arb_lost_irq_en       0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_arb_lost_irq_en    0x00000000
#define MSK_NX90_canctrl_irq_en_bus_error_irq_en           0x00000080
#define SRT_NX90_canctrl_irq_en_bus_error_irq_en           7
#define DFLT_VAL_NX90_canctrl_irq_en_bus_error_irq_en      0x00000000
#define DFLT_BF_VAL_NX90_canctrl_irq_en_bus_error_irq_en   0x00000000

/* all used bits of 'NX90_canctrl_irq_en': */
#define MSK_USED_BITS_NX90_canctrl_irq_en 0x000000ef

/* --------------------------------------------------------------------- */
/* Register canctrl_not_extended_acceptance_mask0 */
/* => CAN not extended acceptance mask register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_not_extended_acceptance_mask0           0x00000014
#define Adr_NX90_can_ctrl0_app_canctrl_not_extended_acceptance_mask0 0xFF801214
#define Adr_NX90_can_ctrl1_app_canctrl_not_extended_acceptance_mask0 0xFF801294

/* --------------------------------------------------------------------- */
/* Register canctrl_bus_timing0 */
/* => CAN bus timing register 0, only writable in reset mode */
/*    in not extended mode: acceptance_mask_0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_bus_timing0           0x00000018
#define Adr_NX90_can_ctrl0_app_canctrl_bus_timing0 0xFF801218
#define Adr_NX90_can_ctrl1_app_canctrl_bus_timing0 0xFF801298
#define DFLT_VAL_NX90_canctrl_bus_timing0          0x00000000

#define MSK_NX90_canctrl_bus_timing0_prescaler               0x000001ff
#define SRT_NX90_canctrl_bus_timing0_prescaler               0
#define DFLT_VAL_NX90_canctrl_bus_timing0_prescaler          0x00000000
#define DFLT_BF_VAL_NX90_canctrl_bus_timing0_prescaler       0x00000000
#define MSK_NX90_canctrl_bus_timing0_sync_jump_width         0x00000600
#define SRT_NX90_canctrl_bus_timing0_sync_jump_width         9
#define DFLT_VAL_NX90_canctrl_bus_timing0_sync_jump_width    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_bus_timing0_sync_jump_width 0x00000000

/* all used bits of 'NX90_canctrl_bus_timing0': */
#define MSK_USED_BITS_NX90_canctrl_bus_timing0 0x000007ff

/* --------------------------------------------------------------------- */
/* Register canctrl_bus_timing1 */
/* => CAN bus timing register 1, only writable in reset mode */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_bus_timing1           0x0000001C
#define Adr_NX90_can_ctrl0_app_canctrl_bus_timing1 0xFF80121C
#define Adr_NX90_can_ctrl1_app_canctrl_bus_timing1 0xFF80129C
#define DFLT_VAL_NX90_canctrl_bus_timing1          0x00000000

#define MSK_NX90_canctrl_bus_timing1_tseg1                0x0000003f
#define SRT_NX90_canctrl_bus_timing1_tseg1                0
#define DFLT_VAL_NX90_canctrl_bus_timing1_tseg1           0x00000000
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_tseg1        0x00000000
#define MSK_NX90_canctrl_bus_timing1_oversampling         0x00000080
#define SRT_NX90_canctrl_bus_timing1_oversampling         7
#define DFLT_VAL_NX90_canctrl_bus_timing1_oversampling    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_oversampling 0x00000000
#define MSK_NX90_canctrl_bus_timing1_tseg2                0x00001f00
#define SRT_NX90_canctrl_bus_timing1_tseg2                8
#define DFLT_VAL_NX90_canctrl_bus_timing1_tseg2           0x00000000
#define DFLT_BF_VAL_NX90_canctrl_bus_timing1_tseg2        0x00000000

/* all used bits of 'NX90_canctrl_bus_timing1': */
#define MSK_USED_BITS_NX90_canctrl_bus_timing1 0x00001fbf

/* --------------------------------------------------------------------- */
/* Register canctrl_not_extended_data0 */
/* => CAN not extended data register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_not_extended_data0           0x00000028
#define Adr_NX90_can_ctrl0_app_canctrl_not_extended_data0 0xFF801228
#define Adr_NX90_can_ctrl1_app_canctrl_not_extended_data0 0xFF8012A8

/* --------------------------------------------------------------------- */
/* Register canctrl_arb_lost_capture */
/* => CAN arbitration lost capture register */
/*    This register contains information about the bit position of losing arbitration. */
/*    reading the register will clear all bits */
/*    in not extended mode: data1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_arb_lost_capture           0x0000002C
#define Adr_NX90_can_ctrl0_app_canctrl_arb_lost_capture 0xFF80122C
#define Adr_NX90_can_ctrl1_app_canctrl_arb_lost_capture 0xFF8012AC

#define MSK_NX90_canctrl_arb_lost_capture_position 0x0000001f
#define SRT_NX90_canctrl_arb_lost_capture_position 0

/* all used bits of 'NX90_canctrl_arb_lost_capture': */
#define MSK_USED_BITS_NX90_canctrl_arb_lost_capture 0x0000001f

/* --------------------------------------------------------------------- */
/* Register canctrl_err_code_capture */
/* => CAN error code capture register */
/*    This register contains information about the type and location of errors on the bus. */
/*    reading the register will clear all bits */
/*    in not extended mode: data2 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_err_code_capture           0x00000030
#define Adr_NX90_can_ctrl0_app_canctrl_err_code_capture 0xFF801230
#define Adr_NX90_can_ctrl1_app_canctrl_err_code_capture 0xFF8012B0

#define MSK_NX90_canctrl_err_code_capture_segment   0x0000001f
#define SRT_NX90_canctrl_err_code_capture_segment   0
#define MSK_NX90_canctrl_err_code_capture_direction 0x00000020
#define SRT_NX90_canctrl_err_code_capture_direction 5
#define MSK_NX90_canctrl_err_code_capture_err_code  0x000000c0
#define SRT_NX90_canctrl_err_code_capture_err_code  6

/* all used bits of 'NX90_canctrl_err_code_capture': */
#define MSK_USED_BITS_NX90_canctrl_err_code_capture 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_err_warning_limit */
/* => CAN error warning limit register, only writable in reset mode */
/*    in not extended mode: data3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_err_warning_limit           0x00000034
#define Adr_NX90_can_ctrl0_app_canctrl_err_warning_limit 0xFF801234
#define Adr_NX90_can_ctrl1_app_canctrl_err_warning_limit 0xFF8012B4
#define DFLT_VAL_NX90_canctrl_err_warning_limit          0x00000060

#define MSK_NX90_canctrl_err_warning_limit_limit         0x000000ff
#define SRT_NX90_canctrl_err_warning_limit_limit         0
#define DFLT_VAL_NX90_canctrl_err_warning_limit_limit    0x00000060
#define DFLT_BF_VAL_NX90_canctrl_err_warning_limit_limit 0x00000060

/* all used bits of 'NX90_canctrl_err_warning_limit': */
#define MSK_USED_BITS_NX90_canctrl_err_warning_limit 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_rx_error_cnt */
/* => CAN RX error counter register, only writable in reset mode */
/*    The RX error counter register reflects the current value of the receive error counter. */
/*    If a bus-off event occurs, the RX error counter is initialized to logic 0. The time bus-off is valid, writing to this register has */
/*    no effect. */
/*    Note, that a CPU-forced content change of the RX error counter is only possible, if the reset mode was entered */
/*    previously. An error status change (see status register), an error warning or an error passive interrupt forced */
/*    by the new register content will not occur, until the reset mode is cancelled again. */
/*    in not extended mode: data4 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_rx_error_cnt           0x00000038
#define Adr_NX90_can_ctrl0_app_canctrl_rx_error_cnt 0xFF801238
#define Adr_NX90_can_ctrl1_app_canctrl_rx_error_cnt 0xFF8012B8
#define DFLT_VAL_NX90_canctrl_rx_error_cnt          0x00000000

#define MSK_NX90_canctrl_rx_error_cnt_rx_err         0x000000ff
#define SRT_NX90_canctrl_rx_error_cnt_rx_err         0
#define DFLT_VAL_NX90_canctrl_rx_error_cnt_rx_err    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_rx_error_cnt_rx_err 0x00000000

/* all used bits of 'NX90_canctrl_rx_error_cnt': */
#define MSK_USED_BITS_NX90_canctrl_rx_error_cnt 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_tx_error_cnt */
/* => CAN TX error counter register, only writable in reset mode */
/*    The TX error counter register reflects the current value of the transmit error counter. */
/*    If a bus-off event occurs, the TX error counter is initialized to 127 to count the minimum */
/*    protocol-defined time (128 occurrences of the bus-free signal). Reading */
/*    the TX error counter during this time gives information about the status of the bus-off recovery. */
/*    If bus-off is active, a write access to TXERR in the range from 0 to 254 clears the bus-off flag and the controller will wait */
/*    for one occurrence of 11 consecutive recessive bits (bus-free) after the reset mode has been cleared. */
/*    Writing 255 to TXERR allows to initiate a CPU-driven bus-off event. It should be noted that a CPU-forced content change */
/*    of the TX error counter is only possible, if the reset mode was entered previously. An error or bus status change (see */
/*    status register), an error warning or an error passive interrupt forced by the new register content will not occur */
/*    until the reset mode is cancelled again. After leaving the reset mode, the new TX counter content is interpreted and the */
/*    bus-off event is performed in the same way, as if it was forced by a bus error event. That means, that the reset mode is */
/*    entered again, the TX error counter is initialized to 127, the RX counter is cleared and all concerned status and interrupt */
/*    register bits are set. */
/*    Clearing of reset mode now will perform the protocol-defined bus-off recovery sequence (waiting for 128 occurrences of */
/*    the bus-free signal). */
/*    If the reset mode is entered again before the end of bus-off recovery (TXERR > 0), bus-off keeps active and TXERR is */
/*    frozen. */
/*    in not extended mode: data5 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_tx_error_cnt           0x0000003C
#define Adr_NX90_can_ctrl0_app_canctrl_tx_error_cnt 0xFF80123C
#define Adr_NX90_can_ctrl1_app_canctrl_tx_error_cnt 0xFF8012BC
#define DFLT_VAL_NX90_canctrl_tx_error_cnt          0x00000000

#define MSK_NX90_canctrl_tx_error_cnt_tx_err         0x000000ff
#define SRT_NX90_canctrl_tx_error_cnt_tx_err         0
#define DFLT_VAL_NX90_canctrl_tx_error_cnt_tx_err    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_tx_error_cnt_tx_err 0x00000000

/* all used bits of 'NX90_canctrl_tx_error_cnt': */
#define MSK_USED_BITS_NX90_canctrl_tx_error_cnt 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data0 */
/* => CAN data register 0 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 0 */
/*     Operating mode:   R:  Standard frame: Read RX frame information */
/*                           Extended frame: Read RX frame information */
/*                       W:  Standard frame: Write TX frame information */
/*                           Extended frame: Write TX frame information } */
/*    in not extended mode: data6 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data0           0x00000040
#define Adr_NX90_can_ctrl0_app_canctrl_data0 0xFF801240
#define Adr_NX90_can_ctrl1_app_canctrl_data0 0xFF8012C0
#define DFLT_VAL_NX90_canctrl_data0          0x00000000

#define MSK_NX90_canctrl_data0_data         0x000000ff
#define SRT_NX90_canctrl_data0_data         0
#define DFLT_VAL_NX90_canctrl_data0_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data0_data 0x00000000

/* all used bits of 'NX90_canctrl_data0': */
#define MSK_USED_BITS_NX90_canctrl_data0 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data1 */
/* => CAN data register 1 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 1 */
/*     Operating mode:   R:  Standard frame: Read RX identifier 1 */
/*                           Extended frame: Read RX identifier 1 */
/*                       W:  Standard frame: Write TX identifier 1 */
/*                           Extended frame: Write TX identifier 1 } */
/*    in not extended mode: data7 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data1           0x00000044
#define Adr_NX90_can_ctrl0_app_canctrl_data1 0xFF801244
#define Adr_NX90_can_ctrl1_app_canctrl_data1 0xFF8012C4
#define DFLT_VAL_NX90_canctrl_data1          0x00000000

#define MSK_NX90_canctrl_data1_data         0x000000ff
#define SRT_NX90_canctrl_data1_data         0
#define DFLT_VAL_NX90_canctrl_data1_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data1_data 0x00000000

/* all used bits of 'NX90_canctrl_data1': */
#define MSK_USED_BITS_NX90_canctrl_data1 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data2 */
/* => CAN data register 2 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 2 */
/*     Operating mode:   R:  Standard frame: Read RX identifier 2 */
/*                           Extended frame: Read RX identifier 2 */
/*                       W:  Standard frame: Write TX identifier 2 */
/*                           Extended frame: Write TX identifier 2 } */
/*    in not extended mode: data8 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data2           0x00000048
#define Adr_NX90_can_ctrl0_app_canctrl_data2 0xFF801248
#define Adr_NX90_can_ctrl1_app_canctrl_data2 0xFF8012C8
#define DFLT_VAL_NX90_canctrl_data2          0x00000000

#define MSK_NX90_canctrl_data2_data         0x000000ff
#define SRT_NX90_canctrl_data2_data         0
#define DFLT_VAL_NX90_canctrl_data2_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data2_data 0x00000000

/* all used bits of 'NX90_canctrl_data2': */
#define MSK_USED_BITS_NX90_canctrl_data2 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data3 */
/* => CAN data register 3 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance code 3 */
/*     Operating mode:   R:  Standard frame: Read RX data 1 */
/*                           Extended frame: Read RX identifier 3 */
/*                       W:  Standard frame: Write TX data 1 */
/*                           Extended frame: Write TX identifier 3 } */
/*    in not extended mode: data9 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data3           0x0000004C
#define Adr_NX90_can_ctrl0_app_canctrl_data3 0xFF80124C
#define Adr_NX90_can_ctrl1_app_canctrl_data3 0xFF8012CC
#define DFLT_VAL_NX90_canctrl_data3          0x00000000

#define MSK_NX90_canctrl_data3_data         0x000000ff
#define SRT_NX90_canctrl_data3_data         0
#define DFLT_VAL_NX90_canctrl_data3_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data3_data 0x00000000

/* all used bits of 'NX90_canctrl_data3': */
#define MSK_USED_BITS_NX90_canctrl_data3 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data4 */
/* => CAN data register 4 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 0 */
/*     Operating mode:   R:  Standard frame: Read RX data 2 */
/*                           Extended frame: Read RX identifier 4 */
/*                       W:  Standard frame: Write TX data 2 */
/*                           Extended frame: Write TX identifier 4 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data4           0x00000050
#define Adr_NX90_can_ctrl0_app_canctrl_data4 0xFF801250
#define Adr_NX90_can_ctrl1_app_canctrl_data4 0xFF8012D0
#define DFLT_VAL_NX90_canctrl_data4          0x00000000

#define MSK_NX90_canctrl_data4_data         0x000000ff
#define SRT_NX90_canctrl_data4_data         0
#define DFLT_VAL_NX90_canctrl_data4_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data4_data 0x00000000

/* all used bits of 'NX90_canctrl_data4': */
#define MSK_USED_BITS_NX90_canctrl_data4 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data5 */
/* => CAN data register 5 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 1 */
/*     Operating mode:   R:  Standard frame: Read RX data 3 */
/*                           Extended frame: Read RX data 1 */
/*                       W:  Standard frame: Write TX data 3 */
/*                           Extended frame: Write TX data 1 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data5           0x00000054
#define Adr_NX90_can_ctrl0_app_canctrl_data5 0xFF801254
#define Adr_NX90_can_ctrl1_app_canctrl_data5 0xFF8012D4
#define DFLT_VAL_NX90_canctrl_data5          0x00000000

#define MSK_NX90_canctrl_data5_data         0x000000ff
#define SRT_NX90_canctrl_data5_data         0
#define DFLT_VAL_NX90_canctrl_data5_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data5_data 0x00000000

/* all used bits of 'NX90_canctrl_data5': */
#define MSK_USED_BITS_NX90_canctrl_data5 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data6 */
/* => CAN data register 6 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 2 */
/*     Operating mode:   R:  Standard frame: Read RX data 4 */
/*                           Extended frame: Read RX data 2 */
/*                       W:  Standard frame: Write TX data 4 */
/*                           Extended frame: Write TX data 2 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data6           0x00000058
#define Adr_NX90_can_ctrl0_app_canctrl_data6 0xFF801258
#define Adr_NX90_can_ctrl1_app_canctrl_data6 0xFF8012D8
#define DFLT_VAL_NX90_canctrl_data6          0x00000000

#define MSK_NX90_canctrl_data6_data         0x000000ff
#define SRT_NX90_canctrl_data6_data         0
#define DFLT_VAL_NX90_canctrl_data6_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data6_data 0x00000000

/* all used bits of 'NX90_canctrl_data6': */
#define MSK_USED_BITS_NX90_canctrl_data6 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data7 */
/* => CAN data register 7 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: Read or write acceptance mask 3 */
/*     Operating mode:   R:  Standard frame: Read RX data 5 */
/*                           Extended frame: Read RX data 3 */
/*                       W:  Standard frame: Write TX data 5 */
/*                           Extended frame: Write TX data 3 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data7           0x0000005C
#define Adr_NX90_can_ctrl0_app_canctrl_data7 0xFF80125C
#define Adr_NX90_can_ctrl1_app_canctrl_data7 0xFF8012DC
#define DFLT_VAL_NX90_canctrl_data7          0x00000000

#define MSK_NX90_canctrl_data7_data         0x000000ff
#define SRT_NX90_canctrl_data7_data         0
#define DFLT_VAL_NX90_canctrl_data7_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data7_data 0x00000000

/* all used bits of 'NX90_canctrl_data7': */
#define MSK_USED_BITS_NX90_canctrl_data7 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data8 */
/* => CAN data register 8 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 6 */
/*                           Extended frame: Read RX data 4 */
/*                       W:  Standard frame: Write TX data 6 */
/*                           Extended frame: Write TX data 4 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data8           0x00000060
#define Adr_NX90_can_ctrl0_app_canctrl_data8 0xFF801260
#define Adr_NX90_can_ctrl1_app_canctrl_data8 0xFF8012E0
#define DFLT_VAL_NX90_canctrl_data8          0x00000000

#define MSK_NX90_canctrl_data8_data         0x000000ff
#define SRT_NX90_canctrl_data8_data         0
#define DFLT_VAL_NX90_canctrl_data8_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data8_data 0x00000000

/* all used bits of 'NX90_canctrl_data8': */
#define MSK_USED_BITS_NX90_canctrl_data8 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data9 */
/* => CAN data register 9 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 7 */
/*                           Extended frame: Read RX data 5 */
/*                       W:  Standard frame: Write TX data 7 */
/*                           Extended frame: Write TX data 5 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data9           0x00000064
#define Adr_NX90_can_ctrl0_app_canctrl_data9 0xFF801264
#define Adr_NX90_can_ctrl1_app_canctrl_data9 0xFF8012E4
#define DFLT_VAL_NX90_canctrl_data9          0x00000000

#define MSK_NX90_canctrl_data9_data         0x000000ff
#define SRT_NX90_canctrl_data9_data         0
#define DFLT_VAL_NX90_canctrl_data9_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data9_data 0x00000000

/* all used bits of 'NX90_canctrl_data9': */
#define MSK_USED_BITS_NX90_canctrl_data9 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data10 */
/* => CAN data register 10 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: Read RX data 8 */
/*                           Extended frame: Read RX data 6 */
/*                       W:  Standard frame: Write TX data 8 */
/*                           Extended frame: Write TX data 6 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data10           0x00000068
#define Adr_NX90_can_ctrl0_app_canctrl_data10 0xFF801268
#define Adr_NX90_can_ctrl1_app_canctrl_data10 0xFF8012E8
#define DFLT_VAL_NX90_canctrl_data10          0x00000000

#define MSK_NX90_canctrl_data10_data         0x000000ff
#define SRT_NX90_canctrl_data10_data         0
#define DFLT_VAL_NX90_canctrl_data10_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data10_data 0x00000000

/* all used bits of 'NX90_canctrl_data10': */
#define MSK_USED_BITS_NX90_canctrl_data10 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data11 */
/* => CAN data register 11 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: reserved */
/*                           Extended frame: Read RX data 7 */
/*                       W:  Standard frame: reserved */
/*                           Extended frame: Write TX data 7 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data11           0x0000006C
#define Adr_NX90_can_ctrl0_app_canctrl_data11 0xFF80126C
#define Adr_NX90_can_ctrl1_app_canctrl_data11 0xFF8012EC
#define DFLT_VAL_NX90_canctrl_data11          0x00000000

#define MSK_NX90_canctrl_data11_data         0x000000ff
#define SRT_NX90_canctrl_data11_data         0
#define DFLT_VAL_NX90_canctrl_data11_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data11_data 0x00000000

/* all used bits of 'NX90_canctrl_data11': */
#define MSK_USED_BITS_NX90_canctrl_data11 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_data12 */
/* => CAN data register 12 */
/*    This register has multiple functions depending on reset mode and read or write access. */
/*    {               |     | */
/*     Reset mode:      R/W: reserved */
/*     Operating mode:   R:  Standard frame: reserved */
/*                           Extended frame: Read RX data 8 */
/*                       W:  Standard frame: reserved */
/*                           Extended frame: Write TX data 8 } */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_data12           0x00000070
#define Adr_NX90_can_ctrl0_app_canctrl_data12 0xFF801270
#define Adr_NX90_can_ctrl1_app_canctrl_data12 0xFF8012F0
#define DFLT_VAL_NX90_canctrl_data12          0x00000000

#define MSK_NX90_canctrl_data12_data         0x000000ff
#define SRT_NX90_canctrl_data12_data         0
#define DFLT_VAL_NX90_canctrl_data12_data    0x00000000
#define DFLT_BF_VAL_NX90_canctrl_data12_data 0x00000000

/* all used bits of 'NX90_canctrl_data12': */
#define MSK_USED_BITS_NX90_canctrl_data12 0x000000ff

/* --------------------------------------------------------------------- */
/* Register canctrl_rx_message_cnt */
/* => CAN RX message counter register */
/*    Reflects the number of messages available within the RXFIFO. The value is */
/*    incremented with each receive event and decremented by the release receive */
/*    buffer command. After any reset event, this register is cleared. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_rx_message_cnt           0x00000074
#define Adr_NX90_can_ctrl0_app_canctrl_rx_message_cnt 0xFF801274
#define Adr_NX90_can_ctrl1_app_canctrl_rx_message_cnt 0xFF8012F4

#define MSK_NX90_canctrl_rx_message_cnt_rx_msg_cnt 0x0000007f
#define SRT_NX90_canctrl_rx_message_cnt_rx_msg_cnt 0

/* all used bits of 'NX90_canctrl_rx_message_cnt': */
#define MSK_USED_BITS_NX90_canctrl_rx_message_cnt 0x0000007f

/* --------------------------------------------------------------------- */
/* Register canctrl_mode_control */
/* => CAN mode control register, only writable in reset mode */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_canctrl_mode_control           0x0000007C
#define Adr_NX90_can_ctrl0_app_canctrl_mode_control 0xFF80127C
#define Adr_NX90_can_ctrl1_app_canctrl_mode_control 0xFF8012FC

#define MSK_NX90_canctrl_mode_control_mode 0x00000080
#define SRT_NX90_canctrl_mode_control_mode 7

/* all used bits of 'NX90_canctrl_mode_control': */
#define MSK_USED_BITS_NX90_canctrl_mode_control 0x00000080


/* ===================================================================== */

/* Area of mled_ctrl_app */

/* ===================================================================== */

#define Addr_NX90_mled_ctrl_app 0xFF801300

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_cfg */
/* => Global configuration register. */
/*    This register controls global configuration options for all Multi-LED outputs. */
/*    Description of Multi-LED control module operation: */
/*    a) Time-multiplexed PWM mode: */
/*    Each output drives two LEDs: Low-side and high-side LED. Three states of the output pin are possible: \ */
/*    High (i.e. the low-side LED is on), low (i.e. the high-side LED is on), or high-z (i.e. both LEDs are off). */
/*    The PWM period, determined by bit field prescale_counter_max, is the same for all outputs. The prescale \ */
/*    counter will be increased by the netX system clock (i.e. 100 MHz). A second counter (the PWM counter) will be */
/*    increased when the prescale counter reaches its configured max. value. The PWM counter is a \ */
/*    fixed-width counter and always counts from 0 to 511. */
/*    If the PWM counter is in the range of 0 - 255, the high-side LED will be driven depending on the configured \ */
/*    switch-on time (registers on_time[x], with x being an even number). The output pin will be driven low when the high-side \ */
/*    phase starts. If the PWM counter reaches on_time[x] - 1, the output pin will switch to high-z state. */
/*    If the PWM counter is in the range of 256 - 511, the low-side LED will be driven depending on the configured \ */
/*    switch-on time (registers on_time[y], with y being an odd number). The output pin will be driven high when the low-side \ */
/*    phase starts. If the PWM counter reaches 256 + on_time[y] - 1, the output pin will switch to high-z state. */
/*    The state of an LED depends on the input value selected by the input multiplexer. For a list of \ */
/*    selectable signals, see register mled_ctrl_output_sel[0]. When the selected input signal is off, the \ */
/*    output signal will be high-z during the entire corresponding PWM phase. */
/*     */
/*    b) Pass-through mode: */
/*    This mode disables the time-multiplexed PWM entirely and a configured signal will be output directly or \ */
/*    inverted (delayed by one netX system cycle). This mode will be used when all bits of bit field sel of the \ */
/*    output phase 0 configuration register (high-side LED) are set to '1'. The input signal (and inversion) \ */
/*    is selected by the corresponding phase 1 configuration register (low-side LED). The output can be configured \ */
/*    to high-z state if the corresponding phase 1 on_time register is set to '0', therefore it must be set != '0' for \ */
/*    regular pass-through operation (i.e. the output will be driven high or low depending on the input signal). */
/*     */
/*    c) Multi-LED internal blink generator: */
/*    The blink signal synchronizes the blinking of several LEDs. Bit field blink_counter_max determines the blink \ */
/*    frequency which is the same for all outputs configured to blink mode. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_cfg           0x00000000
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_cfg 0xFF801300
#define Adr_NX90_mled_ctrl_app_cfg               0xFF801300
#define DFLT_VAL_NX90_mled_ctrl_app_cfg          0x00018ffe

#define MSK_NX90_mled_ctrl_app_cfg_enable                       0x00000001
#define SRT_NX90_mled_ctrl_app_cfg_enable                       0
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_enable                  0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_enable               0x00000000
#define MSK_NX90_mled_ctrl_app_cfg_prescale_counter_max         0x000007fe
#define SRT_NX90_mled_ctrl_app_cfg_prescale_counter_max         1
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_prescale_counter_max    0x000007fe
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_prescale_counter_max 0x000003ff
#define MSK_NX90_mled_ctrl_app_cfg_blink_counter_max            0x000ff800
#define SRT_NX90_mled_ctrl_app_cfg_blink_counter_max            11
#define DFLT_VAL_NX90_mled_ctrl_app_cfg_blink_counter_max       0x00018800
#define DFLT_BF_VAL_NX90_mled_ctrl_app_cfg_blink_counter_max    0x00000031

/* all used bits of 'NX90_mled_ctrl_app_cfg': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_cfg 0x000fffff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel0 */
/* => Output 0 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel0           0x00000004
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel0 0xFF801304
#define Adr_NX90_mled_ctrl_app_output_sel0               0xFF801304
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel0_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel0_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel0_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel0_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel0_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel0_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel0_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel0 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel1 */
/* => Output 0 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel1           0x00000008
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel1 0xFF801308
#define Adr_NX90_mled_ctrl_app_output_sel1               0xFF801308
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel1_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel1_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel1_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel1_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel1_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel1_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel1_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel1': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel1 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel2 */
/* => Output 1 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel2           0x0000000C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel2 0xFF80130C
#define Adr_NX90_mled_ctrl_app_output_sel2               0xFF80130C
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel2_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel2_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel2_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel2_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel2_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel2_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel2_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel2': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel2 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel3 */
/* => Output 1 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel3           0x00000010
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel3 0xFF801310
#define Adr_NX90_mled_ctrl_app_output_sel3               0xFF801310
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel3_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel3_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel3_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel3_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel3_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel3_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel3_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel3': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel3 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel4 */
/* => Output 2 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel4           0x00000014
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel4 0xFF801314
#define Adr_NX90_mled_ctrl_app_output_sel4               0xFF801314
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel4_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel4_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel4_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel4_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel4_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel4_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel4_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel4': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel4 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel5 */
/* => Output 2 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel5           0x00000018
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel5 0xFF801318
#define Adr_NX90_mled_ctrl_app_output_sel5               0xFF801318
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel5_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel5_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel5_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel5_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel5_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel5_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel5_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel5': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel5 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel6 */
/* => Output 3 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel6           0x0000001C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel6 0xFF80131C
#define Adr_NX90_mled_ctrl_app_output_sel6               0xFF80131C
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel6_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel6_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel6_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel6_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel6_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel6_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel6_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel6': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel6 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel7 */
/* => Output 3 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel7           0x00000020
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel7 0xFF801320
#define Adr_NX90_mled_ctrl_app_output_sel7               0xFF801320
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel7_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel7_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel7_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel7_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel7_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel7_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel7_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel7': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel7 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel8 */
/* => Output 4 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel8           0x00000024
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel8 0xFF801324
#define Adr_NX90_mled_ctrl_app_output_sel8               0xFF801324
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel8_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel8_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel8_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel8_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel8_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel8_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel8_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel8': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel8 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel9 */
/* => Output 4 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel9           0x00000028
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel9 0xFF801328
#define Adr_NX90_mled_ctrl_app_output_sel9               0xFF801328
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel9_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel9_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel9_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel9_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel9_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel9_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel9_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel9': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel9 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel10 */
/* => Output 5 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel10           0x0000002C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel10 0xFF80132C
#define Adr_NX90_mled_ctrl_app_output_sel10               0xFF80132C
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel10_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel10_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel10_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel10_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel10_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel10_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel10_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel10': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel10 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel11 */
/* => Output 5 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel11           0x00000030
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel11 0xFF801330
#define Adr_NX90_mled_ctrl_app_output_sel11               0xFF801330
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel11_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel11_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel11_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel11_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel11_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel11_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel11_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel11': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel11 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel12 */
/* => Output 6 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel12           0x00000034
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel12 0xFF801334
#define Adr_NX90_mled_ctrl_app_output_sel12               0xFF801334
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel12_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel12_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel12_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel12_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel12_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel12_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel12_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel12': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel12 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel13 */
/* => Output 6 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel13           0x00000038
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel13 0xFF801338
#define Adr_NX90_mled_ctrl_app_output_sel13               0xFF801338
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel13_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel13_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel13_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel13_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel13_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel13_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel13_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel13': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel13 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel14 */
/* => Output 7 phase 0 (high-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel14           0x0000003C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel14 0xFF80133C
#define Adr_NX90_mled_ctrl_app_output_sel14               0xFF80133C
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel14_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel14_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel14_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel14_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel14_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel14_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel14_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel14': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel14 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_sel15 */
/* => Output 7 phase 1 (low-side LED) configuration. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_sel15           0x00000040
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_sel15 0xFF801340
#define Adr_NX90_mled_ctrl_app_output_sel15               0xFF801340
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15          0x00000000

#define MSK_NX90_mled_ctrl_app_output_sel15_inv         0x00000001
#define SRT_NX90_mled_ctrl_app_output_sel15_inv         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15_inv    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel15_inv 0x00000000
#define MSK_NX90_mled_ctrl_app_output_sel15_sel         0x00000006
#define SRT_NX90_mled_ctrl_app_output_sel15_sel         1
#define DFLT_VAL_NX90_mled_ctrl_app_output_sel15_sel    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_sel15_sel 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_output_sel15': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_sel15 0x00000007

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time0 */
/* => Output 0 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time0           0x00000044
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time0 0xFF801344
#define Adr_NX90_mled_ctrl_app_output_on_time0               0xFF801344
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time0          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time0_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time0_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time0_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time0_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time0 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time1 */
/* => Output 0 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time1           0x00000048
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time1 0xFF801348
#define Adr_NX90_mled_ctrl_app_output_on_time1               0xFF801348
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time1          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time1_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time1_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time1_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time1_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time1': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time1 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time2 */
/* => Output 1 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time2           0x0000004C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time2 0xFF80134C
#define Adr_NX90_mled_ctrl_app_output_on_time2               0xFF80134C
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time2          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time2_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time2_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time2_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time2_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time2': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time2 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time3 */
/* => Output 1 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time3           0x00000050
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time3 0xFF801350
#define Adr_NX90_mled_ctrl_app_output_on_time3               0xFF801350
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time3          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time3_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time3_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time3_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time3_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time3': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time3 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time4 */
/* => Output 2 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time4           0x00000054
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time4 0xFF801354
#define Adr_NX90_mled_ctrl_app_output_on_time4               0xFF801354
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time4          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time4_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time4_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time4_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time4_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time4': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time4 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time5 */
/* => Output 2 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time5           0x00000058
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time5 0xFF801358
#define Adr_NX90_mled_ctrl_app_output_on_time5               0xFF801358
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time5          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time5_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time5_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time5_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time5_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time5': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time5 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time6 */
/* => Output 3 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time6           0x0000005C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time6 0xFF80135C
#define Adr_NX90_mled_ctrl_app_output_on_time6               0xFF80135C
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time6          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time6_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time6_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time6_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time6_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time6': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time6 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time7 */
/* => Output 3 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time7           0x00000060
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time7 0xFF801360
#define Adr_NX90_mled_ctrl_app_output_on_time7               0xFF801360
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time7          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time7_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time7_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time7_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time7_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time7': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time7 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time8 */
/* => Output 4 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time8           0x00000064
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time8 0xFF801364
#define Adr_NX90_mled_ctrl_app_output_on_time8               0xFF801364
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time8          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time8_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time8_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time8_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time8_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time8': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time8 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time9 */
/* => Output 4 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time9           0x00000068
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time9 0xFF801368
#define Adr_NX90_mled_ctrl_app_output_on_time9               0xFF801368
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time9          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time9_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time9_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time9_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time9_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time9': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time9 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time10 */
/* => Output 5 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time10           0x0000006C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time10 0xFF80136C
#define Adr_NX90_mled_ctrl_app_output_on_time10               0xFF80136C
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time10          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time10_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time10_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time10_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time10_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time10': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time10 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time11 */
/* => Output 5 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time11           0x00000070
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time11 0xFF801370
#define Adr_NX90_mled_ctrl_app_output_on_time11               0xFF801370
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time11          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time11_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time11_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time11_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time11_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time11': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time11 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time12 */
/* => Output 6 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time12           0x00000074
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time12 0xFF801374
#define Adr_NX90_mled_ctrl_app_output_on_time12               0xFF801374
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time12          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time12_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time12_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time12_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time12_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time12': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time12 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time13 */
/* => Output 6 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time13           0x00000078
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time13 0xFF801378
#define Adr_NX90_mled_ctrl_app_output_on_time13               0xFF801378
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time13          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time13_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time13_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time13_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time13_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time13': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time13 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time14 */
/* => Output 7 phase 0 (high-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time14           0x0000007C
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time14 0xFF80137C
#define Adr_NX90_mled_ctrl_app_output_on_time14               0xFF80137C
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time14          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time14_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time14_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time14_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time14_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time14': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time14 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_output_on_time15 */
/* => Output 7 phase 1 (low-side LED) switch-on time. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_output_on_time15           0x00000080
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_output_on_time15 0xFF801380
#define Adr_NX90_mled_ctrl_app_output_on_time15               0xFF801380
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time15          0x000000ff

#define MSK_NX90_mled_ctrl_app_output_on_time15_val         0x000000ff
#define SRT_NX90_mled_ctrl_app_output_on_time15_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_output_on_time15_val    0x000000ff
#define DFLT_BF_VAL_NX90_mled_ctrl_app_output_on_time15_val 0x000000ff

/* all used bits of 'NX90_mled_ctrl_app_output_on_time15': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_output_on_time15 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mled_ctrl_app_line0 */
/* => Line register. */
/*    The line register allows changing all LEDs (configured to line mode) at once to a new value. */
/*    Note: The change will take effect at the start of the next PWM period (when the output operates in \ */
/*    time-multiplexed PWM mode). In pass-through mode, the change will take effect immediately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mled_ctrl_app_line0           0x00000084
#define Adr_NX90_mled_ctrl_app_mled_ctrl_app_line0 0xFF801384
#define Adr_NX90_mled_ctrl_app_line0               0xFF801384
#define DFLT_VAL_NX90_mled_ctrl_app_line0          0x00000000

#define MSK_NX90_mled_ctrl_app_line0_val         0x0000ffff
#define SRT_NX90_mled_ctrl_app_line0_val         0
#define DFLT_VAL_NX90_mled_ctrl_app_line0_val    0x00000000
#define DFLT_BF_VAL_NX90_mled_ctrl_app_line0_val 0x00000000

/* all used bits of 'NX90_mled_ctrl_app_line0': */
#define MSK_USED_BITS_NX90_mled_ctrl_app_line0 0x0000ffff


/* ===================================================================== */

/* AREA gpio_app */
/* Area of gpio_app, gpio_xpic_app */

/* ===================================================================== */

#define Addr_NX90_gpio_app      0xFF801400
#define Addr_NX90_gpio_xpic_app 0xFF900200

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg0 */
/* => GPIO_APP pin 0 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg0           0x00000000
#define Adr_NX90_gpio_app_gpio_app_cfg0      0xFF801400
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg0 0xFF900200
#define DFLT_VAL_NX90_gpio_app_cfg0          0x00000000

#define MSK_NX90_gpio_app_cfg0_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg0_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg0_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_mode       0x00000000
#define MSK_NX90_gpio_app_cfg0_inv                0x00000010
#define SRT_NX90_gpio_app_cfg0_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg0_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_inv        0x00000000
#define MSK_NX90_gpio_app_cfg0_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg0_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg0_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg0_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg0_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg0_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg0_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg0_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg0_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg0_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg0': */
#define MSK_USED_BITS_NX90_gpio_app_cfg0 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg1 */
/* => GPIO_APP pin 1 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg1           0x00000004
#define Adr_NX90_gpio_app_gpio_app_cfg1      0xFF801404
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg1 0xFF900204
#define DFLT_VAL_NX90_gpio_app_cfg1          0x00000000

#define MSK_NX90_gpio_app_cfg1_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg1_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg1_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_mode       0x00000000
#define MSK_NX90_gpio_app_cfg1_inv                0x00000010
#define SRT_NX90_gpio_app_cfg1_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg1_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_inv        0x00000000
#define MSK_NX90_gpio_app_cfg1_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg1_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg1_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg1_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg1_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg1_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg1_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg1_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg1_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg1_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg1': */
#define MSK_USED_BITS_NX90_gpio_app_cfg1 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg2 */
/* => GPIO_APP pin 2 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg2           0x00000008
#define Adr_NX90_gpio_app_gpio_app_cfg2      0xFF801408
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg2 0xFF900208
#define DFLT_VAL_NX90_gpio_app_cfg2          0x00000000

#define MSK_NX90_gpio_app_cfg2_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg2_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg2_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_mode       0x00000000
#define MSK_NX90_gpio_app_cfg2_inv                0x00000010
#define SRT_NX90_gpio_app_cfg2_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg2_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_inv        0x00000000
#define MSK_NX90_gpio_app_cfg2_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg2_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg2_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg2_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg2_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg2_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg2_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg2_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg2_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg2_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg2': */
#define MSK_USED_BITS_NX90_gpio_app_cfg2 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg3 */
/* => GPIO_APP pin 3 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg3           0x0000000C
#define Adr_NX90_gpio_app_gpio_app_cfg3      0xFF80140C
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg3 0xFF90020C
#define DFLT_VAL_NX90_gpio_app_cfg3          0x00000000

#define MSK_NX90_gpio_app_cfg3_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg3_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg3_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_mode       0x00000000
#define MSK_NX90_gpio_app_cfg3_inv                0x00000010
#define SRT_NX90_gpio_app_cfg3_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg3_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_inv        0x00000000
#define MSK_NX90_gpio_app_cfg3_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg3_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg3_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg3_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg3_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg3_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg3_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg3_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg3_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg3_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg3': */
#define MSK_USED_BITS_NX90_gpio_app_cfg3 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg4 */
/* => GPIO_APP pin 4 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg4           0x00000010
#define Adr_NX90_gpio_app_gpio_app_cfg4      0xFF801410
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg4 0xFF900210
#define DFLT_VAL_NX90_gpio_app_cfg4          0x00000000

#define MSK_NX90_gpio_app_cfg4_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg4_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg4_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_mode       0x00000000
#define MSK_NX90_gpio_app_cfg4_inv                0x00000010
#define SRT_NX90_gpio_app_cfg4_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg4_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_inv        0x00000000
#define MSK_NX90_gpio_app_cfg4_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg4_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg4_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg4_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg4_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg4_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg4_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg4_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg4_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg4_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg4': */
#define MSK_USED_BITS_NX90_gpio_app_cfg4 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg5 */
/* => GPIO_APP pin 5 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg5           0x00000014
#define Adr_NX90_gpio_app_gpio_app_cfg5      0xFF801414
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg5 0xFF900214
#define DFLT_VAL_NX90_gpio_app_cfg5          0x00000000

#define MSK_NX90_gpio_app_cfg5_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg5_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg5_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_mode       0x00000000
#define MSK_NX90_gpio_app_cfg5_inv                0x00000010
#define SRT_NX90_gpio_app_cfg5_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg5_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_inv        0x00000000
#define MSK_NX90_gpio_app_cfg5_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg5_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg5_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg5_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg5_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg5_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg5_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg5_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg5_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg5_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg5': */
#define MSK_USED_BITS_NX90_gpio_app_cfg5 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg6 */
/* => GPIO_APP pin 6 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg6           0x00000018
#define Adr_NX90_gpio_app_gpio_app_cfg6      0xFF801418
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg6 0xFF900218
#define DFLT_VAL_NX90_gpio_app_cfg6          0x00000000

#define MSK_NX90_gpio_app_cfg6_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg6_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg6_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_mode       0x00000000
#define MSK_NX90_gpio_app_cfg6_inv                0x00000010
#define SRT_NX90_gpio_app_cfg6_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg6_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_inv        0x00000000
#define MSK_NX90_gpio_app_cfg6_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg6_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg6_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg6_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg6_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg6_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg6_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg6_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg6_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg6_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg6': */
#define MSK_USED_BITS_NX90_gpio_app_cfg6 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cfg7 */
/* => GPIO_APP pin 7 config register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cfg7           0x0000001C
#define Adr_NX90_gpio_app_gpio_app_cfg7      0xFF80141C
#define Adr_NX90_gpio_xpic_app_gpio_app_cfg7 0xFF90021C
#define DFLT_VAL_NX90_gpio_app_cfg7          0x00000000

#define MSK_NX90_gpio_app_cfg7_mode               0x0000000f
#define SRT_NX90_gpio_app_cfg7_mode               0
#define DFLT_VAL_NX90_gpio_app_cfg7_mode          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_mode       0x00000000
#define MSK_NX90_gpio_app_cfg7_inv                0x00000010
#define SRT_NX90_gpio_app_cfg7_inv                4
#define DFLT_VAL_NX90_gpio_app_cfg7_inv           0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_inv        0x00000000
#define MSK_NX90_gpio_app_cfg7_count_ref          0x00000060
#define SRT_NX90_gpio_app_cfg7_count_ref          5
#define DFLT_VAL_NX90_gpio_app_cfg7_count_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_count_ref  0x00000000
#define MSK_NX90_gpio_app_cfg7_blink_len          0x00000f80
#define SRT_NX90_gpio_app_cfg7_blink_len          7
#define DFLT_VAL_NX90_gpio_app_cfg7_blink_len     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_blink_len  0x00000000
#define MSK_NX90_gpio_app_cfg7_blink_once         0x00001000
#define SRT_NX90_gpio_app_cfg7_blink_once         12
#define DFLT_VAL_NX90_gpio_app_cfg7_blink_once    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cfg7_blink_once 0x00000000

/* all used bits of 'NX90_gpio_app_cfg7': */
#define MSK_USED_BITS_NX90_gpio_app_cfg7 0x00001fff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc0 */
/* => GPIO_APP pin 0 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc0           0x00000020
#define Adr_NX90_gpio_app_gpio_app_tc0      0xFF801420
#define Adr_NX90_gpio_xpic_app_gpio_app_tc0 0xFF900220
#define DFLT_VAL_NX90_gpio_app_tc0          0x00000000

#define MSK_NX90_gpio_app_tc0_val         0xffffffff
#define SRT_NX90_gpio_app_tc0_val         0
#define DFLT_VAL_NX90_gpio_app_tc0_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc0_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc0': */
#define MSK_USED_BITS_NX90_gpio_app_tc0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc1 */
/* => GPIO_APP pin 1 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc1           0x00000024
#define Adr_NX90_gpio_app_gpio_app_tc1      0xFF801424
#define Adr_NX90_gpio_xpic_app_gpio_app_tc1 0xFF900224
#define DFLT_VAL_NX90_gpio_app_tc1          0x00000000

#define MSK_NX90_gpio_app_tc1_val         0xffffffff
#define SRT_NX90_gpio_app_tc1_val         0
#define DFLT_VAL_NX90_gpio_app_tc1_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc1_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc1': */
#define MSK_USED_BITS_NX90_gpio_app_tc1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc2 */
/* => GPIO_APP pin 2 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc2           0x00000028
#define Adr_NX90_gpio_app_gpio_app_tc2      0xFF801428
#define Adr_NX90_gpio_xpic_app_gpio_app_tc2 0xFF900228
#define DFLT_VAL_NX90_gpio_app_tc2          0x00000000

#define MSK_NX90_gpio_app_tc2_val         0xffffffff
#define SRT_NX90_gpio_app_tc2_val         0
#define DFLT_VAL_NX90_gpio_app_tc2_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc2_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc2': */
#define MSK_USED_BITS_NX90_gpio_app_tc2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc3 */
/* => GPIO_APP pin 3 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc3           0x0000002C
#define Adr_NX90_gpio_app_gpio_app_tc3      0xFF80142C
#define Adr_NX90_gpio_xpic_app_gpio_app_tc3 0xFF90022C
#define DFLT_VAL_NX90_gpio_app_tc3          0x00000000

#define MSK_NX90_gpio_app_tc3_val         0xffffffff
#define SRT_NX90_gpio_app_tc3_val         0
#define DFLT_VAL_NX90_gpio_app_tc3_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc3_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc3': */
#define MSK_USED_BITS_NX90_gpio_app_tc3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc4 */
/* => GPIO_APP pin 4 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc4           0x00000030
#define Adr_NX90_gpio_app_gpio_app_tc4      0xFF801430
#define Adr_NX90_gpio_xpic_app_gpio_app_tc4 0xFF900230
#define DFLT_VAL_NX90_gpio_app_tc4          0x00000000

#define MSK_NX90_gpio_app_tc4_val         0xffffffff
#define SRT_NX90_gpio_app_tc4_val         0
#define DFLT_VAL_NX90_gpio_app_tc4_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc4_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc4': */
#define MSK_USED_BITS_NX90_gpio_app_tc4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc5 */
/* => GPIO_APP pin 5 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc5           0x00000034
#define Adr_NX90_gpio_app_gpio_app_tc5      0xFF801434
#define Adr_NX90_gpio_xpic_app_gpio_app_tc5 0xFF900234
#define DFLT_VAL_NX90_gpio_app_tc5          0x00000000

#define MSK_NX90_gpio_app_tc5_val         0xffffffff
#define SRT_NX90_gpio_app_tc5_val         0
#define DFLT_VAL_NX90_gpio_app_tc5_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc5_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc5': */
#define MSK_USED_BITS_NX90_gpio_app_tc5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc6 */
/* => GPIO_APP pin 6 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc6           0x00000038
#define Adr_NX90_gpio_app_gpio_app_tc6      0xFF801438
#define Adr_NX90_gpio_xpic_app_gpio_app_tc6 0xFF900238
#define DFLT_VAL_NX90_gpio_app_tc6          0x00000000

#define MSK_NX90_gpio_app_tc6_val         0xffffffff
#define SRT_NX90_gpio_app_tc6_val         0
#define DFLT_VAL_NX90_gpio_app_tc6_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc6_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc6': */
#define MSK_USED_BITS_NX90_gpio_app_tc6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_tc7 */
/* => GPIO_APP pin 7 threshold or capture register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_tc7           0x0000003C
#define Adr_NX90_gpio_app_gpio_app_tc7      0xFF80143C
#define Adr_NX90_gpio_xpic_app_gpio_app_tc7 0xFF90023C
#define DFLT_VAL_NX90_gpio_app_tc7          0x00000000

#define MSK_NX90_gpio_app_tc7_val         0xffffffff
#define SRT_NX90_gpio_app_tc7_val         0
#define DFLT_VAL_NX90_gpio_app_tc7_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_tc7_val 0x00000000

/* all used bits of 'NX90_gpio_app_tc7': */
#define MSK_USED_BITS_NX90_gpio_app_tc7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_ctrl */
/* => GPIO_APP counter0 control register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_ctrl           0x00000040
#define Adr_NX90_gpio_app_gpio_app_counter0_ctrl      0xFF801440
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_ctrl 0xFF900240
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl          0x00000000

#define MSK_NX90_gpio_app_counter0_ctrl_run               0x00000001
#define SRT_NX90_gpio_app_counter0_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_run          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_run       0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_sym_nasym         0x00000002
#define SRT_NX90_gpio_app_counter0_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_sym_nasym    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_sym_nasym 0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_irq_en            0x00000004
#define SRT_NX90_gpio_app_counter0_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_irq_en       0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_irq_en    0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_sel_event         0x00000008
#define SRT_NX90_gpio_app_counter0_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_sel_event    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_sel_event 0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_once              0x00000010
#define SRT_NX90_gpio_app_counter0_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_once         0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_once      0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_event_act         0x00000060
#define SRT_NX90_gpio_app_counter0_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_event_act    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_event_act 0x00000000
#define MSK_NX90_gpio_app_counter0_ctrl_gpio_ref          0x00000380
#define SRT_NX90_gpio_app_counter0_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter0_ctrl_gpio_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_ctrl_gpio_ref  0x00000000

/* all used bits of 'NX90_gpio_app_counter0_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_ctrl 0x000003ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_ctrl */
/* => GPIO_APP counter1 control register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_ctrl           0x00000044
#define Adr_NX90_gpio_app_gpio_app_counter1_ctrl      0xFF801444
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_ctrl 0xFF900244
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl          0x00000000

#define MSK_NX90_gpio_app_counter1_ctrl_run               0x00000001
#define SRT_NX90_gpio_app_counter1_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_run          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_run       0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_sym_nasym         0x00000002
#define SRT_NX90_gpio_app_counter1_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_sym_nasym    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_sym_nasym 0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_irq_en            0x00000004
#define SRT_NX90_gpio_app_counter1_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_irq_en       0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_irq_en    0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_sel_event         0x00000008
#define SRT_NX90_gpio_app_counter1_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_sel_event    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_sel_event 0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_once              0x00000010
#define SRT_NX90_gpio_app_counter1_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_once         0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_once      0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_event_act         0x00000060
#define SRT_NX90_gpio_app_counter1_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_event_act    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_event_act 0x00000000
#define MSK_NX90_gpio_app_counter1_ctrl_gpio_ref          0x00000380
#define SRT_NX90_gpio_app_counter1_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter1_ctrl_gpio_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_ctrl_gpio_ref  0x00000000

/* all used bits of 'NX90_gpio_app_counter1_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_ctrl 0x000003ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_ctrl */
/* => GPIO_APP counter2 control register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_ctrl           0x00000048
#define Adr_NX90_gpio_app_gpio_app_counter2_ctrl      0xFF801448
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_ctrl 0xFF900248
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl          0x00000000

#define MSK_NX90_gpio_app_counter2_ctrl_run               0x00000001
#define SRT_NX90_gpio_app_counter2_ctrl_run               0
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_run          0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_run       0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_sym_nasym         0x00000002
#define SRT_NX90_gpio_app_counter2_ctrl_sym_nasym         1
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_sym_nasym    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_sym_nasym 0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_irq_en            0x00000004
#define SRT_NX90_gpio_app_counter2_ctrl_irq_en            2
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_irq_en       0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_irq_en    0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_sel_event         0x00000008
#define SRT_NX90_gpio_app_counter2_ctrl_sel_event         3
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_sel_event    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_sel_event 0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_once              0x00000010
#define SRT_NX90_gpio_app_counter2_ctrl_once              4
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_once         0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_once      0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_event_act         0x00000060
#define SRT_NX90_gpio_app_counter2_ctrl_event_act         5
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_event_act    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_event_act 0x00000000
#define MSK_NX90_gpio_app_counter2_ctrl_gpio_ref          0x00000380
#define SRT_NX90_gpio_app_counter2_ctrl_gpio_ref          7
#define DFLT_VAL_NX90_gpio_app_counter2_ctrl_gpio_ref     0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_ctrl_gpio_ref  0x00000000

/* all used bits of 'NX90_gpio_app_counter2_ctrl': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_ctrl 0x000003ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_max */
/* => GPIO_APP counter0 max value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_max           0x0000004C
#define Adr_NX90_gpio_app_gpio_app_counter0_max      0xFF80144C
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_max 0xFF90024C
#define DFLT_VAL_NX90_gpio_app_counter0_max          0x00000000

#define MSK_NX90_gpio_app_counter0_max_val         0xffffffff
#define SRT_NX90_gpio_app_counter0_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter0_max_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_max_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter0_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_max 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_max */
/* => GPIO_APP counter1 max value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_max           0x00000050
#define Adr_NX90_gpio_app_gpio_app_counter1_max      0xFF801450
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_max 0xFF900250
#define DFLT_VAL_NX90_gpio_app_counter1_max          0x00000000

#define MSK_NX90_gpio_app_counter1_max_val         0xffffffff
#define SRT_NX90_gpio_app_counter1_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter1_max_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_max_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter1_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_max 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_max */
/* => GPIO_APP counter2 max value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_max           0x00000054
#define Adr_NX90_gpio_app_gpio_app_counter2_max      0xFF801454
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_max 0xFF900254
#define DFLT_VAL_NX90_gpio_app_counter2_max          0x00000000

#define MSK_NX90_gpio_app_counter2_max_val         0xffffffff
#define SRT_NX90_gpio_app_counter2_max_val         0
#define DFLT_VAL_NX90_gpio_app_counter2_max_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_max_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter2_max': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_max 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter0_cnt */
/* => GPIO_APP counter0 current value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter0_cnt           0x00000058
#define Adr_NX90_gpio_app_gpio_app_counter0_cnt      0xFF801458
#define Adr_NX90_gpio_xpic_app_gpio_app_counter0_cnt 0xFF900258
#define DFLT_VAL_NX90_gpio_app_counter0_cnt          0x00000000

#define MSK_NX90_gpio_app_counter0_cnt_val         0xffffffff
#define SRT_NX90_gpio_app_counter0_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter0_cnt_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter0_cnt_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter0_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter0_cnt 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter1_cnt */
/* => GPIO_APP counter1 current value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter1_cnt           0x0000005C
#define Adr_NX90_gpio_app_gpio_app_counter1_cnt      0xFF80145C
#define Adr_NX90_gpio_xpic_app_gpio_app_counter1_cnt 0xFF90025C
#define DFLT_VAL_NX90_gpio_app_counter1_cnt          0x00000000

#define MSK_NX90_gpio_app_counter1_cnt_val         0xffffffff
#define SRT_NX90_gpio_app_counter1_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter1_cnt_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter1_cnt_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter1_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter1_cnt 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_counter2_cnt */
/* => GPIO_APP counter2 current value: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_counter2_cnt           0x00000060
#define Adr_NX90_gpio_app_gpio_app_counter2_cnt      0xFF801460
#define Adr_NX90_gpio_xpic_app_gpio_app_counter2_cnt 0xFF900260
#define DFLT_VAL_NX90_gpio_app_counter2_cnt          0x00000000

#define MSK_NX90_gpio_app_counter2_cnt_val         0xffffffff
#define SRT_NX90_gpio_app_counter2_cnt_val         0
#define DFLT_VAL_NX90_gpio_app_counter2_cnt_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_counter2_cnt_val 0x00000000

/* all used bits of 'NX90_gpio_app_counter2_cnt': */
#define MSK_USED_BITS_NX90_gpio_app_counter2_cnt 0xffffffff

/* --------------------------------------------------------------------- */
/* Register gpio_app_line */
/* => GPIO_APP line register */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_line           0x00000064
#define Adr_NX90_gpio_app_gpio_app_line      0xFF801464
#define Adr_NX90_gpio_xpic_app_gpio_app_line 0xFF900264
#define DFLT_VAL_NX90_gpio_app_line          0x00000000

#define MSK_NX90_gpio_app_line_val         0x000000ff
#define SRT_NX90_gpio_app_line_val         0
#define DFLT_VAL_NX90_gpio_app_line_val    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_line_val 0x00000000

/* all used bits of 'NX90_gpio_app_line': */
#define MSK_USED_BITS_NX90_gpio_app_line 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_in */
/* => GPIO_APP latched inputs register: */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_in           0x00000068
#define Adr_NX90_gpio_app_gpio_app_in      0xFF801468
#define Adr_NX90_gpio_xpic_app_gpio_app_in 0xFF900268

#define MSK_NX90_gpio_app_in_val 0x000000ff
#define SRT_NX90_gpio_app_in_val 0

/* all used bits of 'NX90_gpio_app_in': */
#define MSK_USED_BITS_NX90_gpio_app_in 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_raw */
/* => GPIO_APP raw IRQ register: */
/*    Read access shows the status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the corresponding IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_raw           0x0000006C
#define Adr_NX90_gpio_app_gpio_app_irq_raw      0xFF80146C
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_raw 0xFF90026C
#define DFLT_VAL_NX90_gpio_app_irq_raw          0x00000000

#define MSK_NX90_gpio_app_irq_raw_gpio_app0         0x00000001
#define SRT_NX90_gpio_app_irq_raw_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app0 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app1         0x00000002
#define SRT_NX90_gpio_app_irq_raw_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app1 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app2         0x00000004
#define SRT_NX90_gpio_app_irq_raw_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app2 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app3         0x00000008
#define SRT_NX90_gpio_app_irq_raw_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app3    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app3 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app4         0x00000010
#define SRT_NX90_gpio_app_irq_raw_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app4    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app4 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app5         0x00000020
#define SRT_NX90_gpio_app_irq_raw_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app5    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app5 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app6         0x00000040
#define SRT_NX90_gpio_app_irq_raw_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app6    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app6 0x00000000
#define MSK_NX90_gpio_app_irq_raw_gpio_app7         0x00000080
#define SRT_NX90_gpio_app_irq_raw_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_raw_gpio_app7    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_raw_gpio_app7 0x00000000

/* all used bits of 'NX90_gpio_app_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_app_irq_raw 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_masked */
/* => GPIO_APP masked IRQ register: */
/*    This register exists 2x for the different system busses (address areas) it is connected to. \ */
/*    This allows 2 CPUs to work in parallel on this module: ARM_APP, xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_masked           0x00000070
#define Adr_NX90_gpio_app_gpio_app_irq_masked      0xFF801470
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_masked 0xFF900270

#define MSK_NX90_gpio_app_irq_masked_gpio_app0 0x00000001
#define SRT_NX90_gpio_app_irq_masked_gpio_app0 0
#define MSK_NX90_gpio_app_irq_masked_gpio_app1 0x00000002
#define SRT_NX90_gpio_app_irq_masked_gpio_app1 1
#define MSK_NX90_gpio_app_irq_masked_gpio_app2 0x00000004
#define SRT_NX90_gpio_app_irq_masked_gpio_app2 2
#define MSK_NX90_gpio_app_irq_masked_gpio_app3 0x00000008
#define SRT_NX90_gpio_app_irq_masked_gpio_app3 3
#define MSK_NX90_gpio_app_irq_masked_gpio_app4 0x00000010
#define SRT_NX90_gpio_app_irq_masked_gpio_app4 4
#define MSK_NX90_gpio_app_irq_masked_gpio_app5 0x00000020
#define SRT_NX90_gpio_app_irq_masked_gpio_app5 5
#define MSK_NX90_gpio_app_irq_masked_gpio_app6 0x00000040
#define SRT_NX90_gpio_app_irq_masked_gpio_app6 6
#define MSK_NX90_gpio_app_irq_masked_gpio_app7 0x00000080
#define SRT_NX90_gpio_app_irq_masked_gpio_app7 7

/* all used bits of 'NX90_gpio_app_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_app_irq_masked 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_mask_set */
/* => GPIO_APP interrupt mask set: */
/*    The interrupt mask register exists 2x for the different system busses (address areas) it is connected to. \ */
/*    This allows 2 CPUs to work in parallel on this module: ARM_APP, xPIC_APP. */
/*    The inlogic_app IRQ mask enables interrupt requests for ARM_APP. \ */
/*    The xpic_app_system IRQ mask enables interrupt requests for xPIC_APP. \ */
/*    Since different software tasks might change its bits, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets the interrupt mask bit (enables the interrupt request for the corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows the current interrupt mask. */
/*    Note: Before activating the interrupt mask, delete old pending interrupts by writing the same value to gpio_app_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_mask_set           0x00000074
#define Adr_NX90_gpio_app_gpio_app_irq_mask_set      0xFF801474
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_mask_set 0xFF900274
#define DFLT_VAL_NX90_gpio_app_irq_mask_set          0x00000000

#define MSK_NX90_gpio_app_irq_mask_set_gpio_app0         0x00000001
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app0 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app1         0x00000002
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app1 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app2         0x00000004
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app2 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app3         0x00000008
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app3    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app3 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app4         0x00000010
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app4    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app4 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app5         0x00000020
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app5    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app5 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app6         0x00000040
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app6    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app6 0x00000000
#define MSK_NX90_gpio_app_irq_mask_set_gpio_app7         0x00000080
#define SRT_NX90_gpio_app_irq_mask_set_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_mask_set_gpio_app7    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_set_gpio_app7 0x00000000

/* all used bits of 'NX90_gpio_app_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_app_irq_mask_set 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_irq_mask_rst */
/* => GPIO_APP interrupt mask reset: */
/*    This reset mask serves to disable the interrupt requests for the corresponding interrupt sources. \ */
/*    Like irq_msk_set, this address exists for the following address areas: inlogic_app, xpic_app_system. */
/*    Write access with '1' resets the interrupt mask bit (disables the interrupt request for the corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows the current interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_irq_mask_rst           0x00000078
#define Adr_NX90_gpio_app_gpio_app_irq_mask_rst      0xFF801478
#define Adr_NX90_gpio_xpic_app_gpio_app_irq_mask_rst 0xFF900278
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst          0x00000000

#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app0         0x00000001
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app0         0
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app0 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app1         0x00000002
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app1         1
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app1 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app2         0x00000004
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app2         2
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app2 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app3         0x00000008
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app3         3
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app3    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app3 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app4         0x00000010
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app4         4
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app4    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app4 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app5         0x00000020
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app5         5
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app5    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app5 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app6         0x00000040
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app6         6
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app6    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app6 0x00000000
#define MSK_NX90_gpio_app_irq_mask_rst_gpio_app7         0x00000080
#define SRT_NX90_gpio_app_irq_mask_rst_gpio_app7         7
#define DFLT_VAL_NX90_gpio_app_irq_mask_rst_gpio_app7    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_irq_mask_rst_gpio_app7 0x00000000

/* all used bits of 'NX90_gpio_app_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_app_irq_mask_rst 0x000000ff

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_raw */
/* => Counter raw IRQ register: */
/*    Read access shows the status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the corresponding IRQ. */
/*    Write access with '0' does not influence this bit. */
/*    This register is accessible via address areas inlogic_app and xpic_app_system. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_raw           0x0000007C
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_raw      0xFF80147C
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_raw 0xFF90027C
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw          0x00000000

#define MSK_NX90_gpio_app_cnt_irq_raw_cnt0         0x00000001
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt0 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_raw_cnt1         0x00000002
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt1 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_raw_cnt2         0x00000004
#define SRT_NX90_gpio_app_cnt_irq_raw_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_raw_cnt2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_raw_cnt2 0x00000000

/* all used bits of 'NX90_gpio_app_cnt_irq_raw': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_raw 0x00000007

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_masked */
/* => Counter masked IRQ register: */
/*    Read access shows the status of masked IRQs (cnt_irq_raw AND cnt_irq_mask). */
/*    This register exists 2x for the different system busses (address areas) it is connected to. \ */
/*    This allows 2 CPUs to work in parallel on this module: ARM_APP, xPIC_APP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_masked           0x00000080
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_masked      0xFF801480
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_masked 0xFF900280

#define MSK_NX90_gpio_app_cnt_irq_masked_cnt0 0x00000001
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt0 0
#define MSK_NX90_gpio_app_cnt_irq_masked_cnt1 0x00000002
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt1 1
#define MSK_NX90_gpio_app_cnt_irq_masked_cnt2 0x00000004
#define SRT_NX90_gpio_app_cnt_irq_masked_cnt2 2

/* all used bits of 'NX90_gpio_app_cnt_irq_masked': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_masked 0x00000007

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_mask_set */
/* => Counter interrupt mask set: */
/*    The interrupt mask register exists 2x for the different system busses (address areas) it is connected to. \ */
/*    This allows 2 CPUs to work in parallel on this module: ARM_APP, xPIC_APP. */
/*    The inlogic_app IRQ mask enables interrupt requests for ARM_APP. \ */
/*    The xpic_app_system IRQ mask enables interrupt requests for xPIC_APP. \ */
/*    Since different software tasks might change its bits, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets the interrupt mask bit (enables the interrupt request for the corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows the current interrupt mask. */
/*    Note: Before activating the interrupt mask, delete old pending interrupts by writing the same value to cnt_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_mask_set           0x00000084
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_mask_set      0xFF801484
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_mask_set 0xFF900284
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set          0x00000000

#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt0         0x00000001
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt0 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt1         0x00000002
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt1 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_mask_set_cnt2         0x00000004
#define SRT_NX90_gpio_app_cnt_irq_mask_set_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_set_cnt2 0x00000000

/* all used bits of 'NX90_gpio_app_cnt_irq_mask_set': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_mask_set 0x00000007

/* --------------------------------------------------------------------- */
/* Register gpio_app_cnt_irq_mask_rst */
/* => Counter interrupt mask reset: */
/*    This reset mask serves to disable the interrupt requests for the corresponding interrupt sources. \ */
/*    Like cnt_irq_msk_set, this address exists for the following address areas: inlogic_app, xpic_app_system. */
/*    Write access with '1' resets the interrupt mask bit (disables the interrupt request for the corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows the current interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_gpio_app_cnt_irq_mask_rst           0x00000088
#define Adr_NX90_gpio_app_gpio_app_cnt_irq_mask_rst      0xFF801488
#define Adr_NX90_gpio_xpic_app_gpio_app_cnt_irq_mask_rst 0xFF900288
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst          0x00000000

#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt0         0x00000001
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt0         0
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt0    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt0 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt1         0x00000002
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt1         1
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt1    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt1 0x00000000
#define MSK_NX90_gpio_app_cnt_irq_mask_rst_cnt2         0x00000004
#define SRT_NX90_gpio_app_cnt_irq_mask_rst_cnt2         2
#define DFLT_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt2    0x00000000
#define DFLT_BF_VAL_NX90_gpio_app_cnt_irq_mask_rst_cnt2 0x00000000

/* all used bits of 'NX90_gpio_app_cnt_irq_mask_rst': */
#define MSK_USED_BITS_NX90_gpio_app_cnt_irq_mask_rst 0x00000007


/* ===================================================================== */

/* AREA pio */
/* Area of pio_app */

/* ===================================================================== */

#define Addr_NX90_pio_app 0xFF801500

/* --------------------------------------------------------------------- */
/* Register pio_in */
/* => PIO input line status register. */
/*    Each PIO input status can also be read from dedicated PIOx input state register. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_in     0x00000000
#define Adr_NX90_pio_app_pio_in 0xFF801500
#define Adr_NX90_pio_in         0xFF801500

#define MSK_NX90_pio_in_val 0x1fffffff
#define SRT_NX90_pio_in_val 0

/* all used bits of 'NX90_pio_in': */
#define MSK_USED_BITS_NX90_pio_in 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_out */
/* => PIO output drive level line register. */
/*    Each PIOs output drive level can also be programmed by dedicated PIOx output drive level register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_out     0x00000004
#define Adr_NX90_pio_app_pio_out 0xFF801504
#define Adr_NX90_pio_out         0xFF801504
#define DFLT_VAL_NX90_pio_out    0x00000000

#define MSK_NX90_pio_out_val         0x1fffffff
#define SRT_NX90_pio_out_val         0
#define DFLT_VAL_NX90_pio_out_val    0x00000000
#define DFLT_BF_VAL_NX90_pio_out_val 0x00000000

/* all used bits of 'NX90_pio_out': */
#define MSK_USED_BITS_NX90_pio_out 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_oe */
/* => PIO output enable line register. */
/*    Each PIOs output enable can also be programmed by dedicated PIOx output enable register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_oe     0x00000008
#define Adr_NX90_pio_app_pio_oe 0xFF801508
#define Adr_NX90_pio_oe         0xFF801508
#define DFLT_VAL_NX90_pio_oe    0x00000000

#define MSK_NX90_pio_oe_val         0x1fffffff
#define SRT_NX90_pio_oe_val         0
#define DFLT_VAL_NX90_pio_oe_val    0x00000000
#define DFLT_BF_VAL_NX90_pio_oe_val 0x00000000

/* all used bits of 'NX90_pio_oe': */
#define MSK_USED_BITS_NX90_pio_oe 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_io_link_in */
/* => IO-Link input values. */
/*    This register collects the inputs of 8 IO-Link ports for use in IO-Link IO-mode. \ */
/*    In this mode the output and output-enable values are set by PIO pins independant on \ */
/*    xPIC or IO-Link module. */
/*    The relation of IO-Link-pin and PIO-pin can be seen in the global netX90 pinning sheet: */
/*      io_link7_out->pio27, io_link7_oe->pio28 */
/*      io_link6_out->pio24, io_link6_oe->pio25 */
/*      io_link5_out->pio22, io_link5_oe->pio23 */
/*      io_link4_out->pio19, io_link4_oe->pio21 */
/*      io_link3_out->pio14, io_link3_oe->pio15 */
/*      io_link2_out->pio11, io_link2_oe->pio13 */
/*      io_link1_out/oe: configurable via multiplexmatrix on pio7:0 */
/*      io_link0_out/oe: configurable via multiplexmatrix on pio7:0 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_io_link_in     0x0000000C
#define Adr_NX90_pio_app_pio_io_link_in 0xFF80150C
#define Adr_NX90_pio_io_link_in         0xFF80150C

#define MSK_NX90_pio_io_link_in_val 0x000000ff
#define SRT_NX90_pio_io_link_in_val 0

/* all used bits of 'NX90_pio_io_link_in': */
#define MSK_USED_BITS_NX90_pio_io_link_in 0x000000ff

/* --------------------------------------------------------------------- */
/* Register pio_in_inv */
/* => Invert input of PIO. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_in_inv     0x00000010
#define Adr_NX90_pio_app_pio_in_inv 0xFF801510
#define Adr_NX90_pio_in_inv         0xFF801510
#define DFLT_VAL_NX90_pio_in_inv    0x00000000

#define MSK_NX90_pio_in_inv_val         0x1fffffff
#define SRT_NX90_pio_in_inv_val         0
#define DFLT_VAL_NX90_pio_in_inv_val    0x00000000
#define DFLT_BF_VAL_NX90_pio_in_inv_val 0x00000000

/* all used bits of 'NX90_pio_in_inv': */
#define MSK_USED_BITS_NX90_pio_in_inv 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_edge_event */
/* => generate IRQ at edge of PIO, otherwise level. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_edge_event     0x00000014
#define Adr_NX90_pio_app_pio_edge_event 0xFF801514
#define Adr_NX90_pio_edge_event         0xFF801514
#define DFLT_VAL_NX90_pio_edge_event    0x00000000

#define MSK_NX90_pio_edge_event_val         0x1fffffff
#define SRT_NX90_pio_edge_event_val         0
#define DFLT_VAL_NX90_pio_edge_event_val    0x00000000
#define DFLT_BF_VAL_NX90_pio_edge_event_val 0x00000000

/* all used bits of 'NX90_pio_edge_event': */
#define MSK_USED_BITS_NX90_pio_edge_event 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event irq, reset status irqs at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq_raw     0x00000018
#define Adr_NX90_pio_app_pio_irq_raw 0xFF801518
#define Adr_NX90_pio_irq_raw         0xFF801518
#define DFLT_VAL_NX90_pio_irq_raw    0x00000000

#define MSK_NX90_pio_irq_raw_pio         0x1fffffff
#define SRT_NX90_pio_irq_raw_pio         0
#define DFLT_VAL_NX90_pio_irq_raw_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq_raw_pio 0x00000000

/* all used bits of 'NX90_pio_irq_raw': */
#define MSK_USED_BITS_NX90_pio_irq_raw 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq0_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq0_masked     0x0000001C
#define Adr_NX90_pio_app_pio_irq0_masked 0xFF80151C
#define Adr_NX90_pio_irq0_masked         0xFF80151C

#define MSK_NX90_pio_irq0_masked_pio 0x1fffffff
#define SRT_NX90_pio_irq0_masked_pio 0

/* all used bits of 'NX90_pio_irq0_masked': */
#define MSK_USED_BITS_NX90_pio_irq0_masked 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq0_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_pio_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq0_msk_set     0x00000020
#define Adr_NX90_pio_app_pio_irq0_msk_set 0xFF801520
#define Adr_NX90_pio_irq0_msk_set         0xFF801520
#define DFLT_VAL_NX90_pio_irq0_msk_set    0x00000000

#define MSK_NX90_pio_irq0_msk_set_pio         0x1fffffff
#define SRT_NX90_pio_irq0_msk_set_pio         0
#define DFLT_VAL_NX90_pio_irq0_msk_set_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq0_msk_set_pio 0x00000000

/* all used bits of 'NX90_pio_irq0_msk_set': */
#define MSK_USED_BITS_NX90_pio_irq0_msk_set 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq0_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq0_msk_reset     0x00000024
#define Adr_NX90_pio_app_pio_irq0_msk_reset 0xFF801524
#define Adr_NX90_pio_irq0_msk_reset         0xFF801524
#define DFLT_VAL_NX90_pio_irq0_msk_reset    0x00000000

#define MSK_NX90_pio_irq0_msk_reset_pio         0x1fffffff
#define SRT_NX90_pio_irq0_msk_reset_pio         0
#define DFLT_VAL_NX90_pio_irq0_msk_reset_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq0_msk_reset_pio 0x00000000

/* all used bits of 'NX90_pio_irq0_msk_reset': */
#define MSK_USED_BITS_NX90_pio_irq0_msk_reset 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq1_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq1_masked     0x00000028
#define Adr_NX90_pio_app_pio_irq1_masked 0xFF801528
#define Adr_NX90_pio_irq1_masked         0xFF801528

#define MSK_NX90_pio_irq1_masked_pio 0x1fffffff
#define SRT_NX90_pio_irq1_masked_pio 0

/* all used bits of 'NX90_pio_irq1_masked': */
#define MSK_USED_BITS_NX90_pio_irq1_masked 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq1_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_pio_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq1_msk_set     0x0000002C
#define Adr_NX90_pio_app_pio_irq1_msk_set 0xFF80152C
#define Adr_NX90_pio_irq1_msk_set         0xFF80152C
#define DFLT_VAL_NX90_pio_irq1_msk_set    0x00000000

#define MSK_NX90_pio_irq1_msk_set_pio         0x1fffffff
#define SRT_NX90_pio_irq1_msk_set_pio         0
#define DFLT_VAL_NX90_pio_irq1_msk_set_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq1_msk_set_pio 0x00000000

/* all used bits of 'NX90_pio_irq1_msk_set': */
#define MSK_USED_BITS_NX90_pio_irq1_msk_set 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq1_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq1_msk_reset     0x00000030
#define Adr_NX90_pio_app_pio_irq1_msk_reset 0xFF801530
#define Adr_NX90_pio_irq1_msk_reset         0xFF801530
#define DFLT_VAL_NX90_pio_irq1_msk_reset    0x00000000

#define MSK_NX90_pio_irq1_msk_reset_pio         0x1fffffff
#define SRT_NX90_pio_irq1_msk_reset_pio         0
#define DFLT_VAL_NX90_pio_irq1_msk_reset_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq1_msk_reset_pio 0x00000000

/* all used bits of 'NX90_pio_irq1_msk_reset': */
#define MSK_USED_BITS_NX90_pio_irq1_msk_reset 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq2_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq2_masked     0x00000034
#define Adr_NX90_pio_app_pio_irq2_masked 0xFF801534
#define Adr_NX90_pio_irq2_masked         0xFF801534

#define MSK_NX90_pio_irq2_masked_pio 0x1fffffff
#define SRT_NX90_pio_irq2_masked_pio 0

/* all used bits of 'NX90_pio_irq2_masked': */
#define MSK_USED_BITS_NX90_pio_irq2_masked 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq2_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_pio_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq2_msk_set     0x00000038
#define Adr_NX90_pio_app_pio_irq2_msk_set 0xFF801538
#define Adr_NX90_pio_irq2_msk_set         0xFF801538
#define DFLT_VAL_NX90_pio_irq2_msk_set    0x00000000

#define MSK_NX90_pio_irq2_msk_set_pio         0x1fffffff
#define SRT_NX90_pio_irq2_msk_set_pio         0
#define DFLT_VAL_NX90_pio_irq2_msk_set_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq2_msk_set_pio 0x00000000

/* all used bits of 'NX90_pio_irq2_msk_set': */
#define MSK_USED_BITS_NX90_pio_irq2_msk_set 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq2_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq2_msk_reset     0x0000003C
#define Adr_NX90_pio_app_pio_irq2_msk_reset 0xFF80153C
#define Adr_NX90_pio_irq2_msk_reset         0xFF80153C
#define DFLT_VAL_NX90_pio_irq2_msk_reset    0x00000000

#define MSK_NX90_pio_irq2_msk_reset_pio         0x1fffffff
#define SRT_NX90_pio_irq2_msk_reset_pio         0
#define DFLT_VAL_NX90_pio_irq2_msk_reset_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq2_msk_reset_pio 0x00000000

/* all used bits of 'NX90_pio_irq2_msk_reset': */
#define MSK_USED_BITS_NX90_pio_irq2_msk_reset 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq3_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq3_masked     0x00000040
#define Adr_NX90_pio_app_pio_irq3_masked 0xFF801540
#define Adr_NX90_pio_irq3_masked         0xFF801540

#define MSK_NX90_pio_irq3_masked_pio 0x1fffffff
#define SRT_NX90_pio_irq3_masked_pio 0

/* all used bits of 'NX90_pio_irq3_masked': */
#define MSK_USED_BITS_NX90_pio_irq3_masked 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq3_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_pio_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq3_msk_set     0x00000044
#define Adr_NX90_pio_app_pio_irq3_msk_set 0xFF801544
#define Adr_NX90_pio_irq3_msk_set         0xFF801544
#define DFLT_VAL_NX90_pio_irq3_msk_set    0x00000000

#define MSK_NX90_pio_irq3_msk_set_pio         0x1fffffff
#define SRT_NX90_pio_irq3_msk_set_pio         0
#define DFLT_VAL_NX90_pio_irq3_msk_set_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq3_msk_set_pio 0x00000000

/* all used bits of 'NX90_pio_irq3_msk_set': */
#define MSK_USED_BITS_NX90_pio_irq3_msk_set 0x1fffffff

/* --------------------------------------------------------------------- */
/* Register pio_irq3_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_pio_irq3_msk_reset     0x00000048
#define Adr_NX90_pio_app_pio_irq3_msk_reset 0xFF801548
#define Adr_NX90_pio_irq3_msk_reset         0xFF801548
#define DFLT_VAL_NX90_pio_irq3_msk_reset    0x00000000

#define MSK_NX90_pio_irq3_msk_reset_pio         0x1fffffff
#define SRT_NX90_pio_irq3_msk_reset_pio         0
#define DFLT_VAL_NX90_pio_irq3_msk_reset_pio    0x00000000
#define DFLT_BF_VAL_NX90_pio_irq3_msk_reset_pio 0x00000000

/* all used bits of 'NX90_pio_irq3_msk_reset': */
#define MSK_USED_BITS_NX90_pio_irq3_msk_reset 0x1fffffff


/* ===================================================================== */

/* AREA arm_timer */
/* Area of timer_app, timer_xpic_app */

/* ===================================================================== */

#define Addr_NX90_timer_app      0xFF801600
#define Addr_NX90_timer_xpic_app 0xFF900100

/* --------------------------------------------------------------------- */
/* Register timer_config_timer0 */
/* => ARM TIMER Config register0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer0            0x00000000
#define Adr_NX90_timer_app_timer_config_timer0      0xFF801600
#define Adr_NX90_timer_xpic_app_timer_config_timer0 0xFF900100
#define DFLT_VAL_NX90_timer_config_timer0           0x00000000

#define MSK_NX90_timer_config_timer0_mode                   0x00000003
#define SRT_NX90_timer_config_timer0_mode                   0
#define DFLT_VAL_NX90_timer_config_timer0_mode              0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer0_mode           0x00000000
#define MSK_NX90_timer_config_timer0_systime_config         0x0000000c
#define SRT_NX90_timer_config_timer0_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer0_systime_config    0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer0_systime_config 0x00000000

/* all used bits of 'NX90_timer_config_timer0': */
#define MSK_USED_BITS_NX90_timer_config_timer0 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_config_timer1 */
/* => ARM TIMER Config register1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer1            0x00000004
#define Adr_NX90_timer_app_timer_config_timer1      0xFF801604
#define Adr_NX90_timer_xpic_app_timer_config_timer1 0xFF900104
#define DFLT_VAL_NX90_timer_config_timer1           0x00000000

#define MSK_NX90_timer_config_timer1_mode                   0x00000003
#define SRT_NX90_timer_config_timer1_mode                   0
#define DFLT_VAL_NX90_timer_config_timer1_mode              0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer1_mode           0x00000000
#define MSK_NX90_timer_config_timer1_systime_config         0x0000000c
#define SRT_NX90_timer_config_timer1_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer1_systime_config    0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer1_systime_config 0x00000000

/* all used bits of 'NX90_timer_config_timer1': */
#define MSK_USED_BITS_NX90_timer_config_timer1 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_config_timer2 */
/* => ARM TIMER Config register2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_config_timer2            0x00000008
#define Adr_NX90_timer_app_timer_config_timer2      0xFF801608
#define Adr_NX90_timer_xpic_app_timer_config_timer2 0xFF900108
#define DFLT_VAL_NX90_timer_config_timer2           0x00000000

#define MSK_NX90_timer_config_timer2_mode                   0x00000003
#define SRT_NX90_timer_config_timer2_mode                   0
#define DFLT_VAL_NX90_timer_config_timer2_mode              0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer2_mode           0x00000000
#define MSK_NX90_timer_config_timer2_systime_config         0x0000000c
#define SRT_NX90_timer_config_timer2_systime_config         2
#define DFLT_VAL_NX90_timer_config_timer2_systime_config    0x00000000
#define DFLT_BF_VAL_NX90_timer_config_timer2_systime_config 0x00000000

/* all used bits of 'NX90_timer_config_timer2': */
#define MSK_USED_BITS_NX90_timer_config_timer2 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer0 */
/* => ARM TIMER Timer 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer0            0x0000000C
#define Adr_NX90_timer_app_timer_preload_timer0      0xFF80160C
#define Adr_NX90_timer_xpic_app_timer_preload_timer0 0xFF90010C
#define DFLT_VAL_NX90_timer_preload_timer0           0x00000000

#define MSK_NX90_timer_preload_timer0_val         0xffffffff
#define SRT_NX90_timer_preload_timer0_val         0
#define DFLT_VAL_NX90_timer_preload_timer0_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_preload_timer0_val 0x00000000

/* all used bits of 'NX90_timer_preload_timer0': */
#define MSK_USED_BITS_NX90_timer_preload_timer0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer1 */
/* => ARM TIMER Timer 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer1            0x00000010
#define Adr_NX90_timer_app_timer_preload_timer1      0xFF801610
#define Adr_NX90_timer_xpic_app_timer_preload_timer1 0xFF900110
#define DFLT_VAL_NX90_timer_preload_timer1           0x00000000

#define MSK_NX90_timer_preload_timer1_val         0xffffffff
#define SRT_NX90_timer_preload_timer1_val         0
#define DFLT_VAL_NX90_timer_preload_timer1_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_preload_timer1_val 0x00000000

/* all used bits of 'NX90_timer_preload_timer1': */
#define MSK_USED_BITS_NX90_timer_preload_timer1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_preload_timer2 */
/* => ARM TIMER Timer 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_preload_timer2            0x00000014
#define Adr_NX90_timer_app_timer_preload_timer2      0xFF801614
#define Adr_NX90_timer_xpic_app_timer_preload_timer2 0xFF900114
#define DFLT_VAL_NX90_timer_preload_timer2           0x00000000

#define MSK_NX90_timer_preload_timer2_val         0xffffffff
#define SRT_NX90_timer_preload_timer2_val         0
#define DFLT_VAL_NX90_timer_preload_timer2_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_preload_timer2_val 0x00000000

/* all used bits of 'NX90_timer_preload_timer2': */
#define MSK_USED_BITS_NX90_timer_preload_timer2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_timer0 */
/* => ARM TIMER Timer 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer0            0x00000018
#define Adr_NX90_timer_app_timer_timer0      0xFF801618
#define Adr_NX90_timer_xpic_app_timer_timer0 0xFF900118
#define DFLT_VAL_NX90_timer_timer0           0x00000000

#define MSK_NX90_timer_timer0_val         0xffffffff
#define SRT_NX90_timer_timer0_val         0
#define DFLT_VAL_NX90_timer_timer0_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_timer0_val 0x00000000

/* all used bits of 'NX90_timer_timer0': */
#define MSK_USED_BITS_NX90_timer_timer0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_timer1 */
/* => ARM TIMER Timer 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer1            0x0000001C
#define Adr_NX90_timer_app_timer_timer1      0xFF80161C
#define Adr_NX90_timer_xpic_app_timer_timer1 0xFF90011C
#define DFLT_VAL_NX90_timer_timer1           0x00000000

#define MSK_NX90_timer_timer1_val         0xffffffff
#define SRT_NX90_timer_timer1_val         0
#define DFLT_VAL_NX90_timer_timer1_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_timer1_val 0x00000000

/* all used bits of 'NX90_timer_timer1': */
#define MSK_USED_BITS_NX90_timer_timer1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_timer2 */
/* => ARM TIMER Timer 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_timer2            0x00000020
#define Adr_NX90_timer_app_timer_timer2      0xFF801620
#define Adr_NX90_timer_xpic_app_timer_timer2 0xFF900120
#define DFLT_VAL_NX90_timer_timer2           0x00000000

#define MSK_NX90_timer_timer2_val         0xffffffff
#define SRT_NX90_timer_timer2_val         0
#define DFLT_VAL_NX90_timer_timer2_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_timer2_val 0x00000000

/* all used bits of 'NX90_timer_timer2': */
#define MSK_USED_BITS_NX90_timer_timer2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_systime_s */
/* => ARM_TIMER upper SYSTIME register */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    This register should be dedicated to accesses via ARM. */
/*    xPIC software should access systime via xpic_timer_systime_s. */
/*    Host software should access systime via DPM at systime_s. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_s            0x00000024
#define Adr_NX90_timer_app_timer_systime_s      0xFF801624
#define Adr_NX90_timer_xpic_app_timer_systime_s 0xFF900124

#define MSK_NX90_timer_systime_s_val 0xffffffff
#define SRT_NX90_timer_systime_s_val 0

/* all used bits of 'NX90_timer_systime_s': */
#define MSK_USED_BITS_NX90_timer_systime_s 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_systime_ns */
/* => ARM_TIMER lower SYSTIME register */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    If no systime_s is read before (e.g. at 2nd read access of systime_ns), the actual value of systime_ns is read. */
/*    This register should be dedicated to accesses via ARM. */
/*    xPIC software should access systime via xpic_timer_systime_ns. */
/*    Host software should access systime via DPM at systime_ns. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_ns            0x00000028
#define Adr_NX90_timer_app_timer_systime_ns      0xFF801628
#define Adr_NX90_timer_xpic_app_timer_systime_ns 0xFF900128

#define MSK_NX90_timer_systime_ns_val 0xffffffff
#define SRT_NX90_timer_systime_ns_val 0

/* all used bits of 'NX90_timer_systime_ns': */
#define MSK_USED_BITS_NX90_timer_systime_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_compare_systime_s_value */
/* => SYSTIME sec compare value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_compare_systime_s_value            0x0000002C
#define Adr_NX90_timer_app_timer_compare_systime_s_value      0xFF80162C
#define Adr_NX90_timer_xpic_app_timer_compare_systime_s_value 0xFF90012C
#define DFLT_VAL_NX90_timer_compare_systime_s_value           0x00000000

#define MSK_NX90_timer_compare_systime_s_value_val         0xffffffff
#define SRT_NX90_timer_compare_systime_s_value_val         0
#define DFLT_VAL_NX90_timer_compare_systime_s_value_val    0x00000000
#define DFLT_BF_VAL_NX90_timer_compare_systime_s_value_val 0x00000000

/* all used bits of 'NX90_timer_compare_systime_s_value': */
#define MSK_USED_BITS_NX90_timer_compare_systime_s_value 0xffffffff

/* --------------------------------------------------------------------- */
/* Register timer_irq_raw */
/* => ARM_TIMER Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_raw            0x00000030
#define Adr_NX90_timer_app_timer_irq_raw      0xFF801630
#define Adr_NX90_timer_xpic_app_timer_irq_raw 0xFF900130
#define DFLT_VAL_NX90_timer_irq_raw           0x00000000

#define MSK_NX90_timer_irq_raw_timer0_irq            0x00000001
#define SRT_NX90_timer_irq_raw_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_raw_timer0_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer0_irq    0x00000000
#define MSK_NX90_timer_irq_raw_timer1_irq            0x00000002
#define SRT_NX90_timer_irq_raw_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_raw_timer1_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer1_irq    0x00000000
#define MSK_NX90_timer_irq_raw_timer2_irq            0x00000004
#define SRT_NX90_timer_irq_raw_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_raw_timer2_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_raw_timer2_irq    0x00000000
#define MSK_NX90_timer_irq_raw_systime_s_irq         0x00000008
#define SRT_NX90_timer_irq_raw_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_raw_systime_s_irq    0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_raw_systime_s_irq 0x00000000

/* all used bits of 'NX90_timer_irq_raw': */
#define MSK_USED_BITS_NX90_timer_irq_raw 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_irq_masked */
/* => ARM_TIMER Masked IRQ register: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_masked            0x00000034
#define Adr_NX90_timer_app_timer_irq_masked      0xFF801634
#define Adr_NX90_timer_xpic_app_timer_irq_masked 0xFF900134

#define MSK_NX90_timer_irq_masked_timer0_irq    0x00000001
#define SRT_NX90_timer_irq_masked_timer0_irq    0
#define MSK_NX90_timer_irq_masked_timer1_irq    0x00000002
#define SRT_NX90_timer_irq_masked_timer1_irq    1
#define MSK_NX90_timer_irq_masked_timer2_irq    0x00000004
#define SRT_NX90_timer_irq_masked_timer2_irq    2
#define MSK_NX90_timer_irq_masked_systime_s_irq 0x00000008
#define SRT_NX90_timer_irq_masked_systime_s_irq 3

/* all used bits of 'NX90_timer_irq_masked': */
#define MSK_USED_BITS_NX90_timer_irq_masked 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_irq_msk_set */
/* => ARM_TIMER interrupt mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to arm_timer_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_msk_set            0x00000038
#define Adr_NX90_timer_app_timer_irq_msk_set      0xFF801638
#define Adr_NX90_timer_xpic_app_timer_irq_msk_set 0xFF900138
#define DFLT_VAL_NX90_timer_irq_msk_set           0x00000000

#define MSK_NX90_timer_irq_msk_set_timer0_irq            0x00000001
#define SRT_NX90_timer_irq_msk_set_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_msk_set_timer0_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer0_irq    0x00000000
#define MSK_NX90_timer_irq_msk_set_timer1_irq            0x00000002
#define SRT_NX90_timer_irq_msk_set_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_msk_set_timer1_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer1_irq    0x00000000
#define MSK_NX90_timer_irq_msk_set_timer2_irq            0x00000004
#define SRT_NX90_timer_irq_msk_set_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_msk_set_timer2_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_timer2_irq    0x00000000
#define MSK_NX90_timer_irq_msk_set_systime_s_irq         0x00000008
#define SRT_NX90_timer_irq_msk_set_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_msk_set_systime_s_irq    0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_set_systime_s_irq 0x00000000

/* all used bits of 'NX90_timer_irq_msk_set': */
#define MSK_USED_BITS_NX90_timer_irq_msk_set 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_irq_msk_reset */
/* => ARM_TIMER interrupt mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_irq_msk_reset            0x0000003C
#define Adr_NX90_timer_app_timer_irq_msk_reset      0xFF80163C
#define Adr_NX90_timer_xpic_app_timer_irq_msk_reset 0xFF90013C
#define DFLT_VAL_NX90_timer_irq_msk_reset           0x00000000

#define MSK_NX90_timer_irq_msk_reset_timer0_irq            0x00000001
#define SRT_NX90_timer_irq_msk_reset_timer0_irq            0
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer0_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer0_irq    0x00000000
#define MSK_NX90_timer_irq_msk_reset_timer1_irq            0x00000002
#define SRT_NX90_timer_irq_msk_reset_timer1_irq            1
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer1_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer1_irq    0x00000000
#define MSK_NX90_timer_irq_msk_reset_timer2_irq            0x00000004
#define SRT_NX90_timer_irq_msk_reset_timer2_irq            2
#define DFLT_VAL_NX90_timer_irq_msk_reset_timer2_irq       0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_timer2_irq    0x00000000
#define MSK_NX90_timer_irq_msk_reset_systime_s_irq         0x00000008
#define SRT_NX90_timer_irq_msk_reset_systime_s_irq         3
#define DFLT_VAL_NX90_timer_irq_msk_reset_systime_s_irq    0x00000000
#define DFLT_BF_VAL_NX90_timer_irq_msk_reset_systime_s_irq 0x00000000

/* all used bits of 'NX90_timer_irq_msk_reset': */
#define MSK_USED_BITS_NX90_timer_irq_msk_reset 0x0000000f

/* --------------------------------------------------------------------- */
/* Register timer_systime_config */
/* => Select systime  for arm_timer_systime_(ns)s functions */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_timer_systime_config            0x00000040
#define Adr_NX90_timer_app_timer_systime_config      0xFF801640
#define Adr_NX90_timer_xpic_app_timer_systime_config 0xFF900140
#define DFLT_VAL_NX90_timer_systime_config           0x00000000

#define MSK_NX90_timer_systime_config_systime_config         0x00000003
#define SRT_NX90_timer_systime_config_systime_config         0
#define DFLT_VAL_NX90_timer_systime_config_systime_config    0x00000000
#define DFLT_BF_VAL_NX90_timer_systime_config_systime_config 0x00000000

/* all used bits of 'NX90_timer_systime_config': */
#define MSK_USED_BITS_NX90_timer_systime_config 0x00000003


/* ===================================================================== */

/* AREA intlogic_systime_lt */
/* Area of systime_lt_app, systime_lt_xpic_app */

/* ===================================================================== */

#define Addr_NX90_systime_lt_app      0xFF801680
#define Addr_NX90_systime_lt_xpic_app 0xFF9001C0

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_ns */
/* => systime_com_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_ns                 0x00000000
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_ns      0xFF801680
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_ns 0xFF9001C0

#define MSK_NX90_intlogic_lt_systime_com_ns_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_com_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_s */
/* => systime_com_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_s                 0x00000004
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_s      0xFF801684
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_s 0xFF9001C4

#define MSK_NX90_intlogic_lt_systime_com_s_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_com_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_s 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_uc_ns */
/* => systime_com_uc_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_uc_ns                 0x00000008
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_uc_ns      0xFF801688
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_uc_ns 0xFF9001C8

#define MSK_NX90_intlogic_lt_systime_com_uc_ns_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_com_uc_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_uc_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_uc_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_com_uc_s */
/* => systime_com_uc_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_com_uc_s                 0x0000000C
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_com_uc_s      0xFF80168C
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_com_uc_s 0xFF9001CC

#define MSK_NX90_intlogic_lt_systime_com_uc_s_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_com_uc_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_com_uc_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_com_uc_s 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_app_ns */
/* => systime_app_ns last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_app_ns                 0x00000010
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_app_ns      0xFF801690
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_app_ns 0xFF9001D0

#define MSK_NX90_intlogic_lt_systime_app_ns_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_app_ns_val 0

/* all used bits of 'NX90_intlogic_lt_systime_app_ns': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_app_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systime_app_s */
/* => systime_app_s last latched value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systime_app_s                 0x00000014
#define Adr_NX90_systime_lt_app_intlogic_lt_systime_app_s      0xFF801694
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systime_app_s 0xFF9001D4

#define MSK_NX90_intlogic_lt_systime_app_s_val 0xffffffff
#define SRT_NX90_intlogic_lt_systime_app_s_val 0

/* all used bits of 'NX90_intlogic_lt_systime_app_s': */
#define MSK_USED_BITS_NX90_intlogic_lt_systime_app_s 0xffffffff

/* --------------------------------------------------------------------- */
/* Register intlogic_lt_systimes_latch */
/* => latch systimes by writing 1'b1 to the assigned bit */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_intlogic_lt_systimes_latch                 0x00000018
#define Adr_NX90_systime_lt_app_intlogic_lt_systimes_latch      0xFF801698
#define Adr_NX90_systime_lt_xpic_app_intlogic_lt_systimes_latch 0xFF9001D8
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch                0x00000000

#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_ns            0x00000001
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_ns            0
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_ns       0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_ns    0x00000000
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_s             0x00000002
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_s             1
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_s        0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_s     0x00000000
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns         0x00000004
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns         2
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns    0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_ns 0x00000000
#define MSK_NX90_intlogic_lt_systimes_latch_systime_com_uc_s          0x00000008
#define SRT_NX90_intlogic_lt_systimes_latch_systime_com_uc_s          3
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_s     0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_com_uc_s  0x00000000
#define MSK_NX90_intlogic_lt_systimes_latch_systime_app_ns            0x00000010
#define SRT_NX90_intlogic_lt_systimes_latch_systime_app_ns            4
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_app_ns       0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_app_ns    0x00000000
#define MSK_NX90_intlogic_lt_systimes_latch_systime_app_s             0x00000020
#define SRT_NX90_intlogic_lt_systimes_latch_systime_app_s             5
#define DFLT_VAL_NX90_intlogic_lt_systimes_latch_systime_app_s        0x00000000
#define DFLT_BF_VAL_NX90_intlogic_lt_systimes_latch_systime_app_s     0x00000000

/* all used bits of 'NX90_intlogic_lt_systimes_latch': */
#define MSK_USED_BITS_NX90_intlogic_lt_systimes_latch 0x0000003f


/* ===================================================================== */

/* AREA systime */
/* Area of systime_app */

/* ===================================================================== */

#define Addr_NX90_systime_app 0xFF8016C0

/* --------------------------------------------------------------------- */
/* Register systime_s */
/* => Upper SYSTIME register: */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    This register should be dedicated to accesses via DPM. */
/*    ARM software should access systime via arm_timer_systime_s. */
/*    xPIC software should access systime via xpic_timer_systime_s. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_s         0x00000000
#define Adr_NX90_systime_app_systime_s 0xFF8016C0
#define Adr_NX90_systime_s             0xFF8016C0
#define DFLT_VAL_NX90_systime_s        0x00000000

#define MSK_NX90_systime_s_systime_s         0xffffffff
#define SRT_NX90_systime_s_systime_s         0
#define DFLT_VAL_NX90_systime_s_systime_s    0x00000000
#define DFLT_BF_VAL_NX90_systime_s_systime_s 0x00000000

/* all used bits of 'NX90_systime_s': */
#define MSK_USED_BITS_NX90_systime_s 0xffffffff

/* --------------------------------------------------------------------- */
/* Register systime_ns */
/* => Lower SYSTIME register: */
/*    To allow consistent values of systime_s and systime_ns, lower bits of systime is latched to systime_ns, when systime_s is read. */
/*    If no systime_s is read before (or at 2nd read access of systime_ns), the actual value of systime_ns is read. */
/*    This register should be dedicated to accesses via DPM. */
/*    ARM software should access systime via arm_timer_systime_ns. */
/*    xPIC software should access systime via xpic_timer_systime_ns. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_ns         0x00000004
#define Adr_NX90_systime_app_systime_ns 0xFF8016C4
#define Adr_NX90_systime_ns             0xFF8016C4
#define DFLT_VAL_NX90_systime_ns        0x00000000

#define MSK_NX90_systime_ns_systime_ns         0xffffffff
#define SRT_NX90_systime_ns_systime_ns         0
#define DFLT_VAL_NX90_systime_ns_systime_ns    0x00000000
#define DFLT_BF_VAL_NX90_systime_ns_systime_ns 0x00000000

/* all used bits of 'NX90_systime_ns': */
#define MSK_USED_BITS_NX90_systime_ns 0xffffffff

/* --------------------------------------------------------------------- */
/* Register systime_border */
/* => SYSTIME border register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_border         0x00000008
#define Adr_NX90_systime_app_systime_border 0xFF8016C8
#define Adr_NX90_systime_border             0xFF8016C8
#define DFLT_VAL_NX90_systime_border        0x3b9ac9ff

#define MSK_NX90_systime_border_systime_border         0xffffffff
#define SRT_NX90_systime_border_systime_border         0
#define DFLT_VAL_NX90_systime_border_systime_border    0x3b9ac9ff
#define DFLT_BF_VAL_NX90_systime_border_systime_border 0x3b9ac9ff

/* all used bits of 'NX90_systime_border': */
#define MSK_USED_BITS_NX90_systime_border 0xffffffff

/* --------------------------------------------------------------------- */
/* Register systime_count_value */
/* => SYSTIME count register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_systime_count_value         0x0000000C
#define Adr_NX90_systime_app_systime_count_value 0xFF8016CC
#define Adr_NX90_systime_count_value             0xFF8016CC
#define DFLT_VAL_NX90_systime_count_value        0xa0000000

#define MSK_NX90_systime_count_value_systime_count_value         0xffffffff
#define SRT_NX90_systime_count_value_systime_count_value         0
#define DFLT_VAL_NX90_systime_count_value_systime_count_value    0xa0000000
#define DFLT_BF_VAL_NX90_systime_count_value_systime_count_value 0xa0000000

/* all used bits of 'NX90_systime_count_value': */
#define MSK_USED_BITS_NX90_systime_count_value 0xffffffff


/* ===================================================================== */

/* AREA hs_irq_reg */
/* Area of mcp_app, mcp_xpic_app */

/* ===================================================================== */

#define Addr_NX90_mcp_app      0xFF8016E0
#define Addr_NX90_mcp_xpic_app 0xFF9001A0

/* --------------------------------------------------------------------- */
/* Register hs_irq_set_raw */
/* => read: hs_iq_reg value */
/*    write: hs_iq_reg set bit(s) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_set_raw          0x00000000
#define Adr_NX90_mcp_app_hs_irq_set_raw      0xFF8016E0
#define Adr_NX90_mcp_xpic_app_hs_irq_set_raw 0xFF9001A0
#define DFLT_VAL_NX90_hs_irq_set_raw         0x00000000

#define MSK_NX90_hs_irq_set_raw_hs_irq_set_bits         0xffffffff
#define SRT_NX90_hs_irq_set_raw_hs_irq_set_bits         0
#define DFLT_VAL_NX90_hs_irq_set_raw_hs_irq_set_bits    0x00000000
#define DFLT_BF_VAL_NX90_hs_irq_set_raw_hs_irq_set_bits 0x00000000

/* all used bits of 'NX90_hs_irq_set_raw': */
#define MSK_USED_BITS_NX90_hs_irq_set_raw 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hs_irq_reset_raw */
/* => read: hs_iq_reg value */
/*    write: hs_iq_reg reset bit(s) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_reset_raw          0x00000004
#define Adr_NX90_mcp_app_hs_irq_reset_raw      0xFF8016E4
#define Adr_NX90_mcp_xpic_app_hs_irq_reset_raw 0xFF9001A4
#define DFLT_VAL_NX90_hs_irq_reset_raw         0x00000000

#define MSK_NX90_hs_irq_reset_raw_hs_irq_reset_bits         0xffffffff
#define SRT_NX90_hs_irq_reset_raw_hs_irq_reset_bits         0
#define DFLT_VAL_NX90_hs_irq_reset_raw_hs_irq_reset_bits    0x00000000
#define DFLT_BF_VAL_NX90_hs_irq_reset_raw_hs_irq_reset_bits 0x00000000

/* all used bits of 'NX90_hs_irq_reset_raw': */
#define MSK_USED_BITS_NX90_hs_irq_reset_raw 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hs_irq_set_mask */
/* => read: mask value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_set_mask          0x00000008
#define Adr_NX90_mcp_app_hs_irq_set_mask      0xFF8016E8
#define Adr_NX90_mcp_xpic_app_hs_irq_set_mask 0xFF9001A8
#define DFLT_VAL_NX90_hs_irq_set_mask         0x00000000

#define MSK_NX90_hs_irq_set_mask_hs_irq_set_mask         0xffffffff
#define SRT_NX90_hs_irq_set_mask_hs_irq_set_mask         0
#define DFLT_VAL_NX90_hs_irq_set_mask_hs_irq_set_mask    0x00000000
#define DFLT_BF_VAL_NX90_hs_irq_set_mask_hs_irq_set_mask 0x00000000

/* all used bits of 'NX90_hs_irq_set_mask': */
#define MSK_USED_BITS_NX90_hs_irq_set_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hs_irq_reset_mask */
/* => read: mask value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_reset_mask          0x0000000C
#define Adr_NX90_mcp_app_hs_irq_reset_mask      0xFF8016EC
#define Adr_NX90_mcp_xpic_app_hs_irq_reset_mask 0xFF9001AC
#define DFLT_VAL_NX90_hs_irq_reset_mask         0x00000000

#define MSK_NX90_hs_irq_reset_mask_hs_irq_reset_mask         0xffffffff
#define SRT_NX90_hs_irq_reset_mask_hs_irq_reset_mask         0
#define DFLT_VAL_NX90_hs_irq_reset_mask_hs_irq_reset_mask    0x00000000
#define DFLT_BF_VAL_NX90_hs_irq_reset_mask_hs_irq_reset_mask 0x00000000

/* all used bits of 'NX90_hs_irq_reset_mask': */
#define MSK_USED_BITS_NX90_hs_irq_reset_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register hs_irq_masked */
/* => read: hs_iq_reg masked value */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_hs_irq_masked          0x00000010
#define Adr_NX90_mcp_app_hs_irq_masked      0xFF8016F0
#define Adr_NX90_mcp_xpic_app_hs_irq_masked 0xFF9001B0
#define DFLT_VAL_NX90_hs_irq_masked         0x00000000

#define MSK_NX90_hs_irq_masked_hs_irq_masked         0xffffffff
#define SRT_NX90_hs_irq_masked_hs_irq_masked         0
#define DFLT_VAL_NX90_hs_irq_masked_hs_irq_masked    0x00000000
#define DFLT_BF_VAL_NX90_hs_irq_masked_hs_irq_masked 0x00000000

/* all used bits of 'NX90_hs_irq_masked': */
#define MSK_USED_BITS_NX90_hs_irq_masked 0xffffffff


/* ===================================================================== */

/* AREA watchdog */
/* Area of wdg_app */

/* ===================================================================== */

#define Addr_NX90_wdg_app 0xFF801700

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_ctrl */
/* => netX System Watchdog Trigger Register. */
/*    The watchdog access code is generated by a pseudo random generator. It must be written correctly */
/*    for a valid write access to this register (not only for triggering e.g. also for IRQ clearing). */
/*    Note: */
/*       WDGACT signal is available as MMIO function.. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_ctrl     0x00000000
#define Adr_NX90_wdg_app_netx_sys_wdg_ctrl 0xFF801700
#define Adr_NX90_netx_sys_wdg_ctrl         0xFF801700
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl    0x00000000

#define MSK_NX90_netx_sys_wdg_ctrl_wdg_access_code               0x000fffff
#define SRT_NX90_netx_sys_wdg_ctrl_wdg_access_code               0
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_wdg_access_code          0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_wdg_access_code       0x00000000
#define MSK_NX90_netx_sys_wdg_ctrl_irq_req_watchdog              0x01000000
#define SRT_NX90_netx_sys_wdg_ctrl_irq_req_watchdog              24
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_irq_req_watchdog         0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_irq_req_watchdog      0x00000000
#define MSK_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w         0x10000000
#define SRT_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w         28
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_wdg_counter_trigger_w 0x00000000
#define MSK_NX90_netx_sys_wdg_ctrl_write_enable                  0x80000000
#define SRT_NX90_netx_sys_wdg_ctrl_write_enable                  31
#define DFLT_VAL_NX90_netx_sys_wdg_ctrl_write_enable             0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_ctrl_write_enable          0x00000000

/* all used bits of 'NX90_netx_sys_wdg_ctrl': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_ctrl 0x910fffff

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg */
/* => netX System Watchdog Register */
/*    The counter value is decremented each 10000 system clock cycles. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg     0x00000004
#define Adr_NX90_wdg_app_netx_sys_wdg 0xFF801704
#define Adr_NX90_netx_sys_wdg         0xFF801704

#define MSK_NX90_netx_sys_wdg_wdg_counter 0x0001ffff
#define SRT_NX90_netx_sys_wdg_wdg_counter 0

/* all used bits of 'NX90_netx_sys_wdg': */
#define MSK_USED_BITS_NX90_netx_sys_wdg 0x0001ffff

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_timeout */
/* => netX System Wachtdog Interrupt Timout Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_timeout     0x00000008
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_timeout 0xFF801708
#define Adr_NX90_netx_sys_wdg_irq_timeout         0xFF801708
#define DFLT_VAL_NX90_netx_sys_wdg_irq_timeout    0x00000000

#define MSK_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout         0x0000ffff
#define SRT_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_timeout_wdg_irq_timeout 0x00000000

/* all used bits of 'NX90_netx_sys_wdg_irq_timeout': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_timeout 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_res_timeout */
/* => netX System Watchdog Reset Timeout Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_res_timeout     0x0000000C
#define Adr_NX90_wdg_app_netx_sys_wdg_res_timeout 0xFF80170C
#define Adr_NX90_netx_sys_wdg_res_timeout         0xFF80170C
#define DFLT_VAL_NX90_netx_sys_wdg_res_timeout    0x00000000

#define MSK_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout         0x0000ffff
#define SRT_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout         0
#define DFLT_VAL_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_res_timeout_wdg_res_timeout 0x00000000

/* all used bits of 'NX90_netx_sys_wdg_res_timeout': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_res_timeout 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_raw */
/* => netX System Wachtdog IRQ raw register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_raw     0x00000010
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_raw 0xFF801710
#define Adr_NX90_netx_sys_wdg_irq_raw         0xFF801710
#define DFLT_VAL_NX90_netx_sys_wdg_irq_raw    0x00000000

#define MSK_NX90_netx_sys_wdg_irq_raw_wdg_res_irq         0x00000001
#define SRT_NX90_netx_sys_wdg_irq_raw_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_raw_wdg_res_irq    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_raw_wdg_res_irq 0x00000000

/* all used bits of 'NX90_netx_sys_wdg_irq_raw': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_raw 0x00000001

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_masked */
/* => netX System Wachtdog Masked IRQ register: */
/*    Read access shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_masked     0x00000014
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_masked 0xFF801714
#define Adr_NX90_netx_sys_wdg_irq_masked         0xFF801714

#define MSK_NX90_netx_sys_wdg_irq_masked_wdg_res_irq 0x00000001
#define SRT_NX90_netx_sys_wdg_irq_masked_wdg_res_irq 0

/* all used bits of 'NX90_netx_sys_wdg_irq_masked': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_masked 0x00000001

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_msk_set */
/* => netX System Wachtdog interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_msk_set     0x00000018
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_msk_set 0xFF801718
#define Adr_NX90_netx_sys_wdg_irq_msk_set         0xFF801718
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_set    0x00000000

#define MSK_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq         0x00000001
#define SRT_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_msk_set_wdg_res_irq 0x00000000

/* all used bits of 'NX90_netx_sys_wdg_irq_msk_set': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_msk_set 0x00000001

/* --------------------------------------------------------------------- */
/* Register netx_sys_wdg_irq_msk_reset */
/* => netX System Wachtdog interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_netx_sys_wdg_irq_msk_reset     0x0000001C
#define Adr_NX90_wdg_app_netx_sys_wdg_irq_msk_reset 0xFF80171C
#define Adr_NX90_netx_sys_wdg_irq_msk_reset         0xFF80171C
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_reset    0x00000000

#define MSK_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq         0x00000001
#define SRT_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq         0
#define DFLT_VAL_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq    0x00000000
#define DFLT_BF_VAL_NX90_netx_sys_wdg_irq_msk_reset_wdg_res_irq 0x00000000

/* all used bits of 'NX90_netx_sys_wdg_irq_msk_reset': */
#define MSK_USED_BITS_NX90_netx_sys_wdg_irq_msk_reset 0x00000001


/* ===================================================================== */

/* AREA trigger_irq */
/* Area of trigger_irq_app */

/* ===================================================================== */

#define Addr_NX90_trigger_irq_app 0xFF801720

/* --------------------------------------------------------------------- */
/* Register trigger_irq_cfg */
/* => Trigger IRQ configuration register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_cfg             0x00000000
#define Adr_NX90_trigger_irq_app_trigger_irq_cfg 0xFF801720
#define Adr_NX90_trigger_irq_cfg                 0xFF801720
#define DFLT_VAL_NX90_trigger_irq_cfg            0x00000000

#define MSK_NX90_trigger_irq_cfg_xc_trigger_out_polarity         0x00000003
#define SRT_NX90_trigger_irq_cfg_xc_trigger_out_polarity         0
#define DFLT_VAL_NX90_trigger_irq_cfg_xc_trigger_out_polarity    0x00000000
#define DFLT_BF_VAL_NX90_trigger_irq_cfg_xc_trigger_out_polarity 0x00000000

/* all used bits of 'NX90_trigger_irq_cfg': */
#define MSK_USED_BITS_NX90_trigger_irq_cfg 0x00000003

/* --------------------------------------------------------------------- */
/* Register trigger_irq_raw */
/* => Trigger raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_raw             0x00000004
#define Adr_NX90_trigger_irq_app_trigger_irq_raw 0xFF801724
#define Adr_NX90_trigger_irq_raw                 0xFF801724
#define DFLT_VAL_NX90_trigger_irq_raw            0x00000000

#define MSK_NX90_trigger_irq_raw_xc_trigger_out_edge         0x00000003
#define SRT_NX90_trigger_irq_raw_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_raw_xc_trigger_out_edge    0x00000000
#define DFLT_BF_VAL_NX90_trigger_irq_raw_xc_trigger_out_edge 0x00000000

/* all used bits of 'NX90_trigger_irq_raw': */
#define MSK_USED_BITS_NX90_trigger_irq_raw 0x00000003

/* --------------------------------------------------------------------- */
/* Register trigger_irq_masked */
/* => Trigger masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_masked             0x00000008
#define Adr_NX90_trigger_irq_app_trigger_irq_masked 0xFF801728
#define Adr_NX90_trigger_irq_masked                 0xFF801728

#define MSK_NX90_trigger_irq_masked_xc_trigger_out_edge 0x00000003
#define SRT_NX90_trigger_irq_masked_xc_trigger_out_edge 0

/* all used bits of 'NX90_trigger_irq_masked': */
#define MSK_USED_BITS_NX90_trigger_irq_masked 0x00000003

/* --------------------------------------------------------------------- */
/* Register trigger_irq_msk_set */
/* => Trigger IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to bod_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_msk_set             0x0000000C
#define Adr_NX90_trigger_irq_app_trigger_irq_msk_set 0xFF80172C
#define Adr_NX90_trigger_irq_msk_set                 0xFF80172C
#define DFLT_VAL_NX90_trigger_irq_msk_set            0x00000000

#define MSK_NX90_trigger_irq_msk_set_xc_trigger_out_edge         0x00000003
#define SRT_NX90_trigger_irq_msk_set_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_msk_set_xc_trigger_out_edge    0x00000000
#define DFLT_BF_VAL_NX90_trigger_irq_msk_set_xc_trigger_out_edge 0x00000000

/* all used bits of 'NX90_trigger_irq_msk_set': */
#define MSK_USED_BITS_NX90_trigger_irq_msk_set 0x00000003

/* --------------------------------------------------------------------- */
/* Register trigger_irq_msk_reset */
/* => Trigger IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_trigger_irq_msk_reset             0x00000010
#define Adr_NX90_trigger_irq_app_trigger_irq_msk_reset 0xFF801730
#define Adr_NX90_trigger_irq_msk_reset                 0xFF801730
#define DFLT_VAL_NX90_trigger_irq_msk_reset            0x00000000

#define MSK_NX90_trigger_irq_msk_reset_xc_trigger_out_edge         0x00000003
#define SRT_NX90_trigger_irq_msk_reset_xc_trigger_out_edge         0
#define DFLT_VAL_NX90_trigger_irq_msk_reset_xc_trigger_out_edge    0x00000000
#define DFLT_BF_VAL_NX90_trigger_irq_msk_reset_xc_trigger_out_edge 0x00000000

/* all used bits of 'NX90_trigger_irq_msk_reset': */
#define MSK_USED_BITS_NX90_trigger_irq_msk_reset 0x00000003


/* ===================================================================== */

/* Area of ecc_ctrl_app */

/* ===================================================================== */

#define Addr_NX90_ecc_ctrl_app 0xFF801800

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram6_ctrl */
/* => INTRAM6 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram6_ctrl          0x00000000
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram6_ctrl 0xFF801800
#define Adr_NX90_ecc_ctrl_app_intram6_ctrl              0xFF801800
#define DFLT_VAL_NX90_ecc_ctrl_app_intram6_ctrl         0x00000000

#define MSK_NX90_ecc_ctrl_app_intram6_ctrl_enable               0x00000001
#define SRT_NX90_ecc_ctrl_app_intram6_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_app_intram6_ctrl_enable          0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_intram6_ctrl_enable       0x00000000
#define MSK_NX90_ecc_ctrl_app_intram6_ctrl_syndrome_inv         0x000000fe
#define SRT_NX90_ecc_ctrl_app_intram6_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_app_intram6_ctrl_syndrome_inv    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_intram6_ctrl_syndrome_inv 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_intram6_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram6_ctrl 0x000000ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram7_ctrl */
/* => INTRAM7 syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram7_ctrl          0x00000004
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram7_ctrl 0xFF801804
#define Adr_NX90_ecc_ctrl_app_intram7_ctrl              0xFF801804
#define DFLT_VAL_NX90_ecc_ctrl_app_intram7_ctrl         0x00000000

#define MSK_NX90_ecc_ctrl_app_intram7_ctrl_enable               0x00000001
#define SRT_NX90_ecc_ctrl_app_intram7_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_app_intram7_ctrl_enable          0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_intram7_ctrl_enable       0x00000000
#define MSK_NX90_ecc_ctrl_app_intram7_ctrl_syndrome_inv         0x000000fe
#define SRT_NX90_ecc_ctrl_app_intram7_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_app_intram7_ctrl_syndrome_inv    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_intram7_ctrl_syndrome_inv 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_intram7_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram7_ctrl 0x000000ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_pram_ctrl */
/* => XPIC1_PRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_pram_ctrl          0x00000008
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_pram_ctrl 0xFF801808
#define Adr_NX90_ecc_ctrl_app_xpic1_pram_ctrl              0xFF801808
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_pram_ctrl         0x00000000

#define MSK_NX90_ecc_ctrl_app_xpic1_pram_ctrl_enable               0x00000001
#define SRT_NX90_ecc_ctrl_app_xpic1_pram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_pram_ctrl_enable          0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_xpic1_pram_ctrl_enable       0x00000000
#define MSK_NX90_ecc_ctrl_app_xpic1_pram_ctrl_syndrome_inv         0x000000fe
#define SRT_NX90_ecc_ctrl_app_xpic1_pram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_pram_ctrl_syndrome_inv    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_xpic1_pram_ctrl_syndrome_inv 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_pram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_pram_ctrl 0x000000ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_dram_ctrl */
/* => XPIC1_DRAM syndrome manipulation register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_dram_ctrl          0x0000000C
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_dram_ctrl 0xFF80180C
#define Adr_NX90_ecc_ctrl_app_xpic1_dram_ctrl              0xFF80180C
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_dram_ctrl         0x00000000

#define MSK_NX90_ecc_ctrl_app_xpic1_dram_ctrl_enable               0x00000001
#define SRT_NX90_ecc_ctrl_app_xpic1_dram_ctrl_enable               0
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_dram_ctrl_enable          0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_xpic1_dram_ctrl_enable       0x00000000
#define MSK_NX90_ecc_ctrl_app_xpic1_dram_ctrl_syndrome_inv         0x0000003e
#define SRT_NX90_ecc_ctrl_app_xpic1_dram_ctrl_syndrome_inv         1
#define DFLT_VAL_NX90_ecc_ctrl_app_xpic1_dram_ctrl_syndrome_inv    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_xpic1_dram_ctrl_syndrome_inv 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_dram_ctrl': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_dram_ctrl 0x0000003f

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram6_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram6_addr_sbe          0x00000010
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram6_addr_sbe 0xFF801810
#define Adr_NX90_ecc_ctrl_app_intram6_addr_sbe              0xFF801810

#define MSK_NX90_ecc_ctrl_app_intram6_addr_sbe_address  0x00001fff
#define SRT_NX90_ecc_ctrl_app_intram6_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_app_intram6_addr_sbe_add_addr 0x0007e000
#define SRT_NX90_ecc_ctrl_app_intram6_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_app_intram6_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram6_addr_sbe 0x0007ffff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram7_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram7_addr_sbe          0x00000014
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram7_addr_sbe 0xFF801814
#define Adr_NX90_ecc_ctrl_app_intram7_addr_sbe              0xFF801814

#define MSK_NX90_ecc_ctrl_app_intram7_addr_sbe_address  0x00001fff
#define SRT_NX90_ecc_ctrl_app_intram7_addr_sbe_address  0
#define MSK_NX90_ecc_ctrl_app_intram7_addr_sbe_add_addr 0x0007e000
#define SRT_NX90_ecc_ctrl_app_intram7_addr_sbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_app_intram7_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram7_addr_sbe 0x0007ffff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_pram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_pram_addr_sbe          0x00000018
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_pram_addr_sbe 0xFF801818
#define Adr_NX90_ecc_ctrl_app_xpic1_pram_addr_sbe              0xFF801818

#define MSK_NX90_ecc_ctrl_app_xpic1_pram_addr_sbe_address 0x000007ff
#define SRT_NX90_ecc_ctrl_app_xpic1_pram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_pram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_pram_addr_sbe 0x000007ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_dram_addr_sbe */
/* => RAM Address of ECC single bit error (SBE): */
/*    This register logs the RAM address where first ECC SBE occured. */
/*    This first SBE address will be stored (even in case of further SBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_dram_addr_sbe          0x0000001C
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_dram_addr_sbe 0xFF80181C
#define Adr_NX90_ecc_ctrl_app_xpic1_dram_addr_sbe              0xFF80181C

#define MSK_NX90_ecc_ctrl_app_xpic1_dram_addr_sbe_address 0x000007ff
#define SRT_NX90_ecc_ctrl_app_xpic1_dram_addr_sbe_address 0

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_dram_addr_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_dram_addr_sbe 0x000007ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram6_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram6_addr_dbe          0x00000020
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram6_addr_dbe 0xFF801820
#define Adr_NX90_ecc_ctrl_app_intram6_addr_dbe              0xFF801820

#define MSK_NX90_ecc_ctrl_app_intram6_addr_dbe_address  0x00001fff
#define SRT_NX90_ecc_ctrl_app_intram6_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_app_intram6_addr_dbe_add_addr 0x0007e000
#define SRT_NX90_ecc_ctrl_app_intram6_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_app_intram6_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram6_addr_dbe 0x0007ffff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_intram7_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_intram7_addr_dbe          0x00000024
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_intram7_addr_dbe 0xFF801824
#define Adr_NX90_ecc_ctrl_app_intram7_addr_dbe              0xFF801824

#define MSK_NX90_ecc_ctrl_app_intram7_addr_dbe_address  0x00001fff
#define SRT_NX90_ecc_ctrl_app_intram7_addr_dbe_address  0
#define MSK_NX90_ecc_ctrl_app_intram7_addr_dbe_add_addr 0x0007e000
#define SRT_NX90_ecc_ctrl_app_intram7_addr_dbe_add_addr 13

/* all used bits of 'NX90_ecc_ctrl_app_intram7_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_intram7_addr_dbe 0x0007ffff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_pram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_pram_addr_dbe          0x00000028
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_pram_addr_dbe 0xFF801828
#define Adr_NX90_ecc_ctrl_app_xpic1_pram_addr_dbe              0xFF801828

#define MSK_NX90_ecc_ctrl_app_xpic1_pram_addr_dbe_address 0x000007ff
#define SRT_NX90_ecc_ctrl_app_xpic1_pram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_pram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_pram_addr_dbe 0x000007ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_xpic1_dram_addr_dbe */
/* => RAM Address of ECC single bit error (DBE): */
/*    This register logs the RAM address where first ECC DBE occured. */
/*    This first DBE address will be stored (even in case of further DBEs) */
/*    until the appropriate bit in status_sbe register was cleared. */
/*    Note1: Not all RAM ECCs support error address logging, e.g. dual-port RAMs */
/*    Note2: This is the real RAM address, i.e. a 32-bit address except at xMAC 64-bit RAMs */
/*    or RAMs that are not directly accessible by CPU. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_xpic1_dram_addr_dbe          0x0000002C
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_xpic1_dram_addr_dbe 0xFF80182C
#define Adr_NX90_ecc_ctrl_app_xpic1_dram_addr_dbe              0xFF80182C

#define MSK_NX90_ecc_ctrl_app_xpic1_dram_addr_dbe_address 0x000007ff
#define SRT_NX90_ecc_ctrl_app_xpic1_dram_addr_dbe_address 0

/* all used bits of 'NX90_ecc_ctrl_app_xpic1_dram_addr_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_xpic1_dram_addr_dbe 0x000007ff

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_status_sbe */
/* => ECC status SBE: */
/*    This register collects single bit error (SBE) status information. */
/*    In case of ECC SBE, a bit in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_status_sbe          0x00000030
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_status_sbe 0xFF801830
#define Adr_NX90_ecc_ctrl_app_status_sbe              0xFF801830
#define DFLT_VAL_NX90_ecc_ctrl_app_status_sbe         0x00000000

#define MSK_NX90_ecc_ctrl_app_status_sbe_intram6            0x00000001
#define SRT_NX90_ecc_ctrl_app_status_sbe_intram6            0
#define DFLT_VAL_NX90_ecc_ctrl_app_status_sbe_intram6       0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_sbe_intram6    0x00000000
#define MSK_NX90_ecc_ctrl_app_status_sbe_intram7            0x00000002
#define SRT_NX90_ecc_ctrl_app_status_sbe_intram7            1
#define DFLT_VAL_NX90_ecc_ctrl_app_status_sbe_intram7       0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_sbe_intram7    0x00000000
#define MSK_NX90_ecc_ctrl_app_status_sbe_xpic1_pram         0x00000004
#define SRT_NX90_ecc_ctrl_app_status_sbe_xpic1_pram         2
#define DFLT_VAL_NX90_ecc_ctrl_app_status_sbe_xpic1_pram    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_sbe_xpic1_pram 0x00000000
#define MSK_NX90_ecc_ctrl_app_status_sbe_xpic1_dram         0x00000008
#define SRT_NX90_ecc_ctrl_app_status_sbe_xpic1_dram         3
#define DFLT_VAL_NX90_ecc_ctrl_app_status_sbe_xpic1_dram    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_sbe_xpic1_dram 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_status_sbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_status_sbe 0x0000000f

/* --------------------------------------------------------------------- */
/* Register ecc_ctrl_app_status_dbe */
/* => ECC status DBE: */
/*    This register collects double bit error (DBE) status information. */
/*    In case of ECC DBE, a bit of the appropriate RAM in this register will be set. */
/*    Bits can be reset by writing '1' to the apprpriate bit position (write to clear). */
/*    If a SBE or DBE bit is set, IRQ signal will be asserted. */
/*    Note: No mask register is required, as error correction can be enabled for each RAM separately. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_ecc_ctrl_app_status_dbe          0x00000034
#define Adr_NX90_ecc_ctrl_app_ecc_ctrl_app_status_dbe 0xFF801834
#define Adr_NX90_ecc_ctrl_app_status_dbe              0xFF801834
#define DFLT_VAL_NX90_ecc_ctrl_app_status_dbe         0x00000000

#define MSK_NX90_ecc_ctrl_app_status_dbe_intram6            0x00000001
#define SRT_NX90_ecc_ctrl_app_status_dbe_intram6            0
#define DFLT_VAL_NX90_ecc_ctrl_app_status_dbe_intram6       0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_dbe_intram6    0x00000000
#define MSK_NX90_ecc_ctrl_app_status_dbe_intram7            0x00000002
#define SRT_NX90_ecc_ctrl_app_status_dbe_intram7            1
#define DFLT_VAL_NX90_ecc_ctrl_app_status_dbe_intram7       0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_dbe_intram7    0x00000000
#define MSK_NX90_ecc_ctrl_app_status_dbe_xpic1_pram         0x00000004
#define SRT_NX90_ecc_ctrl_app_status_dbe_xpic1_pram         2
#define DFLT_VAL_NX90_ecc_ctrl_app_status_dbe_xpic1_pram    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_dbe_xpic1_pram 0x00000000
#define MSK_NX90_ecc_ctrl_app_status_dbe_xpic1_dram         0x00000008
#define SRT_NX90_ecc_ctrl_app_status_dbe_xpic1_dram         3
#define DFLT_VAL_NX90_ecc_ctrl_app_status_dbe_xpic1_dram    0x00000000
#define DFLT_BF_VAL_NX90_ecc_ctrl_app_status_dbe_xpic1_dram 0x00000000

/* all used bits of 'NX90_ecc_ctrl_app_status_dbe': */
#define MSK_USED_BITS_NX90_ecc_ctrl_app_status_dbe 0x0000000f


/* ===================================================================== */

/* AREA endat */
/* Area of endat0_app, endat1_app */

/* ===================================================================== */

#define Addr_NX90_endat0_app 0xFF802000
#define Addr_NX90_endat1_app 0xFF802040

/* --------------------------------------------------------------------- */
/* Register endat_send */
/* => Send register */
/*    The send register contains data to be transmitted to the EnDat encoder. */
/*    Mode command */
/*    MRS code/address/port address (depends on the mode command) */
/*    Parameters/instructions (depends on the mode command) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_send        0x00000000
#define Adr_NX90_endat0_app_endat_send 0xFF802000
#define Adr_NX90_endat1_app_endat_send 0xFF802040
#define DFLT_VAL_NX90_endat_send       0x07000000

#define MSK_NX90_endat_send_byte1         0x000000ff
#define SRT_NX90_endat_send_byte1         0
#define DFLT_VAL_NX90_endat_send_byte1    0x00000000
#define DFLT_BF_VAL_NX90_endat_send_byte1 0x00000000
#define MSK_NX90_endat_send_byte2         0x0000ff00
#define SRT_NX90_endat_send_byte2         8
#define DFLT_VAL_NX90_endat_send_byte2    0x00000000
#define DFLT_BF_VAL_NX90_endat_send_byte2 0x00000000
#define MSK_NX90_endat_send_byte3         0x00ff0000
#define SRT_NX90_endat_send_byte3         16
#define DFLT_VAL_NX90_endat_send_byte3    0x00000000
#define DFLT_BF_VAL_NX90_endat_send_byte3 0x00000000
#define MSK_NX90_endat_send_byte4         0x3f000000
#define SRT_NX90_endat_send_byte4         24
#define DFLT_VAL_NX90_endat_send_byte4    0x07000000
#define DFLT_BF_VAL_NX90_endat_send_byte4 0x00000007

/* all used bits of 'NX90_endat_send': */
#define MSK_USED_BITS_NX90_endat_send 0x3fffffff

/* --------------------------------------------------------------------- */
/* Register endat_receive1_0 */
/* => Receive register 1 */
/*    Depending on the transmitted type 2.1 mode command, receive register 1 contains different data. */
/*    With EnDat type 2.2 mode commands and with SSI, the position value is always entered into receive-Reg 1. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive1_0        0x00000004
#define Adr_NX90_endat0_app_endat_receive1_0 0xFF802004
#define Adr_NX90_endat1_app_endat_receive1_0 0xFF802044

#define MSK_NX90_endat_receive1_0_byte1 0x000000ff
#define SRT_NX90_endat_receive1_0_byte1 0
#define MSK_NX90_endat_receive1_0_byte2 0x0000ff00
#define SRT_NX90_endat_receive1_0_byte2 8
#define MSK_NX90_endat_receive1_0_byte3 0x00ff0000
#define SRT_NX90_endat_receive1_0_byte3 16
#define MSK_NX90_endat_receive1_0_byte4 0xff000000
#define SRT_NX90_endat_receive1_0_byte4 24

/* all used bits of 'NX90_endat_receive1_0': */
#define MSK_USED_BITS_NX90_endat_receive1_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register endat_receive1_1 */
/* => Receive register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive1_1        0x00000008
#define Adr_NX90_endat0_app_endat_receive1_1 0xFF802008
#define Adr_NX90_endat1_app_endat_receive1_1 0xFF802048

#define MSK_NX90_endat_receive1_1_byte5 0x000000ff
#define SRT_NX90_endat_receive1_1_byte5 0
#define MSK_NX90_endat_receive1_1_byte6 0x0000ff00
#define SRT_NX90_endat_receive1_1_byte6 8
#define MSK_NX90_endat_receive1_1_byte7 0x00ff0000
#define SRT_NX90_endat_receive1_1_byte7 16

/* all used bits of 'NX90_endat_receive1_1': */
#define MSK_USED_BITS_NX90_endat_receive1_1 0x00ffffff

/* --------------------------------------------------------------------- */
/* Register endat_receive2 */
/* => Receive register 2 */
/*    If a type 2.2 mode command was sent, receive register 2 will contain the contents of additional information 2 and its CRC. */
/*    This data is to be interpreted in accordance with the EnDat Interface Description. */
/*    In SSI protocol mode with double-word transmission, the redundant position value is stored here (right-aligned). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive2        0x0000000C
#define Adr_NX90_endat0_app_endat_receive2 0xFF80200C
#define Adr_NX90_endat1_app_endat_receive2 0xFF80204C

#define MSK_NX90_endat_receive2_byte1 0x000000ff
#define SRT_NX90_endat_receive2_byte1 0
#define MSK_NX90_endat_receive2_byte2 0x0000ff00
#define SRT_NX90_endat_receive2_byte2 8
#define MSK_NX90_endat_receive2_byte3 0x00ff0000
#define SRT_NX90_endat_receive2_byte3 16
#define MSK_NX90_endat_receive2_byte4 0xff000000
#define SRT_NX90_endat_receive2_byte4 24

/* all used bits of 'NX90_endat_receive2': */
#define MSK_USED_BITS_NX90_endat_receive2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register endat_receive3 */
/* => Receive register 3 */
/*    If a type 2.2 mode command was sent, receive register 3 will contain the contents of additional information 1 and its CRC. */
/*    This data is to be interpreted in accordance with the EnDat Interface Description. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive3        0x00000010
#define Adr_NX90_endat0_app_endat_receive3 0xFF802010
#define Adr_NX90_endat1_app_endat_receive3 0xFF802050

#define MSK_NX90_endat_receive3_byte1 0x000000ff
#define SRT_NX90_endat_receive3_byte1 0
#define MSK_NX90_endat_receive3_byte2 0x0000ff00
#define SRT_NX90_endat_receive3_byte2 8
#define MSK_NX90_endat_receive3_byte3 0x00ff0000
#define SRT_NX90_endat_receive3_byte3 16
#define MSK_NX90_endat_receive3_byte4 0xff000000
#define SRT_NX90_endat_receive3_byte4 24

/* all used bits of 'NX90_endat_receive3': */
#define MSK_USED_BITS_NX90_endat_receive3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register endat_conf1 */
/* => Configuration register 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf1        0x00000014
#define Adr_NX90_endat0_app_endat_conf1 0xFF802014
#define Adr_NX90_endat1_app_endat_conf1 0xFF802054
#define DFLT_VAL_NX90_endat_conf1       0x00000df0

#define MSK_NX90_endat_conf1_hw_strobe                   0x00000001
#define SRT_NX90_endat_conf1_hw_strobe                   0
#define DFLT_VAL_NX90_endat_conf1_hw_strobe              0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_hw_strobe           0x00000000
#define MSK_NX90_endat_conf1_uncond_transfer             0x00000002
#define SRT_NX90_endat_conf1_uncond_transfer             1
#define DFLT_VAL_NX90_endat_conf1_uncond_transfer        0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_uncond_transfer     0x00000000
#define MSK_NX90_endat_conf1_endat_cont_clk_mode         0x00000004
#define SRT_NX90_endat_conf1_endat_cont_clk_mode         2
#define DFLT_VAL_NX90_endat_conf1_endat_cont_clk_mode    0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_endat_cont_clk_mode 0x00000000
#define MSK_NX90_endat_conf1_f_tclk                      0x000000f0
#define SRT_NX90_endat_conf1_f_tclk                      4
#define DFLT_VAL_NX90_endat_conf1_f_tclk                 0x000000f0
#define DFLT_BF_VAL_NX90_endat_conf1_f_tclk              0x0000000f
#define MSK_NX90_endat_conf1_data_word_len               0x00003f00
#define SRT_NX90_endat_conf1_data_word_len               8
#define DFLT_VAL_NX90_endat_conf1_data_word_len          0x00000d00
#define DFLT_BF_VAL_NX90_endat_conf1_data_word_len       0x0000000d
#define MSK_NX90_endat_conf1_reset_window                0x00004000
#define SRT_NX90_endat_conf1_reset_window                14
#define DFLT_VAL_NX90_endat_conf1_reset_window           0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_reset_window        0x00000000
#define MSK_NX90_endat_conf1_auto_reset                  0x00008000
#define SRT_NX90_endat_conf1_auto_reset                  15
#define DFLT_VAL_NX90_endat_conf1_auto_reset             0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_auto_reset          0x00000000
#define MSK_NX90_endat_conf1_cable_prop_time             0x00ff0000
#define SRT_NX90_endat_conf1_cable_prop_time             16
#define DFLT_VAL_NX90_endat_conf1_cable_prop_time        0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_cable_prop_time     0x00000000
#define MSK_NX90_endat_conf1_delay_comp                  0x01000000
#define SRT_NX90_endat_conf1_delay_comp                  24
#define DFLT_VAL_NX90_endat_conf1_delay_comp             0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_delay_comp          0x00000000
#define MSK_NX90_endat_conf1_f_sys                       0x1c000000
#define SRT_NX90_endat_conf1_f_sys                       26
#define DFLT_VAL_NX90_endat_conf1_f_sys                  0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_f_sys               0x00000000
#define MSK_NX90_endat_conf1_ic_reset                    0x20000000
#define SRT_NX90_endat_conf1_ic_reset                    29
#define DFLT_VAL_NX90_endat_conf1_ic_reset               0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_ic_reset            0x00000000
#define MSK_NX90_endat_conf1_endat_ssi                   0xc0000000
#define SRT_NX90_endat_conf1_endat_ssi                   30
#define DFLT_VAL_NX90_endat_conf1_endat_ssi              0x00000000
#define DFLT_BF_VAL_NX90_endat_conf1_endat_ssi           0x00000000

/* all used bits of 'NX90_endat_conf1': */
#define MSK_USED_BITS_NX90_endat_conf1 0xfdfffff7

/* --------------------------------------------------------------------- */
/* Register endat_conf2 */
/* => Configuration register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf2        0x00000018
#define Adr_NX90_endat0_app_endat_conf2 0xFF802018
#define Adr_NX90_endat1_app_endat_conf2 0xFF802058
#define DFLT_VAL_NX90_endat_conf2       0x00040000

#define MSK_NX90_endat_conf2_timer_for_sampling_rate         0x000000ff
#define SRT_NX90_endat_conf2_timer_for_sampling_rate         0
#define DFLT_VAL_NX90_endat_conf2_timer_for_sampling_rate    0x00000000
#define DFLT_BF_VAL_NX90_endat_conf2_timer_for_sampling_rate 0x00000000
#define MSK_NX90_endat_conf2_watchdog                        0x0000ff00
#define SRT_NX90_endat_conf2_watchdog                        8
#define DFLT_VAL_NX90_endat_conf2_watchdog                   0x00000000
#define DFLT_BF_VAL_NX90_endat_conf2_watchdog                0x00000000
#define MSK_NX90_endat_conf2_t_st                            0x00070000
#define SRT_NX90_endat_conf2_t_st                            16
#define DFLT_VAL_NX90_endat_conf2_t_st                       0x00040000
#define DFLT_BF_VAL_NX90_endat_conf2_t_st                    0x00000004
#define MSK_NX90_endat_conf2_filter                          0x00380000
#define SRT_NX90_endat_conf2_filter                          19
#define DFLT_VAL_NX90_endat_conf2_filter                     0x00000000
#define DFLT_BF_VAL_NX90_endat_conf2_filter                  0x00000000
#define MSK_NX90_endat_conf2_rtm                             0x00400000
#define SRT_NX90_endat_conf2_rtm                             22
#define DFLT_VAL_NX90_endat_conf2_rtm                        0x00000000
#define DFLT_BF_VAL_NX90_endat_conf2_rtm                     0x00000000
#define MSK_NX90_endat_conf2_hw_strobe_delay                 0xff000000
#define SRT_NX90_endat_conf2_hw_strobe_delay                 24
#define DFLT_VAL_NX90_endat_conf2_hw_strobe_delay            0x00000000
#define DFLT_BF_VAL_NX90_endat_conf2_hw_strobe_delay         0x00000000

/* all used bits of 'NX90_endat_conf2': */
#define MSK_USED_BITS_NX90_endat_conf2 0xff7fffff

/* --------------------------------------------------------------------- */
/* Register endat_conf3 */
/* => Configuration register 3 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_conf3        0x0000001C
#define Adr_NX90_endat0_app_endat_conf3 0xFF80201C
#define Adr_NX90_endat1_app_endat_conf3 0xFF80205C
#define DFLT_VAL_NX90_endat_conf3       0x000000cc

#define MSK_NX90_endat_conf3_parity                 0x00000001
#define SRT_NX90_endat_conf3_parity                 0
#define DFLT_VAL_NX90_endat_conf3_parity            0x00000000
#define DFLT_BF_VAL_NX90_endat_conf3_parity         0x00000000
#define MSK_NX90_endat_conf3_format                 0x00000002
#define SRT_NX90_endat_conf3_format                 1
#define DFLT_VAL_NX90_endat_conf3_format            0x00000000
#define DFLT_BF_VAL_NX90_endat_conf3_format         0x00000000
#define MSK_NX90_endat_conf3_gray_to_binary         0x00000004
#define SRT_NX90_endat_conf3_gray_to_binary         2
#define DFLT_VAL_NX90_endat_conf3_gray_to_binary    0x00000004
#define DFLT_BF_VAL_NX90_endat_conf3_gray_to_binary 0x00000001
#define MSK_NX90_endat_conf3_singleturn_res         0x000000f8
#define SRT_NX90_endat_conf3_singleturn_res         3
#define DFLT_VAL_NX90_endat_conf3_singleturn_res    0x000000c8
#define DFLT_BF_VAL_NX90_endat_conf3_singleturn_res 0x00000019
#define MSK_NX90_endat_conf3_dw                     0x00000100
#define SRT_NX90_endat_conf3_dw                     8
#define DFLT_VAL_NX90_endat_conf3_dw                0x00000000
#define DFLT_BF_VAL_NX90_endat_conf3_dw             0x00000000
#define MSK_NX90_endat_conf3_speed                  0x00008000
#define SRT_NX90_endat_conf3_speed                  15
#define DFLT_VAL_NX90_endat_conf3_speed             0x00000000
#define DFLT_BF_VAL_NX90_endat_conf3_speed          0x00000000

/* all used bits of 'NX90_endat_conf3': */
#define MSK_USED_BITS_NX90_endat_conf3 0x000081ff

/* --------------------------------------------------------------------- */
/* Register endat_stat */
/* => Status register */
/*    The status bits are created by the sequencing controller of the interface component, as required. */
/*    Status information remains set until it is reset by the application. */
/*    The application can selectively reset status information with a write command. */
/*    This occurs by writing 1 to the selected bits. In the event of concurrent access, the internal sequencing controller has priority. */
/*    This ensures that status information is not 'lost'. */
/*    The status bits (15:11) are only valid when additional information 1 or 2 has been received. */
/*    Note on the application: */
/*    The status register should be read after each data transmission. It provides information about validity of the data contained in the receive */
/* registers. */
/*    The status bits must be reset in order that the internal sequencing controller can recognize a renewed setting of the status bits. */
/*    Note: Each bit (except for LZM, LZK, Ready for Strobe) can trigger an interrupt (output: INT1). */
/*    Masking is performed with the interrupt mask register. */
/*    If a bit that has been set (and thus has triggered an interrupt) is reset, the INT1 output changes from low to three-state if no other bit has */
/* triggered an interrupt. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_stat        0x00000020
#define Adr_NX90_endat0_app_endat_stat 0xFF802020
#define Adr_NX90_endat1_app_endat_stat 0xFF802060
#define DFLT_VAL_NX90_endat_stat       0x40000400

#define MSK_NX90_endat_stat_receive1_reg                  0x00000001
#define SRT_NX90_endat_stat_receive1_reg                  0
#define DFLT_VAL_NX90_endat_stat_receive1_reg             0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_receive1_reg          0x00000000
#define MSK_NX90_endat_stat_error1                        0x00000002
#define SRT_NX90_endat_stat_error1                        1
#define DFLT_VAL_NX90_endat_stat_error1                   0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_error1                0x00000000
#define MSK_NX90_endat_stat_crcpw_parity                  0x00000004
#define SRT_NX90_endat_stat_crcpw_parity                  2
#define DFLT_VAL_NX90_endat_stat_crcpw_parity             0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_crcpw_parity          0x00000000
#define MSK_NX90_endat_stat_f_type1                       0x00000008
#define SRT_NX90_endat_stat_f_type1                       3
#define DFLT_VAL_NX90_endat_stat_f_type1                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_f_type1               0x00000000
#define MSK_NX90_endat_stat_f_type2                       0x00000010
#define SRT_NX90_endat_stat_f_type2                       4
#define DFLT_VAL_NX90_endat_stat_f_type2                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_f_type2               0x00000000
#define MSK_NX90_endat_stat_mrs_adr                       0x00000020
#define SRT_NX90_endat_stat_mrs_adr                       5
#define DFLT_VAL_NX90_endat_stat_mrs_adr                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_mrs_adr               0x00000000
#define MSK_NX90_endat_stat_ir6                           0x00000040
#define SRT_NX90_endat_stat_ir6                           6
#define DFLT_VAL_NX90_endat_stat_ir6                      0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_ir6                   0x00000000
#define MSK_NX90_endat_stat_ir7                           0x00000080
#define SRT_NX90_endat_stat_ir7                           7
#define DFLT_VAL_NX90_endat_stat_ir7                      0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_ir7                   0x00000000
#define MSK_NX90_endat_stat_receive2_reg                  0x00000100
#define SRT_NX90_endat_stat_receive2_reg                  8
#define DFLT_VAL_NX90_endat_stat_receive2_reg             0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_receive2_reg          0x00000000
#define MSK_NX90_endat_stat_receive3_reg                  0x00000200
#define SRT_NX90_endat_stat_receive3_reg                  9
#define DFLT_VAL_NX90_endat_stat_receive3_reg             0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_receive3_reg          0x00000000
#define MSK_NX90_endat_stat_error2                        0x00000400
#define SRT_NX90_endat_stat_error2                        10
#define DFLT_VAL_NX90_endat_stat_error2                   0x00000400
#define DFLT_BF_VAL_NX90_endat_stat_error2                0x00000001
#define MSK_NX90_endat_stat_crc_zi1                       0x00000800
#define SRT_NX90_endat_stat_crc_zi1                       11
#define DFLT_VAL_NX90_endat_stat_crc_zi1                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_crc_zi1               0x00000000
#define MSK_NX90_endat_stat_crc_zi2                       0x00001000
#define SRT_NX90_endat_stat_crc_zi2                       12
#define DFLT_VAL_NX90_endat_stat_crc_zi2                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_crc_zi2               0x00000000
#define MSK_NX90_endat_stat_busy                          0x00002000
#define SRT_NX90_endat_stat_busy                          13
#define DFLT_VAL_NX90_endat_stat_busy                     0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_busy                  0x00000000
#define MSK_NX90_endat_stat_rm                            0x00004000
#define SRT_NX90_endat_stat_rm                            14
#define DFLT_VAL_NX90_endat_stat_rm                       0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_rm                    0x00000000
#define MSK_NX90_endat_stat_wrn                           0x00008000
#define SRT_NX90_endat_stat_wrn                           15
#define DFLT_VAL_NX90_endat_stat_wrn                      0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_wrn                   0x00000000
#define MSK_NX90_endat_stat_spike                         0x00010000
#define SRT_NX90_endat_stat_spike                         16
#define DFLT_VAL_NX90_endat_stat_spike                    0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_spike                 0x00000000
#define MSK_NX90_endat_stat_watchdog                      0x00020000
#define SRT_NX90_endat_stat_watchdog                      17
#define DFLT_VAL_NX90_endat_stat_watchdog                 0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_watchdog              0x00000000
#define MSK_NX90_endat_stat_f_type3                       0x00040000
#define SRT_NX90_endat_stat_f_type3                       18
#define DFLT_VAL_NX90_endat_stat_f_type3                  0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_f_type3               0x00000000
#define MSK_NX90_endat_stat_delay_comp                    0x00400000
#define SRT_NX90_endat_stat_delay_comp                    22
#define DFLT_VAL_NX90_endat_stat_delay_comp               0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_delay_comp            0x00000000
#define MSK_NX90_endat_stat_prop_time_measurement         0x00800000
#define SRT_NX90_endat_stat_prop_time_measurement         23
#define DFLT_VAL_NX90_endat_stat_prop_time_measurement    0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_prop_time_measurement 0x00000000
#define MSK_NX90_endat_stat_rtm_start                     0x08000000
#define SRT_NX90_endat_stat_rtm_start                     27
#define DFLT_VAL_NX90_endat_stat_rtm_start                0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_rtm_start             0x00000000
#define MSK_NX90_endat_stat_rtm_stop                      0x10000000
#define SRT_NX90_endat_stat_rtm_stop                      28
#define DFLT_VAL_NX90_endat_stat_rtm_stop                 0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_rtm_stop              0x00000000
#define MSK_NX90_endat_stat_speed_ready                   0x20000000
#define SRT_NX90_endat_stat_speed_ready                   29
#define DFLT_VAL_NX90_endat_stat_speed_ready              0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_speed_ready           0x00000000
#define MSK_NX90_endat_stat_ready_for_strobe              0x40000000
#define SRT_NX90_endat_stat_ready_for_strobe              30
#define DFLT_VAL_NX90_endat_stat_ready_for_strobe         0x40000000
#define DFLT_BF_VAL_NX90_endat_stat_ready_for_strobe      0x00000001
#define MSK_NX90_endat_stat_ready                         0x80000000
#define SRT_NX90_endat_stat_ready                         31
#define DFLT_VAL_NX90_endat_stat_ready                    0x00000000
#define DFLT_BF_VAL_NX90_endat_stat_ready                 0x00000000

/* all used bits of 'NX90_endat_stat': */
#define MSK_USED_BITS_NX90_endat_stat 0xf8c7ffff

/* --------------------------------------------------------------------- */
/* Register endat_int */
/* => Interrupt mask */
/*    The interrupt mask register is for the masking of the status registers interrupt sources. */
/*    All bits shown in the status register (except for LZM, LZK, Ready for Strobe) can generate an interrupt. */
/*    The bit assignments of the interrupt mask register are identical to those of the status register. */
/*    An interrupt is allowed by setting the corresponding bit to 1. */
/*    The INT output changes from three-state to low. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_int        0x00000024
#define Adr_NX90_endat0_app_endat_int 0xFF802024
#define Adr_NX90_endat1_app_endat_int 0xFF802064
#define DFLT_VAL_NX90_endat_int       0x00000000

#define MSK_NX90_endat_int_receive1_reg         0x00000001
#define SRT_NX90_endat_int_receive1_reg         0
#define DFLT_VAL_NX90_endat_int_receive1_reg    0x00000000
#define DFLT_BF_VAL_NX90_endat_int_receive1_reg 0x00000000
#define MSK_NX90_endat_int_error1               0x00000002
#define SRT_NX90_endat_int_error1               1
#define DFLT_VAL_NX90_endat_int_error1          0x00000000
#define DFLT_BF_VAL_NX90_endat_int_error1       0x00000000
#define MSK_NX90_endat_int_crcpw_parity         0x00000004
#define SRT_NX90_endat_int_crcpw_parity         2
#define DFLT_VAL_NX90_endat_int_crcpw_parity    0x00000000
#define DFLT_BF_VAL_NX90_endat_int_crcpw_parity 0x00000000
#define MSK_NX90_endat_int_f_type1              0x00000008
#define SRT_NX90_endat_int_f_type1              3
#define DFLT_VAL_NX90_endat_int_f_type1         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_f_type1      0x00000000
#define MSK_NX90_endat_int_f_type2              0x00000010
#define SRT_NX90_endat_int_f_type2              4
#define DFLT_VAL_NX90_endat_int_f_type2         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_f_type2      0x00000000
#define MSK_NX90_endat_int_mrs_adr              0x00000020
#define SRT_NX90_endat_int_mrs_adr              5
#define DFLT_VAL_NX90_endat_int_mrs_adr         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_mrs_adr      0x00000000
#define MSK_NX90_endat_int_ir6                  0x00000040
#define SRT_NX90_endat_int_ir6                  6
#define DFLT_VAL_NX90_endat_int_ir6             0x00000000
#define DFLT_BF_VAL_NX90_endat_int_ir6          0x00000000
#define MSK_NX90_endat_int_ir7                  0x00000080
#define SRT_NX90_endat_int_ir7                  7
#define DFLT_VAL_NX90_endat_int_ir7             0x00000000
#define DFLT_BF_VAL_NX90_endat_int_ir7          0x00000000
#define MSK_NX90_endat_int_receive2_reg         0x00000100
#define SRT_NX90_endat_int_receive2_reg         8
#define DFLT_VAL_NX90_endat_int_receive2_reg    0x00000000
#define DFLT_BF_VAL_NX90_endat_int_receive2_reg 0x00000000
#define MSK_NX90_endat_int_receive3_reg         0x00000200
#define SRT_NX90_endat_int_receive3_reg         9
#define DFLT_VAL_NX90_endat_int_receive3_reg    0x00000000
#define DFLT_BF_VAL_NX90_endat_int_receive3_reg 0x00000000
#define MSK_NX90_endat_int_error2               0x00000400
#define SRT_NX90_endat_int_error2               10
#define DFLT_VAL_NX90_endat_int_error2          0x00000000
#define DFLT_BF_VAL_NX90_endat_int_error2       0x00000000
#define MSK_NX90_endat_int_crc_zi1              0x00000800
#define SRT_NX90_endat_int_crc_zi1              11
#define DFLT_VAL_NX90_endat_int_crc_zi1         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_crc_zi1      0x00000000
#define MSK_NX90_endat_int_crc_zi2              0x00001000
#define SRT_NX90_endat_int_crc_zi2              12
#define DFLT_VAL_NX90_endat_int_crc_zi2         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_crc_zi2      0x00000000
#define MSK_NX90_endat_int_busy                 0x00002000
#define SRT_NX90_endat_int_busy                 13
#define DFLT_VAL_NX90_endat_int_busy            0x00000000
#define DFLT_BF_VAL_NX90_endat_int_busy         0x00000000
#define MSK_NX90_endat_int_RM                   0x00004000
#define SRT_NX90_endat_int_RM                   14
#define DFLT_VAL_NX90_endat_int_RM              0x00000000
#define DFLT_BF_VAL_NX90_endat_int_RM           0x00000000
#define MSK_NX90_endat_int_wrn                  0x00008000
#define SRT_NX90_endat_int_wrn                  15
#define DFLT_VAL_NX90_endat_int_wrn             0x00000000
#define DFLT_BF_VAL_NX90_endat_int_wrn          0x00000000
#define MSK_NX90_endat_int_spike                0x00010000
#define SRT_NX90_endat_int_spike                16
#define DFLT_VAL_NX90_endat_int_spike           0x00000000
#define DFLT_BF_VAL_NX90_endat_int_spike        0x00000000
#define MSK_NX90_endat_int_watchdog             0x00020000
#define SRT_NX90_endat_int_watchdog             17
#define DFLT_VAL_NX90_endat_int_watchdog        0x00000000
#define DFLT_BF_VAL_NX90_endat_int_watchdog     0x00000000
#define MSK_NX90_endat_int_f_type3              0x00040000
#define SRT_NX90_endat_int_f_type3              18
#define DFLT_VAL_NX90_endat_int_f_type3         0x00000000
#define DFLT_BF_VAL_NX90_endat_int_f_type3      0x00000000
#define MSK_NX90_endat_int_speed_ready          0x20000000
#define SRT_NX90_endat_int_speed_ready          29
#define DFLT_VAL_NX90_endat_int_speed_ready     0x00000000
#define DFLT_BF_VAL_NX90_endat_int_speed_ready  0x00000000
#define MSK_NX90_endat_int_ready                0x80000000
#define SRT_NX90_endat_int_ready                31
#define DFLT_VAL_NX90_endat_int_ready           0x00000000
#define DFLT_BF_VAL_NX90_endat_int_ready        0x00000000

/* all used bits of 'NX90_endat_int': */
#define MSK_USED_BITS_NX90_endat_int 0xa007ffff

/* --------------------------------------------------------------------- */
/* Register endat_test1 */
/* => Test register 1 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_test1        0x00000028
#define Adr_NX90_endat0_app_endat_test1 0xFF802028
#define Adr_NX90_endat1_app_endat_test1 0xFF802068

#define MSK_NX90_endat_test1_dl_high                 0x00000001
#define SRT_NX90_endat_test1_dl_high                 0
#define MSK_NX90_endat_test1_status_zi               0x00000006
#define SRT_NX90_endat_test1_status_zi               1
#define MSK_NX90_endat_test1_enDat_automation_engine 0x000003f0
#define SRT_NX90_endat_test1_enDat_automation_engine 4
#define MSK_NX90_endat_test1_ic_test_values          0xfffffc00
#define SRT_NX90_endat_test1_ic_test_values          10

/* all used bits of 'NX90_endat_test1': */
#define MSK_USED_BITS_NX90_endat_test1 0xfffffff7

/* --------------------------------------------------------------------- */
/* Register endat_test2 */
/* => Test register 2 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_test2        0x0000002C
#define Adr_NX90_endat0_app_endat_test2 0xFF80202C
#define Adr_NX90_endat1_app_endat_test2 0xFF80206C
#define DFLT_VAL_NX90_endat_test2       0x00000000

#define MSK_NX90_endat_test2_selection_tst_out          0x00000004
#define SRT_NX90_endat_test2_selection_tst_out          2
#define DFLT_VAL_NX90_endat_test2_selection_tst_out     0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_selection_tst_out  0x00000000
#define MSK_NX90_endat_test2_test_receive_reg           0x00000008
#define SRT_NX90_endat_test2_test_receive_reg           3
#define DFLT_VAL_NX90_endat_test2_test_receive_reg      0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_test_receive_reg   0x00000000
#define MSK_NX90_endat_test2_sel_test_mux               0x00000030
#define SRT_NX90_endat_test2_sel_test_mux               4
#define DFLT_VAL_NX90_endat_test2_sel_test_mux          0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux       0x00000000
#define MSK_NX90_endat_test2_ic_test_mode               0x00000080
#define SRT_NX90_endat_test2_ic_test_mode               7
#define DFLT_VAL_NX90_endat_test2_ic_test_mode          0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_ic_test_mode       0x00000000
#define MSK_NX90_endat_test2_selection_add_info         0x00000700
#define SRT_NX90_endat_test2_selection_add_info         8
#define DFLT_VAL_NX90_endat_test2_selection_add_info    0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_selection_add_info 0x00000000
#define MSK_NX90_endat_test2_test_mode_divider          0x00000800
#define SRT_NX90_endat_test2_test_mode_divider          11
#define DFLT_VAL_NX90_endat_test2_test_mode_divider     0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_test_mode_divider  0x00000000
#define MSK_NX90_endat_test2_sel_test_mux2              0x00003000
#define SRT_NX90_endat_test2_sel_test_mux2              12
#define DFLT_VAL_NX90_endat_test2_sel_test_mux2         0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux2      0x00000000
#define MSK_NX90_endat_test2_sel_test_mux3              0x0000c000
#define SRT_NX90_endat_test2_sel_test_mux3              14
#define DFLT_VAL_NX90_endat_test2_sel_test_mux3         0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_sel_test_mux3      0x00000000
#define MSK_NX90_endat_test2_ic_test_data               0xffff0000
#define SRT_NX90_endat_test2_ic_test_data               16
#define DFLT_VAL_NX90_endat_test2_ic_test_data          0x00000000
#define DFLT_BF_VAL_NX90_endat_test2_ic_test_data       0x00000000

/* all used bits of 'NX90_endat_test2': */
#define MSK_USED_BITS_NX90_endat_test2 0xffffffbc

/* --------------------------------------------------------------------- */
/* Register endat_receive4_0 */
/* => Receive register 4 */
/*    Receive register 4 contains position value 2 (Pos2), which is put together from the additional information 1 of Cycles 2, 3 and 4. */
/*    Test function: with the test register 2 bits (13:12), internal test values can be read */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive4_0        0x00000030
#define Adr_NX90_endat0_app_endat_receive4_0 0xFF802030
#define Adr_NX90_endat1_app_endat_receive4_0 0xFF802070

#define MSK_NX90_endat_receive4_0_byte1 0x000000ff
#define SRT_NX90_endat_receive4_0_byte1 0
#define MSK_NX90_endat_receive4_0_byte2 0x0000ff00
#define SRT_NX90_endat_receive4_0_byte2 8
#define MSK_NX90_endat_receive4_0_byte3 0x00ff0000
#define SRT_NX90_endat_receive4_0_byte3 16
#define MSK_NX90_endat_receive4_0_byte4 0xff000000
#define SRT_NX90_endat_receive4_0_byte4 24

/* all used bits of 'NX90_endat_receive4_0': */
#define MSK_USED_BITS_NX90_endat_receive4_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register endat_receive4_1 */
/* => Receive register 4 */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_receive4_1        0x00000034
#define Adr_NX90_endat0_app_endat_receive4_1 0xFF802034
#define Adr_NX90_endat1_app_endat_receive4_1 0xFF802074

#define MSK_NX90_endat_receive4_1_byte5 0x000000ff
#define SRT_NX90_endat_receive4_1_byte5 0
#define MSK_NX90_endat_receive4_1_byte6 0x0000ff00
#define SRT_NX90_endat_receive4_1_byte6 8

/* all used bits of 'NX90_endat_receive4_1': */
#define MSK_USED_BITS_NX90_endat_receive4_1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register endat_sw_strobe */
/* => SW strobe */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_sw_strobe        0x00000038
#define Adr_NX90_endat0_app_endat_sw_strobe 0xFF802038
#define Adr_NX90_endat1_app_endat_sw_strobe 0xFF802078
#define DFLT_VAL_NX90_endat_sw_strobe       0x00000000

#define MSK_NX90_endat_sw_strobe_sw_strobe         0xffffffff
#define SRT_NX90_endat_sw_strobe_sw_strobe         0
#define DFLT_VAL_NX90_endat_sw_strobe_sw_strobe    0x00000000
#define DFLT_BF_VAL_NX90_endat_sw_strobe_sw_strobe 0x00000000

/* all used bits of 'NX90_endat_sw_strobe': */
#define MSK_USED_BITS_NX90_endat_sw_strobe 0xffffffff

/* --------------------------------------------------------------------- */
/* Register endat_id */
/* => Identification register */
/*    The soft-macro specification (ID) is stored here. This information is helpful for automated configuration by higher-level user software. */
/*    E22:  Designates the latest EnDat 2.2 protocol generation */
/*    6:    MAZeT-internal designation (E6) */
/*    xxxx: Consecutive version number (this document is valid for all versions as of xx13.) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_id        0x0000003C
#define Adr_NX90_endat0_app_endat_id 0xFF80203C
#define Adr_NX90_endat1_app_endat_id 0xFF80207C

#define MSK_NX90_endat_id_id 0xffffffff
#define SRT_NX90_endat_id_id 0

/* all used bits of 'NX90_endat_id': */
#define MSK_USED_BITS_NX90_endat_id 0xffffffff


/* ===================================================================== */

/* AREA endat_ctrl */
/* Area of endat_ctrl0_app, endat_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_endat_ctrl0_app 0xFF802080
#define Addr_NX90_endat_ctrl1_app 0xFF802090

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_trigger_cfg */
/* => EnDat trigger configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_trigger_cfg             0x00000000
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_trigger_cfg 0xFF802080
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_trigger_cfg 0xFF802090
#define DFLT_VAL_NX90_endat_ctrl_trigger_cfg            0x00000000

#define MSK_NX90_endat_ctrl_trigger_cfg_sel         0x0000000f
#define SRT_NX90_endat_ctrl_trigger_cfg_sel         0
#define DFLT_VAL_NX90_endat_ctrl_trigger_cfg_sel    0x00000000
#define DFLT_BF_VAL_NX90_endat_ctrl_trigger_cfg_sel 0x00000000

/* all used bits of 'NX90_endat_ctrl_trigger_cfg': */
#define MSK_USED_BITS_NX90_endat_ctrl_trigger_cfg 0x0000000f

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_trigger */
/* => EnDat trigger */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_trigger             0x00000004
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_trigger 0xFF802084
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_trigger 0xFF802094
#define DFLT_VAL_NX90_endat_ctrl_trigger            0x00000000

#define MSK_NX90_endat_ctrl_trigger_manual         0x00000001
#define SRT_NX90_endat_ctrl_trigger_manual         0
#define DFLT_VAL_NX90_endat_ctrl_trigger_manual    0x00000000
#define DFLT_BF_VAL_NX90_endat_ctrl_trigger_manual 0x00000000

/* all used bits of 'NX90_endat_ctrl_trigger': */
#define MSK_USED_BITS_NX90_endat_ctrl_trigger 0x00000001

/* --------------------------------------------------------------------- */
/* Register endat_ctrl_strobe_cfg */
/* => EnDat strobe pulse form configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_endat_ctrl_strobe_cfg             0x00000008
#define Adr_NX90_endat_ctrl0_app_endat_ctrl_strobe_cfg 0xFF802088
#define Adr_NX90_endat_ctrl1_app_endat_ctrl_strobe_cfg 0xFF802098
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg            0x00000303

#define MSK_NX90_endat_ctrl_strobe_cfg_low_len          0x000000ff
#define SRT_NX90_endat_ctrl_strobe_cfg_low_len          0
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg_low_len     0x00000003
#define DFLT_BF_VAL_NX90_endat_ctrl_strobe_cfg_low_len  0x00000003
#define MSK_NX90_endat_ctrl_strobe_cfg_high_len         0x0000ff00
#define SRT_NX90_endat_ctrl_strobe_cfg_high_len         8
#define DFLT_VAL_NX90_endat_ctrl_strobe_cfg_high_len    0x00000300
#define DFLT_BF_VAL_NX90_endat_ctrl_strobe_cfg_high_len 0x00000003

/* all used bits of 'NX90_endat_ctrl_strobe_cfg': */
#define MSK_USED_BITS_NX90_endat_ctrl_strobe_cfg 0x0000ffff


/* ===================================================================== */

/* AREA biss_ctrl */
/* Area of biss_ctrl0_app, biss_ctrl1_app */

/* ===================================================================== */

#define Addr_NX90_biss_ctrl0_app 0xFF8020A0
#define Addr_NX90_biss_ctrl1_app 0xFF8020C0

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_trigger_cfg */
/* => BiSS trigger configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_trigger_cfg            0x00000000
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_trigger_cfg 0xFF8020A0
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_trigger_cfg 0xFF8020C0
#define DFLT_VAL_NX90_biss_ctrl_trigger_cfg           0x00000000

#define MSK_NX90_biss_ctrl_trigger_cfg_sel         0x0000000f
#define SRT_NX90_biss_ctrl_trigger_cfg_sel         0
#define DFLT_VAL_NX90_biss_ctrl_trigger_cfg_sel    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_trigger_cfg_sel 0x00000000

/* all used bits of 'NX90_biss_ctrl_trigger_cfg': */
#define MSK_USED_BITS_NX90_biss_ctrl_trigger_cfg 0x0000000f

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_trigger */
/* => BiSS trigger */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_trigger            0x00000004
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_trigger 0xFF8020A4
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_trigger 0xFF8020C4
#define DFLT_VAL_NX90_biss_ctrl_trigger           0x00000000

#define MSK_NX90_biss_ctrl_trigger_manual         0x00000001
#define SRT_NX90_biss_ctrl_trigger_manual         0
#define DFLT_VAL_NX90_biss_ctrl_trigger_manual    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_trigger_manual 0x00000000

/* all used bits of 'NX90_biss_ctrl_trigger': */
#define MSK_USED_BITS_NX90_biss_ctrl_trigger 0x00000001

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_raw */
/* => BiSS raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_raw            0x00000008
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_raw 0xFF8020A8
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_raw 0xFF8020C8
#define DFLT_VAL_NX90_biss_ctrl_irq_raw           0x00000000

#define MSK_NX90_biss_ctrl_irq_raw_eot         0x00000001
#define SRT_NX90_biss_ctrl_irq_raw_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_raw_eot    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_raw_eot 0x00000000
#define MSK_NX90_biss_ctrl_irq_raw_err         0x00000002
#define SRT_NX90_biss_ctrl_irq_raw_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_raw_err    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_raw_err 0x00000000

/* all used bits of 'NX90_biss_ctrl_irq_raw': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_raw 0x00000003

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_masked */
/* => BiSS masked IRQ: */
/*    Shows status of masked IRQs. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_masked            0x0000000C
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_masked 0xFF8020AC
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_masked 0xFF8020CC

#define MSK_NX90_biss_ctrl_irq_masked_eot 0x00000001
#define SRT_NX90_biss_ctrl_irq_masked_eot 0
#define MSK_NX90_biss_ctrl_irq_masked_err 0x00000002
#define SRT_NX90_biss_ctrl_irq_masked_err 1

/* all used bits of 'NX90_biss_ctrl_irq_masked': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_masked 0x00000003

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_msk_set */
/* => BiSS IRQ mask set: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to mtgy_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_msk_set            0x00000010
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_msk_set 0xFF8020B0
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_msk_set 0xFF8020D0
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set           0x00000000

#define MSK_NX90_biss_ctrl_irq_msk_set_eot         0x00000001
#define SRT_NX90_biss_ctrl_irq_msk_set_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set_eot    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_set_eot 0x00000000
#define MSK_NX90_biss_ctrl_irq_msk_set_err         0x00000002
#define SRT_NX90_biss_ctrl_irq_msk_set_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_set_err    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_set_err 0x00000000

/* all used bits of 'NX90_biss_ctrl_irq_msk_set': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_msk_set 0x00000003

/* --------------------------------------------------------------------- */
/* Register biss_ctrl_irq_msk_reset */
/* => BiSS IRQ mask reset: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ctrl_irq_msk_reset            0x00000014
#define Adr_NX90_biss_ctrl0_app_biss_ctrl_irq_msk_reset 0xFF8020B4
#define Adr_NX90_biss_ctrl1_app_biss_ctrl_irq_msk_reset 0xFF8020D4
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset           0x00000000

#define MSK_NX90_biss_ctrl_irq_msk_reset_eot         0x00000001
#define SRT_NX90_biss_ctrl_irq_msk_reset_eot         0
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset_eot    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_reset_eot 0x00000000
#define MSK_NX90_biss_ctrl_irq_msk_reset_err         0x00000002
#define SRT_NX90_biss_ctrl_irq_msk_reset_err         1
#define DFLT_VAL_NX90_biss_ctrl_irq_msk_reset_err    0x00000000
#define DFLT_BF_VAL_NX90_biss_ctrl_irq_msk_reset_err 0x00000000

/* all used bits of 'NX90_biss_ctrl_irq_msk_reset': */
#define MSK_USED_BITS_NX90_biss_ctrl_irq_msk_reset 0x00000003


/* ===================================================================== */

/* AREA biss */
/* Area of biss0_app, biss1_app */

/* ===================================================================== */

#define Addr_NX90_biss0_app 0xFF802100
#define Addr_NX90_biss1_app 0xFF802200

/* --------------------------------------------------------------------- */
/* Register biss_scdata0_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata0_0       0x00000000
#define Adr_NX90_biss0_app_biss_scdata0_0 0xFF802100
#define Adr_NX90_biss1_app_biss_scdata0_0 0xFF802200
#define DFLT_VAL_NX90_biss_scdata0_0      0x00000000

#define MSK_NX90_biss_scdata0_0_SCDATA0_0         0xffffffff
#define SRT_NX90_biss_scdata0_0_SCDATA0_0         0
#define DFLT_VAL_NX90_biss_scdata0_0_SCDATA0_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata0_0_SCDATA0_0 0x00000000

/* all used bits of 'NX90_biss_scdata0_0': */
#define MSK_USED_BITS_NX90_biss_scdata0_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata0_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata0_1       0x00000004
#define Adr_NX90_biss0_app_biss_scdata0_1 0xFF802104
#define Adr_NX90_biss1_app_biss_scdata0_1 0xFF802204
#define DFLT_VAL_NX90_biss_scdata0_1      0x00000000

#define MSK_NX90_biss_scdata0_1_SCDATA0_1         0xffffffff
#define SRT_NX90_biss_scdata0_1_SCDATA0_1         0
#define DFLT_VAL_NX90_biss_scdata0_1_SCDATA0_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata0_1_SCDATA0_1 0x00000000

/* all used bits of 'NX90_biss_scdata0_1': */
#define MSK_USED_BITS_NX90_biss_scdata0_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata1_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata1_0       0x00000008
#define Adr_NX90_biss0_app_biss_scdata1_0 0xFF802108
#define Adr_NX90_biss1_app_biss_scdata1_0 0xFF802208
#define DFLT_VAL_NX90_biss_scdata1_0      0x00000000

#define MSK_NX90_biss_scdata1_0_SCDATA1_0         0xffffffff
#define SRT_NX90_biss_scdata1_0_SCDATA1_0         0
#define DFLT_VAL_NX90_biss_scdata1_0_SCDATA1_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata1_0_SCDATA1_0 0x00000000

/* all used bits of 'NX90_biss_scdata1_0': */
#define MSK_USED_BITS_NX90_biss_scdata1_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata1_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata1_1       0x0000000C
#define Adr_NX90_biss0_app_biss_scdata1_1 0xFF80210C
#define Adr_NX90_biss1_app_biss_scdata1_1 0xFF80220C
#define DFLT_VAL_NX90_biss_scdata1_1      0x00000000

#define MSK_NX90_biss_scdata1_1_SCDATA1_1         0xffffffff
#define SRT_NX90_biss_scdata1_1_SCDATA1_1         0
#define DFLT_VAL_NX90_biss_scdata1_1_SCDATA1_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata1_1_SCDATA1_1 0x00000000

/* all used bits of 'NX90_biss_scdata1_1': */
#define MSK_USED_BITS_NX90_biss_scdata1_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata2_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata2_0       0x00000010
#define Adr_NX90_biss0_app_biss_scdata2_0 0xFF802110
#define Adr_NX90_biss1_app_biss_scdata2_0 0xFF802210
#define DFLT_VAL_NX90_biss_scdata2_0      0x00000000

#define MSK_NX90_biss_scdata2_0_SCDATA2_0         0xffffffff
#define SRT_NX90_biss_scdata2_0_SCDATA2_0         0
#define DFLT_VAL_NX90_biss_scdata2_0_SCDATA2_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata2_0_SCDATA2_0 0x00000000

/* all used bits of 'NX90_biss_scdata2_0': */
#define MSK_USED_BITS_NX90_biss_scdata2_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata2_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata2_1       0x00000014
#define Adr_NX90_biss0_app_biss_scdata2_1 0xFF802114
#define Adr_NX90_biss1_app_biss_scdata2_1 0xFF802214
#define DFLT_VAL_NX90_biss_scdata2_1      0x00000000

#define MSK_NX90_biss_scdata2_1_SCDATA2_1         0xffffffff
#define SRT_NX90_biss_scdata2_1_SCDATA2_1         0
#define DFLT_VAL_NX90_biss_scdata2_1_SCDATA2_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata2_1_SCDATA2_1 0x00000000

/* all used bits of 'NX90_biss_scdata2_1': */
#define MSK_USED_BITS_NX90_biss_scdata2_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata3_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata3_0       0x00000018
#define Adr_NX90_biss0_app_biss_scdata3_0 0xFF802118
#define Adr_NX90_biss1_app_biss_scdata3_0 0xFF802218
#define DFLT_VAL_NX90_biss_scdata3_0      0x00000000

#define MSK_NX90_biss_scdata3_0_SCDATA3_0         0xffffffff
#define SRT_NX90_biss_scdata3_0_SCDATA3_0         0
#define DFLT_VAL_NX90_biss_scdata3_0_SCDATA3_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata3_0_SCDATA3_0 0x00000000

/* all used bits of 'NX90_biss_scdata3_0': */
#define MSK_USED_BITS_NX90_biss_scdata3_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata3_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata3_1       0x0000001C
#define Adr_NX90_biss0_app_biss_scdata3_1 0xFF80211C
#define Adr_NX90_biss1_app_biss_scdata3_1 0xFF80221C
#define DFLT_VAL_NX90_biss_scdata3_1      0x00000000

#define MSK_NX90_biss_scdata3_1_SCDATA3_1         0xffffffff
#define SRT_NX90_biss_scdata3_1_SCDATA3_1         0
#define DFLT_VAL_NX90_biss_scdata3_1_SCDATA3_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata3_1_SCDATA3_1 0x00000000

/* all used bits of 'NX90_biss_scdata3_1': */
#define MSK_USED_BITS_NX90_biss_scdata3_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata4_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata4_0       0x00000020
#define Adr_NX90_biss0_app_biss_scdata4_0 0xFF802120
#define Adr_NX90_biss1_app_biss_scdata4_0 0xFF802220
#define DFLT_VAL_NX90_biss_scdata4_0      0x00000000

#define MSK_NX90_biss_scdata4_0_SCDATA4_0         0xffffffff
#define SRT_NX90_biss_scdata4_0_SCDATA4_0         0
#define DFLT_VAL_NX90_biss_scdata4_0_SCDATA4_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata4_0_SCDATA4_0 0x00000000

/* all used bits of 'NX90_biss_scdata4_0': */
#define MSK_USED_BITS_NX90_biss_scdata4_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata4_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata4_1       0x00000024
#define Adr_NX90_biss0_app_biss_scdata4_1 0xFF802124
#define Adr_NX90_biss1_app_biss_scdata4_1 0xFF802224
#define DFLT_VAL_NX90_biss_scdata4_1      0x00000000

#define MSK_NX90_biss_scdata4_1_SCDATA4_1         0xffffffff
#define SRT_NX90_biss_scdata4_1_SCDATA4_1         0
#define DFLT_VAL_NX90_biss_scdata4_1_SCDATA4_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata4_1_SCDATA4_1 0x00000000

/* all used bits of 'NX90_biss_scdata4_1': */
#define MSK_USED_BITS_NX90_biss_scdata4_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata5_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata5_0       0x00000028
#define Adr_NX90_biss0_app_biss_scdata5_0 0xFF802128
#define Adr_NX90_biss1_app_biss_scdata5_0 0xFF802228
#define DFLT_VAL_NX90_biss_scdata5_0      0x00000000

#define MSK_NX90_biss_scdata5_0_SCDATA5_0         0xffffffff
#define SRT_NX90_biss_scdata5_0_SCDATA5_0         0
#define DFLT_VAL_NX90_biss_scdata5_0_SCDATA5_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata5_0_SCDATA5_0 0x00000000

/* all used bits of 'NX90_biss_scdata5_0': */
#define MSK_USED_BITS_NX90_biss_scdata5_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata5_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata5_1       0x0000002C
#define Adr_NX90_biss0_app_biss_scdata5_1 0xFF80212C
#define Adr_NX90_biss1_app_biss_scdata5_1 0xFF80222C
#define DFLT_VAL_NX90_biss_scdata5_1      0x00000000

#define MSK_NX90_biss_scdata5_1_SCDATA5_1         0xffffffff
#define SRT_NX90_biss_scdata5_1_SCDATA5_1         0
#define DFLT_VAL_NX90_biss_scdata5_1_SCDATA5_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata5_1_SCDATA5_1 0x00000000

/* all used bits of 'NX90_biss_scdata5_1': */
#define MSK_USED_BITS_NX90_biss_scdata5_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata6_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata6_0       0x00000030
#define Adr_NX90_biss0_app_biss_scdata6_0 0xFF802130
#define Adr_NX90_biss1_app_biss_scdata6_0 0xFF802230
#define DFLT_VAL_NX90_biss_scdata6_0      0x00000000

#define MSK_NX90_biss_scdata6_0_SCDATA6_0         0xffffffff
#define SRT_NX90_biss_scdata6_0_SCDATA6_0         0
#define DFLT_VAL_NX90_biss_scdata6_0_SCDATA6_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata6_0_SCDATA6_0 0x00000000

/* all used bits of 'NX90_biss_scdata6_0': */
#define MSK_USED_BITS_NX90_biss_scdata6_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata6_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata6_1       0x00000034
#define Adr_NX90_biss0_app_biss_scdata6_1 0xFF802134
#define Adr_NX90_biss1_app_biss_scdata6_1 0xFF802234
#define DFLT_VAL_NX90_biss_scdata6_1      0x00000000

#define MSK_NX90_biss_scdata6_1_SCDATA6_1         0xffffffff
#define SRT_NX90_biss_scdata6_1_SCDATA6_1         0
#define DFLT_VAL_NX90_biss_scdata6_1_SCDATA6_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata6_1_SCDATA6_1 0x00000000

/* all used bits of 'NX90_biss_scdata6_1': */
#define MSK_USED_BITS_NX90_biss_scdata6_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata7_0 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata7_0       0x00000038
#define Adr_NX90_biss0_app_biss_scdata7_0 0xFF802138
#define Adr_NX90_biss1_app_biss_scdata7_0 0xFF802238
#define DFLT_VAL_NX90_biss_scdata7_0      0x00000000

#define MSK_NX90_biss_scdata7_0_SCDATA7_0         0xffffffff
#define SRT_NX90_biss_scdata7_0_SCDATA7_0         0
#define DFLT_VAL_NX90_biss_scdata7_0_SCDATA7_0    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata7_0_SCDATA7_0 0x00000000

/* all used bits of 'NX90_biss_scdata7_0': */
#define MSK_USED_BITS_NX90_biss_scdata7_0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_scdata7_1 */
/* => Sensor and Actuator Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_scdata7_1       0x0000003C
#define Adr_NX90_biss0_app_biss_scdata7_1 0xFF80213C
#define Adr_NX90_biss1_app_biss_scdata7_1 0xFF80223C
#define DFLT_VAL_NX90_biss_scdata7_1      0x00000000

#define MSK_NX90_biss_scdata7_1_SCDATA7_1         0xffffffff
#define SRT_NX90_biss_scdata7_1_SCDATA7_1         0
#define DFLT_VAL_NX90_biss_scdata7_1_SCDATA7_1    0x00000000
#define DFLT_BF_VAL_NX90_biss_scdata7_1_SCDATA7_1 0x00000000

/* all used bits of 'NX90_biss_scdata7_1': */
#define MSK_USED_BITS_NX90_biss_scdata7_1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata0 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata0       0x00000080
#define Adr_NX90_biss0_app_biss_rdata0 0xFF802180
#define Adr_NX90_biss1_app_biss_rdata0 0xFF802280
#define DFLT_VAL_NX90_biss_rdata0      0x00000000

#define MSK_NX90_biss_rdata0_RDATA0         0xffffffff
#define SRT_NX90_biss_rdata0_RDATA0         0
#define DFLT_VAL_NX90_biss_rdata0_RDATA0    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata0_RDATA0 0x00000000

/* all used bits of 'NX90_biss_rdata0': */
#define MSK_USED_BITS_NX90_biss_rdata0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata1 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata1       0x00000084
#define Adr_NX90_biss0_app_biss_rdata1 0xFF802184
#define Adr_NX90_biss1_app_biss_rdata1 0xFF802284
#define DFLT_VAL_NX90_biss_rdata1      0x00000000

#define MSK_NX90_biss_rdata1_RDATA1         0xffffffff
#define SRT_NX90_biss_rdata1_RDATA1         0
#define DFLT_VAL_NX90_biss_rdata1_RDATA1    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata1_RDATA1 0x00000000

/* all used bits of 'NX90_biss_rdata1': */
#define MSK_USED_BITS_NX90_biss_rdata1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata2 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata2       0x00000088
#define Adr_NX90_biss0_app_biss_rdata2 0xFF802188
#define Adr_NX90_biss1_app_biss_rdata2 0xFF802288
#define DFLT_VAL_NX90_biss_rdata2      0x00000000

#define MSK_NX90_biss_rdata2_RDATA2         0xffffffff
#define SRT_NX90_biss_rdata2_RDATA2         0
#define DFLT_VAL_NX90_biss_rdata2_RDATA2    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata2_RDATA2 0x00000000

/* all used bits of 'NX90_biss_rdata2': */
#define MSK_USED_BITS_NX90_biss_rdata2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata3 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata3       0x0000008C
#define Adr_NX90_biss0_app_biss_rdata3 0xFF80218C
#define Adr_NX90_biss1_app_biss_rdata3 0xFF80228C
#define DFLT_VAL_NX90_biss_rdata3      0x00000000

#define MSK_NX90_biss_rdata3_RDATA3         0xffffffff
#define SRT_NX90_biss_rdata3_RDATA3         0
#define DFLT_VAL_NX90_biss_rdata3_RDATA3    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata3_RDATA3 0x00000000

/* all used bits of 'NX90_biss_rdata3': */
#define MSK_USED_BITS_NX90_biss_rdata3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata4 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata4       0x00000090
#define Adr_NX90_biss0_app_biss_rdata4 0xFF802190
#define Adr_NX90_biss1_app_biss_rdata4 0xFF802290
#define DFLT_VAL_NX90_biss_rdata4      0x00000000

#define MSK_NX90_biss_rdata4_RDATA4         0xffffffff
#define SRT_NX90_biss_rdata4_RDATA4         0
#define DFLT_VAL_NX90_biss_rdata4_RDATA4    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata4_RDATA4 0x00000000

/* all used bits of 'NX90_biss_rdata4': */
#define MSK_USED_BITS_NX90_biss_rdata4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata5 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata5       0x00000094
#define Adr_NX90_biss0_app_biss_rdata5 0xFF802194
#define Adr_NX90_biss1_app_biss_rdata5 0xFF802294
#define DFLT_VAL_NX90_biss_rdata5      0x00000000

#define MSK_NX90_biss_rdata5_RDATA5         0xffffffff
#define SRT_NX90_biss_rdata5_RDATA5         0
#define DFLT_VAL_NX90_biss_rdata5_RDATA5    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata5_RDATA5 0x00000000

/* all used bits of 'NX90_biss_rdata5': */
#define MSK_USED_BITS_NX90_biss_rdata5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata6 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata6       0x00000098
#define Adr_NX90_biss0_app_biss_rdata6 0xFF802198
#define Adr_NX90_biss1_app_biss_rdata6 0xFF802298
#define DFLT_VAL_NX90_biss_rdata6      0x00000000

#define MSK_NX90_biss_rdata6_RDATA6         0xffffffff
#define SRT_NX90_biss_rdata6_RDATA6         0
#define DFLT_VAL_NX90_biss_rdata6_RDATA6    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata6_RDATA6 0x00000000

/* all used bits of 'NX90_biss_rdata6': */
#define MSK_USED_BITS_NX90_biss_rdata6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata7 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata7       0x0000009C
#define Adr_NX90_biss0_app_biss_rdata7 0xFF80219C
#define Adr_NX90_biss1_app_biss_rdata7 0xFF80229C
#define DFLT_VAL_NX90_biss_rdata7      0x00000000

#define MSK_NX90_biss_rdata7_RDATA7         0xffffffff
#define SRT_NX90_biss_rdata7_RDATA7         0
#define DFLT_VAL_NX90_biss_rdata7_RDATA7    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata7_RDATA7 0x00000000

/* all used bits of 'NX90_biss_rdata7': */
#define MSK_USED_BITS_NX90_biss_rdata7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata8 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata8       0x000000A0
#define Adr_NX90_biss0_app_biss_rdata8 0xFF8021A0
#define Adr_NX90_biss1_app_biss_rdata8 0xFF8022A0
#define DFLT_VAL_NX90_biss_rdata8      0x00000000

#define MSK_NX90_biss_rdata8_RDATA8         0xffffffff
#define SRT_NX90_biss_rdata8_RDATA8         0
#define DFLT_VAL_NX90_biss_rdata8_RDATA8    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata8_RDATA8 0x00000000

/* all used bits of 'NX90_biss_rdata8': */
#define MSK_USED_BITS_NX90_biss_rdata8 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata9 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata9       0x000000A4
#define Adr_NX90_biss0_app_biss_rdata9 0xFF8021A4
#define Adr_NX90_biss1_app_biss_rdata9 0xFF8022A4
#define DFLT_VAL_NX90_biss_rdata9      0x00000000

#define MSK_NX90_biss_rdata9_RDATA9         0xffffffff
#define SRT_NX90_biss_rdata9_RDATA9         0
#define DFLT_VAL_NX90_biss_rdata9_RDATA9    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata9_RDATA9 0x00000000

/* all used bits of 'NX90_biss_rdata9': */
#define MSK_USED_BITS_NX90_biss_rdata9 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata10 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata10       0x000000A8
#define Adr_NX90_biss0_app_biss_rdata10 0xFF8021A8
#define Adr_NX90_biss1_app_biss_rdata10 0xFF8022A8
#define DFLT_VAL_NX90_biss_rdata10      0x00000000

#define MSK_NX90_biss_rdata10_RDATA10         0xffffffff
#define SRT_NX90_biss_rdata10_RDATA10         0
#define DFLT_VAL_NX90_biss_rdata10_RDATA10    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata10_RDATA10 0x00000000

/* all used bits of 'NX90_biss_rdata10': */
#define MSK_USED_BITS_NX90_biss_rdata10 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata11 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata11       0x000000AC
#define Adr_NX90_biss0_app_biss_rdata11 0xFF8021AC
#define Adr_NX90_biss1_app_biss_rdata11 0xFF8022AC
#define DFLT_VAL_NX90_biss_rdata11      0x00000000

#define MSK_NX90_biss_rdata11_RDATA11         0xffffffff
#define SRT_NX90_biss_rdata11_RDATA11         0
#define DFLT_VAL_NX90_biss_rdata11_RDATA11    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata11_RDATA11 0x00000000

/* all used bits of 'NX90_biss_rdata11': */
#define MSK_USED_BITS_NX90_biss_rdata11 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata12 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata12       0x000000B0
#define Adr_NX90_biss0_app_biss_rdata12 0xFF8021B0
#define Adr_NX90_biss1_app_biss_rdata12 0xFF8022B0
#define DFLT_VAL_NX90_biss_rdata12      0x00000000

#define MSK_NX90_biss_rdata12_RDATA12         0xffffffff
#define SRT_NX90_biss_rdata12_RDATA12         0
#define DFLT_VAL_NX90_biss_rdata12_RDATA12    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata12_RDATA12 0x00000000

/* all used bits of 'NX90_biss_rdata12': */
#define MSK_USED_BITS_NX90_biss_rdata12 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata13 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata13       0x000000B4
#define Adr_NX90_biss0_app_biss_rdata13 0xFF8021B4
#define Adr_NX90_biss1_app_biss_rdata13 0xFF8022B4
#define DFLT_VAL_NX90_biss_rdata13      0x00000000

#define MSK_NX90_biss_rdata13_RDATA13         0xffffffff
#define SRT_NX90_biss_rdata13_RDATA13         0
#define DFLT_VAL_NX90_biss_rdata13_RDATA13    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata13_RDATA13 0x00000000

/* all used bits of 'NX90_biss_rdata13': */
#define MSK_USED_BITS_NX90_biss_rdata13 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata14 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata14       0x000000B8
#define Adr_NX90_biss0_app_biss_rdata14 0xFF8021B8
#define Adr_NX90_biss1_app_biss_rdata14 0xFF8022B8
#define DFLT_VAL_NX90_biss_rdata14      0x00000000

#define MSK_NX90_biss_rdata14_RDATA14         0xffffffff
#define SRT_NX90_biss_rdata14_RDATA14         0
#define DFLT_VAL_NX90_biss_rdata14_RDATA14    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata14_RDATA14 0x00000000

/* all used bits of 'NX90_biss_rdata14': */
#define MSK_USED_BITS_NX90_biss_rdata14 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_rdata15 */
/* => Register Data */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_rdata15       0x000000BC
#define Adr_NX90_biss0_app_biss_rdata15 0xFF8021BC
#define Adr_NX90_biss1_app_biss_rdata15 0xFF8022BC
#define DFLT_VAL_NX90_biss_rdata15      0x00000000

#define MSK_NX90_biss_rdata15_RDATA15         0xffffffff
#define SRT_NX90_biss_rdata15_RDATA15         0
#define DFLT_VAL_NX90_biss_rdata15_RDATA15    0x00000000
#define DFLT_BF_VAL_NX90_biss_rdata15_RDATA15 0x00000000

/* all used bits of 'NX90_biss_rdata15': */
#define MSK_USED_BITS_NX90_biss_rdata15 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc0 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc0       0x000000C0
#define Adr_NX90_biss0_app_biss_sc0 0xFF8021C0
#define Adr_NX90_biss1_app_biss_sc0 0xFF8022C0
#define DFLT_VAL_NX90_biss_sc0      0x00000000

#define MSK_NX90_biss_sc0_SCDLEN0            0x0000003f
#define SRT_NX90_biss_sc0_SCDLEN0            0
#define DFLT_VAL_NX90_biss_sc0_SCDLEN0       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_SCDLEN0    0x00000000
#define MSK_NX90_biss_sc0_ENSCD0             0x00000040
#define SRT_NX90_biss_sc0_ENSCD0             6
#define DFLT_VAL_NX90_biss_sc0_ENSCD0        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_ENSCD0     0x00000000
#define MSK_NX90_biss_sc0_LSTOP0             0x00000080
#define SRT_NX90_biss_sc0_LSTOP0             7
#define DFLT_VAL_NX90_biss_sc0_LSTOP0        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_LSTOP0     0x00000000
#define MSK_NX90_biss_sc0_SCRCPOLY0          0x00007f00
#define SRT_NX90_biss_sc0_SCRCPOLY0          8
#define DFLT_VAL_NX90_biss_sc0_SCRCPOLY0     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_SCRCPOLY0  0x00000000
#define MSK_NX90_biss_sc0_SELCRCS0           0x00008000
#define SRT_NX90_biss_sc0_SELCRCS0           15
#define DFLT_VAL_NX90_biss_sc0_SELCRCS0      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_SELCRCS0   0x00000000
#define MSK_NX90_biss_sc0_SCRCSTART0         0xffff0000
#define SRT_NX90_biss_sc0_SCRCSTART0         16
#define DFLT_VAL_NX90_biss_sc0_SCRCSTART0    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc0_SCRCSTART0 0x00000000

/* all used bits of 'NX90_biss_sc0': */
#define MSK_USED_BITS_NX90_biss_sc0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc1 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc1       0x000000C4
#define Adr_NX90_biss0_app_biss_sc1 0xFF8021C4
#define Adr_NX90_biss1_app_biss_sc1 0xFF8022C4
#define DFLT_VAL_NX90_biss_sc1      0x00000000

#define MSK_NX90_biss_sc1_SCDLEN1            0x0000003f
#define SRT_NX90_biss_sc1_SCDLEN1            0
#define DFLT_VAL_NX90_biss_sc1_SCDLEN1       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_SCDLEN1    0x00000000
#define MSK_NX90_biss_sc1_ENSCD1             0x00000040
#define SRT_NX90_biss_sc1_ENSCD1             6
#define DFLT_VAL_NX90_biss_sc1_ENSCD1        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_ENSCD1     0x00000000
#define MSK_NX90_biss_sc1_LSTOP1             0x00000080
#define SRT_NX90_biss_sc1_LSTOP1             7
#define DFLT_VAL_NX90_biss_sc1_LSTOP1        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_LSTOP1     0x00000000
#define MSK_NX90_biss_sc1_SCRCPOLY1          0x00007f00
#define SRT_NX90_biss_sc1_SCRCPOLY1          8
#define DFLT_VAL_NX90_biss_sc1_SCRCPOLY1     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_SCRCPOLY1  0x00000000
#define MSK_NX90_biss_sc1_SELCRCS1           0x00008000
#define SRT_NX90_biss_sc1_SELCRCS1           15
#define DFLT_VAL_NX90_biss_sc1_SELCRCS1      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_SELCRCS1   0x00000000
#define MSK_NX90_biss_sc1_SCRCSTART1         0xffff0000
#define SRT_NX90_biss_sc1_SCRCSTART1         16
#define DFLT_VAL_NX90_biss_sc1_SCRCSTART1    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc1_SCRCSTART1 0x00000000

/* all used bits of 'NX90_biss_sc1': */
#define MSK_USED_BITS_NX90_biss_sc1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc2 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc2       0x000000C8
#define Adr_NX90_biss0_app_biss_sc2 0xFF8021C8
#define Adr_NX90_biss1_app_biss_sc2 0xFF8022C8
#define DFLT_VAL_NX90_biss_sc2      0x00000000

#define MSK_NX90_biss_sc2_SCDLEN2            0x0000003f
#define SRT_NX90_biss_sc2_SCDLEN2            0
#define DFLT_VAL_NX90_biss_sc2_SCDLEN2       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_SCDLEN2    0x00000000
#define MSK_NX90_biss_sc2_ENSCD2             0x00000040
#define SRT_NX90_biss_sc2_ENSCD2             6
#define DFLT_VAL_NX90_biss_sc2_ENSCD2        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_ENSCD2     0x00000000
#define MSK_NX90_biss_sc2_LSTOP2             0x00000080
#define SRT_NX90_biss_sc2_LSTOP2             7
#define DFLT_VAL_NX90_biss_sc2_LSTOP2        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_LSTOP2     0x00000000
#define MSK_NX90_biss_sc2_SCRCPOLY2          0x00007f00
#define SRT_NX90_biss_sc2_SCRCPOLY2          8
#define DFLT_VAL_NX90_biss_sc2_SCRCPOLY2     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_SCRCPOLY2  0x00000000
#define MSK_NX90_biss_sc2_SELCRCS2           0x00008000
#define SRT_NX90_biss_sc2_SELCRCS2           15
#define DFLT_VAL_NX90_biss_sc2_SELCRCS2      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_SELCRCS2   0x00000000
#define MSK_NX90_biss_sc2_SCRCSTART2         0xffff0000
#define SRT_NX90_biss_sc2_SCRCSTART2         16
#define DFLT_VAL_NX90_biss_sc2_SCRCSTART2    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc2_SCRCSTART2 0x00000000

/* all used bits of 'NX90_biss_sc2': */
#define MSK_USED_BITS_NX90_biss_sc2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc3 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc3       0x000000CC
#define Adr_NX90_biss0_app_biss_sc3 0xFF8021CC
#define Adr_NX90_biss1_app_biss_sc3 0xFF8022CC
#define DFLT_VAL_NX90_biss_sc3      0x00000000

#define MSK_NX90_biss_sc3_SCDLEN3            0x0000003f
#define SRT_NX90_biss_sc3_SCDLEN3            0
#define DFLT_VAL_NX90_biss_sc3_SCDLEN3       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_SCDLEN3    0x00000000
#define MSK_NX90_biss_sc3_ENSCD3             0x00000040
#define SRT_NX90_biss_sc3_ENSCD3             6
#define DFLT_VAL_NX90_biss_sc3_ENSCD3        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_ENSCD3     0x00000000
#define MSK_NX90_biss_sc3_LSTOP3             0x00000080
#define SRT_NX90_biss_sc3_LSTOP3             7
#define DFLT_VAL_NX90_biss_sc3_LSTOP3        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_LSTOP3     0x00000000
#define MSK_NX90_biss_sc3_SCRCPOLY3          0x00007f00
#define SRT_NX90_biss_sc3_SCRCPOLY3          8
#define DFLT_VAL_NX90_biss_sc3_SCRCPOLY3     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_SCRCPOLY3  0x00000000
#define MSK_NX90_biss_sc3_SELCRCS3           0x00008000
#define SRT_NX90_biss_sc3_SELCRCS3           15
#define DFLT_VAL_NX90_biss_sc3_SELCRCS3      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_SELCRCS3   0x00000000
#define MSK_NX90_biss_sc3_SCRCSTART3         0xffff0000
#define SRT_NX90_biss_sc3_SCRCSTART3         16
#define DFLT_VAL_NX90_biss_sc3_SCRCSTART3    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc3_SCRCSTART3 0x00000000

/* all used bits of 'NX90_biss_sc3': */
#define MSK_USED_BITS_NX90_biss_sc3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc4 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc4       0x000000D0
#define Adr_NX90_biss0_app_biss_sc4 0xFF8021D0
#define Adr_NX90_biss1_app_biss_sc4 0xFF8022D0
#define DFLT_VAL_NX90_biss_sc4      0x00000000

#define MSK_NX90_biss_sc4_SCDLEN4            0x0000003f
#define SRT_NX90_biss_sc4_SCDLEN4            0
#define DFLT_VAL_NX90_biss_sc4_SCDLEN4       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_SCDLEN4    0x00000000
#define MSK_NX90_biss_sc4_ENSCD4             0x00000040
#define SRT_NX90_biss_sc4_ENSCD4             6
#define DFLT_VAL_NX90_biss_sc4_ENSCD4        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_ENSCD4     0x00000000
#define MSK_NX90_biss_sc4_LSTOP4             0x00000080
#define SRT_NX90_biss_sc4_LSTOP4             7
#define DFLT_VAL_NX90_biss_sc4_LSTOP4        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_LSTOP4     0x00000000
#define MSK_NX90_biss_sc4_SCRCPOLY4          0x00007f00
#define SRT_NX90_biss_sc4_SCRCPOLY4          8
#define DFLT_VAL_NX90_biss_sc4_SCRCPOLY4     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_SCRCPOLY4  0x00000000
#define MSK_NX90_biss_sc4_SELCRCS4           0x00008000
#define SRT_NX90_biss_sc4_SELCRCS4           15
#define DFLT_VAL_NX90_biss_sc4_SELCRCS4      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_SELCRCS4   0x00000000
#define MSK_NX90_biss_sc4_SCRCSTART4         0xffff0000
#define SRT_NX90_biss_sc4_SCRCSTART4         16
#define DFLT_VAL_NX90_biss_sc4_SCRCSTART4    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc4_SCRCSTART4 0x00000000

/* all used bits of 'NX90_biss_sc4': */
#define MSK_USED_BITS_NX90_biss_sc4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc5 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc5       0x000000D4
#define Adr_NX90_biss0_app_biss_sc5 0xFF8021D4
#define Adr_NX90_biss1_app_biss_sc5 0xFF8022D4
#define DFLT_VAL_NX90_biss_sc5      0x00000000

#define MSK_NX90_biss_sc5_SCDLEN5            0x0000003f
#define SRT_NX90_biss_sc5_SCDLEN5            0
#define DFLT_VAL_NX90_biss_sc5_SCDLEN5       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_SCDLEN5    0x00000000
#define MSK_NX90_biss_sc5_ENSCD5             0x00000040
#define SRT_NX90_biss_sc5_ENSCD5             6
#define DFLT_VAL_NX90_biss_sc5_ENSCD5        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_ENSCD5     0x00000000
#define MSK_NX90_biss_sc5_LSTOP5             0x00000080
#define SRT_NX90_biss_sc5_LSTOP5             7
#define DFLT_VAL_NX90_biss_sc5_LSTOP5        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_LSTOP5     0x00000000
#define MSK_NX90_biss_sc5_SCRCPOLY5          0x00007f00
#define SRT_NX90_biss_sc5_SCRCPOLY5          8
#define DFLT_VAL_NX90_biss_sc5_SCRCPOLY5     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_SCRCPOLY5  0x00000000
#define MSK_NX90_biss_sc5_SELCRCS5           0x00008000
#define SRT_NX90_biss_sc5_SELCRCS5           15
#define DFLT_VAL_NX90_biss_sc5_SELCRCS5      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_SELCRCS5   0x00000000
#define MSK_NX90_biss_sc5_SCRCSTART5         0xffff0000
#define SRT_NX90_biss_sc5_SCRCSTART5         16
#define DFLT_VAL_NX90_biss_sc5_SCRCSTART5    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc5_SCRCSTART5 0x00000000

/* all used bits of 'NX90_biss_sc5': */
#define MSK_USED_BITS_NX90_biss_sc5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc6 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc6       0x000000D8
#define Adr_NX90_biss0_app_biss_sc6 0xFF8021D8
#define Adr_NX90_biss1_app_biss_sc6 0xFF8022D8
#define DFLT_VAL_NX90_biss_sc6      0x00000000

#define MSK_NX90_biss_sc6_SCDLEN6            0x0000003f
#define SRT_NX90_biss_sc6_SCDLEN6            0
#define DFLT_VAL_NX90_biss_sc6_SCDLEN6       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_SCDLEN6    0x00000000
#define MSK_NX90_biss_sc6_ENSCD6             0x00000040
#define SRT_NX90_biss_sc6_ENSCD6             6
#define DFLT_VAL_NX90_biss_sc6_ENSCD6        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_ENSCD6     0x00000000
#define MSK_NX90_biss_sc6_LSTOP6             0x00000080
#define SRT_NX90_biss_sc6_LSTOP6             7
#define DFLT_VAL_NX90_biss_sc6_LSTOP6        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_LSTOP6     0x00000000
#define MSK_NX90_biss_sc6_SCRCPOLY6          0x00007f00
#define SRT_NX90_biss_sc6_SCRCPOLY6          8
#define DFLT_VAL_NX90_biss_sc6_SCRCPOLY6     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_SCRCPOLY6  0x00000000
#define MSK_NX90_biss_sc6_SELCRCS6           0x00008000
#define SRT_NX90_biss_sc6_SELCRCS6           15
#define DFLT_VAL_NX90_biss_sc6_SELCRCS6      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_SELCRCS6   0x00000000
#define MSK_NX90_biss_sc6_SCRCSTART6         0xffff0000
#define SRT_NX90_biss_sc6_SCRCSTART6         16
#define DFLT_VAL_NX90_biss_sc6_SCRCSTART6    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc6_SCRCSTART6 0x00000000

/* all used bits of 'NX90_biss_sc6': */
#define MSK_USED_BITS_NX90_biss_sc6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_sc7 */
/* => Slave Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_sc7       0x000000DC
#define Adr_NX90_biss0_app_biss_sc7 0xFF8021DC
#define Adr_NX90_biss1_app_biss_sc7 0xFF8022DC
#define DFLT_VAL_NX90_biss_sc7      0x00000000

#define MSK_NX90_biss_sc7_SCDLEN7            0x0000003f
#define SRT_NX90_biss_sc7_SCDLEN7            0
#define DFLT_VAL_NX90_biss_sc7_SCDLEN7       0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_SCDLEN7    0x00000000
#define MSK_NX90_biss_sc7_ENSC7              0x00000040
#define SRT_NX90_biss_sc7_ENSC7              6
#define DFLT_VAL_NX90_biss_sc7_ENSC7         0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_ENSC7      0x00000000
#define MSK_NX90_biss_sc7_LSTOP7             0x00000080
#define SRT_NX90_biss_sc7_LSTOP7             7
#define DFLT_VAL_NX90_biss_sc7_LSTOP7        0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_LSTOP7     0x00000000
#define MSK_NX90_biss_sc7_SCRCPOLY7          0x00007f00
#define SRT_NX90_biss_sc7_SCRCPOLY7          8
#define DFLT_VAL_NX90_biss_sc7_SCRCPOLY7     0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_SCRCPOLY7  0x00000000
#define MSK_NX90_biss_sc7_SELCRCS7           0x00008000
#define SRT_NX90_biss_sc7_SELCRCS7           15
#define DFLT_VAL_NX90_biss_sc7_SELCRCS7      0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_SELCRCS7   0x00000000
#define MSK_NX90_biss_sc7_SCRCSTART7         0xffff0000
#define SRT_NX90_biss_sc7_SCRCSTART7         16
#define DFLT_VAL_NX90_biss_sc7_SCRCSTART7    0x00000000
#define DFLT_BF_VAL_NX90_biss_sc7_SCRCSTART7 0x00000000

/* all used bits of 'NX90_biss_sc7': */
#define MSK_USED_BITS_NX90_biss_sc7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_ccc0 */
/* => Register Communication Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ccc0       0x000000E0
#define Adr_NX90_biss0_app_biss_ccc0 0xFF8021E0
#define Adr_NX90_biss1_app_biss_ccc0 0xFF8022E0
#define DFLT_VAL_NX90_biss_ccc0      0x00000000

#define MSK_NX90_biss_ccc0_REGADR         0x007f0000
#define SRT_NX90_biss_ccc0_REGADR         16
#define DFLT_VAL_NX90_biss_ccc0_REGADR    0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc0_REGADR 0x00000000
#define MSK_NX90_biss_ccc0_WNR            0x00800000
#define SRT_NX90_biss_ccc0_WNR            23
#define DFLT_VAL_NX90_biss_ccc0_WNR       0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc0_WNR    0x00000000
#define MSK_NX90_biss_ccc0_REGNUM         0x3f000000
#define SRT_NX90_biss_ccc0_REGNUM         24
#define DFLT_VAL_NX90_biss_ccc0_REGNUM    0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc0_REGNUM 0x00000000

/* all used bits of 'NX90_biss_ccc0': */
#define MSK_USED_BITS_NX90_biss_ccc0 0x3fff0000

/* --------------------------------------------------------------------- */
/* Register biss_ccc1_mc0 */
/* => Register Communication Configuration / Master Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ccc1_mc0       0x000000E4
#define Adr_NX90_biss0_app_biss_ccc1_mc0 0xFF8021E4
#define Adr_NX90_biss1_app_biss_ccc1_mc0 0xFF8022E4
#define DFLT_VAL_NX90_biss_ccc1_mc0      0x00000000

#define MSK_NX90_biss_ccc1_mc0_CHSEL              0x00000003
#define SRT_NX90_biss_ccc1_mc0_CHSEL              0
#define DFLT_VAL_NX90_biss_ccc1_mc0_CHSEL         0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CHSEL      0x00000000
#define MSK_NX90_biss_ccc1_mc0_HOLDCDM            0x00000100
#define SRT_NX90_biss_ccc1_mc0_HOLDCDM            8
#define DFLT_VAL_NX90_biss_ccc1_mc0_HOLDCDM       0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_HOLDCDM    0x00000000
#define MSK_NX90_biss_ccc1_mc0_EN_MO              0x00000200
#define SRT_NX90_biss_ccc1_mc0_EN_MO              9
#define DFLT_VAL_NX90_biss_ccc1_mc0_EN_MO         0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_EN_MO      0x00000000
#define MSK_NX90_biss_ccc1_mc0_IDA_TEST           0x00000800
#define SRT_NX90_biss_ccc1_mc0_IDA_TEST           11
#define DFLT_VAL_NX90_biss_ccc1_mc0_IDA_TEST      0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_IDA_TEST   0x00000000
#define MSK_NX90_biss_ccc1_mc0_CMD                0x00003000
#define SRT_NX90_biss_ccc1_mc0_CMD                12
#define DFLT_VAL_NX90_biss_ccc1_mc0_CMD           0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CMD        0x00000000
#define MSK_NX90_biss_ccc1_mc0_REGVERS            0x00004000
#define SRT_NX90_biss_ccc1_mc0_REGVERS            14
#define DFLT_VAL_NX90_biss_ccc1_mc0_REGVERS       0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_REGVERS    0x00000000
#define MSK_NX90_biss_ccc1_mc0_CTS                0x00008000
#define SRT_NX90_biss_ccc1_mc0_CTS                15
#define DFLT_VAL_NX90_biss_ccc1_mc0_CTS           0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_CTS        0x00000000
#define MSK_NX90_biss_ccc1_mc0_FREQS              0x001f0000
#define SRT_NX90_biss_ccc1_mc0_FREQS              16
#define DFLT_VAL_NX90_biss_ccc1_mc0_FREQS         0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_FREQS      0x00000000
#define MSK_NX90_biss_ccc1_mc0_FREQR              0x00e00000
#define SRT_NX90_biss_ccc1_mc0_FREQR              21
#define DFLT_VAL_NX90_biss_ccc1_mc0_FREQR         0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_FREQR      0x00000000
#define MSK_NX90_biss_ccc1_mc0_SINGLEBANK         0x01000000
#define SRT_NX90_biss_ccc1_mc0_SINGLEBANK         24
#define DFLT_VAL_NX90_biss_ccc1_mc0_SINGLEBANK    0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_SINGLEBANK 0x00000000
#define MSK_NX90_biss_ccc1_mc0_NOCRC              0x02000000
#define SRT_NX90_biss_ccc1_mc0_NOCRC              25
#define DFLT_VAL_NX90_biss_ccc1_mc0_NOCRC         0x00000000
#define DFLT_BF_VAL_NX90_biss_ccc1_mc0_NOCRC      0x00000000

/* all used bits of 'NX90_biss_ccc1_mc0': */
#define MSK_USED_BITS_NX90_biss_ccc1_mc0 0x03fffb03

/* --------------------------------------------------------------------- */
/* Register biss_mc1 */
/* => Master Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_mc1       0x000000E8
#define Adr_NX90_biss0_app_biss_mc1 0xFF8021E8
#define Adr_NX90_biss1_app_biss_mc1 0xFF8022E8
#define DFLT_VAL_NX90_biss_mc1      0x00000000

#define MSK_NX90_biss_mc1_FREQAGS          0x000000ff
#define SRT_NX90_biss_mc1_FREQAGS          0
#define DFLT_VAL_NX90_biss_mc1_FREQAGS     0x00000000
#define DFLT_BF_VAL_NX90_biss_mc1_FREQAGS  0x00000000
#define MSK_NX90_biss_mc1_MO_BUSY          0x0000ff00
#define SRT_NX90_biss_mc1_MO_BUSY          8
#define DFLT_VAL_NX90_biss_mc1_MO_BUSY     0x00000000
#define DFLT_BF_VAL_NX90_biss_mc1_MO_BUSY  0x00000000
#define MSK_NX90_biss_mc1_REVISION         0x00ff0000
#define SRT_NX90_biss_mc1_REVISION         16
#define DFLT_VAL_NX90_biss_mc1_REVISION    0x00000000
#define DFLT_BF_VAL_NX90_biss_mc1_REVISION 0x00000000
#define MSK_NX90_biss_mc1_VERSION          0xff000000
#define SRT_NX90_biss_mc1_VERSION          24
#define DFLT_VAL_NX90_biss_mc1_VERSION     0x00000000
#define DFLT_BF_VAL_NX90_biss_mc1_VERSION  0x00000000

/* all used bits of 'NX90_biss_mc1': */
#define MSK_USED_BITS_NX90_biss_mc1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register biss_cc_sl */
/* => Channel Configuration */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_cc_sl       0x000000EC
#define Adr_NX90_biss0_app_biss_cc_sl 0xFF8021EC
#define Adr_NX90_biss1_app_biss_cc_sl 0xFF8022EC
#define DFLT_VAL_NX90_biss_cc_sl      0x00000001

#define MSK_NX90_biss_cc_sl_cc_sl_reserved1         0x0000000f
#define SRT_NX90_biss_cc_sl_cc_sl_reserved1         0
#define DFLT_VAL_NX90_biss_cc_sl_cc_sl_reserved1    0x00000001
#define DFLT_BF_VAL_NX90_biss_cc_sl_cc_sl_reserved1 0x00000001
#define MSK_NX90_biss_cc_sl_SLAVELOC5               0x00000010
#define SRT_NX90_biss_cc_sl_SLAVELOC5               4
#define DFLT_VAL_NX90_biss_cc_sl_SLAVELOC5          0x00000000
#define DFLT_BF_VAL_NX90_biss_cc_sl_SLAVELOC5       0x00000000
#define MSK_NX90_biss_cc_sl_CFGCH1                  0x00000300
#define SRT_NX90_biss_cc_sl_CFGCH1                  8
#define DFLT_VAL_NX90_biss_cc_sl_CFGCH1             0x00000000
#define DFLT_BF_VAL_NX90_biss_cc_sl_CFGCH1          0x00000000
#define MSK_NX90_biss_cc_sl_CFGCH2                  0x00000c00
#define SRT_NX90_biss_cc_sl_CFGCH2                  10
#define DFLT_VAL_NX90_biss_cc_sl_CFGCH2             0x00000000
#define DFLT_BF_VAL_NX90_biss_cc_sl_CFGCH2          0x00000000
#define MSK_NX90_biss_cc_sl_ACTnSENS                0xff000000
#define SRT_NX90_biss_cc_sl_ACTnSENS                24
#define DFLT_VAL_NX90_biss_cc_sl_ACTnSENS           0x00000000
#define DFLT_BF_VAL_NX90_biss_cc_sl_ACTnSENS        0x00000000

/* all used bits of 'NX90_biss_cc_sl': */
#define MSK_USED_BITS_NX90_biss_cc_sl 0xff000f1f

/* --------------------------------------------------------------------- */
/* Register biss_status0 */
/* => Status Information */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_status0       0x000000F0
#define Adr_NX90_biss0_app_biss_status0 0xFF8021F0
#define Adr_NX90_biss1_app_biss_status0 0xFF8022F0

#define MSK_NX90_biss_status0_EOT               0x00000001
#define SRT_NX90_biss_status0_EOT               0
#define MSK_NX90_biss_status0_status0_reserved1 0x00000002
#define SRT_NX90_biss_status0_status0_reserved1 1
#define MSK_NX90_biss_status0_REGEND            0x00000004
#define SRT_NX90_biss_status0_REGEND            2
#define MSK_NX90_biss_status0_nREGERR           0x00000008
#define SRT_NX90_biss_status0_nREGERR           3
#define MSK_NX90_biss_status0_nSCDERR           0x00000010
#define SRT_NX90_biss_status0_nSCDERR           4
#define MSK_NX90_biss_status0_nDELAYERR         0x00000020
#define SRT_NX90_biss_status0_nDELAYERR         5
#define MSK_NX90_biss_status0_nAGSERR           0x00000040
#define SRT_NX90_biss_status0_nAGSERR           6
#define MSK_NX90_biss_status0_nERR              0x00000080
#define SRT_NX90_biss_status0_nERR              7
#define MSK_NX90_biss_status0_SVALID0           0x00000200
#define SRT_NX90_biss_status0_SVALID0           9
#define MSK_NX90_biss_status0_SVALID1           0x00000800
#define SRT_NX90_biss_status0_SVALID1           11
#define MSK_NX90_biss_status0_SVALID2           0x00002000
#define SRT_NX90_biss_status0_SVALID2           13
#define MSK_NX90_biss_status0_SVALID3           0x00008000
#define SRT_NX90_biss_status0_SVALID3           15
#define MSK_NX90_biss_status0_SVALID4           0x00020000
#define SRT_NX90_biss_status0_SVALID4           17
#define MSK_NX90_biss_status0_SVALID5           0x00080000
#define SRT_NX90_biss_status0_SVALID5           19
#define MSK_NX90_biss_status0_SVALID6           0x00200000
#define SRT_NX90_biss_status0_SVALID6           21
#define MSK_NX90_biss_status0_SVALID7           0x00800000
#define SRT_NX90_biss_status0_SVALID7           23
#define MSK_NX90_biss_status0_REGBYTES          0x3f000000
#define SRT_NX90_biss_status0_REGBYTES          24
#define MSK_NX90_biss_status0_CDSSEL            0x40000000
#define SRT_NX90_biss_status0_CDSSEL            30
#define MSK_NX90_biss_status0_CDMTIMEOUT        0x80000000
#define SRT_NX90_biss_status0_CDMTIMEOUT        31

/* all used bits of 'NX90_biss_status0': */
#define MSK_USED_BITS_NX90_biss_status0 0xffaaaaff

/* --------------------------------------------------------------------- */
/* Register biss_ir */
/* => Instruction Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_ir       0x000000F4
#define Adr_NX90_biss0_app_biss_ir 0xFF8021F4
#define Adr_NX90_biss1_app_biss_ir 0xFF8022F4
#define DFLT_VAL_NX90_biss_ir      0x00000000

#define MSK_NX90_biss_ir_AGS              0x00000001
#define SRT_NX90_biss_ir_AGS              0
#define DFLT_VAL_NX90_biss_ir_AGS         0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_AGS      0x00000000
#define MSK_NX90_biss_ir_INSTR            0x0000000e
#define SRT_NX90_biss_ir_INSTR            1
#define DFLT_VAL_NX90_biss_ir_INSTR       0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_INSTR    0x00000000
#define MSK_NX90_biss_ir_INIT             0x00000010
#define SRT_NX90_biss_ir_INIT             4
#define DFLT_VAL_NX90_biss_ir_INIT        0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_INIT     0x00000000
#define MSK_NX90_biss_ir_SWBANK           0x00000020
#define SRT_NX90_biss_ir_SWBANK           5
#define DFLT_VAL_NX90_biss_ir_SWBANK      0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_SWBANK   0x00000000
#define MSK_NX90_biss_ir_HOLDBANK         0x00000040
#define SRT_NX90_biss_ir_HOLDBANK         6
#define DFLT_VAL_NX90_biss_ir_HOLDBANK    0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_HOLDBANK 0x00000000
#define MSK_NX90_biss_ir_BREAK            0x00000080
#define SRT_NX90_biss_ir_BREAK            7
#define DFLT_VAL_NX90_biss_ir_BREAK       0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_BREAK    0x00000000
#define MSK_NX90_biss_ir_CLKENI           0x00000100
#define SRT_NX90_biss_ir_CLKENI           8
#define DFLT_VAL_NX90_biss_ir_CLKENI      0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_CLKENI   0x00000000
#define MSK_NX90_biss_ir_ENTEST           0x00000200
#define SRT_NX90_biss_ir_ENTEST           9
#define DFLT_VAL_NX90_biss_ir_ENTEST      0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_ENTEST   0x00000000
#define MSK_NX90_biss_ir_CFGIF            0x00000c00
#define SRT_NX90_biss_ir_CFGIF            10
#define DFLT_VAL_NX90_biss_ir_CFGIF       0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_CFGIF    0x00000000
#define MSK_NX90_biss_ir_MAFS             0x00001000
#define SRT_NX90_biss_ir_MAFS             12
#define DFLT_VAL_NX90_biss_ir_MAFS        0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_MAFS     0x00000000
#define MSK_NX90_biss_ir_MAVS             0x00002000
#define SRT_NX90_biss_ir_MAVS             13
#define DFLT_VAL_NX90_biss_ir_MAVS        0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_MAVS     0x00000000
#define MSK_NX90_biss_ir_MAFO             0x00004000
#define SRT_NX90_biss_ir_MAFO             14
#define DFLT_VAL_NX90_biss_ir_MAFO        0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_MAFO     0x00000000
#define MSK_NX90_biss_ir_MAVO             0x00008000
#define SRT_NX90_biss_ir_MAVO             15
#define DFLT_VAL_NX90_biss_ir_MAVO        0x00000000
#define DFLT_BF_VAL_NX90_biss_ir_MAVO     0x00000000

/* all used bits of 'NX90_biss_ir': */
#define MSK_USED_BITS_NX90_biss_ir 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register biss_status1 */
/* => Status Information */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_biss_status1       0x000000F8
#define Adr_NX90_biss0_app_biss_status1 0xFF8021F8
#define Adr_NX90_biss1_app_biss_status1 0xFF8022F8

#define MSK_NX90_biss_status1_SL1         0x00000001
#define SRT_NX90_biss_status1_SL1         0
#define MSK_NX90_biss_status1_CDS1        0x00000002
#define SRT_NX90_biss_status1_CDS1        1
#define MSK_NX90_biss_status1_SWBANKFAILS 0x01000000
#define SRT_NX90_biss_status1_SWBANKFAILS 24

/* all used bits of 'NX90_biss_status1': */
#define MSK_USED_BITS_NX90_biss_status1 0x01000003


/* ===================================================================== */

/* AREA menc */
/* Area of menc_app */

/* ===================================================================== */

#define Addr_NX90_menc_app 0xFF802300

/* --------------------------------------------------------------------- */
/* Register menc_config */
/* => Encoder configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_config      0x00000000
#define Adr_NX90_menc_app_menc_config 0xFF802300
#define Adr_NX90_menc_config          0xFF802300
#define DFLT_VAL_NX90_menc_config     0x00000000

#define MSK_NX90_menc_config_enc0_en                         0x00000001
#define SRT_NX90_menc_config_enc0_en                         0
#define DFLT_VAL_NX90_menc_config_enc0_en                    0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc0_en                 0x00000000
#define MSK_NX90_menc_config_enc0_filter_sample_rate         0x0000000e
#define SRT_NX90_menc_config_enc0_filter_sample_rate         1
#define DFLT_VAL_NX90_menc_config_enc0_filter_sample_rate    0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc0_filter_sample_rate 0x00000000
#define MSK_NX90_menc_config_enc0_count_dir                  0x00000010
#define SRT_NX90_menc_config_enc0_count_dir                  4
#define DFLT_VAL_NX90_menc_config_enc0_count_dir             0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc0_count_dir          0x00000000
#define MSK_NX90_menc_config_enc1_en                         0x00000100
#define SRT_NX90_menc_config_enc1_en                         8
#define DFLT_VAL_NX90_menc_config_enc1_en                    0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc1_en                 0x00000000
#define MSK_NX90_menc_config_enc1_filter_sample_rate         0x00000e00
#define SRT_NX90_menc_config_enc1_filter_sample_rate         9
#define DFLT_VAL_NX90_menc_config_enc1_filter_sample_rate    0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc1_filter_sample_rate 0x00000000
#define MSK_NX90_menc_config_enc1_count_dir                  0x00001000
#define SRT_NX90_menc_config_enc1_count_dir                  12
#define DFLT_VAL_NX90_menc_config_enc1_count_dir             0x00000000
#define DFLT_BF_VAL_NX90_menc_config_enc1_count_dir          0x00000000
#define MSK_NX90_menc_config_mp0_en                          0x00010000
#define SRT_NX90_menc_config_mp0_en                          16
#define DFLT_VAL_NX90_menc_config_mp0_en                     0x00000000
#define DFLT_BF_VAL_NX90_menc_config_mp0_en                  0x00000000
#define MSK_NX90_menc_config_mp0_filter_sample_rate          0x000e0000
#define SRT_NX90_menc_config_mp0_filter_sample_rate          17
#define DFLT_VAL_NX90_menc_config_mp0_filter_sample_rate     0x00000000
#define DFLT_BF_VAL_NX90_menc_config_mp0_filter_sample_rate  0x00000000
#define MSK_NX90_menc_config_mp1_en                          0x01000000
#define SRT_NX90_menc_config_mp1_en                          24
#define DFLT_VAL_NX90_menc_config_mp1_en                     0x00000000
#define DFLT_BF_VAL_NX90_menc_config_mp1_en                  0x00000000
#define MSK_NX90_menc_config_mp1_filter_sample_rate          0x0e000000
#define SRT_NX90_menc_config_mp1_filter_sample_rate          25
#define DFLT_VAL_NX90_menc_config_mp1_filter_sample_rate     0x00000000
#define DFLT_BF_VAL_NX90_menc_config_mp1_filter_sample_rate  0x00000000

/* all used bits of 'NX90_menc_config': */
#define MSK_USED_BITS_NX90_menc_config 0x0f0f1f1f

/* --------------------------------------------------------------------- */
/* Register menc_enc0_position */
/* => Position of encoder 0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_enc0_position      0x00000004
#define Adr_NX90_menc_app_menc_enc0_position 0xFF802304
#define Adr_NX90_menc_enc0_position          0xFF802304
#define DFLT_VAL_NX90_menc_enc0_position     0x00000000

#define MSK_NX90_menc_enc0_position_val         0xffffffff
#define SRT_NX90_menc_enc0_position_val         0
#define DFLT_VAL_NX90_menc_enc0_position_val    0x00000000
#define DFLT_BF_VAL_NX90_menc_enc0_position_val 0x00000000

/* all used bits of 'NX90_menc_enc0_position': */
#define MSK_USED_BITS_NX90_menc_enc0_position 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_enc1_position */
/* => Position of encoder 1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_enc1_position      0x00000008
#define Adr_NX90_menc_app_menc_enc1_position 0xFF802308
#define Adr_NX90_menc_enc1_position          0xFF802308
#define DFLT_VAL_NX90_menc_enc1_position     0x00000000

#define MSK_NX90_menc_enc1_position_val         0xffffffff
#define SRT_NX90_menc_enc1_position_val         0
#define DFLT_VAL_NX90_menc_enc1_position_val    0x00000000
#define DFLT_BF_VAL_NX90_menc_enc1_position_val 0x00000000

/* all used bits of 'NX90_menc_enc1_position': */
#define MSK_USED_BITS_NX90_menc_enc1_position 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_capture_now */
/* => Capture now register: */
/*    This register allows activating the capture event by software for all 4 capture units. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture_now      0x0000000C
#define Adr_NX90_menc_app_menc_capture_now 0xFF80230C
#define Adr_NX90_menc_capture_now          0xFF80230C
#define DFLT_VAL_NX90_menc_capture_now     0x00000000

#define MSK_NX90_menc_capture_now_cap0_now         0x00000001
#define SRT_NX90_menc_capture_now_cap0_now         0
#define DFLT_VAL_NX90_menc_capture_now_cap0_now    0x00000000
#define DFLT_BF_VAL_NX90_menc_capture_now_cap0_now 0x00000000
#define MSK_NX90_menc_capture_now_cap1_now         0x00000002
#define SRT_NX90_menc_capture_now_cap1_now         1
#define DFLT_VAL_NX90_menc_capture_now_cap1_now    0x00000000
#define DFLT_BF_VAL_NX90_menc_capture_now_cap1_now 0x00000000
#define MSK_NX90_menc_capture_now_cap2_now         0x00000004
#define SRT_NX90_menc_capture_now_cap2_now         2
#define DFLT_VAL_NX90_menc_capture_now_cap2_now    0x00000000
#define DFLT_BF_VAL_NX90_menc_capture_now_cap2_now 0x00000000
#define MSK_NX90_menc_capture_now_cap3_now         0x00000008
#define SRT_NX90_menc_capture_now_cap3_now         3
#define DFLT_VAL_NX90_menc_capture_now_cap3_now    0x00000000
#define DFLT_BF_VAL_NX90_menc_capture_now_cap3_now 0x00000000

/* all used bits of 'NX90_menc_capture_now': */
#define MSK_USED_BITS_NX90_menc_capture_now 0x0000000f

/* --------------------------------------------------------------------- */
/* Register menc_capture0_config */
/* => Capture unit 0 configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture0_config      0x00000010
#define Adr_NX90_menc_app_menc_capture0_config 0xFF802310
#define Adr_NX90_menc_capture0_config          0xFF802310
#define DFLT_VAL_NX90_menc_capture0_config     0x0001ffff

#define MSK_NX90_menc_capture0_config_trigger         0x0001ffff
#define SRT_NX90_menc_capture0_config_trigger         0
#define DFLT_VAL_NX90_menc_capture0_config_trigger    0x0001ffff
#define DFLT_BF_VAL_NX90_menc_capture0_config_trigger 0x0001ffff
#define MSK_NX90_menc_capture0_config_src             0x000e0000
#define SRT_NX90_menc_capture0_config_src             17
#define DFLT_VAL_NX90_menc_capture0_config_src        0x00000000
#define DFLT_BF_VAL_NX90_menc_capture0_config_src     0x00000000
#define MSK_NX90_menc_capture0_config_src_nr          0x00100000
#define SRT_NX90_menc_capture0_config_src_nr          20
#define DFLT_VAL_NX90_menc_capture0_config_src_nr     0x00000000
#define DFLT_BF_VAL_NX90_menc_capture0_config_src_nr  0x00000000
#define MSK_NX90_menc_capture0_config_conce           0x00200000
#define SRT_NX90_menc_capture0_config_conce           21
#define DFLT_VAL_NX90_menc_capture0_config_conce      0x00000000
#define DFLT_BF_VAL_NX90_menc_capture0_config_conce   0x00000000

/* all used bits of 'NX90_menc_capture0_config': */
#define MSK_USED_BITS_NX90_menc_capture0_config 0x003fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture0_val */
/* => Capture unit 0 captured value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture0_val      0x00000014
#define Adr_NX90_menc_app_menc_capture0_val 0xFF802314
#define Adr_NX90_menc_capture0_val          0xFF802314

#define MSK_NX90_menc_capture0_val_val 0xffffffff
#define SRT_NX90_menc_capture0_val_val 0

/* all used bits of 'NX90_menc_capture0_val': */
#define MSK_USED_BITS_NX90_menc_capture0_val 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_capture0_ta */
/* => Capture unit 0 Ta: */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture0_ta      0x00000018
#define Adr_NX90_menc_app_menc_capture0_ta 0xFF802318
#define Adr_NX90_menc_capture0_ta          0xFF802318

#define MSK_NX90_menc_capture0_ta_val 0x000fffff
#define SRT_NX90_menc_capture0_ta_val 0

/* all used bits of 'NX90_menc_capture0_ta': */
#define MSK_USED_BITS_NX90_menc_capture0_ta 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture0_te */
/* => Capture unit 0 Te */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture0_te      0x0000001C
#define Adr_NX90_menc_app_menc_capture0_te 0xFF80231C
#define Adr_NX90_menc_capture0_te          0xFF80231C

#define MSK_NX90_menc_capture0_te_val 0x000fffff
#define SRT_NX90_menc_capture0_te_val 0

/* all used bits of 'NX90_menc_capture0_te': */
#define MSK_USED_BITS_NX90_menc_capture0_te 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture1_config */
/* => Capture unit 1 configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture1_config      0x00000020
#define Adr_NX90_menc_app_menc_capture1_config 0xFF802320
#define Adr_NX90_menc_capture1_config          0xFF802320
#define DFLT_VAL_NX90_menc_capture1_config     0x0001ffff

#define MSK_NX90_menc_capture1_config_trigger         0x0001ffff
#define SRT_NX90_menc_capture1_config_trigger         0
#define DFLT_VAL_NX90_menc_capture1_config_trigger    0x0001ffff
#define DFLT_BF_VAL_NX90_menc_capture1_config_trigger 0x0001ffff
#define MSK_NX90_menc_capture1_config_src             0x000e0000
#define SRT_NX90_menc_capture1_config_src             17
#define DFLT_VAL_NX90_menc_capture1_config_src        0x00000000
#define DFLT_BF_VAL_NX90_menc_capture1_config_src     0x00000000
#define MSK_NX90_menc_capture1_config_src_nr          0x00100000
#define SRT_NX90_menc_capture1_config_src_nr          20
#define DFLT_VAL_NX90_menc_capture1_config_src_nr     0x00000000
#define DFLT_BF_VAL_NX90_menc_capture1_config_src_nr  0x00000000
#define MSK_NX90_menc_capture1_config_conce           0x00200000
#define SRT_NX90_menc_capture1_config_conce           21
#define DFLT_VAL_NX90_menc_capture1_config_conce      0x00000000
#define DFLT_BF_VAL_NX90_menc_capture1_config_conce   0x00000000

/* all used bits of 'NX90_menc_capture1_config': */
#define MSK_USED_BITS_NX90_menc_capture1_config 0x003fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture1_val */
/* => Capture unit 1 captured value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture1_val      0x00000024
#define Adr_NX90_menc_app_menc_capture1_val 0xFF802324
#define Adr_NX90_menc_capture1_val          0xFF802324

#define MSK_NX90_menc_capture1_val_val 0xffffffff
#define SRT_NX90_menc_capture1_val_val 0

/* all used bits of 'NX90_menc_capture1_val': */
#define MSK_USED_BITS_NX90_menc_capture1_val 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_capture1_ta */
/* => Capture unit 1 Ta: */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture1_ta      0x00000028
#define Adr_NX90_menc_app_menc_capture1_ta 0xFF802328
#define Adr_NX90_menc_capture1_ta          0xFF802328

#define MSK_NX90_menc_capture1_ta_val 0x000fffff
#define SRT_NX90_menc_capture1_ta_val 0

/* all used bits of 'NX90_menc_capture1_ta': */
#define MSK_USED_BITS_NX90_menc_capture1_ta 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture1_te */
/* => Capture unit 1 Te */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture1_te      0x0000002C
#define Adr_NX90_menc_app_menc_capture1_te 0xFF80232C
#define Adr_NX90_menc_capture1_te          0xFF80232C

#define MSK_NX90_menc_capture1_te_val 0x000fffff
#define SRT_NX90_menc_capture1_te_val 0

/* all used bits of 'NX90_menc_capture1_te': */
#define MSK_USED_BITS_NX90_menc_capture1_te 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture2_config */
/* => Capture unit 2 configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture2_config      0x00000030
#define Adr_NX90_menc_app_menc_capture2_config 0xFF802330
#define Adr_NX90_menc_capture2_config          0xFF802330
#define DFLT_VAL_NX90_menc_capture2_config     0x0001ffff

#define MSK_NX90_menc_capture2_config_trigger         0x0001ffff
#define SRT_NX90_menc_capture2_config_trigger         0
#define DFLT_VAL_NX90_menc_capture2_config_trigger    0x0001ffff
#define DFLT_BF_VAL_NX90_menc_capture2_config_trigger 0x0001ffff
#define MSK_NX90_menc_capture2_config_src             0x000e0000
#define SRT_NX90_menc_capture2_config_src             17
#define DFLT_VAL_NX90_menc_capture2_config_src        0x00000000
#define DFLT_BF_VAL_NX90_menc_capture2_config_src     0x00000000
#define MSK_NX90_menc_capture2_config_src_nr          0x00100000
#define SRT_NX90_menc_capture2_config_src_nr          20
#define DFLT_VAL_NX90_menc_capture2_config_src_nr     0x00000000
#define DFLT_BF_VAL_NX90_menc_capture2_config_src_nr  0x00000000
#define MSK_NX90_menc_capture2_config_conce           0x00200000
#define SRT_NX90_menc_capture2_config_conce           21
#define DFLT_VAL_NX90_menc_capture2_config_conce      0x00000000
#define DFLT_BF_VAL_NX90_menc_capture2_config_conce   0x00000000

/* all used bits of 'NX90_menc_capture2_config': */
#define MSK_USED_BITS_NX90_menc_capture2_config 0x003fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture2_val */
/* => Capture unit 2 captured value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture2_val      0x00000034
#define Adr_NX90_menc_app_menc_capture2_val 0xFF802334
#define Adr_NX90_menc_capture2_val          0xFF802334

#define MSK_NX90_menc_capture2_val_val 0xffffffff
#define SRT_NX90_menc_capture2_val_val 0

/* all used bits of 'NX90_menc_capture2_val': */
#define MSK_USED_BITS_NX90_menc_capture2_val 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_capture2_ta */
/* => Capture unit 2 Ta: */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture2_ta      0x00000038
#define Adr_NX90_menc_app_menc_capture2_ta 0xFF802338
#define Adr_NX90_menc_capture2_ta          0xFF802338

#define MSK_NX90_menc_capture2_ta_val 0x000fffff
#define SRT_NX90_menc_capture2_ta_val 0

/* all used bits of 'NX90_menc_capture2_ta': */
#define MSK_USED_BITS_NX90_menc_capture2_ta 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture2_te */
/* => Capture unit 2 Te */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture2_te      0x0000003C
#define Adr_NX90_menc_app_menc_capture2_te 0xFF80233C
#define Adr_NX90_menc_capture2_te          0xFF80233C

#define MSK_NX90_menc_capture2_te_val 0x000fffff
#define SRT_NX90_menc_capture2_te_val 0

/* all used bits of 'NX90_menc_capture2_te': */
#define MSK_USED_BITS_NX90_menc_capture2_te 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture3_config */
/* => Capture unit 3 configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture3_config      0x00000040
#define Adr_NX90_menc_app_menc_capture3_config 0xFF802340
#define Adr_NX90_menc_capture3_config          0xFF802340
#define DFLT_VAL_NX90_menc_capture3_config     0x0001ffff

#define MSK_NX90_menc_capture3_config_trigger         0x0001ffff
#define SRT_NX90_menc_capture3_config_trigger         0
#define DFLT_VAL_NX90_menc_capture3_config_trigger    0x0001ffff
#define DFLT_BF_VAL_NX90_menc_capture3_config_trigger 0x0001ffff
#define MSK_NX90_menc_capture3_config_src             0x000e0000
#define SRT_NX90_menc_capture3_config_src             17
#define DFLT_VAL_NX90_menc_capture3_config_src        0x00000000
#define DFLT_BF_VAL_NX90_menc_capture3_config_src     0x00000000
#define MSK_NX90_menc_capture3_config_src_nr          0x00100000
#define SRT_NX90_menc_capture3_config_src_nr          20
#define DFLT_VAL_NX90_menc_capture3_config_src_nr     0x00000000
#define DFLT_BF_VAL_NX90_menc_capture3_config_src_nr  0x00000000
#define MSK_NX90_menc_capture3_config_conce           0x00200000
#define SRT_NX90_menc_capture3_config_conce           21
#define DFLT_VAL_NX90_menc_capture3_config_conce      0x00000000
#define DFLT_BF_VAL_NX90_menc_capture3_config_conce   0x00000000

/* all used bits of 'NX90_menc_capture3_config': */
#define MSK_USED_BITS_NX90_menc_capture3_config 0x003fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture3_val */
/* => Capture unit 3 captured value */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture3_val      0x00000044
#define Adr_NX90_menc_app_menc_capture3_val 0xFF802344
#define Adr_NX90_menc_capture3_val          0xFF802344

#define MSK_NX90_menc_capture3_val_val 0xffffffff
#define SRT_NX90_menc_capture3_val_val 0

/* all used bits of 'NX90_menc_capture3_val': */
#define MSK_USED_BITS_NX90_menc_capture3_val 0xffffffff

/* --------------------------------------------------------------------- */
/* Register menc_capture3_ta */
/* => Capture unit 3 Ta: */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture3_ta      0x00000048
#define Adr_NX90_menc_app_menc_capture3_ta 0xFF802348
#define Adr_NX90_menc_capture3_ta          0xFF802348

#define MSK_NX90_menc_capture3_ta_val 0x000fffff
#define SRT_NX90_menc_capture3_ta_val 0

/* all used bits of 'NX90_menc_capture3_ta': */
#define MSK_USED_BITS_NX90_menc_capture3_ta 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_capture3_te */
/* => Capture unit 3 Te */
/*    This register is only used for debug purposes. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_capture3_te      0x0000004C
#define Adr_NX90_menc_app_menc_capture3_te 0xFF80234C
#define Adr_NX90_menc_capture3_te          0xFF80234C

#define MSK_NX90_menc_capture3_te_val 0x000fffff
#define SRT_NX90_menc_capture3_te_val 0

/* all used bits of 'NX90_menc_capture3_te': */
#define MSK_USED_BITS_NX90_menc_capture3_te 0x000fffff

/* --------------------------------------------------------------------- */
/* Register menc_status */
/* => Position and capture status: */
/*    This register includes all raw IRQs and encoder direction. */
/*    To reset an IRQ, write 1 to appropriate bit (except enc?_dir_ro). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_status      0x00000050
#define Adr_NX90_menc_app_menc_status 0xFF802350
#define Adr_NX90_menc_status          0xFF802350
#define DFLT_VAL_NX90_menc_status     0x00000000

#define MSK_NX90_menc_status_enc0_edge                0x00000001
#define SRT_NX90_menc_status_enc0_edge                0
#define DFLT_VAL_NX90_menc_status_enc0_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_edge        0x00000000
#define MSK_NX90_menc_status_enc0_ovfl_pos            0x00000002
#define SRT_NX90_menc_status_enc0_ovfl_pos            1
#define DFLT_VAL_NX90_menc_status_enc0_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_ovfl_pos    0x00000000
#define MSK_NX90_menc_status_enc0_ovfl_neg            0x00000004
#define SRT_NX90_menc_status_enc0_ovfl_neg            2
#define DFLT_VAL_NX90_menc_status_enc0_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_ovfl_neg    0x00000000
#define MSK_NX90_menc_status_enc0_phase_error         0x00000008
#define SRT_NX90_menc_status_enc0_phase_error         3
#define DFLT_VAL_NX90_menc_status_enc0_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_phase_error 0x00000000
#define MSK_NX90_menc_status_enc0_n                   0x00000010
#define SRT_NX90_menc_status_enc0_n                   4
#define DFLT_VAL_NX90_menc_status_enc0_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_n           0x00000000
#define MSK_NX90_menc_status_enc0_dir_ro              0x00000080
#define SRT_NX90_menc_status_enc0_dir_ro              7
#define DFLT_VAL_NX90_menc_status_enc0_dir_ro         0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc0_dir_ro      0x00000000
#define MSK_NX90_menc_status_enc1_edge                0x00000100
#define SRT_NX90_menc_status_enc1_edge                8
#define DFLT_VAL_NX90_menc_status_enc1_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_edge        0x00000000
#define MSK_NX90_menc_status_enc1_ovfl_pos            0x00000200
#define SRT_NX90_menc_status_enc1_ovfl_pos            9
#define DFLT_VAL_NX90_menc_status_enc1_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_ovfl_pos    0x00000000
#define MSK_NX90_menc_status_enc1_ovfl_neg            0x00000400
#define SRT_NX90_menc_status_enc1_ovfl_neg            10
#define DFLT_VAL_NX90_menc_status_enc1_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_ovfl_neg    0x00000000
#define MSK_NX90_menc_status_enc1_phase_error         0x00000800
#define SRT_NX90_menc_status_enc1_phase_error         11
#define DFLT_VAL_NX90_menc_status_enc1_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_phase_error 0x00000000
#define MSK_NX90_menc_status_enc1_n                   0x00001000
#define SRT_NX90_menc_status_enc1_n                   12
#define DFLT_VAL_NX90_menc_status_enc1_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_n           0x00000000
#define MSK_NX90_menc_status_enc1_dir_ro              0x00008000
#define SRT_NX90_menc_status_enc1_dir_ro              15
#define DFLT_VAL_NX90_menc_status_enc1_dir_ro         0x00000000
#define DFLT_BF_VAL_NX90_menc_status_enc1_dir_ro      0x00000000
#define MSK_NX90_menc_status_cap0                     0x00010000
#define SRT_NX90_menc_status_cap0                     16
#define DFLT_VAL_NX90_menc_status_cap0                0x00000000
#define DFLT_BF_VAL_NX90_menc_status_cap0             0x00000000
#define MSK_NX90_menc_status_cap1                     0x00020000
#define SRT_NX90_menc_status_cap1                     17
#define DFLT_VAL_NX90_menc_status_cap1                0x00000000
#define DFLT_BF_VAL_NX90_menc_status_cap1             0x00000000
#define MSK_NX90_menc_status_cap2                     0x00040000
#define SRT_NX90_menc_status_cap2                     18
#define DFLT_VAL_NX90_menc_status_cap2                0x00000000
#define DFLT_BF_VAL_NX90_menc_status_cap2             0x00000000
#define MSK_NX90_menc_status_cap3                     0x00080000
#define SRT_NX90_menc_status_cap3                     19
#define DFLT_VAL_NX90_menc_status_cap3                0x00000000
#define DFLT_BF_VAL_NX90_menc_status_cap3             0x00000000
#define MSK_NX90_menc_status_mp0                      0x01000000
#define SRT_NX90_menc_status_mp0                      24
#define DFLT_VAL_NX90_menc_status_mp0                 0x00000000
#define DFLT_BF_VAL_NX90_menc_status_mp0              0x00000000
#define MSK_NX90_menc_status_mp1                      0x02000000
#define SRT_NX90_menc_status_mp1                      25
#define DFLT_VAL_NX90_menc_status_mp1                 0x00000000
#define DFLT_BF_VAL_NX90_menc_status_mp1              0x00000000

/* all used bits of 'NX90_menc_status': */
#define MSK_USED_BITS_NX90_menc_status 0x030f9f9f

/* --------------------------------------------------------------------- */
/* Register menc_irq_masked */
/* => Masked IRQ register: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_irq_masked      0x00000054
#define Adr_NX90_menc_app_menc_irq_masked 0xFF802354
#define Adr_NX90_menc_irq_masked          0xFF802354

#define MSK_NX90_menc_irq_masked_enc0_edge        0x00000001
#define SRT_NX90_menc_irq_masked_enc0_edge        0
#define MSK_NX90_menc_irq_masked_enc0_ovfl_pos    0x00000002
#define SRT_NX90_menc_irq_masked_enc0_ovfl_pos    1
#define MSK_NX90_menc_irq_masked_enc0_ovfl_neg    0x00000004
#define SRT_NX90_menc_irq_masked_enc0_ovfl_neg    2
#define MSK_NX90_menc_irq_masked_enc0_phase_error 0x00000008
#define SRT_NX90_menc_irq_masked_enc0_phase_error 3
#define MSK_NX90_menc_irq_masked_enc0_n           0x00000010
#define SRT_NX90_menc_irq_masked_enc0_n           4
#define MSK_NX90_menc_irq_masked_enc1_edge        0x00000100
#define SRT_NX90_menc_irq_masked_enc1_edge        8
#define MSK_NX90_menc_irq_masked_enc1_ovfl_pos    0x00000200
#define SRT_NX90_menc_irq_masked_enc1_ovfl_pos    9
#define MSK_NX90_menc_irq_masked_enc1_ovfl_neg    0x00000400
#define SRT_NX90_menc_irq_masked_enc1_ovfl_neg    10
#define MSK_NX90_menc_irq_masked_enc1_phase_error 0x00000800
#define SRT_NX90_menc_irq_masked_enc1_phase_error 11
#define MSK_NX90_menc_irq_masked_enc1_n           0x00001000
#define SRT_NX90_menc_irq_masked_enc1_n           12
#define MSK_NX90_menc_irq_masked_cap0             0x00010000
#define SRT_NX90_menc_irq_masked_cap0             16
#define MSK_NX90_menc_irq_masked_cap1             0x00020000
#define SRT_NX90_menc_irq_masked_cap1             17
#define MSK_NX90_menc_irq_masked_cap2             0x00040000
#define SRT_NX90_menc_irq_masked_cap2             18
#define MSK_NX90_menc_irq_masked_cap3             0x00080000
#define SRT_NX90_menc_irq_masked_cap3             19
#define MSK_NX90_menc_irq_masked_mp0              0x01000000
#define SRT_NX90_menc_irq_masked_mp0              24
#define MSK_NX90_menc_irq_masked_mp1              0x02000000
#define SRT_NX90_menc_irq_masked_mp1              25

/* all used bits of 'NX90_menc_irq_masked': */
#define MSK_USED_BITS_NX90_menc_irq_masked 0x030f1f1f

/* --------------------------------------------------------------------- */
/* Register menc_irq_msk_set */
/* => IRQ mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_menc_status */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_irq_msk_set      0x00000058
#define Adr_NX90_menc_app_menc_irq_msk_set 0xFF802358
#define Adr_NX90_menc_irq_msk_set          0xFF802358
#define DFLT_VAL_NX90_menc_irq_msk_set     0x00000000

#define MSK_NX90_menc_irq_msk_set_enc0_edge                0x00000001
#define SRT_NX90_menc_irq_msk_set_enc0_edge                0
#define DFLT_VAL_NX90_menc_irq_msk_set_enc0_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc0_edge        0x00000000
#define MSK_NX90_menc_irq_msk_set_enc0_ovfl_pos            0x00000002
#define SRT_NX90_menc_irq_msk_set_enc0_ovfl_pos            1
#define DFLT_VAL_NX90_menc_irq_msk_set_enc0_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc0_ovfl_pos    0x00000000
#define MSK_NX90_menc_irq_msk_set_enc0_ovfl_neg            0x00000004
#define SRT_NX90_menc_irq_msk_set_enc0_ovfl_neg            2
#define DFLT_VAL_NX90_menc_irq_msk_set_enc0_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc0_ovfl_neg    0x00000000
#define MSK_NX90_menc_irq_msk_set_enc0_phase_error         0x00000008
#define SRT_NX90_menc_irq_msk_set_enc0_phase_error         3
#define DFLT_VAL_NX90_menc_irq_msk_set_enc0_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc0_phase_error 0x00000000
#define MSK_NX90_menc_irq_msk_set_enc0_n                   0x00000010
#define SRT_NX90_menc_irq_msk_set_enc0_n                   4
#define DFLT_VAL_NX90_menc_irq_msk_set_enc0_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc0_n           0x00000000
#define MSK_NX90_menc_irq_msk_set_enc1_edge                0x00000100
#define SRT_NX90_menc_irq_msk_set_enc1_edge                8
#define DFLT_VAL_NX90_menc_irq_msk_set_enc1_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc1_edge        0x00000000
#define MSK_NX90_menc_irq_msk_set_enc1_ovfl_pos            0x00000200
#define SRT_NX90_menc_irq_msk_set_enc1_ovfl_pos            9
#define DFLT_VAL_NX90_menc_irq_msk_set_enc1_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc1_ovfl_pos    0x00000000
#define MSK_NX90_menc_irq_msk_set_enc1_ovfl_neg            0x00000400
#define SRT_NX90_menc_irq_msk_set_enc1_ovfl_neg            10
#define DFLT_VAL_NX90_menc_irq_msk_set_enc1_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc1_ovfl_neg    0x00000000
#define MSK_NX90_menc_irq_msk_set_enc1_phase_error         0x00000800
#define SRT_NX90_menc_irq_msk_set_enc1_phase_error         11
#define DFLT_VAL_NX90_menc_irq_msk_set_enc1_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc1_phase_error 0x00000000
#define MSK_NX90_menc_irq_msk_set_enc1_n                   0x00001000
#define SRT_NX90_menc_irq_msk_set_enc1_n                   12
#define DFLT_VAL_NX90_menc_irq_msk_set_enc1_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_enc1_n           0x00000000
#define MSK_NX90_menc_irq_msk_set_cap0                     0x00010000
#define SRT_NX90_menc_irq_msk_set_cap0                     16
#define DFLT_VAL_NX90_menc_irq_msk_set_cap0                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_cap0             0x00000000
#define MSK_NX90_menc_irq_msk_set_cap1                     0x00020000
#define SRT_NX90_menc_irq_msk_set_cap1                     17
#define DFLT_VAL_NX90_menc_irq_msk_set_cap1                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_cap1             0x00000000
#define MSK_NX90_menc_irq_msk_set_cap2                     0x00040000
#define SRT_NX90_menc_irq_msk_set_cap2                     18
#define DFLT_VAL_NX90_menc_irq_msk_set_cap2                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_cap2             0x00000000
#define MSK_NX90_menc_irq_msk_set_cap3                     0x00080000
#define SRT_NX90_menc_irq_msk_set_cap3                     19
#define DFLT_VAL_NX90_menc_irq_msk_set_cap3                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_cap3             0x00000000
#define MSK_NX90_menc_irq_msk_set_mp0                      0x01000000
#define SRT_NX90_menc_irq_msk_set_mp0                      24
#define DFLT_VAL_NX90_menc_irq_msk_set_mp0                 0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_mp0              0x00000000
#define MSK_NX90_menc_irq_msk_set_mp1                      0x02000000
#define SRT_NX90_menc_irq_msk_set_mp1                      25
#define DFLT_VAL_NX90_menc_irq_msk_set_mp1                 0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_set_mp1              0x00000000

/* all used bits of 'NX90_menc_irq_msk_set': */
#define MSK_USED_BITS_NX90_menc_irq_msk_set 0x030f1f1f

/* --------------------------------------------------------------------- */
/* Register menc_irq_msk_reset */
/* => IRQ mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_menc_irq_msk_reset      0x0000005C
#define Adr_NX90_menc_app_menc_irq_msk_reset 0xFF80235C
#define Adr_NX90_menc_irq_msk_reset          0xFF80235C
#define DFLT_VAL_NX90_menc_irq_msk_reset     0x00000000

#define MSK_NX90_menc_irq_msk_reset_enc0_edge                0x00000001
#define SRT_NX90_menc_irq_msk_reset_enc0_edge                0
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc0_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc0_edge        0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc0_ovfl_pos            0x00000002
#define SRT_NX90_menc_irq_msk_reset_enc0_ovfl_pos            1
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc0_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc0_ovfl_pos    0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc0_ovfl_neg            0x00000004
#define SRT_NX90_menc_irq_msk_reset_enc0_ovfl_neg            2
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc0_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc0_ovfl_neg    0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc0_phase_error         0x00000008
#define SRT_NX90_menc_irq_msk_reset_enc0_phase_error         3
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc0_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc0_phase_error 0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc0_n                   0x00000010
#define SRT_NX90_menc_irq_msk_reset_enc0_n                   4
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc0_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc0_n           0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc1_edge                0x00000100
#define SRT_NX90_menc_irq_msk_reset_enc1_edge                8
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc1_edge           0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc1_edge        0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc1_ovfl_pos            0x00000200
#define SRT_NX90_menc_irq_msk_reset_enc1_ovfl_pos            9
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc1_ovfl_pos       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc1_ovfl_pos    0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc1_ovfl_neg            0x00000400
#define SRT_NX90_menc_irq_msk_reset_enc1_ovfl_neg            10
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc1_ovfl_neg       0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc1_ovfl_neg    0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc1_phase_error         0x00000800
#define SRT_NX90_menc_irq_msk_reset_enc1_phase_error         11
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc1_phase_error    0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc1_phase_error 0x00000000
#define MSK_NX90_menc_irq_msk_reset_enc1_n                   0x00001000
#define SRT_NX90_menc_irq_msk_reset_enc1_n                   12
#define DFLT_VAL_NX90_menc_irq_msk_reset_enc1_n              0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_enc1_n           0x00000000
#define MSK_NX90_menc_irq_msk_reset_cap0                     0x00010000
#define SRT_NX90_menc_irq_msk_reset_cap0                     16
#define DFLT_VAL_NX90_menc_irq_msk_reset_cap0                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_cap0             0x00000000
#define MSK_NX90_menc_irq_msk_reset_cap1                     0x00020000
#define SRT_NX90_menc_irq_msk_reset_cap1                     17
#define DFLT_VAL_NX90_menc_irq_msk_reset_cap1                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_cap1             0x00000000
#define MSK_NX90_menc_irq_msk_reset_cap2                     0x00040000
#define SRT_NX90_menc_irq_msk_reset_cap2                     18
#define DFLT_VAL_NX90_menc_irq_msk_reset_cap2                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_cap2             0x00000000
#define MSK_NX90_menc_irq_msk_reset_cap3                     0x00080000
#define SRT_NX90_menc_irq_msk_reset_cap3                     19
#define DFLT_VAL_NX90_menc_irq_msk_reset_cap3                0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_cap3             0x00000000
#define MSK_NX90_menc_irq_msk_reset_mp0                      0x01000000
#define SRT_NX90_menc_irq_msk_reset_mp0                      24
#define DFLT_VAL_NX90_menc_irq_msk_reset_mp0                 0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_mp0              0x00000000
#define MSK_NX90_menc_irq_msk_reset_mp1                      0x02000000
#define SRT_NX90_menc_irq_msk_reset_mp1                      25
#define DFLT_VAL_NX90_menc_irq_msk_reset_mp1                 0x00000000
#define DFLT_BF_VAL_NX90_menc_irq_msk_reset_mp1              0x00000000

/* all used bits of 'NX90_menc_irq_msk_reset': */
#define MSK_USED_BITS_NX90_menc_irq_msk_reset 0x030f1f1f


/* ===================================================================== */

/* AREA mpwm */
/* Area of mpwm_app */

/* ===================================================================== */

#define Addr_NX90_mpwm_app 0xFF802400

/* --------------------------------------------------------------------- */
/* Register mpwm_cfg */
/* => Config register: */
/*    General config bits for the MPWM module. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cfg      0x00000000
#define Adr_NX90_mpwm_app_mpwm_cfg 0xFF802400
#define Adr_NX90_mpwm_cfg          0xFF802400
#define DFLT_VAL_NX90_mpwm_cfg     0x00000800

#define MSK_NX90_mpwm_cfg_cnt_mode                0x00000003
#define SRT_NX90_mpwm_cfg_cnt_mode                0
#define DFLT_VAL_NX90_mpwm_cfg_cnt_mode           0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_cnt_mode        0x00000000
#define MSK_NX90_mpwm_cfg_cnt_en_rs               0x00000004
#define SRT_NX90_mpwm_cfg_cnt_en_rs               2
#define DFLT_VAL_NX90_mpwm_cfg_cnt_en_rs          0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_cnt_en_rs       0x00000000
#define MSK_NX90_mpwm_cfg_sync_in_restart         0x00000008
#define SRT_NX90_mpwm_cfg_sync_in_restart         3
#define DFLT_VAL_NX90_mpwm_cfg_sync_in_restart    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_sync_in_restart 0x00000000
#define MSK_NX90_mpwm_cfg_sync_in_pol             0x00000010
#define SRT_NX90_mpwm_cfg_sync_in_pol             4
#define DFLT_VAL_NX90_mpwm_cfg_sync_in_pol        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_sync_in_pol     0x00000000
#define MSK_NX90_mpwm_cfg_eci_inv                 0x00000020
#define SRT_NX90_mpwm_cfg_eci_inv                 5
#define DFLT_VAL_NX90_mpwm_cfg_eci_inv            0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_eci_inv         0x00000000
#define MSK_NX90_mpwm_cfg_eci_gate_en             0x00000040
#define SRT_NX90_mpwm_cfg_eci_gate_en             6
#define DFLT_VAL_NX90_mpwm_cfg_eci_gate_en        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_eci_gate_en     0x00000000
#define MSK_NX90_mpwm_cfg_eci_ks_en               0x00000080
#define SRT_NX90_mpwm_cfg_eci_ks_en               7
#define DFLT_VAL_NX90_mpwm_cfg_eci_ks_en          0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_eci_ks_en       0x00000000
#define MSK_NX90_mpwm_cfg_sce_src_ecz             0x00000100
#define SRT_NX90_mpwm_cfg_sce_src_ecz             8
#define DFLT_VAL_NX90_mpwm_cfg_sce_src_ecz        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_sce_src_ecz     0x00000000
#define MSK_NX90_mpwm_cfg_sce_src_bop             0x00000200
#define SRT_NX90_mpwm_cfg_sce_src_bop             9
#define DFLT_VAL_NX90_mpwm_cfg_sce_src_bop        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_sce_src_bop     0x00000000
#define MSK_NX90_mpwm_cfg_sce_src_mop             0x00000400
#define SRT_NX90_mpwm_cfg_sce_src_mop             10
#define DFLT_VAL_NX90_mpwm_cfg_sce_src_mop        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_sce_src_mop     0x00000000
#define MSK_NX90_mpwm_cfg_evt_cnt_top             0x0000f800
#define SRT_NX90_mpwm_cfg_evt_cnt_top             11
#define DFLT_VAL_NX90_mpwm_cfg_evt_cnt_top        0x00000800
#define DFLT_BF_VAL_NX90_mpwm_cfg_evt_cnt_top     0x00000001
#define MSK_NX90_mpwm_cfg_eci_fil_thresh          0x00ff0000
#define SRT_NX90_mpwm_cfg_eci_fil_thresh          16
#define DFLT_VAL_NX90_mpwm_cfg_eci_fil_thresh     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cfg_eci_fil_thresh  0x00000000

/* all used bits of 'NX90_mpwm_cfg': */
#define MSK_USED_BITS_NX90_mpwm_cfg 0x00ffffff

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt_max */
/* => Counter top register: */
/*    This is the maximum / top value for the PWM counter. In inverse sawtooth mode, MPWM_CNT \ */
/*    will be loaded with MPWM_CNT_MAX after reaching zero or when restarting the counter. In sawtooth \ */
/*    mode, MPWM_CNT will be reset to zero after reaching MPWM_CNT_MAX. In inverse sawtooth \ */
/*    mode, MPWM_CNT will be set to MPWM_CNT_MAX when restarting the counter, and when it reaches \ */
/*    MPWM_CNT_MAX while counting up, it will change to counting down. In inverse sawtooth mode, \ */
/*    when MPWM_CNT reaches MPWM_CNT_MAX while counting up, it will change to counting down. In \ */
/*    either sawtooth mode, the most significant bit must be zero. This is necessary to ensure a \ */
/*    valid MPWM_ECNT. \ */
/*    The CNT_MAX register must be at least 1 for correct operation of the counter. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt_max      0x00000004
#define Adr_NX90_mpwm_app_mpwm_cnt_max 0xFF802404
#define Adr_NX90_mpwm_cnt_max          0xFF802404
#define DFLT_VAL_NX90_mpwm_cnt_max     0x00000000

#define MSK_NX90_mpwm_cnt_max_val         0x0000ffff
#define SRT_NX90_mpwm_cnt_max_val         0
#define DFLT_VAL_NX90_mpwm_cnt_max_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cnt_max_val 0x00000000

/* all used bits of 'NX90_mpwm_cnt_max': */
#define MSK_USED_BITS_NX90_mpwm_cnt_max 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt_ps_max */
/* => Counter prescaler max value register: */
/*    The values of this register determines how often MPWM_CNT and the counters in the dead \ */
/*    time generators will be updated. When setting MPWM_CNT_PS_MAX to n, MPWM_CNT will be \ */
/*    updated every n + 1 system clock cycles. This register can be used to slow down operation \ */
/*    of the counter. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt_ps_max      0x00000008
#define Adr_NX90_mpwm_app_mpwm_cnt_ps_max 0xFF802408
#define Adr_NX90_mpwm_cnt_ps_max          0xFF802408
#define DFLT_VAL_NX90_mpwm_cnt_ps_max     0x00000000

#define MSK_NX90_mpwm_cnt_ps_max_val         0x000000ff
#define SRT_NX90_mpwm_cnt_ps_max_val         0
#define DFLT_VAL_NX90_mpwm_cnt_ps_max_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cnt_ps_max_val 0x00000000

/* all used bits of 'NX90_mpwm_cnt_ps_max': */
#define MSK_USED_BITS_NX90_mpwm_cnt_ps_max 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mpwm_dt */
/* => Dead time register: */
/*    This is the number of dead (LS and HS off) cycles (prescaled by MPWM_CNT_PS) that the dead \ */
/*    time generator inserts when the direct PWM signal changes from zero to one (rise_val) and \ */
/*    from one to zero (fall_val). Set to zero for no dead cycles. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_dt      0x0000000C
#define Adr_NX90_mpwm_app_mpwm_dt 0xFF80240C
#define Adr_NX90_mpwm_dt          0xFF80240C
#define DFLT_VAL_NX90_mpwm_dt     0x00000000

#define MSK_NX90_mpwm_dt_rise_val         0x000000ff
#define SRT_NX90_mpwm_dt_rise_val         0
#define DFLT_VAL_NX90_mpwm_dt_rise_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_dt_rise_val 0x00000000
#define MSK_NX90_mpwm_dt_fall_val         0x0000ff00
#define SRT_NX90_mpwm_dt_fall_val         8
#define DFLT_VAL_NX90_mpwm_dt_fall_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_dt_fall_val 0x00000000

/* all used bits of 'NX90_mpwm_dt': */
#define MSK_USED_BITS_NX90_mpwm_dt 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ocfg */
/* => Output section config register: */
/*    Output select, enable, invert and edge detect values. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ocfg      0x00000010
#define Adr_NX90_mpwm_app_mpwm_ocfg 0xFF802410
#define Adr_NX90_mpwm_ocfg          0xFF802410
#define DFLT_VAL_NX90_mpwm_ocfg     0x00000000

#define MSK_NX90_mpwm_ocfg_osel0           0x00000001
#define SRT_NX90_mpwm_ocfg_osel0           0
#define DFLT_VAL_NX90_mpwm_ocfg_osel0      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel0   0x00000000
#define MSK_NX90_mpwm_ocfg_osel1           0x00000002
#define SRT_NX90_mpwm_ocfg_osel1           1
#define DFLT_VAL_NX90_mpwm_ocfg_osel1      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel1   0x00000000
#define MSK_NX90_mpwm_ocfg_osel2           0x00000004
#define SRT_NX90_mpwm_ocfg_osel2           2
#define DFLT_VAL_NX90_mpwm_ocfg_osel2      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel2   0x00000000
#define MSK_NX90_mpwm_ocfg_osel3           0x00000008
#define SRT_NX90_mpwm_ocfg_osel3           3
#define DFLT_VAL_NX90_mpwm_ocfg_osel3      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel3   0x00000000
#define MSK_NX90_mpwm_ocfg_osel4           0x00000010
#define SRT_NX90_mpwm_ocfg_osel4           4
#define DFLT_VAL_NX90_mpwm_ocfg_osel4      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel4   0x00000000
#define MSK_NX90_mpwm_ocfg_osel5           0x00000020
#define SRT_NX90_mpwm_ocfg_osel5           5
#define DFLT_VAL_NX90_mpwm_ocfg_osel5      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_osel5   0x00000000
#define MSK_NX90_mpwm_ocfg_oe0             0x00000080
#define SRT_NX90_mpwm_ocfg_oe0             7
#define DFLT_VAL_NX90_mpwm_ocfg_oe0        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe0     0x00000000
#define MSK_NX90_mpwm_ocfg_oe1             0x00000100
#define SRT_NX90_mpwm_ocfg_oe1             8
#define DFLT_VAL_NX90_mpwm_ocfg_oe1        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe1     0x00000000
#define MSK_NX90_mpwm_ocfg_oe2             0x00000200
#define SRT_NX90_mpwm_ocfg_oe2             9
#define DFLT_VAL_NX90_mpwm_ocfg_oe2        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe2     0x00000000
#define MSK_NX90_mpwm_ocfg_oe3             0x00000400
#define SRT_NX90_mpwm_ocfg_oe3             10
#define DFLT_VAL_NX90_mpwm_ocfg_oe3        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe3     0x00000000
#define MSK_NX90_mpwm_ocfg_oe4             0x00000800
#define SRT_NX90_mpwm_ocfg_oe4             11
#define DFLT_VAL_NX90_mpwm_ocfg_oe4        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe4     0x00000000
#define MSK_NX90_mpwm_ocfg_oe5             0x00001000
#define SRT_NX90_mpwm_ocfg_oe5             12
#define DFLT_VAL_NX90_mpwm_ocfg_oe5        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oe5     0x00000000
#define MSK_NX90_mpwm_ocfg_oinv0           0x00002000
#define SRT_NX90_mpwm_ocfg_oinv0           13
#define DFLT_VAL_NX90_mpwm_ocfg_oinv0      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv0   0x00000000
#define MSK_NX90_mpwm_ocfg_oinv1           0x00004000
#define SRT_NX90_mpwm_ocfg_oinv1           14
#define DFLT_VAL_NX90_mpwm_ocfg_oinv1      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv1   0x00000000
#define MSK_NX90_mpwm_ocfg_oinv2           0x00008000
#define SRT_NX90_mpwm_ocfg_oinv2           15
#define DFLT_VAL_NX90_mpwm_ocfg_oinv2      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv2   0x00000000
#define MSK_NX90_mpwm_ocfg_oinv3           0x00010000
#define SRT_NX90_mpwm_ocfg_oinv3           16
#define DFLT_VAL_NX90_mpwm_ocfg_oinv3      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv3   0x00000000
#define MSK_NX90_mpwm_ocfg_oinv4           0x00020000
#define SRT_NX90_mpwm_ocfg_oinv4           17
#define DFLT_VAL_NX90_mpwm_ocfg_oinv4      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv4   0x00000000
#define MSK_NX90_mpwm_ocfg_oinv5           0x00040000
#define SRT_NX90_mpwm_ocfg_oinv5           18
#define DFLT_VAL_NX90_mpwm_ocfg_oinv5      0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oinv5   0x00000000
#define MSK_NX90_mpwm_ocfg_oeden0          0x00080000
#define SRT_NX90_mpwm_ocfg_oeden0          19
#define DFLT_VAL_NX90_mpwm_ocfg_oeden0     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden0  0x00000000
#define MSK_NX90_mpwm_ocfg_oeden1          0x00100000
#define SRT_NX90_mpwm_ocfg_oeden1          20
#define DFLT_VAL_NX90_mpwm_ocfg_oeden1     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden1  0x00000000
#define MSK_NX90_mpwm_ocfg_oeden2          0x00200000
#define SRT_NX90_mpwm_ocfg_oeden2          21
#define DFLT_VAL_NX90_mpwm_ocfg_oeden2     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden2  0x00000000
#define MSK_NX90_mpwm_ocfg_oeden3          0x00400000
#define SRT_NX90_mpwm_ocfg_oeden3          22
#define DFLT_VAL_NX90_mpwm_ocfg_oeden3     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden3  0x00000000
#define MSK_NX90_mpwm_ocfg_oeden4          0x00800000
#define SRT_NX90_mpwm_ocfg_oeden4          23
#define DFLT_VAL_NX90_mpwm_ocfg_oeden4     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden4  0x00000000
#define MSK_NX90_mpwm_ocfg_oeden5          0x01000000
#define SRT_NX90_mpwm_ocfg_oeden5          24
#define DFLT_VAL_NX90_mpwm_ocfg_oeden5     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oeden5  0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol0         0x02000000
#define SRT_NX90_mpwm_ocfg_oedpol0         25
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol0    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol0 0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol1         0x04000000
#define SRT_NX90_mpwm_ocfg_oedpol1         26
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol1    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol1 0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol2         0x08000000
#define SRT_NX90_mpwm_ocfg_oedpol2         27
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol2    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol2 0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol3         0x10000000
#define SRT_NX90_mpwm_ocfg_oedpol3         28
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol3    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol3 0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol4         0x20000000
#define SRT_NX90_mpwm_ocfg_oedpol4         29
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol4    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol4 0x00000000
#define MSK_NX90_mpwm_ocfg_oedpol5         0x40000000
#define SRT_NX90_mpwm_ocfg_oedpol5         30
#define DFLT_VAL_NX90_mpwm_ocfg_oedpol5    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ocfg_oedpol5 0x00000000

/* all used bits of 'NX90_mpwm_ocfg': */
#define MSK_USED_BITS_NX90_mpwm_ocfg 0x7fffffbf

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt_max_s */
/* => Counter top shadow register: */
/*    Shadow register for MPWM_CNT_TOP. After writing this register, an internal flag is set. If \ */
/*    the internal flag is set, at the next occurence of a shadow copy event cnt_top will be \ */
/*    overwritten by MPWM_CNT_MAX_S and the internal flag will be reset. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt_max_s      0x00000014
#define Adr_NX90_mpwm_app_mpwm_cnt_max_s 0xFF802414
#define Adr_NX90_mpwm_cnt_max_s          0xFF802414
#define DFLT_VAL_NX90_mpwm_cnt_max_s     0x00000000

#define MSK_NX90_mpwm_cnt_max_s_val         0x0000ffff
#define SRT_NX90_mpwm_cnt_max_s_val         0
#define DFLT_VAL_NX90_mpwm_cnt_max_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cnt_max_s_val 0x00000000

/* all used bits of 'NX90_mpwm_cnt_max_s': */
#define MSK_USED_BITS_NX90_mpwm_cnt_max_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_dt_s */
/* => Dead time shadow register: */
/*    Shadow register for MPWM_DT register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_dt_s      0x00000018
#define Adr_NX90_mpwm_app_mpwm_dt_s 0xFF802418
#define Adr_NX90_mpwm_dt_s          0xFF802418
#define DFLT_VAL_NX90_mpwm_dt_s     0x00000000

#define MSK_NX90_mpwm_dt_s_rise_val         0x000000ff
#define SRT_NX90_mpwm_dt_s_rise_val         0
#define DFLT_VAL_NX90_mpwm_dt_s_rise_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_dt_s_rise_val 0x00000000
#define MSK_NX90_mpwm_dt_s_fall_val         0x0000ff00
#define SRT_NX90_mpwm_dt_s_fall_val         8
#define DFLT_VAL_NX90_mpwm_dt_s_fall_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_dt_s_fall_val 0x00000000

/* all used bits of 'NX90_mpwm_dt_s': */
#define MSK_USED_BITS_NX90_mpwm_dt_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_status */
/* => Status register: */
/*    This register can be read to obtain information about the current status of the MPWM \ */
/*    module. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_status      0x0000001C
#define Adr_NX90_mpwm_app_mpwm_status 0xFF80241C
#define Adr_NX90_mpwm_status          0xFF80241C

#define MSK_NX90_mpwm_status_running       0x00000001
#define SRT_NX90_mpwm_status_running       0
#define MSK_NX90_mpwm_status_eci_val_unfil 0x00000002
#define SRT_NX90_mpwm_status_eci_val_unfil 1
#define MSK_NX90_mpwm_status_cnt_updown    0x00000004
#define SRT_NX90_mpwm_status_cnt_updown    2
#define MSK_NX90_mpwm_status_cnt_half      0x00000008
#define SRT_NX90_mpwm_status_cnt_half      3

/* all used bits of 'NX90_mpwm_status': */
#define MSK_USED_BITS_NX90_mpwm_status 0x0000000f

/* --------------------------------------------------------------------- */
/* Register mpwm_cmd */
/* => Command register: */
/* => Mode: W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cmd      0x00000020
#define Adr_NX90_mpwm_app_mpwm_cmd 0xFF802420
#define Adr_NX90_mpwm_cmd          0xFF802420
#define DFLT_VAL_NX90_mpwm_cmd     0x00000000

#define MSK_NX90_mpwm_cmd_start               0x00000001
#define SRT_NX90_mpwm_cmd_start               0
#define DFLT_VAL_NX90_mpwm_cmd_start          0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_start       0x00000000
#define MSK_NX90_mpwm_cmd_stop                0x00000002
#define SRT_NX90_mpwm_cmd_stop                1
#define DFLT_VAL_NX90_mpwm_cmd_stop           0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_stop        0x00000000
#define MSK_NX90_mpwm_cmd_restart             0x00000004
#define SRT_NX90_mpwm_cmd_restart             2
#define DFLT_VAL_NX90_mpwm_cmd_restart        0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_restart     0x00000000
#define MSK_NX90_mpwm_cmd_sce_emit            0x00000008
#define SRT_NX90_mpwm_cmd_sce_emit            3
#define DFLT_VAL_NX90_mpwm_cmd_sce_emit       0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_sce_emit    0x00000000
#define MSK_NX90_mpwm_cmd_evt_cnt_rst         0x00000010
#define SRT_NX90_mpwm_cmd_evt_cnt_rst         4
#define DFLT_VAL_NX90_mpwm_cmd_evt_cnt_rst    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_evt_cnt_rst 0x00000000
#define MSK_NX90_mpwm_cmd_eci_ks_rst          0x00000020
#define SRT_NX90_mpwm_cmd_eci_ks_rst          5
#define DFLT_VAL_NX90_mpwm_cmd_eci_ks_rst     0x00000000
#define DFLT_BF_VAL_NX90_mpwm_cmd_eci_ks_rst  0x00000000

/* all used bits of 'NX90_mpwm_cmd': */
#define MSK_USED_BITS_NX90_mpwm_cmd 0x0000003f

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt */
/* => Counter: */
/*    Global counter. Used for all the comparisons that then generate the PWM signals. See \ */
/*    counter behaviour diagram. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt      0x00000024
#define Adr_NX90_mpwm_app_mpwm_cnt 0xFF802424
#define Adr_NX90_mpwm_cnt          0xFF802424

#define MSK_NX90_mpwm_cnt_val 0x0000ffff
#define SRT_NX90_mpwm_cnt_val 0

/* all used bits of 'NX90_mpwm_cnt': */
#define MSK_USED_BITS_NX90_mpwm_cnt 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ecnt */
/* => Extended counter: */
/*    Counter extended by one bit to distinguish between counting up and down. See counter \ */
/*    behaviour diagram. The content of this register is also exposed to the outside of this \ */
/*    module to allow other system components to synchronize themselves to the MPWM counter. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ecnt      0x00000028
#define Adr_NX90_mpwm_app_mpwm_ecnt 0xFF802428
#define Adr_NX90_mpwm_ecnt          0xFF802428

#define MSK_NX90_mpwm_ecnt_val 0x0000ffff
#define SRT_NX90_mpwm_ecnt_val 0

/* all used bits of 'NX90_mpwm_ecnt': */
#define MSK_USED_BITS_NX90_mpwm_ecnt 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt_rs */
/* => Counter save register: */
/*    When CFG.cnt_en_rs (rs = read sync) is set, this register is used to save the value of the \ */
/*    MPWM_CNT and MPWM_CNT_PS register every time that sync_in becomes active. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt_rs      0x0000002C
#define Adr_NX90_mpwm_app_mpwm_cnt_rs 0xFF80242C
#define Adr_NX90_mpwm_cnt_rs          0xFF80242C

#define MSK_NX90_mpwm_cnt_rs_cnt_val 0x0000ffff
#define SRT_NX90_mpwm_cnt_rs_cnt_val 0
#define MSK_NX90_mpwm_cnt_rs_ps_val  0x00ff0000
#define SRT_NX90_mpwm_cnt_rs_ps_val  16

/* all used bits of 'NX90_mpwm_cnt_rs': */
#define MSK_USED_BITS_NX90_mpwm_cnt_rs 0x00ffffff

/* --------------------------------------------------------------------- */
/* Register mpwm_cnt_ps */
/* => Counter prescaler register: */
/*    Internal counter that is responsible for determining, in which clock cycles cnt will be \ */
/*    incremented / decremented. MPWM_CNT_PS is reloaded with MPWM_CNT_PS_MAX when it reaches \ */
/*    zero. In every clock cycle, in which MPWM_CNT_PS is zero, cnt will be incremented / \ */
/*    decremented. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_cnt_ps      0x00000030
#define Adr_NX90_mpwm_app_mpwm_cnt_ps 0xFF802430
#define Adr_NX90_mpwm_cnt_ps          0xFF802430

#define MSK_NX90_mpwm_cnt_ps_val 0x000000ff
#define SRT_NX90_mpwm_cnt_ps_val 0

/* all used bits of 'NX90_mpwm_cnt_ps': */
#define MSK_USED_BITS_NX90_mpwm_cnt_ps 0x000000ff

/* --------------------------------------------------------------------- */
/* Register mpwm_evt_cnt */
/* => Event counter register: */
/*    This counter counts down whenever a full PWM period is finished. When MPWM_EVT_CNT reaches \ */
/*    zero, a event counter zero event is emitted and MPWM_EVT_CNT is reset to MPWM_EVT_CNT_TOP. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_evt_cnt      0x00000034
#define Adr_NX90_mpwm_app_mpwm_evt_cnt 0xFF802434
#define Adr_NX90_mpwm_evt_cnt          0xFF802434

#define MSK_NX90_mpwm_evt_cnt_val 0x0000001f
#define SRT_NX90_mpwm_evt_cnt_val 0

/* all used bits of 'NX90_mpwm_evt_cnt': */
#define MSK_USED_BITS_NX90_mpwm_evt_cnt 0x0000001f

/* --------------------------------------------------------------------- */
/* Register mpwm_bc_s */
/* => Brake chopper shadow register: */
/*    Shadow register for the brake chopper output */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_bc_s      0x00000038
#define Adr_NX90_mpwm_app_mpwm_bc_s 0xFF802438
#define Adr_NX90_mpwm_bc_s          0xFF802438
#define DFLT_VAL_NX90_mpwm_bc_s     0x00000000

#define MSK_NX90_mpwm_bc_s_val         0x00000001
#define SRT_NX90_mpwm_bc_s_val         0
#define DFLT_VAL_NX90_mpwm_bc_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_bc_s_val 0x00000000

/* all used bits of 'NX90_mpwm_bc_s': */
#define MSK_USED_BITS_NX90_mpwm_bc_s 0x00000001

/* --------------------------------------------------------------------- */
/* Register mpwm_bc */
/* => Brake chopper register: */
/*    The brake chopper output signal is determined by the value of this register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_bc      0x0000003C
#define Adr_NX90_mpwm_app_mpwm_bc 0xFF80243C
#define Adr_NX90_mpwm_bc          0xFF80243C
#define DFLT_VAL_NX90_mpwm_bc     0x00000000

#define MSK_NX90_mpwm_bc_val         0x00000001
#define SRT_NX90_mpwm_bc_val         0
#define DFLT_VAL_NX90_mpwm_bc_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_bc_val 0x00000000

/* all used bits of 'NX90_mpwm_bc': */
#define MSK_USED_BITS_NX90_mpwm_bc 0x00000001

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_cmp0_s */
/* => Channel 0 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_cmp0_s      0x00000100
#define Adr_NX90_mpwm_app_mpwm_ch0_cmp0_s 0xFF802500
#define Adr_NX90_mpwm_ch0_cmp0_s          0xFF802500
#define DFLT_VAL_NX90_mpwm_ch0_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch0_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch0_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch0_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch0_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch0_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_cmp1_s */
/* => Channel 0 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_cmp1_s      0x00000104
#define Adr_NX90_mpwm_app_mpwm_ch0_cmp1_s 0xFF802504
#define Adr_NX90_mpwm_ch0_cmp1_s          0xFF802504
#define DFLT_VAL_NX90_mpwm_ch0_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch0_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch0_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch0_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch0_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch0_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_cmp0 */
/* => Channel 0 compare value 0 register: */
/*    Compare value 0 for channel 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_cmp0      0x00000108
#define Adr_NX90_mpwm_app_mpwm_ch0_cmp0 0xFF802508
#define Adr_NX90_mpwm_ch0_cmp0          0xFF802508
#define DFLT_VAL_NX90_mpwm_ch0_cmp0     0x00000000

#define MSK_NX90_mpwm_ch0_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch0_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch0_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch0_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch0_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_cmp1 */
/* => Channel 0 compare value 1 register: */
/*    Compare value 1 for channel 0. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_cmp1      0x0000010C
#define Adr_NX90_mpwm_app_mpwm_ch0_cmp1 0xFF80250C
#define Adr_NX90_mpwm_ch0_cmp1          0xFF80250C
#define DFLT_VAL_NX90_mpwm_ch0_cmp1     0x00000000

#define MSK_NX90_mpwm_ch0_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch0_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch0_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch0_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch0_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_muxin_s */
/* => Channel 0 multiplexer input shadow register: */
/*    Shadow register for channel 0 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_muxin_s      0x00000110
#define Adr_NX90_mpwm_app_mpwm_ch0_muxin_s 0xFF802510
#define Adr_NX90_mpwm_ch0_muxin_s          0xFF802510
#define DFLT_VAL_NX90_mpwm_ch0_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch0_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch0_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch0_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch0_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch0_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch0_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch0_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch0_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch0_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch0_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch0_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch0_muxin */
/* => Channel 0 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 0. \ */
/*    When (CNT  < CHX_CMP0) and (CNT  < CHX_CMP1), then the direct PWM output signal \ */
/*    is equal to CHX_MUXIN.bl (counter value is BeLow both compare values). \ */
/*    When (CNT >= CHX_CMP0) and (CNT >= CHX_CMP1), then the direct PWM output signal \ */
/*    is equal to CHX_MUXIN.ab (counter value is ABove both compare values). \ */
/*    If neither is the case, CNT is BeTween CHX_CMP0 and CHX_CMP1 and the direct PWM output signal \ */
/*    is equal to CHX_MUXIN.bt. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch0_muxin      0x00000114
#define Adr_NX90_mpwm_app_mpwm_ch0_muxin 0xFF802514
#define Adr_NX90_mpwm_ch0_muxin          0xFF802514
#define DFLT_VAL_NX90_mpwm_ch0_muxin     0x00000000

#define MSK_NX90_mpwm_ch0_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch0_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch0_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch0_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch0_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch0_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch0_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch0_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch0_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch0_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch0_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch0_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_cmp0_s */
/* => Channel 1 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 1. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_cmp0_s      0x00000120
#define Adr_NX90_mpwm_app_mpwm_ch1_cmp0_s 0xFF802520
#define Adr_NX90_mpwm_ch1_cmp0_s          0xFF802520
#define DFLT_VAL_NX90_mpwm_ch1_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch1_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch1_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch1_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch1_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch1_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_cmp1_s */
/* => Channel 1 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 1. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_cmp1_s      0x00000124
#define Adr_NX90_mpwm_app_mpwm_ch1_cmp1_s 0xFF802524
#define Adr_NX90_mpwm_ch1_cmp1_s          0xFF802524
#define DFLT_VAL_NX90_mpwm_ch1_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch1_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch1_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch1_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch1_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch1_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_cmp0 */
/* => Channel 1 compare value 0 register: */
/*    Compare value 0 for channel 1. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_cmp0      0x00000128
#define Adr_NX90_mpwm_app_mpwm_ch1_cmp0 0xFF802528
#define Adr_NX90_mpwm_ch1_cmp0          0xFF802528
#define DFLT_VAL_NX90_mpwm_ch1_cmp0     0x00000000

#define MSK_NX90_mpwm_ch1_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch1_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch1_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch1_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch1_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_cmp1 */
/* => Channel 1 compare value 1 register: */
/*    Compare value 1 for channel 1. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_cmp1      0x0000012C
#define Adr_NX90_mpwm_app_mpwm_ch1_cmp1 0xFF80252C
#define Adr_NX90_mpwm_ch1_cmp1          0xFF80252C
#define DFLT_VAL_NX90_mpwm_ch1_cmp1     0x00000000

#define MSK_NX90_mpwm_ch1_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch1_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch1_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch1_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch1_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_muxin_s */
/* => Channel 1 multiplexer input shadow register: */
/*    Shadow register for channel 1 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_muxin_s      0x00000130
#define Adr_NX90_mpwm_app_mpwm_ch1_muxin_s 0xFF802530
#define Adr_NX90_mpwm_ch1_muxin_s          0xFF802530
#define DFLT_VAL_NX90_mpwm_ch1_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch1_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch1_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch1_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch1_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch1_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch1_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch1_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch1_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch1_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch1_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch1_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch1_muxin */
/* => Channel 1 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 1. When \ */
/*    (CHX_CMP0 $>=$ CNT) and (CHX_CMP1 $>=$ CNT), the direct PWM output signal is equal to \ */
/*    CHX_MUXIN.bl (counter value is below both compare values). When (CHX_CMP0 $>=$ CNT) xor \ */
/*    (CHX_CMP1 $>=$ CNT) is true, then the direct PWM output signal is equal to CHX_MUXIN.bt \ */
/*    (counter value is between both compare values). When not (CHX_CMP0 $>=$ CNT) and not \ */
/*    (CHX_CMP1 $>=$ CNT), then the direct PWM output signal is equal to CHX_MUXIN.ab (counter \ */
/*    value is above both compare values). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch1_muxin      0x00000134
#define Adr_NX90_mpwm_app_mpwm_ch1_muxin 0xFF802534
#define Adr_NX90_mpwm_ch1_muxin          0xFF802534
#define DFLT_VAL_NX90_mpwm_ch1_muxin     0x00000000

#define MSK_NX90_mpwm_ch1_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch1_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch1_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch1_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch1_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch1_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch1_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch1_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch1_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch1_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch1_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch1_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_cmp0_s */
/* => Channel 2 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_cmp0_s      0x00000140
#define Adr_NX90_mpwm_app_mpwm_ch2_cmp0_s 0xFF802540
#define Adr_NX90_mpwm_ch2_cmp0_s          0xFF802540
#define DFLT_VAL_NX90_mpwm_ch2_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch2_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch2_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch2_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch2_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch2_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_cmp1_s */
/* => Channel 2 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_cmp1_s      0x00000144
#define Adr_NX90_mpwm_app_mpwm_ch2_cmp1_s 0xFF802544
#define Adr_NX90_mpwm_ch2_cmp1_s          0xFF802544
#define DFLT_VAL_NX90_mpwm_ch2_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch2_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch2_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch2_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch2_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch2_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_cmp0 */
/* => Channel 2 compare value 0 register: */
/*    Compare value 0 for channel 2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_cmp0      0x00000148
#define Adr_NX90_mpwm_app_mpwm_ch2_cmp0 0xFF802548
#define Adr_NX90_mpwm_ch2_cmp0          0xFF802548
#define DFLT_VAL_NX90_mpwm_ch2_cmp0     0x00000000

#define MSK_NX90_mpwm_ch2_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch2_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch2_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch2_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch2_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_cmp1 */
/* => Channel 2 compare value 1 register: */
/*    Compare value 1 for channel 2. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_cmp1      0x0000014C
#define Adr_NX90_mpwm_app_mpwm_ch2_cmp1 0xFF80254C
#define Adr_NX90_mpwm_ch2_cmp1          0xFF80254C
#define DFLT_VAL_NX90_mpwm_ch2_cmp1     0x00000000

#define MSK_NX90_mpwm_ch2_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch2_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch2_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch2_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch2_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_muxin_s */
/* => Channel 2 multiplexer input shadow register: */
/*    Shadow register for channel 2 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_muxin_s      0x00000150
#define Adr_NX90_mpwm_app_mpwm_ch2_muxin_s 0xFF802550
#define Adr_NX90_mpwm_ch2_muxin_s          0xFF802550
#define DFLT_VAL_NX90_mpwm_ch2_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch2_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch2_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch2_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch2_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch2_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch2_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch2_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch2_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch2_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch2_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch2_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch2_muxin */
/* => Channel 2 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 2. When \ */
/*    (CHX_CMP0 $>=$ CNT) and (CHX_CMP1 $>=$ CNT), the direct PWM output signal is equal to \ */
/*    CHX_MUXIN.bl (counter value is below both compare values). When (CHX_CMP0 $>=$ CNT) xor \ */
/*    (CHX_CMP1 $>=$ CNT) is true, then the direct PWM output signal is equal to CHX_MUXIN.bt \ */
/*    (counter value is between both compare values). When not (CHX_CMP0 $>=$ CNT) and not \ */
/*    (CHX_CMP1 $>=$ CNT), then the direct PWM output signal is equal to CHX_MUXIN.ab (counter \ */
/*    value is above both compare values). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch2_muxin      0x00000154
#define Adr_NX90_mpwm_app_mpwm_ch2_muxin 0xFF802554
#define Adr_NX90_mpwm_ch2_muxin          0xFF802554
#define DFLT_VAL_NX90_mpwm_ch2_muxin     0x00000000

#define MSK_NX90_mpwm_ch2_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch2_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch2_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch2_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch2_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch2_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch2_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch2_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch2_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch2_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch2_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch2_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_cmp0_s */
/* => Channel 3 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_cmp0_s      0x00000160
#define Adr_NX90_mpwm_app_mpwm_ch3_cmp0_s 0xFF802560
#define Adr_NX90_mpwm_ch3_cmp0_s          0xFF802560
#define DFLT_VAL_NX90_mpwm_ch3_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch3_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch3_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch3_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch3_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch3_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_cmp1_s */
/* => Channel 3 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_cmp1_s      0x00000164
#define Adr_NX90_mpwm_app_mpwm_ch3_cmp1_s 0xFF802564
#define Adr_NX90_mpwm_ch3_cmp1_s          0xFF802564
#define DFLT_VAL_NX90_mpwm_ch3_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch3_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch3_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch3_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch3_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch3_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_cmp0 */
/* => Channel 3 compare value 0 register: */
/*    Compare value 0 for channel 3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_cmp0      0x00000168
#define Adr_NX90_mpwm_app_mpwm_ch3_cmp0 0xFF802568
#define Adr_NX90_mpwm_ch3_cmp0          0xFF802568
#define DFLT_VAL_NX90_mpwm_ch3_cmp0     0x00000000

#define MSK_NX90_mpwm_ch3_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch3_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch3_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch3_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch3_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_cmp1 */
/* => Channel 3 compare value 1 register: */
/*    Compare value 1 for channel 3. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_cmp1      0x0000016C
#define Adr_NX90_mpwm_app_mpwm_ch3_cmp1 0xFF80256C
#define Adr_NX90_mpwm_ch3_cmp1          0xFF80256C
#define DFLT_VAL_NX90_mpwm_ch3_cmp1     0x00000000

#define MSK_NX90_mpwm_ch3_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch3_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch3_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch3_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch3_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_muxin_s */
/* => Channel 3 multiplexer input shadow register: */
/*    Shadow register for channel 3 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_muxin_s      0x00000170
#define Adr_NX90_mpwm_app_mpwm_ch3_muxin_s 0xFF802570
#define Adr_NX90_mpwm_ch3_muxin_s          0xFF802570
#define DFLT_VAL_NX90_mpwm_ch3_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch3_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch3_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch3_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch3_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch3_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch3_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch3_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch3_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch3_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch3_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch3_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch3_muxin */
/* => Channel 3 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 3. When \ */
/*    (CHX_CMP0 $>=$ CNT) and (CHX_CMP1 $>=$ CNT), the direct PWM output signal is equal to \ */
/*    CHX_MUXIN.bl (counter value is below both compare values). When (CHX_CMP0 $>=$ CNT) xor \ */
/*    (CHX_CMP1 $>=$ CNT) is true, then the direct PWM output signal is equal to CHX_MUXIN.bt \ */
/*    (counter value is between both compare values). When not (CHX_CMP0 $>=$ CNT) and not \ */
/*    (CHX_CMP1 $>=$ CNT), then the direct PWM output signal is equal to CHX_MUXIN.ab (counter \ */
/*    value is above both compare values). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch3_muxin      0x00000174
#define Adr_NX90_mpwm_app_mpwm_ch3_muxin 0xFF802574
#define Adr_NX90_mpwm_ch3_muxin          0xFF802574
#define DFLT_VAL_NX90_mpwm_ch3_muxin     0x00000000

#define MSK_NX90_mpwm_ch3_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch3_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch3_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch3_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch3_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch3_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch3_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch3_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch3_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch3_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch3_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch3_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_cmp0_s */
/* => Channel 4 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 4. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_cmp0_s      0x00000180
#define Adr_NX90_mpwm_app_mpwm_ch4_cmp0_s 0xFF802580
#define Adr_NX90_mpwm_ch4_cmp0_s          0xFF802580
#define DFLT_VAL_NX90_mpwm_ch4_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch4_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch4_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch4_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch4_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch4_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_cmp1_s */
/* => Channel 4 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 4. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_cmp1_s      0x00000184
#define Adr_NX90_mpwm_app_mpwm_ch4_cmp1_s 0xFF802584
#define Adr_NX90_mpwm_ch4_cmp1_s          0xFF802584
#define DFLT_VAL_NX90_mpwm_ch4_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch4_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch4_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch4_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch4_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch4_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_cmp0 */
/* => Channel 4 compare value 0 register: */
/*    Compare value 0 for channel 4. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_cmp0      0x00000188
#define Adr_NX90_mpwm_app_mpwm_ch4_cmp0 0xFF802588
#define Adr_NX90_mpwm_ch4_cmp0          0xFF802588
#define DFLT_VAL_NX90_mpwm_ch4_cmp0     0x00000000

#define MSK_NX90_mpwm_ch4_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch4_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch4_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch4_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch4_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_cmp1 */
/* => Channel 4 compare value 1 register: */
/*    Compare value 1 for channel 4. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_cmp1      0x0000018C
#define Adr_NX90_mpwm_app_mpwm_ch4_cmp1 0xFF80258C
#define Adr_NX90_mpwm_ch4_cmp1          0xFF80258C
#define DFLT_VAL_NX90_mpwm_ch4_cmp1     0x00000000

#define MSK_NX90_mpwm_ch4_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch4_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch4_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch4_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch4_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_muxin_s */
/* => Channel 4 multiplexer input shadow register: */
/*    Shadow register for channel 4 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_muxin_s      0x00000190
#define Adr_NX90_mpwm_app_mpwm_ch4_muxin_s 0xFF802590
#define Adr_NX90_mpwm_ch4_muxin_s          0xFF802590
#define DFLT_VAL_NX90_mpwm_ch4_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch4_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch4_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch4_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch4_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch4_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch4_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch4_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch4_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch4_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch4_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch4_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch4_muxin */
/* => Channel 4 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 4. When \ */
/*    (CHX_CMP0 $>=$ CNT) and (CHX_CMP1 $>=$ CNT), the direct PWM output signal is equal to \ */
/*    CHX_MUXIN.bl (counter value is below both compare values). When (CHX_CMP0 $>=$ CNT) xor \ */
/*    (CHX_CMP1 $>=$ CNT) is true, then the direct PWM output signal is equal to CHX_MUXIN.bt \ */
/*    (counter value is between both compare values). When not (CHX_CMP0 $>=$ CNT) and not \ */
/*    (CHX_CMP1 $>=$ CNT), then the direct PWM output signal is equal to CHX_MUXIN.ab (counter \ */
/*    value is above both compare values). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch4_muxin      0x00000194
#define Adr_NX90_mpwm_app_mpwm_ch4_muxin 0xFF802594
#define Adr_NX90_mpwm_ch4_muxin          0xFF802594
#define DFLT_VAL_NX90_mpwm_ch4_muxin     0x00000000

#define MSK_NX90_mpwm_ch4_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch4_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch4_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch4_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch4_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch4_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch4_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch4_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch4_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch4_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch4_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch4_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_cmp0_s */
/* => Channel 5 compare value 0 shadow register: */
/*    Compare value 0 shadow register for channel 5. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_cmp0_s      0x000001A0
#define Adr_NX90_mpwm_app_mpwm_ch5_cmp0_s 0xFF8025A0
#define Adr_NX90_mpwm_ch5_cmp0_s          0xFF8025A0
#define DFLT_VAL_NX90_mpwm_ch5_cmp0_s     0x00000000

#define MSK_NX90_mpwm_ch5_cmp0_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch5_cmp0_s_val         0
#define DFLT_VAL_NX90_mpwm_ch5_cmp0_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_cmp0_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch5_cmp0_s': */
#define MSK_USED_BITS_NX90_mpwm_ch5_cmp0_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_cmp1_s */
/* => Channel 5 compare value 1 shadow register: */
/*    Compare value 1 shadow register for channel 5. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_cmp1_s      0x000001A4
#define Adr_NX90_mpwm_app_mpwm_ch5_cmp1_s 0xFF8025A4
#define Adr_NX90_mpwm_ch5_cmp1_s          0xFF8025A4
#define DFLT_VAL_NX90_mpwm_ch5_cmp1_s     0x00000000

#define MSK_NX90_mpwm_ch5_cmp1_s_val         0x0000ffff
#define SRT_NX90_mpwm_ch5_cmp1_s_val         0
#define DFLT_VAL_NX90_mpwm_ch5_cmp1_s_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_cmp1_s_val 0x00000000

/* all used bits of 'NX90_mpwm_ch5_cmp1_s': */
#define MSK_USED_BITS_NX90_mpwm_ch5_cmp1_s 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_cmp0 */
/* => Channel 5 compare value 0 register: */
/*    Compare value 0 for channel 5. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_cmp0      0x000001A8
#define Adr_NX90_mpwm_app_mpwm_ch5_cmp0 0xFF8025A8
#define Adr_NX90_mpwm_ch5_cmp0          0xFF8025A8
#define DFLT_VAL_NX90_mpwm_ch5_cmp0     0x00000000

#define MSK_NX90_mpwm_ch5_cmp0_val         0x0000ffff
#define SRT_NX90_mpwm_ch5_cmp0_val         0
#define DFLT_VAL_NX90_mpwm_ch5_cmp0_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_cmp0_val 0x00000000

/* all used bits of 'NX90_mpwm_ch5_cmp0': */
#define MSK_USED_BITS_NX90_mpwm_ch5_cmp0 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_cmp1 */
/* => Channel 5 compare value 1 register: */
/*    Compare value 1 for channel 5. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_cmp1      0x000001AC
#define Adr_NX90_mpwm_app_mpwm_ch5_cmp1 0xFF8025AC
#define Adr_NX90_mpwm_ch5_cmp1          0xFF8025AC
#define DFLT_VAL_NX90_mpwm_ch5_cmp1     0x00000000

#define MSK_NX90_mpwm_ch5_cmp1_val         0x0000ffff
#define SRT_NX90_mpwm_ch5_cmp1_val         0
#define DFLT_VAL_NX90_mpwm_ch5_cmp1_val    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_cmp1_val 0x00000000

/* all used bits of 'NX90_mpwm_ch5_cmp1': */
#define MSK_USED_BITS_NX90_mpwm_ch5_cmp1 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_muxin_s */
/* => Channel 5 multiplexer input shadow register: */
/*    Shadow register for channel 5 multiplexer input register. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_muxin_s      0x000001B0
#define Adr_NX90_mpwm_app_mpwm_ch5_muxin_s 0xFF8025B0
#define Adr_NX90_mpwm_ch5_muxin_s          0xFF8025B0
#define DFLT_VAL_NX90_mpwm_ch5_muxin_s     0x00000000

#define MSK_NX90_mpwm_ch5_muxin_s_bl         0x00000001
#define SRT_NX90_mpwm_ch5_muxin_s_bl         0
#define DFLT_VAL_NX90_mpwm_ch5_muxin_s_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_s_bl 0x00000000
#define MSK_NX90_mpwm_ch5_muxin_s_bt         0x00000002
#define SRT_NX90_mpwm_ch5_muxin_s_bt         1
#define DFLT_VAL_NX90_mpwm_ch5_muxin_s_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_s_bt 0x00000000
#define MSK_NX90_mpwm_ch5_muxin_s_ab         0x00000004
#define SRT_NX90_mpwm_ch5_muxin_s_ab         2
#define DFLT_VAL_NX90_mpwm_ch5_muxin_s_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_s_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch5_muxin_s': */
#define MSK_USED_BITS_NX90_mpwm_ch5_muxin_s 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_ch5_muxin */
/* => Channel 5 multiplexer input register: */
/*    This register is central in determining the direct PWM output value of channel 5. When \ */
/*    (CHX_CMP0 $>=$ CNT) and (CHX_CMP1 $>=$ CNT), the direct PWM output signal is equal to \ */
/*    CHX_MUXIN.bl (counter value is below both compare values). When (CHX_CMP0 $>=$ CNT) xor \ */
/*    (CHX_CMP1 $>=$ CNT) is true, then the direct PWM output signal is equal to CHX_MUXIN.bt \ */
/*    (counter value is between both compare values). When not (CHX_CMP0 $>=$ CNT) and not \ */
/*    (CHX_CMP1 $>=$ CNT), then the direct PWM output signal is equal to CHX_MUXIN.ab (counter \ */
/*    value is above both compare values). */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_ch5_muxin      0x000001B4
#define Adr_NX90_mpwm_app_mpwm_ch5_muxin 0xFF8025B4
#define Adr_NX90_mpwm_ch5_muxin          0xFF8025B4
#define DFLT_VAL_NX90_mpwm_ch5_muxin     0x00000000

#define MSK_NX90_mpwm_ch5_muxin_bl         0x00000001
#define SRT_NX90_mpwm_ch5_muxin_bl         0
#define DFLT_VAL_NX90_mpwm_ch5_muxin_bl    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_bl 0x00000000
#define MSK_NX90_mpwm_ch5_muxin_bt         0x00000002
#define SRT_NX90_mpwm_ch5_muxin_bt         1
#define DFLT_VAL_NX90_mpwm_ch5_muxin_bt    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_bt 0x00000000
#define MSK_NX90_mpwm_ch5_muxin_ab         0x00000004
#define SRT_NX90_mpwm_ch5_muxin_ab         2
#define DFLT_VAL_NX90_mpwm_ch5_muxin_ab    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_ch5_muxin_ab 0x00000000

/* all used bits of 'NX90_mpwm_ch5_muxin': */
#define MSK_USED_BITS_NX90_mpwm_ch5_muxin 0x00000007

/* --------------------------------------------------------------------- */
/* Register mpwm_irq_raw */
/* => Raw IRQ: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ (if event irq, reset status irqs at their source). */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_irq_raw      0x000001C0
#define Adr_NX90_mpwm_app_mpwm_irq_raw 0xFF8025C0
#define Adr_NX90_mpwm_irq_raw          0xFF8025C0
#define DFLT_VAL_NX90_mpwm_irq_raw     0x00000000

#define MSK_NX90_mpwm_irq_raw_ecz                  0x00000001
#define SRT_NX90_mpwm_irq_raw_ecz                  0
#define DFLT_VAL_NX90_mpwm_irq_raw_ecz             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_ecz          0x00000000
#define MSK_NX90_mpwm_irq_raw_bop                  0x00000002
#define SRT_NX90_mpwm_irq_raw_bop                  1
#define DFLT_VAL_NX90_mpwm_irq_raw_bop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_bop          0x00000000
#define MSK_NX90_mpwm_irq_raw_mop                  0x00000004
#define SRT_NX90_mpwm_irq_raw_mop                  2
#define DFLT_VAL_NX90_mpwm_irq_raw_mop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_mop          0x00000000
#define MSK_NX90_mpwm_irq_raw_eci_val              0x00000008
#define SRT_NX90_mpwm_irq_raw_eci_val              3
#define DFLT_VAL_NX90_mpwm_irq_raw_eci_val         0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_eci_val      0x00000000
#define MSK_NX90_mpwm_irq_raw_eci_ks_state         0x00000010
#define SRT_NX90_mpwm_irq_raw_eci_ks_state         4
#define DFLT_VAL_NX90_mpwm_irq_raw_eci_ks_state    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_eci_ks_state 0x00000000
#define MSK_NX90_mpwm_irq_raw_oede                 0x000007e0
#define SRT_NX90_mpwm_irq_raw_oede                 5
#define DFLT_VAL_NX90_mpwm_irq_raw_oede            0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_raw_oede         0x00000000

/* all used bits of 'NX90_mpwm_irq_raw': */
#define MSK_USED_BITS_NX90_mpwm_irq_raw 0x000007ff

/* --------------------------------------------------------------------- */
/* Register mpwm_irq_masked */
/* => Masked IRQ: */
/*    Shows status of masked IRQs (as connected to ARM/xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_irq_masked      0x000001C4
#define Adr_NX90_mpwm_app_mpwm_irq_masked 0xFF8025C4
#define Adr_NX90_mpwm_irq_masked          0xFF8025C4

#define MSK_NX90_mpwm_irq_masked_ecz          0x00000001
#define SRT_NX90_mpwm_irq_masked_ecz          0
#define MSK_NX90_mpwm_irq_masked_bop          0x00000002
#define SRT_NX90_mpwm_irq_masked_bop          1
#define MSK_NX90_mpwm_irq_masked_mop          0x00000004
#define SRT_NX90_mpwm_irq_masked_mop          2
#define MSK_NX90_mpwm_irq_masked_eci_val      0x00000008
#define SRT_NX90_mpwm_irq_masked_eci_val      3
#define MSK_NX90_mpwm_irq_masked_eci_ks_state 0x00000010
#define SRT_NX90_mpwm_irq_masked_eci_ks_state 4
#define MSK_NX90_mpwm_irq_masked_oede         0x000007e0
#define SRT_NX90_mpwm_irq_masked_oede         5

/* all used bits of 'NX90_mpwm_irq_masked': */
#define MSK_USED_BITS_NX90_mpwm_irq_masked 0x000007ff

/* --------------------------------------------------------------------- */
/* Register mpwm_irq_msk_set */
/* => IRQ enable mask: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to adr_mpwm_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_irq_msk_set      0x000001C8
#define Adr_NX90_mpwm_app_mpwm_irq_msk_set 0xFF8025C8
#define Adr_NX90_mpwm_irq_msk_set          0xFF8025C8
#define DFLT_VAL_NX90_mpwm_irq_msk_set     0x00000000

#define MSK_NX90_mpwm_irq_msk_set_ecz                  0x00000001
#define SRT_NX90_mpwm_irq_msk_set_ecz                  0
#define DFLT_VAL_NX90_mpwm_irq_msk_set_ecz             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_ecz          0x00000000
#define MSK_NX90_mpwm_irq_msk_set_bop                  0x00000002
#define SRT_NX90_mpwm_irq_msk_set_bop                  1
#define DFLT_VAL_NX90_mpwm_irq_msk_set_bop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_bop          0x00000000
#define MSK_NX90_mpwm_irq_msk_set_mop                  0x00000004
#define SRT_NX90_mpwm_irq_msk_set_mop                  2
#define DFLT_VAL_NX90_mpwm_irq_msk_set_mop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_mop          0x00000000
#define MSK_NX90_mpwm_irq_msk_set_eci_val              0x00000008
#define SRT_NX90_mpwm_irq_msk_set_eci_val              3
#define DFLT_VAL_NX90_mpwm_irq_msk_set_eci_val         0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_eci_val      0x00000000
#define MSK_NX90_mpwm_irq_msk_set_eci_ks_state         0x00000010
#define SRT_NX90_mpwm_irq_msk_set_eci_ks_state         4
#define DFLT_VAL_NX90_mpwm_irq_msk_set_eci_ks_state    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_eci_ks_state 0x00000000
#define MSK_NX90_mpwm_irq_msk_set_oede                 0x000007e0
#define SRT_NX90_mpwm_irq_msk_set_oede                 5
#define DFLT_VAL_NX90_mpwm_irq_msk_set_oede            0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_set_oede         0x00000000

/* all used bits of 'NX90_mpwm_irq_msk_set': */
#define MSK_USED_BITS_NX90_mpwm_irq_msk_set 0x000007ff

/* --------------------------------------------------------------------- */
/* Register mpwm_irq_msk_reset */
/* => IRQ disable mask: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit. */
/*    Write access with '0' does not influence this bit. */
/*    Read access is undefined */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_irq_msk_reset      0x000001CC
#define Adr_NX90_mpwm_app_mpwm_irq_msk_reset 0xFF8025CC
#define Adr_NX90_mpwm_irq_msk_reset          0xFF8025CC
#define DFLT_VAL_NX90_mpwm_irq_msk_reset     0x00000000

#define MSK_NX90_mpwm_irq_msk_reset_ecz                  0x00000001
#define SRT_NX90_mpwm_irq_msk_reset_ecz                  0
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_ecz             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_ecz          0x00000000
#define MSK_NX90_mpwm_irq_msk_reset_bop                  0x00000002
#define SRT_NX90_mpwm_irq_msk_reset_bop                  1
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_bop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_bop          0x00000000
#define MSK_NX90_mpwm_irq_msk_reset_mop                  0x00000004
#define SRT_NX90_mpwm_irq_msk_reset_mop                  2
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_mop             0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_mop          0x00000000
#define MSK_NX90_mpwm_irq_msk_reset_eci_val              0x00000008
#define SRT_NX90_mpwm_irq_msk_reset_eci_val              3
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_eci_val         0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_eci_val      0x00000000
#define MSK_NX90_mpwm_irq_msk_reset_eci_ks_state         0x00000010
#define SRT_NX90_mpwm_irq_msk_reset_eci_ks_state         4
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_eci_ks_state    0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_eci_ks_state 0x00000000
#define MSK_NX90_mpwm_irq_msk_reset_oede                 0x000007e0
#define SRT_NX90_mpwm_irq_msk_reset_oede                 5
#define DFLT_VAL_NX90_mpwm_irq_msk_reset_oede            0x00000000
#define DFLT_BF_VAL_NX90_mpwm_irq_msk_reset_oede         0x00000000

/* all used bits of 'NX90_mpwm_irq_msk_reset': */
#define MSK_USED_BITS_NX90_mpwm_irq_msk_reset 0x000007ff

/* --------------------------------------------------------------------- */
/* Register mpwm_irq_no */
/* => IRQ number: */
/*    This shows the bit number of the lowest active bit in IRQ_MASKED or MAX+1 when no bit is set. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_mpwm_irq_no      0x000001D0
#define Adr_NX90_mpwm_app_mpwm_irq_no 0xFF8025D0
#define Adr_NX90_mpwm_irq_no          0xFF8025D0

#define MSK_NX90_mpwm_irq_no_val 0x0000000f
#define SRT_NX90_mpwm_irq_no_val 0

/* all used bits of 'NX90_mpwm_irq_no': */
#define MSK_USED_BITS_NX90_mpwm_irq_no 0x0000000f


/* ===================================================================== */

/* AREA xpic_config */
/* Area of xpic_app_config */

/* ===================================================================== */

#define Addr_NX90_xpic_app_config 0xFF880000

/* ===================================================================== */

/* AREA xpic_ram */
/* Area of xpic_app_dram, xpic_app_pram */

/* ===================================================================== */

#define Addr_NX90_xpic_app_dram 0xFF880000
#define Addr_NX90_xpic_app_pram 0xFF882000

/* --------------------------------------------------------------------- */
/* Register xpic_ram_start */
/* => xPIC program or data RAM (xPIC TCM) start address: */
/*    Both xPIC TCMs (program and data) are only accessible by other system masters, \ */
/*    if xPIC is not running (xpic_debug-xpic_hold_pc-hold=0). */
/*    xPIC TCMs are only accessible for configuration and setup of xPIC processor. */
/*    xPIC TCMs should never be used for data exchange between xPIC and other system-masters. */
/*    Attention: Accessing xPIC_dram (data-TCM) while xPIC is running might seem to work but \ */
/*    influences communication tasks and HIF acesses and leads to instable system behaviour! */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_ram_start           0x00000000
#define Adr_NX90_xpic_app_dram_xpic_ram_start 0xFF880000
#define Adr_NX90_xpic_app_pram_xpic_ram_start 0xFF882000

/* --------------------------------------------------------------------- */
/* Register xpic_ram_end */
/* =>  */
/* => Mode:  */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_ram_end           0x00001FFC
#define Adr_NX90_xpic_app_dram_xpic_ram_end 0xFF881FFC
#define Adr_NX90_xpic_app_pram_xpic_ram_end 0xFF883FFC


/* ===================================================================== */

/* AREA xpic */
/* Area of xpic_app_regs */

/* ===================================================================== */

#define Addr_NX90_xpic_app_regs 0xFF884000

/* --------------------------------------------------------------------- */
/* Register xpic_r0 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r0           0x00000000
#define Adr_NX90_xpic_app_regs_xpic_r0 0xFF884000
#define Adr_NX90_xpic_r0               0xFF884000
#define DFLT_VAL_NX90_xpic_r0          0x00000000

#define MSK_NX90_xpic_r0_r0         0xffffffff
#define SRT_NX90_xpic_r0_r0         0
#define DFLT_VAL_NX90_xpic_r0_r0    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r0_r0 0x00000000

/* all used bits of 'NX90_xpic_r0': */
#define MSK_USED_BITS_NX90_xpic_r0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r1 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r1           0x00000004
#define Adr_NX90_xpic_app_regs_xpic_r1 0xFF884004
#define Adr_NX90_xpic_r1               0xFF884004
#define DFLT_VAL_NX90_xpic_r1          0x00000000

#define MSK_NX90_xpic_r1_r1         0xffffffff
#define SRT_NX90_xpic_r1_r1         0
#define DFLT_VAL_NX90_xpic_r1_r1    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r1_r1 0x00000000

/* all used bits of 'NX90_xpic_r1': */
#define MSK_USED_BITS_NX90_xpic_r1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r2 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r2           0x00000008
#define Adr_NX90_xpic_app_regs_xpic_r2 0xFF884008
#define Adr_NX90_xpic_r2               0xFF884008
#define DFLT_VAL_NX90_xpic_r2          0x00000000

#define MSK_NX90_xpic_r2_r2         0xffffffff
#define SRT_NX90_xpic_r2_r2         0
#define DFLT_VAL_NX90_xpic_r2_r2    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r2_r2 0x00000000

/* all used bits of 'NX90_xpic_r2': */
#define MSK_USED_BITS_NX90_xpic_r2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r3 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r3           0x0000000C
#define Adr_NX90_xpic_app_regs_xpic_r3 0xFF88400C
#define Adr_NX90_xpic_r3               0xFF88400C
#define DFLT_VAL_NX90_xpic_r3          0x00000000

#define MSK_NX90_xpic_r3_r3         0xffffffff
#define SRT_NX90_xpic_r3_r3         0
#define DFLT_VAL_NX90_xpic_r3_r3    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r3_r3 0x00000000

/* all used bits of 'NX90_xpic_r3': */
#define MSK_USED_BITS_NX90_xpic_r3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r4 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r4           0x00000010
#define Adr_NX90_xpic_app_regs_xpic_r4 0xFF884010
#define Adr_NX90_xpic_r4               0xFF884010
#define DFLT_VAL_NX90_xpic_r4          0x00000000

#define MSK_NX90_xpic_r4_r4         0xffffffff
#define SRT_NX90_xpic_r4_r4         0
#define DFLT_VAL_NX90_xpic_r4_r4    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r4_r4 0x00000000

/* all used bits of 'NX90_xpic_r4': */
#define MSK_USED_BITS_NX90_xpic_r4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r5 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r5           0x00000014
#define Adr_NX90_xpic_app_regs_xpic_r5 0xFF884014
#define Adr_NX90_xpic_r5               0xFF884014
#define DFLT_VAL_NX90_xpic_r5          0x00000000

#define MSK_NX90_xpic_r5_r5         0xffffffff
#define SRT_NX90_xpic_r5_r5         0
#define DFLT_VAL_NX90_xpic_r5_r5    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r5_r5 0x00000000

/* all used bits of 'NX90_xpic_r5': */
#define MSK_USED_BITS_NX90_xpic_r5 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r6 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r6           0x00000018
#define Adr_NX90_xpic_app_regs_xpic_r6 0xFF884018
#define Adr_NX90_xpic_r6               0xFF884018
#define DFLT_VAL_NX90_xpic_r6          0x00000000

#define MSK_NX90_xpic_r6_r6         0xffffffff
#define SRT_NX90_xpic_r6_r6         0
#define DFLT_VAL_NX90_xpic_r6_r6    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r6_r6 0x00000000

/* all used bits of 'NX90_xpic_r6': */
#define MSK_USED_BITS_NX90_xpic_r6 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_r7 */
/* => xPIC work register for indirect addressing */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_r7           0x0000001C
#define Adr_NX90_xpic_app_regs_xpic_r7 0xFF88401C
#define Adr_NX90_xpic_r7               0xFF88401C
#define DFLT_VAL_NX90_xpic_r7          0x00000000

#define MSK_NX90_xpic_r7_r7         0xffffffff
#define SRT_NX90_xpic_r7_r7         0
#define DFLT_VAL_NX90_xpic_r7_r7    0x00000000
#define DFLT_BF_VAL_NX90_xpic_r7_r7 0x00000000

/* all used bits of 'NX90_xpic_r7': */
#define MSK_USED_BITS_NX90_xpic_r7 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_usr0 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr0           0x00000020
#define Adr_NX90_xpic_app_regs_xpic_usr0 0xFF884020
#define Adr_NX90_xpic_usr0               0xFF884020
#define DFLT_VAL_NX90_xpic_usr0          0x00000000

#define MSK_NX90_xpic_usr0_usr0         0xffffffff
#define SRT_NX90_xpic_usr0_usr0         0
#define DFLT_VAL_NX90_xpic_usr0_usr0    0x00000000
#define DFLT_BF_VAL_NX90_xpic_usr0_usr0 0x00000000

/* all used bits of 'NX90_xpic_usr0': */
#define MSK_USED_BITS_NX90_xpic_usr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_usr1 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr1           0x00000024
#define Adr_NX90_xpic_app_regs_xpic_usr1 0xFF884024
#define Adr_NX90_xpic_usr1               0xFF884024
#define DFLT_VAL_NX90_xpic_usr1          0x00000000

#define MSK_NX90_xpic_usr1_usr1         0xffffffff
#define SRT_NX90_xpic_usr1_usr1         0
#define DFLT_VAL_NX90_xpic_usr1_usr1    0x00000000
#define DFLT_BF_VAL_NX90_xpic_usr1_usr1 0x00000000

/* all used bits of 'NX90_xpic_usr1': */
#define MSK_USED_BITS_NX90_xpic_usr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_usr2 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr2           0x00000028
#define Adr_NX90_xpic_app_regs_xpic_usr2 0xFF884028
#define Adr_NX90_xpic_usr2               0xFF884028
#define DFLT_VAL_NX90_xpic_usr2          0x00000000

#define MSK_NX90_xpic_usr2_usr2         0xffffffff
#define SRT_NX90_xpic_usr2_usr2         0
#define DFLT_VAL_NX90_xpic_usr2_usr2    0x00000000
#define DFLT_BF_VAL_NX90_xpic_usr2_usr2 0x00000000

/* all used bits of 'NX90_xpic_usr2': */
#define MSK_USED_BITS_NX90_xpic_usr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_usr3 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr3           0x0000002C
#define Adr_NX90_xpic_app_regs_xpic_usr3 0xFF88402C
#define Adr_NX90_xpic_usr3               0xFF88402C
#define DFLT_VAL_NX90_xpic_usr3          0x00000000

#define MSK_NX90_xpic_usr3_usr3         0xffffffff
#define SRT_NX90_xpic_usr3_usr3         0
#define DFLT_VAL_NX90_xpic_usr3_usr3    0x00000000
#define DFLT_BF_VAL_NX90_xpic_usr3_usr3 0x00000000

/* all used bits of 'NX90_xpic_usr3': */
#define MSK_USED_BITS_NX90_xpic_usr3 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_usr4 */
/* => xPIC user Register additional work register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_usr4           0x00000030
#define Adr_NX90_xpic_app_regs_xpic_usr4 0xFF884030
#define Adr_NX90_xpic_usr4               0xFF884030
#define DFLT_VAL_NX90_xpic_usr4          0x00000000

#define MSK_NX90_xpic_usr4_usr4         0xffffffff
#define SRT_NX90_xpic_usr4_usr4         0
#define DFLT_VAL_NX90_xpic_usr4_usr4    0x00000000
#define DFLT_BF_VAL_NX90_xpic_usr4_usr4 0x00000000

/* all used bits of 'NX90_xpic_usr4': */
#define MSK_USED_BITS_NX90_xpic_usr4 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_pc */
/* => xPIC Program Counter */
/*    Shared in xPIC 64_BIT_MUL_TARGET mode with usr32 (w mode) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_pc           0x00000034
#define Adr_NX90_xpic_app_regs_xpic_pc 0xFF884034
#define Adr_NX90_xpic_pc               0xFF884034
#define DFLT_VAL_NX90_xpic_pc          0xfffffffc

#define MSK_NX90_xpic_pc_pc         0xffffffff
#define SRT_NX90_xpic_pc_pc         0
#define DFLT_VAL_NX90_xpic_pc_pc    0xfffffffc
#define DFLT_BF_VAL_NX90_xpic_pc_pc 0xfffffffc

/* all used bits of 'NX90_xpic_pc': */
#define MSK_USED_BITS_NX90_xpic_pc 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_stat */
/* => Processor Status Register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_stat           0x00000038
#define Adr_NX90_xpic_app_regs_xpic_stat 0xFF884038
#define Adr_NX90_xpic_stat               0xFF884038
#define DFLT_VAL_NX90_xpic_stat          0x00000000

#define MSK_NX90_xpic_stat_stat         0xffffffff
#define SRT_NX90_xpic_stat_stat         0
#define DFLT_VAL_NX90_xpic_stat_stat    0x00000000
#define DFLT_BF_VAL_NX90_xpic_stat_stat 0x00000000

/* all used bits of 'NX90_xpic_stat': */
#define MSK_USED_BITS_NX90_xpic_stat 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_zero */
/* => Zero Register */
/*    Shared in xPIC 64_BIT_MUL_TARGET mode with usr10 (w mode) */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_zero           0x0000003C
#define Adr_NX90_xpic_app_regs_xpic_zero 0xFF88403C
#define Adr_NX90_xpic_zero               0xFF88403C
#define DFLT_VAL_NX90_xpic_zero          0x00000000

#define MSK_NX90_xpic_zero_zero         0xffffffff
#define SRT_NX90_xpic_zero_zero         0
#define DFLT_VAL_NX90_xpic_zero_zero    0x00000000
#define DFLT_BF_VAL_NX90_xpic_zero_zero 0x00000000

/* all used bits of 'NX90_xpic_zero': */
#define MSK_USED_BITS_NX90_xpic_zero 0xffffffff


/* ===================================================================== */

/* AREA xpic_debug */
/* Area of xpic_app_debug */

/* ===================================================================== */

#define Addr_NX90_xpic_app_debug 0xFF884080

/* --------------------------------------------------------------------- */
/* Register xpic_hold_pc */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_hold_pc            0x00000000
#define Adr_NX90_xpic_app_debug_xpic_hold_pc 0xFF884080
#define Adr_NX90_xpic_hold_pc                0xFF884080
#define DFLT_VAL_NX90_xpic_hold_pc           0x00000001

#define MSK_NX90_xpic_hold_pc_hold                      0x00000001
#define SRT_NX90_xpic_hold_pc_hold                      0
#define DFLT_VAL_NX90_xpic_hold_pc_hold                 0x00000001
#define DFLT_BF_VAL_NX90_xpic_hold_pc_hold              0x00000001
#define MSK_NX90_xpic_hold_pc_single_step               0x00000002
#define SRT_NX90_xpic_hold_pc_single_step               1
#define DFLT_VAL_NX90_xpic_hold_pc_single_step          0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_single_step       0x00000000
#define MSK_NX90_xpic_hold_pc_monitor_mode              0x00000004
#define SRT_NX90_xpic_hold_pc_monitor_mode              2
#define DFLT_VAL_NX90_xpic_hold_pc_monitor_mode         0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_monitor_mode      0x00000000
#define MSK_NX90_xpic_hold_pc_disable_int               0x00000008
#define SRT_NX90_xpic_hold_pc_disable_int               3
#define DFLT_VAL_NX90_xpic_hold_pc_disable_int          0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_disable_int       0x00000000
#define MSK_NX90_xpic_hold_pc_misalignment_hold         0x00000010
#define SRT_NX90_xpic_hold_pc_misalignment_hold         4
#define DFLT_VAL_NX90_xpic_hold_pc_misalignment_hold    0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_misalignment_hold 0x00000000
#define MSK_NX90_xpic_hold_pc_bank_select               0x00000020
#define SRT_NX90_xpic_hold_pc_bank_select               5
#define DFLT_VAL_NX90_xpic_hold_pc_bank_select          0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_bank_select       0x00000000
#define MSK_NX90_xpic_hold_pc_bank_control              0x00000040
#define SRT_NX90_xpic_hold_pc_bank_control              6
#define DFLT_VAL_NX90_xpic_hold_pc_bank_control         0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_bank_control      0x00000000
#define MSK_NX90_xpic_hold_pc_reset_xpic                0x00000080
#define SRT_NX90_xpic_hold_pc_reset_xpic                7
#define DFLT_VAL_NX90_xpic_hold_pc_reset_xpic           0x00000000
#define DFLT_BF_VAL_NX90_xpic_hold_pc_reset_xpic        0x00000000

/* all used bits of 'NX90_xpic_hold_pc': */
#define MSK_USED_BITS_NX90_xpic_hold_pc 0x000000ff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_addr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_addr            0x00000004
#define Adr_NX90_xpic_app_debug_xpic_break0_addr 0xFF884084
#define Adr_NX90_xpic_break0_addr                0xFF884084
#define DFLT_VAL_NX90_xpic_break0_addr           0x00000000

#define MSK_NX90_xpic_break0_addr_val         0xffffffff
#define SRT_NX90_xpic_break0_addr_val         0
#define DFLT_VAL_NX90_xpic_break0_addr_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_addr_val 0x00000000

/* all used bits of 'NX90_xpic_break0_addr': */
#define MSK_USED_BITS_NX90_xpic_break0_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_addr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_addr_mask            0x00000008
#define Adr_NX90_xpic_app_debug_xpic_break0_addr_mask 0xFF884088
#define Adr_NX90_xpic_break0_addr_mask                0xFF884088
#define DFLT_VAL_NX90_xpic_break0_addr_mask           0x00000000

#define MSK_NX90_xpic_break0_addr_mask_val         0xffffffff
#define SRT_NX90_xpic_break0_addr_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_addr_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_addr_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break0_addr_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_addr_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_data */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_data            0x0000000C
#define Adr_NX90_xpic_app_debug_xpic_break0_data 0xFF88408C
#define Adr_NX90_xpic_break0_data                0xFF88408C
#define DFLT_VAL_NX90_xpic_break0_data           0x00000000

#define MSK_NX90_xpic_break0_data_val         0xffffffff
#define SRT_NX90_xpic_break0_data_val         0
#define DFLT_VAL_NX90_xpic_break0_data_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_data_val 0x00000000

/* all used bits of 'NX90_xpic_break0_data': */
#define MSK_USED_BITS_NX90_xpic_break0_data 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_data_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_data_mask            0x00000010
#define Adr_NX90_xpic_app_debug_xpic_break0_data_mask 0xFF884090
#define Adr_NX90_xpic_break0_data_mask                0xFF884090
#define DFLT_VAL_NX90_xpic_break0_data_mask           0x00000000

#define MSK_NX90_xpic_break0_data_mask_val         0xffffffff
#define SRT_NX90_xpic_break0_data_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_data_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_data_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break0_data_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_data_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_contr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_contr            0x00000014
#define Adr_NX90_xpic_app_debug_xpic_break0_contr 0xFF884094
#define Adr_NX90_xpic_break0_contr                0xFF884094
#define DFLT_VAL_NX90_xpic_break0_contr           0x00000000

#define MSK_NX90_xpic_break0_contr_write               0x00000001
#define SRT_NX90_xpic_break0_contr_write               0
#define DFLT_VAL_NX90_xpic_break0_contr_write          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_write       0x00000000
#define MSK_NX90_xpic_break0_contr_mas                 0x00000006
#define SRT_NX90_xpic_break0_contr_mas                 1
#define DFLT_VAL_NX90_xpic_break0_contr_mas            0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_mas         0x00000000
#define MSK_NX90_xpic_break0_contr_data_access         0x00000008
#define SRT_NX90_xpic_break0_contr_data_access         3
#define DFLT_VAL_NX90_xpic_break0_contr_data_access    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_data_access 0x00000000
#define MSK_NX90_xpic_break0_contr_fiq_mode            0x00000010
#define SRT_NX90_xpic_break0_contr_fiq_mode            4
#define DFLT_VAL_NX90_xpic_break0_contr_fiq_mode       0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_fiq_mode    0x00000000
#define MSK_NX90_xpic_break0_contr_irq_mode            0x00000020
#define SRT_NX90_xpic_break0_contr_irq_mode            5
#define DFLT_VAL_NX90_xpic_break0_contr_irq_mode       0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_irq_mode    0x00000000
#define MSK_NX90_xpic_break0_contr_chain               0x00000040
#define SRT_NX90_xpic_break0_contr_chain               6
#define DFLT_VAL_NX90_xpic_break0_contr_chain          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_chain       0x00000000
#define MSK_NX90_xpic_break0_contr_range               0x00000080
#define SRT_NX90_xpic_break0_contr_range               7
#define DFLT_VAL_NX90_xpic_break0_contr_range          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_range       0x00000000
#define MSK_NX90_xpic_break0_contr_enable              0x00000100
#define SRT_NX90_xpic_break0_contr_enable              8
#define DFLT_VAL_NX90_xpic_break0_contr_enable         0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_enable      0x00000000

/* all used bits of 'NX90_xpic_break0_contr': */
#define MSK_USED_BITS_NX90_xpic_break0_contr 0x000001ff

/* --------------------------------------------------------------------- */
/* Register xpic_break0_contr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break0_contr_mask            0x00000018
#define Adr_NX90_xpic_app_debug_xpic_break0_contr_mask 0xFF884098
#define Adr_NX90_xpic_break0_contr_mask                0xFF884098
#define DFLT_VAL_NX90_xpic_break0_contr_mask           0x00000000

#define MSK_NX90_xpic_break0_contr_mask_val         0x000000ff
#define SRT_NX90_xpic_break0_contr_mask_val         0
#define DFLT_VAL_NX90_xpic_break0_contr_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break0_contr_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break0_contr_mask': */
#define MSK_USED_BITS_NX90_xpic_break0_contr_mask 0x000000ff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_addr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_addr            0x0000001C
#define Adr_NX90_xpic_app_debug_xpic_break1_addr 0xFF88409C
#define Adr_NX90_xpic_break1_addr                0xFF88409C
#define DFLT_VAL_NX90_xpic_break1_addr           0x00000000

#define MSK_NX90_xpic_break1_addr_val         0xffffffff
#define SRT_NX90_xpic_break1_addr_val         0
#define DFLT_VAL_NX90_xpic_break1_addr_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_addr_val 0x00000000

/* all used bits of 'NX90_xpic_break1_addr': */
#define MSK_USED_BITS_NX90_xpic_break1_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_addr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_addr_mask            0x00000020
#define Adr_NX90_xpic_app_debug_xpic_break1_addr_mask 0xFF8840A0
#define Adr_NX90_xpic_break1_addr_mask                0xFF8840A0
#define DFLT_VAL_NX90_xpic_break1_addr_mask           0x00000000

#define MSK_NX90_xpic_break1_addr_mask_val         0xffffffff
#define SRT_NX90_xpic_break1_addr_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_addr_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_addr_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break1_addr_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_addr_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_data */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_data            0x00000024
#define Adr_NX90_xpic_app_debug_xpic_break1_data 0xFF8840A4
#define Adr_NX90_xpic_break1_data                0xFF8840A4
#define DFLT_VAL_NX90_xpic_break1_data           0x00000000

#define MSK_NX90_xpic_break1_data_val         0xffffffff
#define SRT_NX90_xpic_break1_data_val         0
#define DFLT_VAL_NX90_xpic_break1_data_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_data_val 0x00000000

/* all used bits of 'NX90_xpic_break1_data': */
#define MSK_USED_BITS_NX90_xpic_break1_data 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_data_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_data_mask            0x00000028
#define Adr_NX90_xpic_app_debug_xpic_break1_data_mask 0xFF8840A8
#define Adr_NX90_xpic_break1_data_mask                0xFF8840A8
#define DFLT_VAL_NX90_xpic_break1_data_mask           0x00000000

#define MSK_NX90_xpic_break1_data_mask_val         0xffffffff
#define SRT_NX90_xpic_break1_data_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_data_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_data_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break1_data_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_data_mask 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_contr */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_contr            0x0000002C
#define Adr_NX90_xpic_app_debug_xpic_break1_contr 0xFF8840AC
#define Adr_NX90_xpic_break1_contr                0xFF8840AC
#define DFLT_VAL_NX90_xpic_break1_contr           0x00000000

#define MSK_NX90_xpic_break1_contr_write               0x00000001
#define SRT_NX90_xpic_break1_contr_write               0
#define DFLT_VAL_NX90_xpic_break1_contr_write          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_write       0x00000000
#define MSK_NX90_xpic_break1_contr_mas                 0x00000006
#define SRT_NX90_xpic_break1_contr_mas                 1
#define DFLT_VAL_NX90_xpic_break1_contr_mas            0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_mas         0x00000000
#define MSK_NX90_xpic_break1_contr_data_access         0x00000008
#define SRT_NX90_xpic_break1_contr_data_access         3
#define DFLT_VAL_NX90_xpic_break1_contr_data_access    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_data_access 0x00000000
#define MSK_NX90_xpic_break1_contr_fiq_mode            0x00000010
#define SRT_NX90_xpic_break1_contr_fiq_mode            4
#define DFLT_VAL_NX90_xpic_break1_contr_fiq_mode       0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_fiq_mode    0x00000000
#define MSK_NX90_xpic_break1_contr_irq_mode            0x00000020
#define SRT_NX90_xpic_break1_contr_irq_mode            5
#define DFLT_VAL_NX90_xpic_break1_contr_irq_mode       0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_irq_mode    0x00000000
#define MSK_NX90_xpic_break1_contr_chain               0x00000040
#define SRT_NX90_xpic_break1_contr_chain               6
#define DFLT_VAL_NX90_xpic_break1_contr_chain          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_chain       0x00000000
#define MSK_NX90_xpic_break1_contr_range               0x00000080
#define SRT_NX90_xpic_break1_contr_range               7
#define DFLT_VAL_NX90_xpic_break1_contr_range          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_range       0x00000000
#define MSK_NX90_xpic_break1_contr_enable              0x00000100
#define SRT_NX90_xpic_break1_contr_enable              8
#define DFLT_VAL_NX90_xpic_break1_contr_enable         0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_enable      0x00000000

/* all used bits of 'NX90_xpic_break1_contr': */
#define MSK_USED_BITS_NX90_xpic_break1_contr 0x000001ff

/* --------------------------------------------------------------------- */
/* Register xpic_break1_contr_mask */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break1_contr_mask            0x00000030
#define Adr_NX90_xpic_app_debug_xpic_break1_contr_mask 0xFF8840B0
#define Adr_NX90_xpic_break1_contr_mask                0xFF8840B0
#define DFLT_VAL_NX90_xpic_break1_contr_mask           0x00000000

#define MSK_NX90_xpic_break1_contr_mask_val         0x000000ff
#define SRT_NX90_xpic_break1_contr_mask_val         0
#define DFLT_VAL_NX90_xpic_break1_contr_mask_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break1_contr_mask_val 0x00000000

/* all used bits of 'NX90_xpic_break1_contr_mask': */
#define MSK_USED_BITS_NX90_xpic_break1_contr_mask 0x000000ff

/* --------------------------------------------------------------------- */
/* Register xpic_break_last_pc */
/* =>  */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_last_pc            0x00000034
#define Adr_NX90_xpic_app_debug_xpic_break_last_pc 0xFF8840B4
#define Adr_NX90_xpic_break_last_pc                0xFF8840B4

#define MSK_NX90_xpic_break_last_pc_val 0xffffffff
#define SRT_NX90_xpic_break_last_pc_val 0

/* all used bits of 'NX90_xpic_break_last_pc': */
#define MSK_USED_BITS_NX90_xpic_break_last_pc 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break_status */
/* => Read access shows the reason why xPIC is in HOLD / BREAK */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_status            0x00000038
#define Adr_NX90_xpic_app_debug_xpic_break_status 0xFF8840B8
#define Adr_NX90_xpic_break_status                0xFF8840B8

#define MSK_NX90_xpic_break_status_xpic_in_hold      0x00000001
#define SRT_NX90_xpic_break_status_xpic_in_hold      0
#define MSK_NX90_xpic_break_status_hold              0x00000002
#define SRT_NX90_xpic_break_status_hold              1
#define MSK_NX90_xpic_break_status_break0            0x00000004
#define SRT_NX90_xpic_break_status_break0            2
#define MSK_NX90_xpic_break_status_break1            0x00000008
#define SRT_NX90_xpic_break_status_break1            3
#define MSK_NX90_xpic_break_status_soft_break        0x00000010
#define SRT_NX90_xpic_break_status_soft_break        4
#define MSK_NX90_xpic_break_status_single_step       0x00000020
#define SRT_NX90_xpic_break_status_single_step       5
#define MSK_NX90_xpic_break_status_data_misalignment 0x00000040
#define SRT_NX90_xpic_break_status_data_misalignment 6
#define MSK_NX90_xpic_break_status_break0_read_data  0x00000080
#define SRT_NX90_xpic_break_status_break0_read_data  7
#define MSK_NX90_xpic_break_status_break1_read_data  0x00000100
#define SRT_NX90_xpic_break_status_break1_read_data  8
#define MSK_NX90_xpic_break_status_xpic_reset_status 0x00000200
#define SRT_NX90_xpic_break_status_xpic_reset_status 9

/* all used bits of 'NX90_xpic_break_status': */
#define MSK_USED_BITS_NX90_xpic_break_status 0x000003ff

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_raw */
/* => xPIC_DEBUG Raw IRQ register: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_raw            0x0000003C
#define Adr_NX90_xpic_app_debug_xpic_break_irq_raw 0xFF8840BC
#define Adr_NX90_xpic_break_irq_raw                0xFF8840BC
#define DFLT_VAL_NX90_xpic_break_irq_raw           0x00000000

#define MSK_NX90_xpic_break_irq_raw_break0_irq               0x00000001
#define SRT_NX90_xpic_break_irq_raw_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_raw_break0_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_break0_irq       0x00000000
#define MSK_NX90_xpic_break_irq_raw_break1_irq               0x00000002
#define SRT_NX90_xpic_break_irq_raw_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_raw_break1_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_break1_irq       0x00000000
#define MSK_NX90_xpic_break_irq_raw_soft_break_irq           0x00000004
#define SRT_NX90_xpic_break_irq_raw_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_raw_soft_break_irq      0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_soft_break_irq   0x00000000
#define MSK_NX90_xpic_break_irq_raw_single_step_irq          0x00000008
#define SRT_NX90_xpic_break_irq_raw_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_raw_single_step_irq     0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_single_step_irq  0x00000000
#define MSK_NX90_xpic_break_irq_raw_misalignment_irq         0x00000010
#define SRT_NX90_xpic_break_irq_raw_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_raw_misalignment_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_raw_misalignment_irq 0x00000000

/* all used bits of 'NX90_xpic_break_irq_raw': */
#define MSK_USED_BITS_NX90_xpic_break_irq_raw 0x0000001f

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_masked */
/* => xPIC_DEBUG Masked IRQ register for other CPU (ARM): */
/*    Shows status of masked IRQs (as connected to ARM) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_masked            0x00000040
#define Adr_NX90_xpic_app_debug_xpic_break_irq_masked 0xFF8840C0
#define Adr_NX90_xpic_break_irq_masked                0xFF8840C0

#define MSK_NX90_xpic_break_irq_masked_break0_irq       0x00000001
#define SRT_NX90_xpic_break_irq_masked_break0_irq       0
#define MSK_NX90_xpic_break_irq_masked_break1_irq       0x00000002
#define SRT_NX90_xpic_break_irq_masked_break1_irq       1
#define MSK_NX90_xpic_break_irq_masked_soft_break_irq   0x00000004
#define SRT_NX90_xpic_break_irq_masked_soft_break_irq   2
#define MSK_NX90_xpic_break_irq_masked_single_step_irq  0x00000008
#define SRT_NX90_xpic_break_irq_masked_single_step_irq  3
#define MSK_NX90_xpic_break_irq_masked_misalignment_irq 0x00000010
#define SRT_NX90_xpic_break_irq_masked_misalignment_irq 4

/* all used bits of 'NX90_xpic_break_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_break_irq_masked 0x0000001f

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_msk_set */
/* => xPIC_DEBUG interrupt mask set for other CPU (ARM): */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to xpic_break_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_msk_set            0x00000044
#define Adr_NX90_xpic_app_debug_xpic_break_irq_msk_set 0xFF8840C4
#define Adr_NX90_xpic_break_irq_msk_set                0xFF8840C4
#define DFLT_VAL_NX90_xpic_break_irq_msk_set           0x00000000

#define MSK_NX90_xpic_break_irq_msk_set_break0_irq               0x00000001
#define SRT_NX90_xpic_break_irq_msk_set_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_break0_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_break0_irq       0x00000000
#define MSK_NX90_xpic_break_irq_msk_set_break1_irq               0x00000002
#define SRT_NX90_xpic_break_irq_msk_set_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_break1_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_break1_irq       0x00000000
#define MSK_NX90_xpic_break_irq_msk_set_soft_break_irq           0x00000004
#define SRT_NX90_xpic_break_irq_msk_set_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_soft_break_irq      0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_soft_break_irq   0x00000000
#define MSK_NX90_xpic_break_irq_msk_set_single_step_irq          0x00000008
#define SRT_NX90_xpic_break_irq_msk_set_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_single_step_irq     0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_single_step_irq  0x00000000
#define MSK_NX90_xpic_break_irq_msk_set_misalignment_irq         0x00000010
#define SRT_NX90_xpic_break_irq_msk_set_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_msk_set_misalignment_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_set_misalignment_irq 0x00000000

/* all used bits of 'NX90_xpic_break_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_break_irq_msk_set 0x0000001f

/* --------------------------------------------------------------------- */
/* Register xpic_break_irq_msk_reset */
/* => xPIC_DEBUG interrupt mask reset for other CPU (ARM): */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_irq_msk_reset            0x00000048
#define Adr_NX90_xpic_app_debug_xpic_break_irq_msk_reset 0xFF8840C8
#define Adr_NX90_xpic_break_irq_msk_reset                0xFF8840C8
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset           0x00000000

#define MSK_NX90_xpic_break_irq_msk_reset_break0_irq               0x00000001
#define SRT_NX90_xpic_break_irq_msk_reset_break0_irq               0
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_break0_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_break0_irq       0x00000000
#define MSK_NX90_xpic_break_irq_msk_reset_break1_irq               0x00000002
#define SRT_NX90_xpic_break_irq_msk_reset_break1_irq               1
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_break1_irq          0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_break1_irq       0x00000000
#define MSK_NX90_xpic_break_irq_msk_reset_soft_break_irq           0x00000004
#define SRT_NX90_xpic_break_irq_msk_reset_soft_break_irq           2
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_soft_break_irq      0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_soft_break_irq   0x00000000
#define MSK_NX90_xpic_break_irq_msk_reset_single_step_irq          0x00000008
#define SRT_NX90_xpic_break_irq_msk_reset_single_step_irq          3
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_single_step_irq     0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_single_step_irq  0x00000000
#define MSK_NX90_xpic_break_irq_msk_reset_misalignment_irq         0x00000010
#define SRT_NX90_xpic_break_irq_msk_reset_misalignment_irq         4
#define DFLT_VAL_NX90_xpic_break_irq_msk_reset_misalignment_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_irq_msk_reset_misalignment_irq 0x00000000

/* all used bits of 'NX90_xpic_break_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_break_irq_msk_reset 0x0000001f

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_masked */
/* => xPIC_DEBUG own Masked IRQ register (for xPIC): */
/*    Shows status of masked IRQs (as connected to xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_masked            0x0000004C
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_masked 0xFF8840CC
#define Adr_NX90_xpic_break_own_irq_masked                0xFF8840CC

#define MSK_NX90_xpic_break_own_irq_masked_misalignment_irq 0x00000001
#define SRT_NX90_xpic_break_own_irq_masked_misalignment_irq 0

/* all used bits of 'NX90_xpic_break_own_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_masked 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_msk_set */
/* => xPIC_DEBUG own interrupt mask set (for xPIC): */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to xpic_break_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_msk_set            0x00000050
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_msk_set 0xFF8840D0
#define Adr_NX90_xpic_break_own_irq_msk_set                0xFF8840D0
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_set           0x00000000

#define MSK_NX90_xpic_break_own_irq_msk_set_misalignment_irq         0x00000001
#define SRT_NX90_xpic_break_own_irq_msk_set_misalignment_irq         0
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_set_misalignment_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_own_irq_msk_set_misalignment_irq 0x00000000

/* all used bits of 'NX90_xpic_break_own_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_msk_set 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_break_own_irq_msk_reset */
/* => xPIC_DEBUG own interrupt mask reset (for XPIC): */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_own_irq_msk_reset            0x00000054
#define Adr_NX90_xpic_app_debug_xpic_break_own_irq_msk_reset 0xFF8840D4
#define Adr_NX90_xpic_break_own_irq_msk_reset                0xFF8840D4
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_reset           0x00000000

#define MSK_NX90_xpic_break_own_irq_msk_reset_misalignment_irq         0x00000001
#define SRT_NX90_xpic_break_own_irq_msk_reset_misalignment_irq         0
#define DFLT_VAL_NX90_xpic_break_own_irq_msk_reset_misalignment_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_break_own_irq_msk_reset_misalignment_irq 0x00000000

/* all used bits of 'NX90_xpic_break_own_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_break_own_irq_msk_reset 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_break_return_fiq_pc */
/* => xPIC_DEBUG information FIQ return PC value */
/*    valid if xPIC is in FIQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_return_fiq_pc            0x00000058
#define Adr_NX90_xpic_app_debug_xpic_break_return_fiq_pc 0xFF8840D8
#define Adr_NX90_xpic_break_return_fiq_pc                0xFF8840D8

#define MSK_NX90_xpic_break_return_fiq_pc_val 0xffffffff
#define SRT_NX90_xpic_break_return_fiq_pc_val 0

/* all used bits of 'NX90_xpic_break_return_fiq_pc': */
#define MSK_USED_BITS_NX90_xpic_break_return_fiq_pc 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_break_return_irq_pc */
/* => xPIC_DEBUG information last IRQ return PC value */
/*    valid if xPIC is in IRQ */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_break_return_irq_pc            0x0000005C
#define Adr_NX90_xpic_app_debug_xpic_break_return_irq_pc 0xFF8840DC
#define Adr_NX90_xpic_break_return_irq_pc                0xFF8840DC

#define MSK_NX90_xpic_break_return_irq_pc_val 0xffffffff
#define SRT_NX90_xpic_break_return_irq_pc_val 0

/* all used bits of 'NX90_xpic_break_return_irq_pc': */
#define MSK_USED_BITS_NX90_xpic_break_return_irq_pc 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_irq_status */
/* => Read access shows the xpic irq status and the xpic irq enable bits */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_irq_status            0x00000060
#define Adr_NX90_xpic_app_debug_xpic_irq_status 0xFF8840E0
#define Adr_NX90_xpic_irq_status                0xFF8840E0

#define MSK_NX90_xpic_irq_status_irq_status 0x00000001
#define SRT_NX90_xpic_irq_status_irq_status 0
#define MSK_NX90_xpic_irq_status_fiq_status 0x00000002
#define SRT_NX90_xpic_irq_status_fiq_status 1
#define MSK_NX90_xpic_irq_status_irq_enable 0x00000004
#define SRT_NX90_xpic_irq_status_irq_enable 2
#define MSK_NX90_xpic_irq_status_fiq_enable 0x00000008
#define SRT_NX90_xpic_irq_status_fiq_enable 3

/* all used bits of 'NX90_xpic_irq_status': */
#define MSK_USED_BITS_NX90_xpic_irq_status 0x0000000f


/* ===================================================================== */

/* AREA system_xpic */
/* Area of xpic_app_system */

/* ===================================================================== */

#define Addr_NX90_xpic_app_system 0xFF900000

/* ===================================================================== */

/* AREA xpic_vic */
/* Area of vic_xpic_app */

/* ===================================================================== */

#define Addr_NX90_vic_xpic_app 0xFF900000

/* --------------------------------------------------------------------- */
/* Register xpic_vic_config */
/* => XPIC VIC Configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_config          0x00000000
#define Adr_NX90_vic_xpic_app_xpic_vic_config 0xFF900000
#define Adr_NX90_xpic_vic_config              0xFF900000
#define DFLT_VAL_NX90_xpic_vic_config         0x00000000

#define MSK_NX90_xpic_vic_config_enable         0x00000001
#define SRT_NX90_xpic_vic_config_enable         0
#define DFLT_VAL_NX90_xpic_vic_config_enable    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_config_enable 0x00000000
#define MSK_NX90_xpic_vic_config_table          0x00000002
#define SRT_NX90_xpic_vic_config_table          1
#define DFLT_VAL_NX90_xpic_vic_config_table     0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_config_table  0x00000000

/* all used bits of 'NX90_xpic_vic_config': */
#define MSK_USED_BITS_NX90_xpic_vic_config 0x00000003

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr0 */
/* => XPIC VIC Raw0 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr0          0x00000004
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr0 0xFF900004
#define Adr_NX90_xpic_vic_raw_intr0              0xFF900004

#define MSK_NX90_xpic_vic_raw_intr0_irqs 0xffffffff
#define SRT_NX90_xpic_vic_raw_intr0_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr0': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr1 */
/* => XPIC VIC Raw1 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr1          0x00000008
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr1 0xFF900008
#define Adr_NX90_xpic_vic_raw_intr1              0xFF900008

#define MSK_NX90_xpic_vic_raw_intr1_irqs 0xffffffff
#define SRT_NX90_xpic_vic_raw_intr1_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr1': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_raw_intr2 */
/* => XPIC VIC Raw2 interrupt status register */
/*    see netx4000_irq doc */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_raw_intr2          0x0000000C
#define Adr_NX90_vic_xpic_app_xpic_vic_raw_intr2 0xFF90000C
#define Adr_NX90_xpic_vic_raw_intr2              0xFF90000C

#define MSK_NX90_xpic_vic_raw_intr2_irqs 0xffffffff
#define SRT_NX90_xpic_vic_raw_intr2_irqs 0

/* all used bits of 'NX90_xpic_vic_raw_intr2': */
#define MSK_USED_BITS_NX90_xpic_vic_raw_intr2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint0_set */
/* => XPIC VIC Software0 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint0_set          0x00000010
#define Adr_NX90_vic_xpic_app_xpic_vic_softint0_set 0xFF900010
#define Adr_NX90_xpic_vic_softint0_set              0xFF900010
#define DFLT_VAL_NX90_xpic_vic_softint0_set         0x00000000

#define MSK_NX90_xpic_vic_softint0_set_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint0_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint0_set_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint0_set_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint0_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint0_set 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint1_set */
/* => XPIC VIC Software1 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint1_set          0x00000014
#define Adr_NX90_vic_xpic_app_xpic_vic_softint1_set 0xFF900014
#define Adr_NX90_xpic_vic_softint1_set              0xFF900014
#define DFLT_VAL_NX90_xpic_vic_softint1_set         0x00000000

#define MSK_NX90_xpic_vic_softint1_set_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint1_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint1_set_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint1_set_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint1_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint1_set 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint2_set */
/* => XPIC VIC Software2 interrupt set register: */
/*    Read status or set IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint2_set          0x00000018
#define Adr_NX90_vic_xpic_app_xpic_vic_softint2_set 0xFF900018
#define Adr_NX90_xpic_vic_softint2_set              0xFF900018
#define DFLT_VAL_NX90_xpic_vic_softint2_set         0x00000000

#define MSK_NX90_xpic_vic_softint2_set_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint2_set_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint2_set_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint2_set_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint2_set': */
#define MSK_USED_BITS_NX90_xpic_vic_softint2_set 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint0_reset */
/* => XPIC VIC Software0 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint0_reset          0x0000001C
#define Adr_NX90_vic_xpic_app_xpic_vic_softint0_reset 0xFF90001C
#define Adr_NX90_xpic_vic_softint0_reset              0xFF90001C
#define DFLT_VAL_NX90_xpic_vic_softint0_reset         0x00000000

#define MSK_NX90_xpic_vic_softint0_reset_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint0_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint0_reset_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint0_reset_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint0_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint0_reset 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint1_reset */
/* => XPIC VIC Software1 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint1_reset          0x00000020
#define Adr_NX90_vic_xpic_app_xpic_vic_softint1_reset 0xFF900020
#define Adr_NX90_xpic_vic_softint1_reset              0xFF900020
#define DFLT_VAL_NX90_xpic_vic_softint1_reset         0x00000000

#define MSK_NX90_xpic_vic_softint1_reset_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint1_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint1_reset_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint1_reset_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint1_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint1_reset 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_softint2_reset */
/* => XPIC VIC Software2 interrupt reset register: */
/*    Read status or reset IRQ by writing '1' to the appropriate bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_softint2_reset          0x00000024
#define Adr_NX90_vic_xpic_app_xpic_vic_softint2_reset 0xFF900024
#define Adr_NX90_xpic_vic_softint2_reset              0xFF900024
#define DFLT_VAL_NX90_xpic_vic_softint2_reset         0x00000000

#define MSK_NX90_xpic_vic_softint2_reset_irqs         0xffffffff
#define SRT_NX90_xpic_vic_softint2_reset_irqs         0
#define DFLT_VAL_NX90_xpic_vic_softint2_reset_irqs    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_softint2_reset_irqs 0x00000000

/* all used bits of 'NX90_xpic_vic_softint2_reset': */
#define MSK_USED_BITS_NX90_xpic_vic_softint2_reset 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_addr */
/* => XPIC VIC FIQ Vector address 0 register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_addr          0x00000028
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_addr 0xFF900028
#define Adr_NX90_xpic_vic_fiq_addr              0xFF900028
#define DFLT_VAL_NX90_xpic_vic_fiq_addr         0x00000000

#define MSK_NX90_xpic_vic_fiq_addr_val         0xffffffff
#define SRT_NX90_xpic_vic_fiq_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_addr_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_addr_val 0x00000000

/* all used bits of 'NX90_xpic_vic_fiq_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_irq_addr */
/* => XPIC VIC normal IRQ address register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_irq_addr          0x0000002C
#define Adr_NX90_vic_xpic_app_xpic_vic_irq_addr 0xFF90002C
#define Adr_NX90_xpic_vic_irq_addr              0xFF90002C
#define DFLT_VAL_NX90_xpic_vic_irq_addr         0x00000000

#define MSK_NX90_xpic_vic_irq_addr_val         0xffffffff
#define SRT_NX90_xpic_vic_irq_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_irq_addr_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_irq_addr_val 0x00000000

/* all used bits of 'NX90_xpic_vic_irq_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_irq_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vector_addr */
/* => XPIC VIC IRQ Vector address */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vector_addr          0x00000030
#define Adr_NX90_vic_xpic_app_xpic_vic_vector_addr 0xFF900030
#define Adr_NX90_xpic_vic_vector_addr              0xFF900030

#define MSK_NX90_xpic_vic_vector_addr_val 0xffffffff
#define SRT_NX90_xpic_vic_vector_addr_val 0

/* all used bits of 'NX90_xpic_vic_vector_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_vector_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_table_base_addr */
/* => XPIC VIC IRQ TABLE ADDRESS BASE POINTER */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_table_base_addr          0x00000034
#define Adr_NX90_vic_xpic_app_xpic_vic_table_base_addr 0xFF900034
#define Adr_NX90_xpic_vic_table_base_addr              0xFF900034
#define DFLT_VAL_NX90_xpic_vic_table_base_addr         0x00000000

#define MSK_NX90_xpic_vic_table_base_addr_val         0xffffffff
#define SRT_NX90_xpic_vic_table_base_addr_val         0
#define DFLT_VAL_NX90_xpic_vic_table_base_addr_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_table_base_addr_val 0x00000000

/* all used bits of 'NX90_xpic_vic_table_base_addr': */
#define MSK_USED_BITS_NX90_xpic_vic_table_base_addr 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_vect_config */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_vect_config          0x00000038
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_vect_config 0xFF900038
#define Adr_NX90_xpic_vic_fiq_vect_config              0xFF900038
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config         0x00000000

#define MSK_NX90_xpic_vic_fiq_vect_config_int_source                 0x0000007f
#define SRT_NX90_xpic_vic_fiq_vect_config_int_source                 0
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_int_source            0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_int_source         0x00000000
#define MSK_NX90_xpic_vic_fiq_vect_config_select_fiq_default         0x40000000
#define SRT_NX90_xpic_vic_fiq_vect_config_select_fiq_default         30
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_select_fiq_default    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_select_fiq_default 0x00000000
#define MSK_NX90_xpic_vic_fiq_vect_config_enable                     0x80000000
#define SRT_NX90_xpic_vic_fiq_vect_config_enable                     31
#define DFLT_VAL_NX90_xpic_vic_fiq_vect_config_enable                0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_vect_config_enable             0x00000000

/* all used bits of 'NX90_xpic_vic_fiq_vect_config': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_vect_config 0xc000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config0 */
/* => highest priority */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config0          0x0000003C
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config0 0xFF90003C
#define Adr_NX90_xpic_vic_vect_config0              0xFF90003C
#define DFLT_VAL_NX90_xpic_vic_vect_config0         0x00000000

#define MSK_NX90_xpic_vic_vect_config0_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config0_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config0_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config0_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config0_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config0_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config0_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config0_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config0': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config0 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config1 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config1          0x00000040
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config1 0xFF900040
#define Adr_NX90_xpic_vic_vect_config1              0xFF900040
#define DFLT_VAL_NX90_xpic_vic_vect_config1         0x00000000

#define MSK_NX90_xpic_vic_vect_config1_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config1_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config1_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config1_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config1_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config1_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config1_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config1_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config1': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config1 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config2 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config2          0x00000044
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config2 0xFF900044
#define Adr_NX90_xpic_vic_vect_config2              0xFF900044
#define DFLT_VAL_NX90_xpic_vic_vect_config2         0x00000000

#define MSK_NX90_xpic_vic_vect_config2_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config2_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config2_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config2_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config2_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config2_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config2_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config2_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config2': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config2 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config3 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config3          0x00000048
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config3 0xFF900048
#define Adr_NX90_xpic_vic_vect_config3              0xFF900048
#define DFLT_VAL_NX90_xpic_vic_vect_config3         0x00000000

#define MSK_NX90_xpic_vic_vect_config3_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config3_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config3_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config3_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config3_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config3_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config3_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config3_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config3': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config3 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config4 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config4          0x0000004C
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config4 0xFF90004C
#define Adr_NX90_xpic_vic_vect_config4              0xFF90004C
#define DFLT_VAL_NX90_xpic_vic_vect_config4         0x00000000

#define MSK_NX90_xpic_vic_vect_config4_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config4_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config4_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config4_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config4_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config4_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config4_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config4_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config4': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config4 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config5 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config5          0x00000050
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config5 0xFF900050
#define Adr_NX90_xpic_vic_vect_config5              0xFF900050
#define DFLT_VAL_NX90_xpic_vic_vect_config5         0x00000000

#define MSK_NX90_xpic_vic_vect_config5_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config5_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config5_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config5_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config5_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config5_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config5_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config5_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config5': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config5 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config6 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config6          0x00000054
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config6 0xFF900054
#define Adr_NX90_xpic_vic_vect_config6              0xFF900054
#define DFLT_VAL_NX90_xpic_vic_vect_config6         0x00000000

#define MSK_NX90_xpic_vic_vect_config6_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config6_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config6_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config6_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config6_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config6_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config6_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config6_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config6': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config6 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config7 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config7          0x00000058
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config7 0xFF900058
#define Adr_NX90_xpic_vic_vect_config7              0xFF900058
#define DFLT_VAL_NX90_xpic_vic_vect_config7         0x00000000

#define MSK_NX90_xpic_vic_vect_config7_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config7_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config7_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config7_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config7_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config7_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config7_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config7_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config7': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config7 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config8 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config8          0x0000005C
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config8 0xFF90005C
#define Adr_NX90_xpic_vic_vect_config8              0xFF90005C
#define DFLT_VAL_NX90_xpic_vic_vect_config8         0x00000000

#define MSK_NX90_xpic_vic_vect_config8_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config8_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config8_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config8_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config8_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config8_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config8_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config8_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config8': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config8 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config9 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config9          0x00000060
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config9 0xFF900060
#define Adr_NX90_xpic_vic_vect_config9              0xFF900060
#define DFLT_VAL_NX90_xpic_vic_vect_config9         0x00000000

#define MSK_NX90_xpic_vic_vect_config9_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config9_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config9_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config9_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config9_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config9_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config9_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config9_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config9': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config9 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config10 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config10          0x00000064
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config10 0xFF900064
#define Adr_NX90_xpic_vic_vect_config10              0xFF900064
#define DFLT_VAL_NX90_xpic_vic_vect_config10         0x00000000

#define MSK_NX90_xpic_vic_vect_config10_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config10_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config10_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config10_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config10_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config10_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config10_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config10_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config10': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config10 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config11 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config11          0x00000068
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config11 0xFF900068
#define Adr_NX90_xpic_vic_vect_config11              0xFF900068
#define DFLT_VAL_NX90_xpic_vic_vect_config11         0x00000000

#define MSK_NX90_xpic_vic_vect_config11_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config11_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config11_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config11_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config11_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config11_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config11_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config11_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config11': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config11 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config12 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config12          0x0000006C
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config12 0xFF90006C
#define Adr_NX90_xpic_vic_vect_config12              0xFF90006C
#define DFLT_VAL_NX90_xpic_vic_vect_config12         0x00000000

#define MSK_NX90_xpic_vic_vect_config12_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config12_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config12_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config12_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config12_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config12_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config12_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config12_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config12': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config12 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config13 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config13          0x00000070
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config13 0xFF900070
#define Adr_NX90_xpic_vic_vect_config13              0xFF900070
#define DFLT_VAL_NX90_xpic_vic_vect_config13         0x00000000

#define MSK_NX90_xpic_vic_vect_config13_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config13_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config13_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config13_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config13_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config13_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config13_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config13_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config13': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config13 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config14 */
/* =>  */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config14          0x00000074
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config14 0xFF900074
#define Adr_NX90_xpic_vic_vect_config14              0xFF900074
#define DFLT_VAL_NX90_xpic_vic_vect_config14         0x00000000

#define MSK_NX90_xpic_vic_vect_config14_int_source         0x0000007f
#define SRT_NX90_xpic_vic_vect_config14_int_source         0
#define DFLT_VAL_NX90_xpic_vic_vect_config14_int_source    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config14_int_source 0x00000000
#define MSK_NX90_xpic_vic_vect_config14_enable             0x80000000
#define SRT_NX90_xpic_vic_vect_config14_enable             31
#define DFLT_VAL_NX90_xpic_vic_vect_config14_enable        0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config14_enable     0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config14': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config14 0x8000007f

/* --------------------------------------------------------------------- */
/* Register xpic_vic_vect_config15 */
/* => XPIC default interrupt vector, all interrupt sources (wired-OR) */
/*    select with default interrupt vector register */
/*    lowest priority */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_vect_config15          0x00000078
#define Adr_NX90_vic_xpic_app_xpic_vic_vect_config15 0xFF900078
#define Adr_NX90_xpic_vic_vect_config15              0xFF900078
#define DFLT_VAL_NX90_xpic_vic_vect_config15         0x00000000

#define MSK_NX90_xpic_vic_vect_config15_enable         0x80000000
#define SRT_NX90_xpic_vic_vect_config15_enable         31
#define DFLT_VAL_NX90_xpic_vic_vect_config15_enable    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_vect_config15_enable 0x00000000

/* all used bits of 'NX90_xpic_vic_vect_config15': */
#define MSK_USED_BITS_NX90_xpic_vic_vect_config15 0x80000000

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default0 */
/* => XPIC default interrupt vector select0 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default0          0x0000007C
#define Adr_NX90_vic_xpic_app_xpic_vic_default0 0xFF90007C
#define Adr_NX90_xpic_vic_default0              0xFF90007C
#define DFLT_VAL_NX90_xpic_vic_default0         0x00000000

#define MSK_NX90_xpic_vic_default0_val         0xffffffff
#define SRT_NX90_xpic_vic_default0_val         0
#define DFLT_VAL_NX90_xpic_vic_default0_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_default0_val 0x00000000

/* all used bits of 'NX90_xpic_vic_default0': */
#define MSK_USED_BITS_NX90_xpic_vic_default0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default1 */
/* => XPIC default interrupt vector select1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default1          0x00000080
#define Adr_NX90_vic_xpic_app_xpic_vic_default1 0xFF900080
#define Adr_NX90_xpic_vic_default1              0xFF900080
#define DFLT_VAL_NX90_xpic_vic_default1         0x00000000

#define MSK_NX90_xpic_vic_default1_val         0xffffffff
#define SRT_NX90_xpic_vic_default1_val         0
#define DFLT_VAL_NX90_xpic_vic_default1_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_default1_val 0x00000000

/* all used bits of 'NX90_xpic_vic_default1': */
#define MSK_USED_BITS_NX90_xpic_vic_default1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_default2 */
/* => XPIC default interrupt vector select1 */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_default2          0x00000084
#define Adr_NX90_vic_xpic_app_xpic_vic_default2 0xFF900084
#define Adr_NX90_xpic_vic_default2              0xFF900084
#define DFLT_VAL_NX90_xpic_vic_default2         0x00000000

#define MSK_NX90_xpic_vic_default2_val         0xffffffff
#define SRT_NX90_xpic_vic_default2_val         0
#define DFLT_VAL_NX90_xpic_vic_default2_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_default2_val 0x00000000

/* all used bits of 'NX90_xpic_vic_default2': */
#define MSK_USED_BITS_NX90_xpic_vic_default2 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default0 */
/* => XPIC default interrupt vector select0 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default0          0x00000088
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default0 0xFF900088
#define Adr_NX90_xpic_vic_fiq_default0              0xFF900088
#define DFLT_VAL_NX90_xpic_vic_fiq_default0         0x00000000

#define MSK_NX90_xpic_vic_fiq_default0_val         0xffffffff
#define SRT_NX90_xpic_vic_fiq_default0_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default0_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default0_val 0x00000000

/* all used bits of 'NX90_xpic_vic_fiq_default0': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default0 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default1 */
/* => XPIC default interrupt vector select1 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default1          0x0000008C
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default1 0xFF90008C
#define Adr_NX90_xpic_vic_fiq_default1              0xFF90008C
#define DFLT_VAL_NX90_xpic_vic_fiq_default1         0x00000000

#define MSK_NX90_xpic_vic_fiq_default1_val         0xffffffff
#define SRT_NX90_xpic_vic_fiq_default1_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default1_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default1_val 0x00000000

/* all used bits of 'NX90_xpic_vic_fiq_default1': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default1 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xpic_vic_fiq_default2 */
/* => XPIC default interrupt vector select1 for fiq */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_vic_fiq_default2          0x00000090
#define Adr_NX90_vic_xpic_app_xpic_vic_fiq_default2 0xFF900090
#define Adr_NX90_xpic_vic_fiq_default2              0xFF900090
#define DFLT_VAL_NX90_xpic_vic_fiq_default2         0x00000000

#define MSK_NX90_xpic_vic_fiq_default2_val         0xffffffff
#define SRT_NX90_xpic_vic_fiq_default2_val         0
#define DFLT_VAL_NX90_xpic_vic_fiq_default2_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_vic_fiq_default2_val 0x00000000

/* all used bits of 'NX90_xpic_vic_fiq_default2': */
#define MSK_USED_BITS_NX90_xpic_vic_fiq_default2 0xffffffff


/* ===================================================================== */

/* AREA xpic_wdg */
/* Area of wdg_xpic_app */

/* ===================================================================== */

#define Addr_NX90_wdg_xpic_app 0xFF900180

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_trig */
/* => netX xPIC Watchdog Trigger Register. */
/*    The watchdog access code is generated by a pseudo random generator. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_trig          0x00000000
#define Adr_NX90_wdg_xpic_app_xpic_wdg_trig 0xFF900180
#define Adr_NX90_xpic_wdg_trig              0xFF900180
#define DFLT_VAL_NX90_xpic_wdg_trig         0x00000000

#define MSK_NX90_xpic_wdg_trig_wdg_access_code               0x000fffff
#define SRT_NX90_xpic_wdg_trig_wdg_access_code               0
#define DFLT_VAL_NX90_xpic_wdg_trig_wdg_access_code          0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_wdg_access_code       0x00000000
#define MSK_NX90_xpic_wdg_trig_irq_req_watchdog              0x01000000
#define SRT_NX90_xpic_wdg_trig_irq_req_watchdog              24
#define DFLT_VAL_NX90_xpic_wdg_trig_irq_req_watchdog         0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_irq_req_watchdog      0x00000000
#define MSK_NX90_xpic_wdg_trig_wdg_counter_trigger_w         0x10000000
#define SRT_NX90_xpic_wdg_trig_wdg_counter_trigger_w         28
#define DFLT_VAL_NX90_xpic_wdg_trig_wdg_counter_trigger_w    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_wdg_counter_trigger_w 0x00000000
#define MSK_NX90_xpic_wdg_trig_write_enable                  0x80000000
#define SRT_NX90_xpic_wdg_trig_write_enable                  31
#define DFLT_VAL_NX90_xpic_wdg_trig_write_enable             0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_trig_write_enable          0x00000000

/* all used bits of 'NX90_xpic_wdg_trig': */
#define MSK_USED_BITS_NX90_xpic_wdg_trig 0x910fffff

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_counter */
/* => netX xPIC Watchdog Counter Register */
/*    The counter value is decremented each 10000 system clock cycles. */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_counter          0x00000004
#define Adr_NX90_wdg_xpic_app_xpic_wdg_counter 0xFF900184
#define Adr_NX90_xpic_wdg_counter              0xFF900184

#define MSK_NX90_xpic_wdg_counter_val 0x0001ffff
#define SRT_NX90_xpic_wdg_counter_val 0

/* all used bits of 'NX90_xpic_wdg_counter': */
#define MSK_USED_BITS_NX90_xpic_wdg_counter 0x0001ffff

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_xpic_irq_timeout */
/* => netX xPIC Watchdog xPIC interrupt timout register: */
/*    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_xpic_irq_timeout          0x00000008
#define Adr_NX90_wdg_xpic_app_xpic_wdg_xpic_irq_timeout 0xFF900188
#define Adr_NX90_xpic_wdg_xpic_irq_timeout              0xFF900188
#define DFLT_VAL_NX90_xpic_wdg_xpic_irq_timeout         0x00000000

#define MSK_NX90_xpic_wdg_xpic_irq_timeout_val         0x0000ffff
#define SRT_NX90_xpic_wdg_xpic_irq_timeout_val         0
#define DFLT_VAL_NX90_xpic_wdg_xpic_irq_timeout_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_xpic_irq_timeout_val 0x00000000

/* all used bits of 'NX90_xpic_wdg_xpic_irq_timeout': */
#define MSK_USED_BITS_NX90_xpic_wdg_xpic_irq_timeout 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_arm_irq_timeout */
/* => netX xPIC Watchdog ARM interrupt timout register: */
/*    xpic_irq_timeout or arm_irq_timeout must be nonzero to enable watchdog */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_arm_irq_timeout          0x0000000C
#define Adr_NX90_wdg_xpic_app_xpic_wdg_arm_irq_timeout 0xFF90018C
#define Adr_NX90_xpic_wdg_arm_irq_timeout              0xFF90018C
#define DFLT_VAL_NX90_xpic_wdg_arm_irq_timeout         0x00000000

#define MSK_NX90_xpic_wdg_arm_irq_timeout_val         0x0000ffff
#define SRT_NX90_xpic_wdg_arm_irq_timeout_val         0
#define DFLT_VAL_NX90_xpic_wdg_arm_irq_timeout_val    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_arm_irq_timeout_val 0x00000000

/* all used bits of 'NX90_xpic_wdg_arm_irq_timeout': */
#define MSK_USED_BITS_NX90_xpic_wdg_arm_irq_timeout 0x0000ffff

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_raw */
/* => Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_raw          0x00000010
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_raw 0xFF900190
#define Adr_NX90_xpic_wdg_irq_raw              0xFF900190
#define DFLT_VAL_NX90_xpic_wdg_irq_raw         0x00000000

#define MSK_NX90_xpic_wdg_irq_raw_wdg_arm_irq         0x00000001
#define SRT_NX90_xpic_wdg_irq_raw_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_raw_wdg_arm_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_raw_wdg_arm_irq 0x00000000

/* all used bits of 'NX90_xpic_wdg_irq_raw': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_raw 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_masked */
/* => xpic_wdg Masked IRQ register: */
/*    Shows status of masked IRQs (as connected to xPIC). */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_masked          0x00000014
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_masked 0xFF900194
#define Adr_NX90_xpic_wdg_irq_masked              0xFF900194

#define MSK_NX90_xpic_wdg_irq_masked_wdg_arm_irq 0x00000001
#define SRT_NX90_xpic_wdg_irq_masked_wdg_arm_irq 0

/* all used bits of 'NX90_xpic_wdg_irq_masked': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_masked 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_msk_set */
/* => xpic_wdg interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to wdg_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_msk_set          0x00000018
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_msk_set 0xFF900198
#define Adr_NX90_xpic_wdg_irq_msk_set              0xFF900198
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_set         0x00000000

#define MSK_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq         0x00000001
#define SRT_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_msk_set_wdg_arm_irq 0x00000000

/* all used bits of 'NX90_xpic_wdg_irq_msk_set': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_msk_set 0x00000001

/* --------------------------------------------------------------------- */
/* Register xpic_wdg_irq_msk_reset */
/* => xpic_wdg interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xpic_wdg_irq_msk_reset          0x0000001C
#define Adr_NX90_wdg_xpic_app_xpic_wdg_irq_msk_reset 0xFF90019C
#define Adr_NX90_xpic_wdg_irq_msk_reset              0xFF90019C
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_reset         0x00000000

#define MSK_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq         0x00000001
#define SRT_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq         0
#define DFLT_VAL_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq    0x00000000
#define DFLT_BF_VAL_NX90_xpic_wdg_irq_msk_reset_wdg_arm_irq 0x00000000

/* all used bits of 'NX90_xpic_wdg_irq_msk_reset': */
#define MSK_USED_BITS_NX90_xpic_wdg_irq_msk_reset 0x00000001


/* ===================================================================== */

/* Area of io_link_xpic_app */

/* ===================================================================== */

#define Addr_NX90_io_link_xpic_app 0xFF900400

/* ===================================================================== */

/* AREA xlink */
/* Area of xlink0, xlink1, xlink2, xlink3, xlink4, xlink5, xlink6, xlink7 */

/* ===================================================================== */

#define Addr_NX90_xlink0 0xFF900400
#define Addr_NX90_xlink1 0xFF900410
#define Addr_NX90_xlink2 0xFF900420
#define Addr_NX90_xlink3 0xFF900430
#define Addr_NX90_xlink4 0xFF900440
#define Addr_NX90_xlink5 0xFF900450
#define Addr_NX90_xlink6 0xFF900460
#define Addr_NX90_xlink7 0xFF900470

/* --------------------------------------------------------------------- */
/* Register xlink_cfg */
/* => configuration register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_cfg    0x00000000
#define Adr_NX90_xlink0_xlink_cfg 0xFF900400
#define Adr_NX90_xlink1_xlink_cfg 0xFF900410
#define Adr_NX90_xlink2_xlink_cfg 0xFF900420
#define Adr_NX90_xlink3_xlink_cfg 0xFF900430
#define Adr_NX90_xlink4_xlink_cfg 0xFF900440
#define Adr_NX90_xlink5_xlink_cfg 0xFF900450
#define Adr_NX90_xlink6_xlink_cfg 0xFF900460
#define Adr_NX90_xlink7_xlink_cfg 0xFF900470
#define DFLT_VAL_NX90_xlink_cfg   0xb4a0001b

#define MSK_NX90_xlink_cfg_rate_inc           0x0000ffff
#define SRT_NX90_xlink_cfg_rate_inc           0
#define DFLT_VAL_NX90_xlink_cfg_rate_inc      0x0000001b
#define DFLT_BF_VAL_NX90_xlink_cfg_rate_inc   0x0000001b
#define MSK_NX90_xlink_cfg_xlink_en           0x00010000
#define SRT_NX90_xlink_cfg_xlink_en           16
#define DFLT_VAL_NX90_xlink_cfg_xlink_en      0x00000000
#define DFLT_BF_VAL_NX90_xlink_cfg_xlink_en   0x00000000
#define MSK_NX90_xlink_cfg_fb_en              0x00020000
#define SRT_NX90_xlink_cfg_fb_en              17
#define DFLT_VAL_NX90_xlink_cfg_fb_en         0x00000000
#define DFLT_BF_VAL_NX90_xlink_cfg_fb_en      0x00000000
#define MSK_NX90_xlink_cfg_bclk2oe_en         0x00040000
#define SRT_NX90_xlink_cfg_bclk2oe_en         18
#define DFLT_VAL_NX90_xlink_cfg_bclk2oe_en    0x00000000
#define DFLT_BF_VAL_NX90_xlink_cfg_bclk2oe_en 0x00000000
#define MSK_NX90_xlink_cfg_cnt_da             0x00080000
#define SRT_NX90_xlink_cfg_cnt_da             19
#define DFLT_VAL_NX90_xlink_cfg_cnt_da        0x00000000
#define DFLT_BF_VAL_NX90_xlink_cfg_cnt_da     0x00000000
#define MSK_NX90_xlink_cfg_bits2rec           0x00f00000
#define SRT_NX90_xlink_cfg_bits2rec           20
#define DFLT_VAL_NX90_xlink_cfg_bits2rec      0x00a00000
#define DFLT_BF_VAL_NX90_xlink_cfg_bits2rec   0x0000000a
#define MSK_NX90_xlink_cfg_start_spl          0x0f000000
#define SRT_NX90_xlink_cfg_start_spl          24
#define DFLT_VAL_NX90_xlink_cfg_start_spl     0x04000000
#define DFLT_BF_VAL_NX90_xlink_cfg_start_spl  0x00000004
#define MSK_NX90_xlink_cfg_end_spl            0xf0000000
#define SRT_NX90_xlink_cfg_end_spl            28
#define DFLT_VAL_NX90_xlink_cfg_end_spl       0xb0000000
#define DFLT_BF_VAL_NX90_xlink_cfg_end_spl    0x0000000b

/* all used bits of 'NX90_xlink_cfg': */
#define MSK_USED_BITS_NX90_xlink_cfg 0xffffffff

/* --------------------------------------------------------------------- */
/* Register xlink_tx */
/* => xlink transmit register */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_tx    0x00000004
#define Adr_NX90_xlink0_xlink_tx 0xFF900404
#define Adr_NX90_xlink1_xlink_tx 0xFF900414
#define Adr_NX90_xlink2_xlink_tx 0xFF900424
#define Adr_NX90_xlink3_xlink_tx 0xFF900434
#define Adr_NX90_xlink4_xlink_tx 0xFF900444
#define Adr_NX90_xlink5_xlink_tx 0xFF900454
#define Adr_NX90_xlink6_xlink_tx 0xFF900464
#define Adr_NX90_xlink7_xlink_tx 0xFF900474
#define DFLT_VAL_NX90_xlink_tx   0x00030000

#define MSK_NX90_xlink_tx_hold            0x0000ffff
#define SRT_NX90_xlink_tx_hold            0
#define DFLT_VAL_NX90_xlink_tx_hold       0x00000000
#define DFLT_BF_VAL_NX90_xlink_tx_hold    0x00000000
#define MSK_NX90_xlink_tx_rdy_ro          0x00010000
#define SRT_NX90_xlink_tx_rdy_ro          16
#define DFLT_VAL_NX90_xlink_tx_rdy_ro     0x00010000
#define DFLT_BF_VAL_NX90_xlink_tx_rdy_ro  0x00000001
#define MSK_NX90_xlink_tx_idle_ro         0x00020000
#define SRT_NX90_xlink_tx_idle_ro         17
#define DFLT_VAL_NX90_xlink_tx_idle_ro    0x00020000
#define DFLT_BF_VAL_NX90_xlink_tx_idle_ro 0x00000001

/* all used bits of 'NX90_xlink_tx': */
#define MSK_USED_BITS_NX90_xlink_tx 0x0003ffff

/* --------------------------------------------------------------------- */
/* Register xlink_rx */
/* => xlink RX register */
/*    writing to the register, reset the ready bit, the overflow bit and the sampling error bit */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_rx    0x00000008
#define Adr_NX90_xlink0_xlink_rx 0xFF900408
#define Adr_NX90_xlink1_xlink_rx 0xFF900418
#define Adr_NX90_xlink2_xlink_rx 0xFF900428
#define Adr_NX90_xlink3_xlink_rx 0xFF900438
#define Adr_NX90_xlink4_xlink_rx 0xFF900448
#define Adr_NX90_xlink5_xlink_rx 0xFF900458
#define Adr_NX90_xlink6_xlink_rx 0xFF900468
#define Adr_NX90_xlink7_xlink_rx 0xFF900478
#define DFLT_VAL_NX90_xlink_rx   0x0000ffff

#define MSK_NX90_xlink_rx_hold_ro            0x0000ffff
#define SRT_NX90_xlink_rx_hold_ro            0
#define DFLT_VAL_NX90_xlink_rx_hold_ro       0x0000ffff
#define DFLT_BF_VAL_NX90_xlink_rx_hold_ro    0x0000ffff
#define MSK_NX90_xlink_rx_rdy_ro             0x00010000
#define SRT_NX90_xlink_rx_rdy_ro             16
#define DFLT_VAL_NX90_xlink_rx_rdy_ro        0x00000000
#define DFLT_BF_VAL_NX90_xlink_rx_rdy_ro     0x00000000
#define MSK_NX90_xlink_rx_rxd_ro             0x00080000
#define SRT_NX90_xlink_rx_rxd_ro             19
#define DFLT_VAL_NX90_xlink_rx_rxd_ro        0x00000000
#define DFLT_BF_VAL_NX90_xlink_rx_rxd_ro     0x00000000
#define MSK_NX90_xlink_rx_ovf_err_ro         0x00100000
#define SRT_NX90_xlink_rx_ovf_err_ro         20
#define DFLT_VAL_NX90_xlink_rx_ovf_err_ro    0x00000000
#define DFLT_BF_VAL_NX90_xlink_rx_ovf_err_ro 0x00000000
#define MSK_NX90_xlink_rx_spl_err_ro         0x00200000
#define SRT_NX90_xlink_rx_spl_err_ro         21
#define DFLT_VAL_NX90_xlink_rx_spl_err_ro    0x00000000
#define DFLT_BF_VAL_NX90_xlink_rx_spl_err_ro 0x00000000

/* all used bits of 'NX90_xlink_rx': */
#define MSK_USED_BITS_NX90_xlink_rx 0x0039ffff

/* --------------------------------------------------------------------- */
/* Register xlink_stat */
/* => xlink status register & io control */
/*    writing to this register set the bit clock counter to zero! */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_xlink_stat    0x0000000C
#define Adr_NX90_xlink0_xlink_stat 0xFF90040C
#define Adr_NX90_xlink1_xlink_stat 0xFF90041C
#define Adr_NX90_xlink2_xlink_stat 0xFF90042C
#define Adr_NX90_xlink3_xlink_stat 0xFF90043C
#define Adr_NX90_xlink4_xlink_stat 0xFF90044C
#define Adr_NX90_xlink5_xlink_stat 0xFF90045C
#define Adr_NX90_xlink6_xlink_stat 0xFF90046C
#define Adr_NX90_xlink7_xlink_stat 0xFF90047C
#define DFLT_VAL_NX90_xlink_stat   0x01000000

#define MSK_NX90_xlink_stat_bit_cnt_ro         0x0000ffff
#define SRT_NX90_xlink_stat_bit_cnt_ro         0
#define DFLT_VAL_NX90_xlink_stat_bit_cnt_ro    0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_bit_cnt_ro 0x00000000
#define MSK_NX90_xlink_stat_bit_clk_ro         0x00010000
#define SRT_NX90_xlink_stat_bit_clk_ro         16
#define DFLT_VAL_NX90_xlink_stat_bit_clk_ro    0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_bit_clk_ro 0x00000000
#define MSK_NX90_xlink_stat_txo_ro             0x00020000
#define SRT_NX90_xlink_stat_txo_ro             17
#define DFLT_VAL_NX90_xlink_stat_txo_ro        0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_txo_ro     0x00000000
#define MSK_NX90_xlink_stat_rxo_ro             0x00040000
#define SRT_NX90_xlink_stat_rxo_ro             18
#define DFLT_VAL_NX90_xlink_stat_rxo_ro        0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_rxo_ro     0x00000000
#define MSK_NX90_xlink_stat_txoe_ro            0x00080000
#define SRT_NX90_xlink_stat_txoe_ro            19
#define DFLT_VAL_NX90_xlink_stat_txoe_ro       0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_txoe_ro    0x00000000
#define MSK_NX90_xlink_stat_io_mode            0x00100000
#define SRT_NX90_xlink_stat_io_mode            20
#define DFLT_VAL_NX90_xlink_stat_io_mode       0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_io_mode    0x00000000
#define MSK_NX90_xlink_stat_set_tx             0x00200000
#define SRT_NX90_xlink_stat_set_tx             21
#define DFLT_VAL_NX90_xlink_stat_set_tx        0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_set_tx     0x00000000
#define MSK_NX90_xlink_stat_set_txoe           0x00400000
#define SRT_NX90_xlink_stat_set_txoe           22
#define DFLT_VAL_NX90_xlink_stat_set_txoe      0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_set_txoe   0x00000000
#define MSK_NX90_xlink_stat_set_wakeup         0x00800000
#define SRT_NX90_xlink_stat_set_wakeup         23
#define DFLT_VAL_NX90_xlink_stat_set_wakeup    0x00000000
#define DFLT_BF_VAL_NX90_xlink_stat_set_wakeup 0x00000000
#define MSK_NX90_xlink_stat_filter_en          0x01000000
#define SRT_NX90_xlink_stat_filter_en          24
#define DFLT_VAL_NX90_xlink_stat_filter_en     0x01000000
#define DFLT_BF_VAL_NX90_xlink_stat_filter_en  0x00000001

/* all used bits of 'NX90_xlink_stat': */
#define MSK_USED_BITS_NX90_xlink_stat 0x01ffffff


/* ===================================================================== */

/* Area of io_link_irq */

/* ===================================================================== */

#define Addr_NX90_io_link_irq 0xFF900480

/* --------------------------------------------------------------------- */
/* Register io_link_irq_raw */
/* => IO-Link raw interrupts: */
/*    Read access shows status of unmasked IRQs. \ */
/*    IRQs are set automatically and reset by writing to this register: */
/*    Write access with '1' resets the appropriate IRQ. */
/*    Write access with '0' does not influence this bit. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_raw         0x00000000
#define Adr_NX90_io_link_irq_io_link_irq_raw 0xFF900480
#define Adr_NX90_io_link_irq_raw             0xFF900480
#define DFLT_VAL_NX90_io_link_irq_raw        0x00000000

#define MSK_NX90_io_link_irq_raw_xlink0_tx_next          0x00000001
#define SRT_NX90_io_link_irq_raw_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink0_rx_next          0x00000002
#define SRT_NX90_io_link_irq_raw_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink0_shift_en         0x00000004
#define SRT_NX90_io_link_irq_raw_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_raw_xlink0_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink0_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink1_tx_next          0x00000010
#define SRT_NX90_io_link_irq_raw_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink1_rx_next          0x00000020
#define SRT_NX90_io_link_irq_raw_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink1_shift_en         0x00000040
#define SRT_NX90_io_link_irq_raw_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_raw_xlink1_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink1_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink2_tx_next          0x00000100
#define SRT_NX90_io_link_irq_raw_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink2_rx_next          0x00000200
#define SRT_NX90_io_link_irq_raw_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink2_shift_en         0x00000400
#define SRT_NX90_io_link_irq_raw_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_raw_xlink2_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink2_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink3_tx_next          0x00001000
#define SRT_NX90_io_link_irq_raw_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink3_rx_next          0x00002000
#define SRT_NX90_io_link_irq_raw_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink3_shift_en         0x00004000
#define SRT_NX90_io_link_irq_raw_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_raw_xlink3_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink3_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink4_tx_next          0x00010000
#define SRT_NX90_io_link_irq_raw_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink4_rx_next          0x00020000
#define SRT_NX90_io_link_irq_raw_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink4_shift_en         0x00040000
#define SRT_NX90_io_link_irq_raw_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_raw_xlink4_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink4_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink5_tx_next          0x00100000
#define SRT_NX90_io_link_irq_raw_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink5_rx_next          0x00200000
#define SRT_NX90_io_link_irq_raw_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink5_shift_en         0x00400000
#define SRT_NX90_io_link_irq_raw_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_raw_xlink5_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink5_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink6_tx_next          0x01000000
#define SRT_NX90_io_link_irq_raw_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink6_rx_next          0x02000000
#define SRT_NX90_io_link_irq_raw_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink6_shift_en         0x04000000
#define SRT_NX90_io_link_irq_raw_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_raw_xlink6_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink6_shift_en 0x00000000
#define MSK_NX90_io_link_irq_raw_xlink7_tx_next          0x10000000
#define SRT_NX90_io_link_irq_raw_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_tx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink7_rx_next          0x20000000
#define SRT_NX90_io_link_irq_raw_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_rx_next  0x00000000
#define MSK_NX90_io_link_irq_raw_xlink7_shift_en         0x40000000
#define SRT_NX90_io_link_irq_raw_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_raw_xlink7_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_raw_xlink7_shift_en 0x00000000

/* all used bits of 'NX90_io_link_irq_raw': */
#define MSK_USED_BITS_NX90_io_link_irq_raw 0x77777777

/* --------------------------------------------------------------------- */
/* Register io_link_irq_masked */
/* => IO-Link Masked IRQ register */
/*    Shows status of masked IRQs (as connected to ARM/xPIC) */
/* => Mode: R */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_masked         0x00000004
#define Adr_NX90_io_link_irq_io_link_irq_masked 0xFF900484
#define Adr_NX90_io_link_irq_masked             0xFF900484

#define MSK_NX90_io_link_irq_masked_xlink0_tx_next  0x00000001
#define SRT_NX90_io_link_irq_masked_xlink0_tx_next  0
#define MSK_NX90_io_link_irq_masked_xlink0_rx_next  0x00000002
#define SRT_NX90_io_link_irq_masked_xlink0_rx_next  1
#define MSK_NX90_io_link_irq_masked_xlink0_shift_en 0x00000004
#define SRT_NX90_io_link_irq_masked_xlink0_shift_en 2
#define MSK_NX90_io_link_irq_masked_xlink1_tx_next  0x00000010
#define SRT_NX90_io_link_irq_masked_xlink1_tx_next  4
#define MSK_NX90_io_link_irq_masked_xlink1_rx_next  0x00000020
#define SRT_NX90_io_link_irq_masked_xlink1_rx_next  5
#define MSK_NX90_io_link_irq_masked_xlink1_shift_en 0x00000040
#define SRT_NX90_io_link_irq_masked_xlink1_shift_en 6
#define MSK_NX90_io_link_irq_masked_xlink2_tx_next  0x00000100
#define SRT_NX90_io_link_irq_masked_xlink2_tx_next  8
#define MSK_NX90_io_link_irq_masked_xlink2_rx_next  0x00000200
#define SRT_NX90_io_link_irq_masked_xlink2_rx_next  9
#define MSK_NX90_io_link_irq_masked_xlink2_shift_en 0x00000400
#define SRT_NX90_io_link_irq_masked_xlink2_shift_en 10
#define MSK_NX90_io_link_irq_masked_xlink3_tx_next  0x00001000
#define SRT_NX90_io_link_irq_masked_xlink3_tx_next  12
#define MSK_NX90_io_link_irq_masked_xlink3_rx_next  0x00002000
#define SRT_NX90_io_link_irq_masked_xlink3_rx_next  13
#define MSK_NX90_io_link_irq_masked_xlink3_shift_en 0x00004000
#define SRT_NX90_io_link_irq_masked_xlink3_shift_en 14
#define MSK_NX90_io_link_irq_masked_xlink4_tx_next  0x00010000
#define SRT_NX90_io_link_irq_masked_xlink4_tx_next  16
#define MSK_NX90_io_link_irq_masked_xlink4_rx_next  0x00020000
#define SRT_NX90_io_link_irq_masked_xlink4_rx_next  17
#define MSK_NX90_io_link_irq_masked_xlink4_shift_en 0x00040000
#define SRT_NX90_io_link_irq_masked_xlink4_shift_en 18
#define MSK_NX90_io_link_irq_masked_xlink5_tx_next  0x00100000
#define SRT_NX90_io_link_irq_masked_xlink5_tx_next  20
#define MSK_NX90_io_link_irq_masked_xlink5_rx_next  0x00200000
#define SRT_NX90_io_link_irq_masked_xlink5_rx_next  21
#define MSK_NX90_io_link_irq_masked_xlink5_shift_en 0x00400000
#define SRT_NX90_io_link_irq_masked_xlink5_shift_en 22
#define MSK_NX90_io_link_irq_masked_xlink6_tx_next  0x01000000
#define SRT_NX90_io_link_irq_masked_xlink6_tx_next  24
#define MSK_NX90_io_link_irq_masked_xlink6_rx_next  0x02000000
#define SRT_NX90_io_link_irq_masked_xlink6_rx_next  25
#define MSK_NX90_io_link_irq_masked_xlink6_shift_en 0x04000000
#define SRT_NX90_io_link_irq_masked_xlink6_shift_en 26
#define MSK_NX90_io_link_irq_masked_xlink7_tx_next  0x10000000
#define SRT_NX90_io_link_irq_masked_xlink7_tx_next  28
#define MSK_NX90_io_link_irq_masked_xlink7_rx_next  0x20000000
#define SRT_NX90_io_link_irq_masked_xlink7_rx_next  29
#define MSK_NX90_io_link_irq_masked_xlink7_shift_en 0x40000000
#define SRT_NX90_io_link_irq_masked_xlink7_shift_en 30

/* all used bits of 'NX90_io_link_irq_masked': */
#define MSK_USED_BITS_NX90_io_link_irq_masked 0x77777777

/* --------------------------------------------------------------------- */
/* Register io_link_irq_msk_set */
/* => IO-Link interrupt mask enable: */
/*    The IRQ mask enables interrupt requests for corresponding interrupt sources. \ */
/*    As its bits might be changed by different software tasks, \ */
/*    the IRQ mask register is not writable directly, but by set and reset masks: */
/*    Write access with '1' sets interrupt mask bit (enables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/*    Attention: Before activating interrupt mask, delete old pending interrupts by writing the same value to io_link_irq_raw. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_msk_set         0x00000008
#define Adr_NX90_io_link_irq_io_link_irq_msk_set 0xFF900488
#define Adr_NX90_io_link_irq_msk_set             0xFF900488
#define DFLT_VAL_NX90_io_link_irq_msk_set        0x00000000

#define MSK_NX90_io_link_irq_msk_set_xlink0_tx_next          0x00000001
#define SRT_NX90_io_link_irq_msk_set_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink0_rx_next          0x00000002
#define SRT_NX90_io_link_irq_msk_set_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink0_shift_en         0x00000004
#define SRT_NX90_io_link_irq_msk_set_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink0_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink0_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink1_tx_next          0x00000010
#define SRT_NX90_io_link_irq_msk_set_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink1_rx_next          0x00000020
#define SRT_NX90_io_link_irq_msk_set_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink1_shift_en         0x00000040
#define SRT_NX90_io_link_irq_msk_set_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink1_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink1_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink2_tx_next          0x00000100
#define SRT_NX90_io_link_irq_msk_set_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink2_rx_next          0x00000200
#define SRT_NX90_io_link_irq_msk_set_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink2_shift_en         0x00000400
#define SRT_NX90_io_link_irq_msk_set_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink2_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink2_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink3_tx_next          0x00001000
#define SRT_NX90_io_link_irq_msk_set_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink3_rx_next          0x00002000
#define SRT_NX90_io_link_irq_msk_set_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink3_shift_en         0x00004000
#define SRT_NX90_io_link_irq_msk_set_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink3_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink3_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink4_tx_next          0x00010000
#define SRT_NX90_io_link_irq_msk_set_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink4_rx_next          0x00020000
#define SRT_NX90_io_link_irq_msk_set_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink4_shift_en         0x00040000
#define SRT_NX90_io_link_irq_msk_set_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink4_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink4_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink5_tx_next          0x00100000
#define SRT_NX90_io_link_irq_msk_set_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink5_rx_next          0x00200000
#define SRT_NX90_io_link_irq_msk_set_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink5_shift_en         0x00400000
#define SRT_NX90_io_link_irq_msk_set_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink5_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink5_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink6_tx_next          0x01000000
#define SRT_NX90_io_link_irq_msk_set_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink6_rx_next          0x02000000
#define SRT_NX90_io_link_irq_msk_set_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink6_shift_en         0x04000000
#define SRT_NX90_io_link_irq_msk_set_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink6_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink6_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink7_tx_next          0x10000000
#define SRT_NX90_io_link_irq_msk_set_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink7_rx_next          0x20000000
#define SRT_NX90_io_link_irq_msk_set_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_set_xlink7_shift_en         0x40000000
#define SRT_NX90_io_link_irq_msk_set_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_msk_set_xlink7_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_set_xlink7_shift_en 0x00000000

/* all used bits of 'NX90_io_link_irq_msk_set': */
#define MSK_USED_BITS_NX90_io_link_irq_msk_set 0x77777777

/* --------------------------------------------------------------------- */
/* Register io_link_irq_msk_reset */
/* => IO-Link interrupt mask disable: */
/*    This is the corresponding reset mask to disable interrupt requests for corresponding interrupt sources: */
/*    Write access with '1' resets interrupt mask bit (disables interrupt request for corresponding interrupt source). */
/*    Write access with '0' does not influence this bit. */
/*    Read access shows actual interrupt mask. */
/* => Mode: R/W */
/* --------------------------------------------------------------------- */

#define REL_Adr_NX90_io_link_irq_msk_reset         0x0000000C
#define Adr_NX90_io_link_irq_io_link_irq_msk_reset 0xFF90048C
#define Adr_NX90_io_link_irq_msk_reset             0xFF90048C
#define DFLT_VAL_NX90_io_link_irq_msk_reset        0x00000000

#define MSK_NX90_io_link_irq_msk_reset_xlink0_tx_next          0x00000001
#define SRT_NX90_io_link_irq_msk_reset_xlink0_tx_next          0
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink0_rx_next          0x00000002
#define SRT_NX90_io_link_irq_msk_reset_xlink0_rx_next          1
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink0_shift_en         0x00000004
#define SRT_NX90_io_link_irq_msk_reset_xlink0_shift_en         2
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink0_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink0_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink1_tx_next          0x00000010
#define SRT_NX90_io_link_irq_msk_reset_xlink1_tx_next          4
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink1_rx_next          0x00000020
#define SRT_NX90_io_link_irq_msk_reset_xlink1_rx_next          5
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink1_shift_en         0x00000040
#define SRT_NX90_io_link_irq_msk_reset_xlink1_shift_en         6
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink1_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink1_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink2_tx_next          0x00000100
#define SRT_NX90_io_link_irq_msk_reset_xlink2_tx_next          8
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink2_rx_next          0x00000200
#define SRT_NX90_io_link_irq_msk_reset_xlink2_rx_next          9
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink2_shift_en         0x00000400
#define SRT_NX90_io_link_irq_msk_reset_xlink2_shift_en         10
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink2_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink2_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink3_tx_next          0x00001000
#define SRT_NX90_io_link_irq_msk_reset_xlink3_tx_next          12
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink3_rx_next          0x00002000
#define SRT_NX90_io_link_irq_msk_reset_xlink3_rx_next          13
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink3_shift_en         0x00004000
#define SRT_NX90_io_link_irq_msk_reset_xlink3_shift_en         14
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink3_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink3_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink4_tx_next          0x00010000
#define SRT_NX90_io_link_irq_msk_reset_xlink4_tx_next          16
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink4_rx_next          0x00020000
#define SRT_NX90_io_link_irq_msk_reset_xlink4_rx_next          17
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink4_shift_en         0x00040000
#define SRT_NX90_io_link_irq_msk_reset_xlink4_shift_en         18
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink4_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink4_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink5_tx_next          0x00100000
#define SRT_NX90_io_link_irq_msk_reset_xlink5_tx_next          20
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink5_rx_next          0x00200000
#define SRT_NX90_io_link_irq_msk_reset_xlink5_rx_next          21
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink5_shift_en         0x00400000
#define SRT_NX90_io_link_irq_msk_reset_xlink5_shift_en         22
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink5_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink5_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink6_tx_next          0x01000000
#define SRT_NX90_io_link_irq_msk_reset_xlink6_tx_next          24
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink6_rx_next          0x02000000
#define SRT_NX90_io_link_irq_msk_reset_xlink6_rx_next          25
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink6_shift_en         0x04000000
#define SRT_NX90_io_link_irq_msk_reset_xlink6_shift_en         26
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink6_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink6_shift_en 0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink7_tx_next          0x10000000
#define SRT_NX90_io_link_irq_msk_reset_xlink7_tx_next          28
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_tx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_tx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink7_rx_next          0x20000000
#define SRT_NX90_io_link_irq_msk_reset_xlink7_rx_next          29
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_rx_next     0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_rx_next  0x00000000
#define MSK_NX90_io_link_irq_msk_reset_xlink7_shift_en         0x40000000
#define SRT_NX90_io_link_irq_msk_reset_xlink7_shift_en         30
#define DFLT_VAL_NX90_io_link_irq_msk_reset_xlink7_shift_en    0x00000000
#define DFLT_BF_VAL_NX90_io_link_irq_msk_reset_xlink7_shift_en 0x00000000

/* all used bits of 'NX90_io_link_irq_msk_reset': */
#define MSK_USED_BITS_NX90_io_link_irq_msk_reset 0x77777777


/* ===================================================================== */

/* Area of debug_slave */

/* ===================================================================== */

#define Addr_NX90_debug_slave 0xFFFF8000

/* ===================================================================== */

/* Area of cssys_rom_table */

/* ===================================================================== */

#define Addr_NX90_cssys_rom_table 0xFFFF8000

/* ===================================================================== */

/* Area of cssys_tsgen */

/* ===================================================================== */

#define Addr_NX90_cssys_tsgen 0xFFFF9000

/* ===================================================================== */

/* Area of cssys_cti */

/* ===================================================================== */

#define Addr_NX90_cssys_cti 0xFFFFA000

/* ===================================================================== */

/* Area of cssys_atbfunnel */

/* ===================================================================== */

#define Addr_NX90_cssys_atbfunnel 0xFFFFB000

/* ===================================================================== */

/* Area of cssys_tpiu */

/* ===================================================================== */

#define Addr_NX90_cssys_tpiu 0xFFFFC000


#endif
